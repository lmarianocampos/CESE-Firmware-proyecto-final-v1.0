
mis_proyectos/firmware_proyecto_final_v1.0/out/firmware_proyecto_final_v1.0.elf:     file format elf32-littlearm
mis_proyectos/firmware_proyecto_final_v1.0/out/firmware_proyecto_final_v1.0.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0011ad

Program Header:
0x70000001 off    0x0001abc8 vaddr 0x1a00abc8 paddr 0x1a00abc8 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00007a28 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000abd0 memsz 0x0000abd0 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00abd0 align 2**16
         filesz 0x00000a74 memsz 0x00000a74 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000abc4  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000a74  10000000  1a00abd0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020a74  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020a74  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020a74  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020a74  2**2
                  CONTENTS
  6 .bss          00006fb0  10000a78  10000a78  00000a78  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020a74  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020a74  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020a74  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020a74  2**2
                  CONTENTS
 11 .init_array   00000004  1a00abc4  1a00abc4  0001abc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a00abc8  1a00abc8  0001abc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020a74  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020a74  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020a74  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020a74  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020a74  2**2
                  CONTENTS
 18 .noinit       00000000  10007a28  10007a28  00020a74  2**2
                  CONTENTS
 19 .debug_info   00039b80  00000000  00000000  00020a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00006b61  00000000  00000000  0005a5f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000c261  00000000  00000000  00061155  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001138  00000000  00000000  0006d3b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001208  00000000  00000000  0006e4ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00012500  00000000  00000000  0006f6f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0001a0de  00000000  00000000  00081bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00030945  00000000  00000000  0009bcd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000cc619  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000cc698  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00003c84  00000000  00000000  000cc6d0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000a78 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a00abc4 l    d  .init_array	00000000 .init_array
1a00abc8 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10007a28 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a003ed8 l     F .text	000000c8 uartProcessIRQ
100078c8 l     O .bss	00000004 rxIsrCallbackUART0
100078cc l     O .bss	00000004 rxIsrCallbackUART0Params
100078d0 l     O .bss	00000004 rxIsrCallbackUART2
100078d4 l     O .bss	00000004 rxIsrCallbackUART2Params
100078d8 l     O .bss	00000004 rxIsrCallbackUART3
100078dc l     O .bss	00000004 rxIsrCallbackUART3Params
100078e0 l     O .bss	00000004 txIsrCallbackUART0
100078e4 l     O .bss	00000004 txIsrCallbackUART0Params
100078e8 l     O .bss	00000004 txIsrCallbackUART2
100078ec l     O .bss	00000004 txIsrCallbackUART2Params
100078f0 l     O .bss	00000004 txIsrCallbackUART3
100078f4 l     O .bss	00000004 txIsrCallbackUART3Params
1a00a804 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 pid.c
00000000 l    df *ABS*	00000000 serialport.c
10000a78 l     O .bss	00000004 receiveQueue
00000000 l    df *ABS*	00000000 commandprocessing.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 heartbeat.c
00000000 l    df *ABS*	00000000 steppermotor.c
1a0009d4 l     F .text	00000058 stepperMotorAutoReloadTimerServo
1a000a2c l     F .text	00000068 stepperMotorAutoReloadTimer
10000000 l     O .data	00000001 flag.14490
10000001 l     O .data	00000001 flagDutyCycle.14499
00000000 l    df *ABS*	00000000 adc.c
00000000 l    df *ABS*	00000000 system.c
10000a7c l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_4.c
1a001300 l     F .text	00000064 prvHeapInit
10000a84 l     O .bss	00006400 ucHeap
1a001364 l     F .text	00000058 prvInsertBlockIntoFreeList
10000a80 l     O .bss	00000004 pxEnd
10006e84 l     O .bss	00000004 xBlockAllocatedBit
10006e88 l     O .bss	00000004 xFreeBytesRemaining
10006e8c l     O .bss	00000004 xMinimumEverFreeBytesRemaining
10006e90 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a001548 l     F .text	0000001e prvIsQueueFull
1a001566 l     F .text	0000001a prvIsQueueEmpty
1a001580 l     F .text	00000076 prvCopyDataToQueue
1a0015f6 l     F .text	00000024 prvCopyDataFromQueue
1a00161a l     F .text	0000006e prvUnlockQueue
1a00170c l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10006e98 l     O .bss	00000168 uxIdleTaskStack.10728
10007000 l     O .bss	000005a0 uxTimerTaskStack.10735
100075a0 l     O .bss	00000060 xIdleTaskTCB.10727
10007600 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001d4c l     F .text	0000002c prvResetNextTaskUnblockTime
1a001d78 l     F .text	00000092 prvInitialiseNewTask
1a001e0c l     F .text	00000068 prvInitialiseTaskLists
1a001e74 l     F .text	000000ac prvAddNewTaskToReadyList
1a001f20 l     F .text	00000038 prvDeleteTCB
1a001f58 l     F .text	0000004c prvCheckTasksWaitingTermination
1a001fa4 l     F .text	00000028 prvIdleTask
1a001fcc l     F .text	00000098 prvAddCurrentTaskToDelayedList
10007664 l     O .bss	00000004 pxDelayedTaskList
10007668 l     O .bss	00000004 pxOverflowDelayedTaskList
1000766c l     O .bss	0000008c pxReadyTasksLists
100076f8 l     O .bss	00000004 uxCurrentNumberOfTasks
100076fc l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10007700 l     O .bss	00000004 uxPendedTicks
10007704 l     O .bss	00000004 uxSchedulerSuspended
10007708 l     O .bss	00000004 uxTaskNumber
1000770c l     O .bss	00000004 uxTopReadyPriority
10007710 l     O .bss	00000014 xDelayedTaskList1
10007724 l     O .bss	00000014 xDelayedTaskList2
10007738 l     O .bss	00000004 xNextTaskUnblockTime
1000773c l     O .bss	00000004 xNumOfOverflows
10007740 l     O .bss	00000014 xPendingReadyList
10007754 l     O .bss	00000004 xSchedulerRunning
10007758 l     O .bss	00000014 xSuspendedTaskList
1000776c l     O .bss	00000014 xTasksWaitingTermination
10007780 l     O .bss	00000004 xTickCount
10007784 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a0027cc l     F .text	00000020 prvGetNextExpireTime
1a0027ec l     F .text	00000048 prvInsertTimerInActiveList
1a002834 l     F .text	00000070 prvCheckForValidListAndQueue
1a0028a4 l     F .text	00000040 prvInitialiseNewTimer
1a002c60 l     F .text	00000016 prvTimerTask
1a0029ec l     F .text	00000078 prvSwitchTimerLists
1a002a64 l     F .text	0000002c prvSampleTimeNow
1a002a90 l     F .text	00000060 prvProcessExpiredTimer
1a002af0 l     F .text	00000074 prvProcessTimerOrBlockTask
1a002b64 l     F .text	000000fc prvProcessReceivedCommands
10007788 l     O .bss	00000004 pxCurrentTimerList
1000778c l     O .bss	00000004 pxOverflowTimerList
10007790 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10007830 l     O .bss	00000014 xActiveTimerList1
10007844 l     O .bss	00000014 xActiveTimerList2
10007858 l     O .bss	00000004 xLastTime.11777
1000785c l     O .bss	00000050 xStaticTimerQueue.11827
100078ac l     O .bss	00000004 xTimerQueue
100078b0 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002c78 l     F .text	00000040 prvTaskExitError
1a002cb8 l     F .text	00000022 prvPortStartFirstTask
1a002ce0 l     F .text	0000000e vPortEnableVFP
1a002d40 l       .text	00000000 pxCurrentTCBConst2
1a002e20 l       .text	00000000 pxCurrentTCBConst
100078b4 l     O .bss	00000001 ucMaxSysCallPriority
100078b8 l     O .bss	00000004 ulMaxPRIGROUPValue
10000004 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a003014 l     F .text	00000044 Board_LED_Init
1a003058 l     F .text	00000040 Board_TEC_Init
1a003098 l     F .text	00000040 Board_GPIO_Init
1a0030d8 l     F .text	00000030 Board_ADC_Init
1a003108 l     F .text	00000038 Board_SPI_Init
1a003140 l     F .text	00000024 Board_I2C_Init
1a00a690 l     O .text	00000008 GpioButtons
1a00a698 l     O .text	0000000c GpioLeds
1a00a6a4 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a00a6bc l     O .text	00000004 InitClkStates
1a00a6c0 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000008 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a003330 l     F .text	0000002c Chip_UART_GetIndex
1a00a734 l     O .text	00000008 UART_BClock
1a00a73c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0034d8 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0034ec l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0036a0 l     F .text	000000a4 pll_calc_divs
1a003744 l     F .text	0000010c pll_get_frac
1a003850 l     F .text	0000004c Chip_Clock_FindBaseClock
1a003ac4 l     F .text	00000022 Chip_Clock_GetDivRate
100078c0 l     O .bss	00000008 audio_usb_pll_freq
1a00a750 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00a7bc l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003dd0 l     F .text	00000014 Chip_SSP_GetClockIndex
1a003de4 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000040 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0041ee l     F .text	00000002 errorOcurred
1a0041f0 l     F .text	00000002 doNothing
10000044 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00440c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100078f8 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a00475c l     F .text	00000010 clearInterrupt
1a00476c l     F .text	0000005c serveInterrupt
10000084 l     O .data	00000048 ultrasonicSensors
1a00a93c l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0056b4 l     F .text	00000050 std
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
1a007edc l     F .text	00000084 __sbprintf
1a00a990 l     O .text	00000010 blanks.8605
1a00a9a0 l     O .text	00000010 zeroes.8606
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1a008048 l     F .text	00000124 quorem
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
1a00abb8 l     O .text	0000000c p05.7367
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a009f44 l     F .text	00000076 __sprint_r.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
100000d0 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a00abc8 l       .init_array	00000000 __init_array_end
1a00abc4 l       .bss_RAM5	00000000 __preinit_array_end
1a00abc4 l       .init_array	00000000 __init_array_start
1a00abc4 l       .bss_RAM5	00000000 __preinit_array_start
1a00a23c g     F .text	0000002c .hidden __aeabi_dcmpun
1a0038e8 g     F .text	0000001c Chip_Clock_GetDividerSource
1a00124c g     F .text	00000012 _isatty_r
1a005058 g     F .text	00000012 .hidden __aeabi_dcmple
1a00624c g     F .text	0000009c _puts_r
1a004274 g     F .text	00000044 TIMER2_IRQHandler
1a004104 g     F .text	00000014 uartRxRead
1a004f94 g     F .text	0000007a .hidden __cmpdf2
1a00125e g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a003584 g     F .text	00000016 Chip_ADC_DeInit
1a080000 g       *ABS*	00000000 __top_MFlashA512
1000796c g     O .bss	00000004 stepperMotorPulseQueue
1a004f94 g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002d88 g     F .text	0000002c vPortExitCritical
1a004b04 g     F .text	0000005a .hidden __floatdidf
1a002948 g     F .text	00000038 xTimerCreate
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a006224 g     F .text	00000028 printf
1a0031fa g     F .text	00000008 __stdio_init
10007a04 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a00a1ec g     F .text	00000050 _wcrtomb_r
1a006358 g     F .text	00000020 __sseek
1a005710 g     F .text	00000058 __sinit
1a00a13c g     F .text	000000b0 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a001bd4 g     F .text	00000052 vQueueWaitForMessageRestricted
1a000000 g       *ABS*	00000000 __vectors_start__
1a00364a g     F .text	0000000c Chip_ADC_SetResolution
1a006218 g     F .text	0000000c __malloc_unlock
1a000300 g     F .text	00000024 PdiCreateQueue
1a002e24 g     F .text	0000002c SysTick_Handler
1a0033b0 g     F .text	00000040 Chip_UART_SetBaud
10007a08 g     O .bss	00000001 __lock___arc4random_mutex
1a0011a8  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a00319c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a009440 g     F .text	000000c6 memmove
10007930 g     O .bss	00000028 pid
1a000dc8 g     F .text	000000c8 stepperMotorMicroStepsTask
10007970 g     O .bss	00000001 flagStep
1a002dc0 g     F .text	00000064 PendSV_Handler
1a001988 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a009508 g     F .text	0000004c _Balloc
1a00abd0 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a004f84 g     F .text	0000008a .hidden __gtdf2
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10007660 g     O .bss	00000004 pxCurrentTCB
1a001242 g     F .text	0000000a _fstat_r
53ff66e2 g       *ABS*	00000000 __valid_user_code_checksum
1a00abd0 g       .ARM.exidx	00000000 _etext
1a005020 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a002658 g     F .text	00000018 vTaskInternalSetTimeOutState
10007974 g     O .bss	00000020 stepper
1a0042b8 g     F .text	00000044 TIMER3_IRQHandler
1a003b66 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a000d40 g     F .text	0000005c stepperMotorSetPulseServoTask
1a0001a8 g     F .text	00000012 bss_init
1a002e88 g     F .text	00000110 xPortStartScheduler
1a006044 g     F .text	00000134 memcpy
1a002564 g     F .text	00000030 vTaskPlaceOnEventList
1a005010 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
10007994 g     O .bss	00000004 xAutoReloadTimer
1a005704 g     F .text	0000000c _cleanup_r
1a004a8c g     F .text	00000022 .hidden __floatsidf
1a002e50  w    F .text	00000038 vPortSetupTimerInterrupt
1a004f8c g     F .text	00000082 .hidden __ltdf2
1a005134 g     F .text	00000000 .hidden __aeabi_uldivmod
10007a28 g       .noinit	00000000 _noinit
1a0062e8 g     F .text	00000010 puts
1a0014d8 g     F .text	00000070 vPortFree
1a0041c2 g     F .text	00000018 uartWriteString
100079fc g     O .bss	00000004 SystemCoreClock
1a00335c g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002f98 g     F .text	0000005c vPortValidateInterruptPriority
1a00352c g     F .text	00000018 readAdcVal
1a00aaf0 g     O .text	000000c8 __mprec_tens
1a000b94 g     F .text	00000062 stepperMotorInit
1a000180  w    F .text	00000002 UsageFault_Handler
1a003c18 g     F .text	0000004c Chip_Clock_GetRate
1a000d9c g     F .text	0000002c stepperMotorSetMicroSteps
1a001c42 g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1000792c g     O .bss	00000004 __malloc_top_pad
1a000418 g     F .text	00000024 serialPortQueueCreate
1a00323c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a004a6c g     F .text	0000001e .hidden __aeabi_ui2d
1a00928c g     F .text	0000001c _localeconv_r
1a009688 g     F .text	00000012 __i2b
1a008f90 g     F .text	000002fc __sfvwrite_r
1a005164 g     F .text	000002cc .hidden __udivmoddi4
1a0047e8 g     F .text	00000000 .hidden __aeabi_drsub
1a0012e0 g     F .text	00000020 _sbrk_r
1a00a68c g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001268 g     F .text	0000004e _read_r
1a001c3c g     F .text	00000006 vListInitialiseItem
1a005044 g     F .text	00000012 .hidden __aeabi_dcmplt
1a005434 g     F .text	000000d0 _fclose_r
1a0047d2 g     F .text	0000000a GPIO1_IRQHandler
1a001a54 g     F .text	00000158 xQueueReceive
100079bc g     O .bss	00000040 xQueueRegistry
10007924 g     O .bss	00000004 __malloc_max_sbrked_mem
1a004ab0 g     F .text	00000042 .hidden __extendsfdf2
1a004db4 g     F .text	000001d0 .hidden __aeabi_ddiv
1a001cd0 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a0047f4 g     F .text	00000276 .hidden __adddf3
1a00abc8 g       .ARM.exidx	00000000 __exidx_start
10007998 g     O .bss	00000004 stepperMotorDirectionQueue
10007a0c g     O .bss	00000001 __lock___env_recursive_mutex
1a004b60 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
1a00351e g     F .text	0000000e setStartMode
10007a10 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a000464 g     F .text	00000050 serialPortTaskStorageCommand
1a009b1c g     F .text	0000035c _realloc_r
1a005a5c g     F .text	00000048 __libc_init_array
1a00a0d8 g     F .text	00000064 _fputwc_r
1a00aac8 g     O .text	00000028 __mprec_bigtens
1a0042fc g     F .text	000000b8 adcInit
1a004a6c g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a009934 g     F .text	00000036 __mcmp
1a0013bc g     F .text	0000011c pvPortMalloc
1a0031b8 g     F .text	00000030 Board_Init
1a001236  w    F .text	00000002 _init
1a001c26 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1000799c g     O .bss	00000004 stepperMotorPulseServoQueue
1a005094 g     F .text	0000009e .hidden __aeabi_d2f
1a000c60 g     F .text	00000068 stepperMotorSetDirectionTask
1a0021e0 g     F .text	0000000c xTaskGetTickCount
1a00180c g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10007a28 g       .bss	00000000 _ebss
1a003656 g     F .text	00000028 Chip_ADC_EnableChannel
1a0041f4 g     F .text	00000040 TIMER0_IRQHandler
1a0011ac g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0095e8 g     F .text	0000003e __hi0bits
1a0032f8 g     F .text	00000038 Chip_I2C_SetClockRate
1a00a268 g     F .text	0000004e .hidden __fixdfsi
1a00271c g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a00389c g     F .text	0000004c Chip_Clock_EnableCrystal
10007a14 g     O .bss	00000001 __lock___malloc_recursive_mutex
1a0004b4 g     F .text	00000024 commandProcessingQueueCreate
1a00359a g     F .text	00000008 Chip_ADC_ReadValue
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0025cc g     F .text	0000008c xTaskRemoveFromEventList
1a001d14  w    F .text	0000001c vApplicationMallocFailedHook
100079a0 g     O .bss	00000002 numOfStepes
1a0047f4 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a004f8c g     F .text	00000082 .hidden __ledf2
1a0035f8 g     F .text	00000020 Chip_ADC_SetStartMode
1a0097e8 g     F .text	000000a0 __pow5mult
1a004af4 g     F .text	0000006a .hidden __aeabi_ul2d
1a004234 g     F .text	00000040 TIMER1_IRQHandler
1a0032d4 g     F .text	00000024 Chip_I2C_Init
1a005acc g     F .text	00000002 __retarget_lock_release_recursive
1a0041da g     F .text	0000000a UART2_IRQHandler
1a003a58 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a00a854 g     O .text	000000e6 gpioPinsInit
1a003fa0 g     F .text	00000090 uartInterrupt
1a001ce8  w    F .text	0000002c vAssertCalled
1a0041a8 g     F .text	0000001a uartWriteByte
1a003dfc g     F .text	00000012 Chip_SSP_SetClockRate
1a000cc8 g     F .text	00000078 stepperMotorSetPulseTask
1a005080 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0046be g     F .text	00000016 gpioToggle
1a0047dc g     F .text	0000000a GPIO2_IRQHandler
1a005768 g     F .text	0000000c __sfp_lock_acquire
1a0093a0 g     F .text	00000000 memchr
1a002670 g     F .text	00000080 xTaskCheckForTimeOut
1a005820 g     F .text	000001e8 _free_r
1a0043b4 g     F .text	00000058 adcRead
1a003b40 g     F .text	00000026 Chip_Clock_GetBaseClock
1a005aa4 g     F .text	0000001c __locale_mb_cur_max
1a00506c g     F .text	00000012 .hidden __aeabi_dcmpge
100079a4 g     O .bss	00000004 stepperMotorEnableQueue
10000a78 g       .bss	00000000 _bss
1a0035a2 g     F .text	00000036 Chip_ADC_ReadStatus
1a003618 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0047f0 g     F .text	0000027a .hidden __aeabi_dsub
10000a6c g     O .data	00000004 __malloc_sbrk_base
100078bc g     O .bss	00000004 freeRtosInterruptCallback
1a0021d0 g     F .text	00000010 vTaskSuspendAll
1a004af4 g     F .text	0000006a .hidden __floatundidf
10007968 g     O .bss	00000004 processingComandQueue
1a009888 g     F .text	000000ac __lshift
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a003e0e g     F .text	0000003e Chip_SSP_SetBitRate
1a001c8e g     F .text	00000028 uxListRemove
1a003dcc g     F .text	00000002 Chip_GPIO_Init
1a00043c g     F .text	00000028 serialPortForInterruptInit
1a00a6b8 g     O .text	00000004 OscRateIn
1a00412c g     F .text	0000007c uartInit
1a00969c g     F .text	0000014a __multiply
100079b0 g     O .bss	0000000c servo
1a002064 g     F .text	00000072 xTaskCreateStatic
10007a28 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a009ee0 g     F .text	00000064 strncpy
100078fc g     O .bss	00000028 __malloc_current_mallinfo
1a009a58 g     F .text	000000c2 __d2b
1a00249c g     F .text	000000c8 vTaskSwitchContext
1a000b30 g     F .text	00000064 stepperMotorTimerInit
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a00172e g     F .text	00000090 xQueueGenericCreateStatic
1a002594 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a001238 g     F .text	0000000a _close_r
1a004a8c g     F .text	00000022 .hidden __aeabi_i2d
1a004440 g     F .text	000001ac gpioInit
1a001cb8 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a005ac4 g     F .text	00000002 __retarget_lock_close_recursive
1a002980 g     F .text	0000006c xTimerGenericCommand
1a007f7c g     F .text	000000cc __swsetup_r
1a001d30  w    F .text	0000001c vApplicationStackOverflowHook
1a005430  w    F .text	00000002 .hidden __aeabi_ldiv0
1a004db4 g     F .text	000001d0 .hidden __divdf3
10000664 g     O .data	00000408 __malloc_av_
1a004b60 g     F .text	00000254 .hidden __muldf3
1a0062f8 g     F .text	00000022 __sread
1a0046d4 g     F .text	0000001c USB0_IRQHandler
1a003be4 g     F .text	00000034 Chip_Clock_Disable
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a00620c g     F .text	0000000c __malloc_lock
1a003188 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a005658 g     F .text	0000005a _fflush_r
1a009fd0 g     F .text	00000068 _calloc_r
1a0009b8 g     F .text	0000001c heartBeat
1a003904 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a005ac8 g     F .text	00000002 __retarget_lock_acquire_recursive
1a000ea0 g     F .text	00000308 adcScanChannelTask
1a006178 g     F .text	00000094 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000818 g     F .text	000001a0 main
10007928 g     O .bss	00000004 __malloc_max_total_mem
1a000e90 g     F .text	0000000a adcStart
1a005ac0 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a001c5a g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002d20 g     F .text	00000024 SVC_Handler
1a006378 g     F .text	00000008 __sclose
1a0028e4 g     F .text	00000064 xTimerCreateTimerTask
1a005094 g     F .text	0000009e .hidden __truncdfsf2
1a008170 g     F .text	00000e20 _dtoa_r
1a005ad0 g     F .text	00000548 _malloc_r
1a007f60 g     F .text	0000001a __ascii_wctomb
1a004b04 g     F .text	0000005a .hidden __aeabi_l2d
1a0040ec g     F .text	00000018 uartTxReady
1a0023f8 g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a003b74 g     F .text	0000003c Chip_Clock_EnableOpts
1a0031f2 g     F .text	00000008 __stdio_getchar
1a000508 g     F .text	00000310 commandProcessingTask
1a0017be g     F .text	0000004e xQueueGenericCreate
1a005780 g     F .text	000000a0 _malloc_trim_r
1a003920 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0039d8 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003e84 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a004f94 g     F .text	0000007a .hidden __nedf2
1a0045ec g     F .text	0000006a gpioWrite
1a001234  w    F .text	00000002 _fini
1a000350 g     F .text	00000068 setingSetPiontPIDTask
1a002304 g     F .text	000000f4 xTaskResumeAll
1a00213c g     F .text	00000094 vTaskStartScheduler
1a003544 g     F .text	00000040 Chip_ADC_Init
10007a00 g     O .bss	00000004 g_pUsbApi
1a003204 g     F .text	00000038 Board_SetupMuxing
1a0033f0 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a0012b6 g     F .text	00000028 _write_r
100079a8 g     O .bss	00000004 xAutoReloadTimerServo
1a00367e g     F .text	00000022 Chip_ADC_SetBurstCmd
1a000bf8 g     F .text	00000068 stepperMotorEnableTask
1a0001ba  w    F .text	00000002 ETH_IRQHandler
100000cc g     O .data	00000004 _impure_ptr
1a005504 g     F .text	00000154 __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a000324 g     F .text	0000002a startPid
1a004118 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a006018 g     F .text	0000002a __ascii_mbtowc
10000000 g       .data	00000000 _data
1a0026f0 g     F .text	0000000c vTaskMissedYield
10007a28 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003e4c g     F .text	00000038 Chip_SSP_Init
1a001bac g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0021ec g     F .text	00000118 xTaskIncrementTick
1a0092a8 g     F .text	0000005c __swhatbuf_r
1a002ff4 g     F .text	00000020 DAC_IRQHandler
1a003164 g     F .text	00000024 Board_Debug_Init
1a005030 g     F .text	00000012 .hidden __aeabi_dcmpeq
1a0031e8 g     F .text	0000000a __stdio_putchar
1a0004d8 g     F .text	0000002e commandProcessingConverterCaracterToDecimal
1a001688 g     F .text	00000084 xQueueGenericReset
1a0035d8 g     F .text	00000020 Chip_ADC_Int_SetChannelCmd
10000a74 g       .data	00000000 _edata
1a0032b4 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a00a038 g     F .text	0000009e __fputwc
10007a18 g     O .bss	00000001 __lock___at_quick_exit_mutex
10007958 g     O .bss	00000004 pidSetPointQueue
100079ac g     O .bss	00000004 stepperMotorMicroStepsQueue
1a0020d6 g     F .text	00000066 xTaskCreate
1a003c78 g     F .text	00000154 Chip_SetupCoreClock
1a00631c g     F .text	0000003c __swrite
1a0047c8 g     F .text	0000000a GPIO0_IRQHandler
10000a70 g     O .data	00000004 __malloc_trim_threshold
1a000000 g     O .text	00000040 g_pfnVectors
1a005a08 g     F .text	00000052 _fwalk_reent
1a003c64 g     F .text	00000014 SystemCoreClockUpdate
1a00996c g     F .text	000000ec __mdiff
1a00a268 g     F .text	0000004e .hidden __aeabi_d2iz
10007960 g     O .bss	00000008 setPoint
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a005774 g     F .text	0000000c __sfp_lock_release
1a0003b8 g     F .text	00000060 serialPortReceiveData
1a0026fc g     F .text	00000020 xTaskGetSchedulerState
1a00a9b0 g     O .text	00000101 _ctype_
1a005430  w    F .text	00000002 .hidden __aeabi_idiv0
1a00a23c g     F .text	0000002c .hidden __unorddf2
1a004030 g     F .text	000000bc uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
10007a1c g     O .bss	00000001 __lock___dd_hash_mutex
1a009304 g     F .text	00000094 __smakebuf_r
10007a20 g     O .bss	00000001 __lock___tz_mutex
1a006380 g     F .text	000000dc strlen
1a002cf4 g     F .text	0000002c pxPortInitialiseStack
1a003bb0 g     F .text	00000034 Chip_Clock_Enable
1a005020 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a004f84 g     F .text	0000008a .hidden __gedf2
1a0041e4 g     F .text	0000000a UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a009fbc g     F .text	00000014 __sprint_r
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a004656 g     F .text	00000068 gpioRead
1a000a94 g     F .text	0000009c stepperMotorQueueCreate
1a004ab0 g     F .text	00000042 .hidden __aeabi_f2d
1a0046f0 g     F .text	0000006c boardInit
1a002d44 g     F .text	00000044 vPortEnterCritical
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0047f0 g     F .text	0000027a .hidden __subdf3
1a006460 g     F .text	00001a7c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a009628 g     F .text	0000005e __lo0bits
1a009e78 g     F .text	00000068 frexp
100004f8 g     O .data	0000016c __global_locale
1a003ae8 g     F .text	00000058 Chip_Clock_SetBaseClock
1a003ebc g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10007a24 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a0032a8 g     F .text	0000000c Board_SystemInit
1a009568 g     F .text	00000080 __multadd
1a009554 g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 ad 11 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a e2 66 ff 53     }............f.S
	...
1a00002c:	21 2d 00 1a 85 01 00 1a 00 00 00 00 c1 2d 00 1a     !-...........-..
1a00003c:	25 2e 00 1a                                         %...

1a000040 <g_pfnVendorVectors>:
1a000040:	f5 2f 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ./..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	d5 46 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .F..............
1a000070:	f5 41 00 1a 35 42 00 1a 75 42 00 1a b9 42 00 1a     .A..5B..uB...B..
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a db 41 00 1a e5 41 00 1a     .........A...A..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	c9 47 00 1a d3 47 00 1a dd 47 00 1a bb 01 00 1a     .G...G...G......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a00abd0 	.word	0x1a00abd0
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000a74 	.word	0x00000a74
1a000120:	1a00abd0 	.word	0x1a00abd0
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00abd0 	.word	0x1a00abd0
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00abd0 	.word	0x1a00abd0
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00abd0 	.word	0x1a00abd0
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000a78 	.word	0x10000a78
1a000154:	00006fb0 	.word	0x00006fb0
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:


}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f003 fe8a 	bl	1a003ed8 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <PdiCreateQueue>:
 ** @addtogroup aplicacion principal
 ** @{ */
/*==================[inlcusiones]============================================*/
#include "pid.h"

void PdiCreateQueue(void){
1a000300:	b508      	push	{r3, lr}
	pidSetPointQueue = xQueueCreate(SIZEQUEUEPIDSETPOINT,sizeof(uint16_t));
1a000302:	2200      	movs	r2, #0
1a000304:	2102      	movs	r1, #2
1a000306:	2003      	movs	r0, #3
1a000308:	f001 fa59 	bl	1a0017be <xQueueGenericCreate>
1a00030c:	4b04      	ldr	r3, [pc, #16]	; (1a000320 <PdiCreateQueue+0x20>)
1a00030e:	6018      	str	r0, [r3, #0]
	if (pidSetPointQueue == NULL) {/*Si devolvio NULL es muy probable que no haya suficiente memoria para crear la cola*/
1a000310:	b100      	cbz	r0, 1a000314 <PdiCreateQueue+0x14>
			gpioWrite(LED3, ON);
			while (1)
				;/*Se queda bloquedo el sistema hasta que venga el personal de mantenimiento*/
		}
}
1a000312:	bd08      	pop	{r3, pc}
			gpioWrite(LED3, ON);
1a000314:	2101      	movs	r1, #1
1a000316:	202d      	movs	r0, #45	; 0x2d
1a000318:	f004 f968 	bl	1a0045ec <gpioWrite>
1a00031c:	e7fe      	b.n	1a00031c <PdiCreateQueue+0x1c>
1a00031e:	bf00      	nop
1a000320:	10007958 	.word	0x10007958

1a000324 <startPid>:


/*==================[API]============================================*/
void startPid(Pid_t *pid,uint16_t sPoint, uint16_t sensorPresion,float setPoint, float inPut,float error,float iTerm,float outMax,float outMin,float kp, float ki, float outPut )
{
	pid->sPoint = sPoint;
1a000324:	8001      	strh	r1, [r0, #0]
	pid->sensorPresion = sensorPresion;
1a000326:	8042      	strh	r2, [r0, #2]
	pid->setPoint = setPoint;
1a000328:	ed80 0a09 	vstr	s0, [r0, #36]	; 0x24
	pid->inPut = inPut;
1a00032c:	edc0 0a01 	vstr	s1, [r0, #4]
	pid->error = error;
1a000330:	ed80 1a02 	vstr	s2, [r0, #8]
	pid->iTerm = iTerm;
1a000334:	edc0 1a03 	vstr	s3, [r0, #12]
	pid->outMax = outMax;
1a000338:	ed80 2a04 	vstr	s4, [r0, #16]
	pid->outMin = outMin;
1a00033c:	edc0 2a05 	vstr	s5, [r0, #20]
	pid->kp = kp;
1a000340:	ed80 3a06 	vstr	s6, [r0, #24]
	pid->ki = ki;
1a000344:	edc0 3a07 	vstr	s7, [r0, #28]
	pid->outPut = outPut;
1a000348:	ed80 4a08 	vstr	s8, [r0, #32]
}
1a00034c:	4770      	bx	lr
1a00034e:	Address 0x000000001a00034e is out of bounds.


1a000350 <setingSetPiontPIDTask>:
/*=====[Prototypes (declarations) of task ]=============*/
void setingSetPiontPIDTask(void * taskParmPtr){
1a000350:	b500      	push	{lr}
1a000352:	b083      	sub	sp, #12
1a000354:	e004      	b.n	1a000360 <setingSetPiontPIDTask+0x10>
	uint16_t porcent;
	while(TRUE){

		if (xQueueReceive(pidSetPointQueue, &porcent,portMAX_DELAY) == pdTRUE)	{
			switch(porcent){
1a000356:	2b19      	cmp	r3, #25
1a000358:	d102      	bne.n	1a000360 <setingSetPiontPIDTask+0x10>
			case 25: pid.setPoint = 0.277750;
1a00035a:	4b11      	ldr	r3, [pc, #68]	; (1a0003a0 <setingSetPiontPIDTask+0x50>)
1a00035c:	4a11      	ldr	r2, [pc, #68]	; (1a0003a4 <setingSetPiontPIDTask+0x54>)
1a00035e:	625a      	str	r2, [r3, #36]	; 0x24
		if (xQueueReceive(pidSetPointQueue, &porcent,portMAX_DELAY) == pdTRUE)	{
1a000360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000364:	f10d 0106 	add.w	r1, sp, #6
1a000368:	4b0f      	ldr	r3, [pc, #60]	; (1a0003a8 <setingSetPiontPIDTask+0x58>)
1a00036a:	6818      	ldr	r0, [r3, #0]
1a00036c:	f001 fb72 	bl	1a001a54 <xQueueReceive>
1a000370:	2801      	cmp	r0, #1
1a000372:	d1f5      	bne.n	1a000360 <setingSetPiontPIDTask+0x10>
			switch(porcent){
1a000374:	f8bd 3006 	ldrh.w	r3, [sp, #6]
1a000378:	2b32      	cmp	r3, #50	; 0x32
1a00037a:	d008      	beq.n	1a00038e <setingSetPiontPIDTask+0x3e>
1a00037c:	d9eb      	bls.n	1a000356 <setingSetPiontPIDTask+0x6>
1a00037e:	2b4b      	cmp	r3, #75	; 0x4b
1a000380:	d009      	beq.n	1a000396 <setingSetPiontPIDTask+0x46>
1a000382:	2b64      	cmp	r3, #100	; 0x64
1a000384:	d1ec      	bne.n	1a000360 <setingSetPiontPIDTask+0x10>
			break;
			case 50: pid.setPoint = 0.43550;
			break;
			case 75: pid.setPoint = 0.653250;
			break;
			case 100: pid.setPoint=0.87100;
1a000386:	4b06      	ldr	r3, [pc, #24]	; (1a0003a0 <setingSetPiontPIDTask+0x50>)
1a000388:	4a08      	ldr	r2, [pc, #32]	; (1a0003ac <setingSetPiontPIDTask+0x5c>)
1a00038a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
1a00038c:	e7e8      	b.n	1a000360 <setingSetPiontPIDTask+0x10>
			case 50: pid.setPoint = 0.43550;
1a00038e:	4b04      	ldr	r3, [pc, #16]	; (1a0003a0 <setingSetPiontPIDTask+0x50>)
1a000390:	4a07      	ldr	r2, [pc, #28]	; (1a0003b0 <setingSetPiontPIDTask+0x60>)
1a000392:	625a      	str	r2, [r3, #36]	; 0x24
			break;
1a000394:	e7e4      	b.n	1a000360 <setingSetPiontPIDTask+0x10>
			case 75: pid.setPoint = 0.653250;
1a000396:	4b02      	ldr	r3, [pc, #8]	; (1a0003a0 <setingSetPiontPIDTask+0x50>)
1a000398:	4a06      	ldr	r2, [pc, #24]	; (1a0003b4 <setingSetPiontPIDTask+0x64>)
1a00039a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
1a00039c:	e7e0      	b.n	1a000360 <setingSetPiontPIDTask+0x10>
1a00039e:	bf00      	nop
1a0003a0:	10007930 	.word	0x10007930
1a0003a4:	3e8e353f 	.word	0x3e8e353f
1a0003a8:	10007958 	.word	0x10007958
1a0003ac:	3f5ef9db 	.word	0x3f5ef9db
1a0003b0:	3edef9db 	.word	0x3edef9db
1a0003b4:	3f273b64 	.word	0x3f273b64

1a0003b8 <serialPortReceiveData>:
		uartCallbackSet(UART_USB, UART_RECEIVE, serialPortReceiveData, NULL);
		// Habilito todas las interrupciones de UART_232
		uartInterrupt(UART_USB, TRUE);
}

void serialPortReceiveData(void *noUsado){
1a0003b8:	b510      	push	{r4, lr}
1a0003ba:	b082      	sub	sp, #8
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
1a0003bc:	2400      	movs	r4, #0
1a0003be:	9401      	str	r4, [sp, #4]
	//UBaseType_t uxSavedInterruptStatus;
    char data;
   // uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
	  data =uartRxRead(UART_USB);
1a0003c0:	2003      	movs	r0, #3
1a0003c2:	f003 fe9f 	bl	1a004104 <uartRxRead>
1a0003c6:	4601      	mov	r1, r0
1a0003c8:	f88d 0003 	strb.w	r0, [sp, #3]
	  uartWriteByte(UART_USB, data);
1a0003cc:	2003      	movs	r0, #3
1a0003ce:	f003 feeb 	bl	1a0041a8 <uartWriteByte>
	  uartWriteString(UART_USB, "\n");
1a0003d2:	490e      	ldr	r1, [pc, #56]	; (1a00040c <serialPortReceiveData+0x54>)
1a0003d4:	2003      	movs	r0, #3
1a0003d6:	f003 fef4 	bl	1a0041c2 <uartWriteString>
	  //printf("El caracter recibido es:%c\n",data);
	  //taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
	  xQueueSendFromISR(receiveQueue, &data, &xHigherPriorityTaskWoken);
1a0003da:	4623      	mov	r3, r4
1a0003dc:	aa01      	add	r2, sp, #4
1a0003de:	f10d 0103 	add.w	r1, sp, #3
1a0003e2:	480b      	ldr	r0, [pc, #44]	; (1a000410 <serialPortReceiveData+0x58>)
1a0003e4:	6800      	ldr	r0, [r0, #0]
1a0003e6:	f001 facf 	bl	1a001988 <xQueueGenericSendFromISR>
	  if (xHigherPriorityTaskWoken == pdTRUE) {
1a0003ea:	9b01      	ldr	r3, [sp, #4]
1a0003ec:	2b01      	cmp	r3, #1
1a0003ee:	d001      	beq.n	1a0003f4 <serialPortReceiveData+0x3c>
	  		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	  	}

}
1a0003f0:	b002      	add	sp, #8
1a0003f2:	bd10      	pop	{r4, pc}
	  		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
1a0003f4:	2b00      	cmp	r3, #0
1a0003f6:	d0fb      	beq.n	1a0003f0 <serialPortReceiveData+0x38>
1a0003f8:	4b06      	ldr	r3, [pc, #24]	; (1a000414 <serialPortReceiveData+0x5c>)
1a0003fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0003fe:	601a      	str	r2, [r3, #0]
1a000400:	f3bf 8f4f 	dsb	sy
1a000404:	f3bf 8f6f 	isb	sy
}
1a000408:	e7f2      	b.n	1a0003f0 <serialPortReceiveData+0x38>
1a00040a:	bf00      	nop
1a00040c:	1a00a2c8 	.word	0x1a00a2c8
1a000410:	10000a78 	.word	0x10000a78
1a000414:	e000ed04 	.word	0xe000ed04

1a000418 <serialPortQueueCreate>:
void serialPortQueueCreate(void){
1a000418:	b508      	push	{r3, lr}
 receiveQueue = xQueueCreate(SIZEQUEUERECEIVE,sizeof(char));
1a00041a:	2200      	movs	r2, #0
1a00041c:	2101      	movs	r1, #1
1a00041e:	2064      	movs	r0, #100	; 0x64
1a000420:	f001 f9cd 	bl	1a0017be <xQueueGenericCreate>
1a000424:	4b04      	ldr	r3, [pc, #16]	; (1a000438 <serialPortQueueCreate+0x20>)
1a000426:	6018      	str	r0, [r3, #0]
 if(receiveQueue == NULL){/*Si devolvio NULL es muy probable que no haya suficiente memoria para crear la cola*/
1a000428:	b100      	cbz	r0, 1a00042c <serialPortQueueCreate+0x14>
}
1a00042a:	bd08      	pop	{r3, pc}
	 gpioWrite(LED1, ON);
1a00042c:	2101      	movs	r1, #1
1a00042e:	202b      	movs	r0, #43	; 0x2b
1a000430:	f004 f8dc 	bl	1a0045ec <gpioWrite>
1a000434:	e7fe      	b.n	1a000434 <serialPortQueueCreate+0x1c>
1a000436:	bf00      	nop
1a000438:	10000a78 	.word	0x10000a78

1a00043c <serialPortForInterruptInit>:
void serialPortForInterruptInit(void){
1a00043c:	b508      	push	{r3, lr}
		uartConfig(UART_USB, 115200);
1a00043e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000442:	2003      	movs	r0, #3
1a000444:	f003 fe72 	bl	1a00412c <uartInit>
		uartCallbackSet(UART_USB, UART_RECEIVE, serialPortReceiveData, NULL);
1a000448:	2300      	movs	r3, #0
1a00044a:	4a05      	ldr	r2, [pc, #20]	; (1a000460 <serialPortForInterruptInit+0x24>)
1a00044c:	4619      	mov	r1, r3
1a00044e:	2003      	movs	r0, #3
1a000450:	f003 fdee 	bl	1a004030 <uartCallbackSet>
		uartInterrupt(UART_USB, TRUE);
1a000454:	2101      	movs	r1, #1
1a000456:	2003      	movs	r0, #3
1a000458:	f003 fda2 	bl	1a003fa0 <uartInterrupt>
}
1a00045c:	bd08      	pop	{r3, pc}
1a00045e:	bf00      	nop
1a000460:	1a0003b9 	.word	0x1a0003b9

1a000464 <serialPortTaskStorageCommand>:

void serialPortTaskStorageCommand(void * taskParmPtr) {
1a000464:	b530      	push	{r4, r5, lr}
1a000466:	b089      	sub	sp, #36	; 0x24

	char command[20];
	char *pCommand=NULL;
	uint8_t index = 0;
	char data;
	pCommand=command;
1a000468:	ab03      	add	r3, sp, #12
1a00046a:	9302      	str	r3, [sp, #8]
	uint8_t index = 0;
1a00046c:	2400      	movs	r4, #0
1a00046e:	e00a      	b.n	1a000486 <serialPortTaskStorageCommand+0x22>
		if (xQueueReceive(receiveQueue, &data, portMAX_DELAY) == pdTRUE) {
			*(command+index)=data;

			//*(pCommand+index) = data;
			if (*(command+index) == '\n') {
				*(command+index) = '\0';
1a000470:	2500      	movs	r5, #0
1a000472:	5515      	strb	r5, [r2, r4]

				//Envió el comando que se recibio
				//así desbloqueo la tarea que realiza la interpretación del comando(proceso)
				xQueueSend(processingComandQueue, &pCommand, portMAX_DELAY);
1a000474:	462b      	mov	r3, r5
1a000476:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00047a:	a902      	add	r1, sp, #8
1a00047c:	480b      	ldr	r0, [pc, #44]	; (1a0004ac <serialPortTaskStorageCommand+0x48>)
1a00047e:	6800      	ldr	r0, [r0, #0]
1a000480:	f001 f9c4 	bl	1a00180c <xQueueGenericSend>

				index = 0;
1a000484:	462c      	mov	r4, r5
		if (xQueueReceive(receiveQueue, &data, portMAX_DELAY) == pdTRUE) {
1a000486:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00048a:	f10d 0107 	add.w	r1, sp, #7
1a00048e:	4b08      	ldr	r3, [pc, #32]	; (1a0004b0 <serialPortTaskStorageCommand+0x4c>)
1a000490:	6818      	ldr	r0, [r3, #0]
1a000492:	f001 fadf 	bl	1a001a54 <xQueueReceive>
1a000496:	2801      	cmp	r0, #1
1a000498:	d1f5      	bne.n	1a000486 <serialPortTaskStorageCommand+0x22>
			*(command+index)=data;
1a00049a:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00049e:	aa03      	add	r2, sp, #12
1a0004a0:	5513      	strb	r3, [r2, r4]
			if (*(command+index) == '\n') {
1a0004a2:	2b0a      	cmp	r3, #10
1a0004a4:	d0e4      	beq.n	1a000470 <serialPortTaskStorageCommand+0xc>
			} else {
				index++;
1a0004a6:	3401      	adds	r4, #1
1a0004a8:	b2e4      	uxtb	r4, r4
1a0004aa:	e7ec      	b.n	1a000486 <serialPortTaskStorageCommand+0x22>
1a0004ac:	10007968 	.word	0x10007968
1a0004b0:	10000a78 	.word	0x10000a78

1a0004b4 <commandProcessingQueueCreate>:
/*==================[inlcusiones]============================================*/
#include "commandprocessing.h"
#include "steppermotor.h"
#include "pid.h"

void commandProcessingQueueCreate(void) {
1a0004b4:	b508      	push	{r3, lr}
	processingComandQueue = xQueueCreate(SIZECOMMANDQUEUE, sizeof(char*));
1a0004b6:	2200      	movs	r2, #0
1a0004b8:	2104      	movs	r1, #4
1a0004ba:	2064      	movs	r0, #100	; 0x64
1a0004bc:	f001 f97f 	bl	1a0017be <xQueueGenericCreate>
1a0004c0:	4b04      	ldr	r3, [pc, #16]	; (1a0004d4 <commandProcessingQueueCreate+0x20>)
1a0004c2:	6018      	str	r0, [r3, #0]

	if (processingComandQueue == NULL) {/*Si devolvio NULL es muy probable que no haya suficiente memoria para crear la cola*/
1a0004c4:	b100      	cbz	r0, 1a0004c8 <commandProcessingQueueCreate+0x14>
		gpioWrite(LED1, ON);
		while (1)
			;/*Se queda bloquedo el sistema hasta que venga el personal de mantenimiento*/
	}
}
1a0004c6:	bd08      	pop	{r3, pc}
		gpioWrite(LED1, ON);
1a0004c8:	2101      	movs	r1, #1
1a0004ca:	202b      	movs	r0, #43	; 0x2b
1a0004cc:	f004 f88e 	bl	1a0045ec <gpioWrite>
1a0004d0:	e7fe      	b.n	1a0004d0 <commandProcessingQueueCreate+0x1c>
1a0004d2:	bf00      	nop
1a0004d4:	10007968 	.word	0x10007968

1a0004d8 <commandProcessingConverterCaracterToDecimal>:
			}
		}
	}
}

uint16_t commandProcessingConverterCaracterToDecimal(char * pointer, uint8_t length) {
1a0004d8:	b4f0      	push	{r4, r5, r6, r7}
		    uint32_t tam = length;
		    uint32_t expo = 0;
		    uint32_t pot=1;
		    uint32_t i;

		    for(i=tam ;i>0;--i)
1a0004da:	460a      	mov	r2, r1
	uint32_t num=0;
1a0004dc:	2700      	movs	r7, #0
		    for(i=tam ;i>0;--i)
1a0004de:	e008      	b.n	1a0004f2 <commandProcessingConverterCaracterToDecimal+0x1a>

		        expo = tam-i;
		        pot=1;
		        while( expo > 0)//para sacar la potencia
		        {
		                pot  = pot*10  ;
1a0004e0:	eb03 0483 	add.w	r4, r3, r3, lsl #2
1a0004e4:	0063      	lsls	r3, r4, #1
		                expo = expo-1 ;
1a0004e6:	3a01      	subs	r2, #1
		        while( expo > 0)//para sacar la potencia
1a0004e8:	2a00      	cmp	r2, #0
1a0004ea:	d1f9      	bne.n	1a0004e0 <commandProcessingConverterCaracterToDecimal+0x8>
		        }
		    num = num+digito*pot;
1a0004ec:	fb05 7703 	mla	r7, r5, r3, r7
		    for(i=tam ;i>0;--i)
1a0004f0:	4632      	mov	r2, r6
1a0004f2:	b12a      	cbz	r2, 1a000500 <commandProcessingConverterCaracterToDecimal+0x28>
		        digito=(uint32_t) (*(pointer+(i-1))-48);
1a0004f4:	1e56      	subs	r6, r2, #1
1a0004f6:	5d85      	ldrb	r5, [r0, r6]
1a0004f8:	3d30      	subs	r5, #48	; 0x30
		        expo = tam-i;
1a0004fa:	1a8a      	subs	r2, r1, r2
		        pot=1;
1a0004fc:	2301      	movs	r3, #1
		        while( expo > 0)//para sacar la potencia
1a0004fe:	e7f3      	b.n	1a0004e8 <commandProcessingConverterCaracterToDecimal+0x10>
		    }
		    return num;
	}
1a000500:	b2b8      	uxth	r0, r7
1a000502:	bcf0      	pop	{r4, r5, r6, r7}
1a000504:	4770      	bx	lr
1a000506:	Address 0x000000001a000506 is out of bounds.


1a000508 <commandProcessingTask>:
void commandProcessingTask(void * taskParmPtr) {
1a000508:	b510      	push	{r4, lr}
1a00050a:	b084      	sub	sp, #16
	char *pCommandToProcess = NULL;
1a00050c:	2300      	movs	r3, #0
1a00050e:	9303      	str	r3, [sp, #12]
1a000510:	e014      	b.n	1a00053c <commandProcessingTask+0x34>
				taskENTER_CRITICAL();
1a000512:	f002 fc17 	bl	1a002d44 <vPortEnterCritical>
				printf("El comando es:%c\n", *(pCommandToProcess + index));
1a000516:	9b03      	ldr	r3, [sp, #12]
1a000518:	5d19      	ldrb	r1, [r3, r4]
1a00051a:	48b1      	ldr	r0, [pc, #708]	; (1a0007e0 <commandProcessingTask+0x2d8>)
1a00051c:	f005 fe82 	bl	1a006224 <printf>
				taskEXIT_CRITICAL();
1a000520:	f002 fc32 	bl	1a002d88 <vPortExitCritical>
				index++;
1a000524:	3401      	adds	r4, #1
1a000526:	b2e4      	uxtb	r4, r4
			while (*(pCommandToProcess + index) != '\0') {
1a000528:	9803      	ldr	r0, [sp, #12]
1a00052a:	5d03      	ldrb	r3, [r0, r4]
1a00052c:	2b00      	cmp	r3, #0
1a00052e:	d1f0      	bne.n	1a000512 <commandProcessingTask+0xa>
			switch (*(pCommandToProcess + index)) {
1a000530:	7803      	ldrb	r3, [r0, #0]
1a000532:	2b4d      	cmp	r3, #77	; 0x4d
1a000534:	d00d      	beq.n	1a000552 <commandProcessingTask+0x4a>
1a000536:	2b53      	cmp	r3, #83	; 0x53
1a000538:	f000 8120 	beq.w	1a00077c <commandProcessingTask+0x274>
		if (xQueueReceive(processingComandQueue, &pCommandToProcess,
1a00053c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000540:	a903      	add	r1, sp, #12
1a000542:	4ba8      	ldr	r3, [pc, #672]	; (1a0007e4 <commandProcessingTask+0x2dc>)
1a000544:	6818      	ldr	r0, [r3, #0]
1a000546:	f001 fa85 	bl	1a001a54 <xQueueReceive>
1a00054a:	2801      	cmp	r0, #1
1a00054c:	d1f6      	bne.n	1a00053c <commandProcessingTask+0x34>
1a00054e:	2400      	movs	r4, #0
1a000550:	e7ea      	b.n	1a000528 <commandProcessingTask+0x20>
				switch (*(pCommandToProcess + 1)) {
1a000552:	7843      	ldrb	r3, [r0, #1]
1a000554:	3b44      	subs	r3, #68	; 0x44
1a000556:	2b10      	cmp	r3, #16
1a000558:	d8f0      	bhi.n	1a00053c <commandProcessingTask+0x34>
1a00055a:	a201      	add	r2, pc, #4	; (adr r2, 1a000560 <commandProcessingTask+0x58>)
1a00055c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a000560:	1a0005bd 	.word	0x1a0005bd
1a000564:	1a0005a5 	.word	0x1a0005a5
1a000568:	1a00053d 	.word	0x1a00053d
1a00056c:	1a00053d 	.word	0x1a00053d
1a000570:	1a00053d 	.word	0x1a00053d
1a000574:	1a00053d 	.word	0x1a00053d
1a000578:	1a00053d 	.word	0x1a00053d
1a00057c:	1a00053d 	.word	0x1a00053d
1a000580:	1a00053d 	.word	0x1a00053d
1a000584:	1a0005d3 	.word	0x1a0005d3
1a000588:	1a00053d 	.word	0x1a00053d
1a00058c:	1a00053d 	.word	0x1a00053d
1a000590:	1a00053d 	.word	0x1a00053d
1a000594:	1a00053d 	.word	0x1a00053d
1a000598:	1a00053d 	.word	0x1a00053d
1a00059c:	1a000745 	.word	0x1a000745
1a0005a0:	1a0006f7 	.word	0x1a0006f7
					enableMotor = STEPPER_ENABLE;
1a0005a4:	a904      	add	r1, sp, #16
1a0005a6:	2301      	movs	r3, #1
1a0005a8:	f801 3d05 	strb.w	r3, [r1, #-5]!
					xQueueSend(stepperMotorEnableQueue, &enableMotor,portMAX_DELAY);
1a0005ac:	2300      	movs	r3, #0
1a0005ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0005b2:	488d      	ldr	r0, [pc, #564]	; (1a0007e8 <commandProcessingTask+0x2e0>)
1a0005b4:	6800      	ldr	r0, [r0, #0]
1a0005b6:	f001 f929 	bl	1a00180c <xQueueGenericSend>
					break;
1a0005ba:	e7bf      	b.n	1a00053c <commandProcessingTask+0x34>
					enableMotor = STEPPER_DISABLE;
1a0005bc:	2300      	movs	r3, #0
1a0005be:	a904      	add	r1, sp, #16
1a0005c0:	f801 3d05 	strb.w	r3, [r1, #-5]!
					xQueueSend(stepperMotorEnableQueue, &enableMotor,portMAX_DELAY);
1a0005c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0005c8:	4887      	ldr	r0, [pc, #540]	; (1a0007e8 <commandProcessingTask+0x2e0>)
1a0005ca:	6800      	ldr	r0, [r0, #0]
1a0005cc:	f001 f91e 	bl	1a00180c <xQueueGenericSend>
					break;
1a0005d0:	e7b4      	b.n	1a00053c <commandProcessingTask+0x34>
					switch (*(pCommandToProcess + 2)) {
1a0005d2:	7883      	ldrb	r3, [r0, #2]
1a0005d4:	2b53      	cmp	r3, #83	; 0x53
1a0005d6:	d1b1      	bne.n	1a00053c <commandProcessingTask+0x34>
						switch (*(pCommandToProcess + 3)) {
1a0005d8:	78c3      	ldrb	r3, [r0, #3]
1a0005da:	3b30      	subs	r3, #48	; 0x30
1a0005dc:	2b18      	cmp	r3, #24
1a0005de:	d8ad      	bhi.n	1a00053c <commandProcessingTask+0x34>
1a0005e0:	a201      	add	r2, pc, #4	; (adr r2, 1a0005e8 <commandProcessingTask+0xe0>)
1a0005e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0005e6:	bf00      	nop
1a0005e8:	1a00067b 	.word	0x1a00067b
1a0005ec:	1a0006b7 	.word	0x1a0006b7
1a0005f0:	1a00053d 	.word	0x1a00053d
1a0005f4:	1a0006d7 	.word	0x1a0006d7
1a0005f8:	1a00053d 	.word	0x1a00053d
1a0005fc:	1a00053d 	.word	0x1a00053d
1a000600:	1a00053d 	.word	0x1a00053d
1a000604:	1a00053d 	.word	0x1a00053d
1a000608:	1a00053d 	.word	0x1a00053d
1a00060c:	1a00053d 	.word	0x1a00053d
1a000610:	1a00053d 	.word	0x1a00053d
1a000614:	1a00053d 	.word	0x1a00053d
1a000618:	1a00053d 	.word	0x1a00053d
1a00061c:	1a00053d 	.word	0x1a00053d
1a000620:	1a00053d 	.word	0x1a00053d
1a000624:	1a00053d 	.word	0x1a00053d
1a000628:	1a00053d 	.word	0x1a00053d
1a00062c:	1a00053d 	.word	0x1a00053d
1a000630:	1a00053d 	.word	0x1a00053d
1a000634:	1a00053d 	.word	0x1a00053d
1a000638:	1a00053d 	.word	0x1a00053d
1a00063c:	1a00053d 	.word	0x1a00053d
1a000640:	1a00064d 	.word	0x1a00064d
1a000644:	1a00053d 	.word	0x1a00053d
1a000648:	1a000663 	.word	0x1a000663
							microSteps = RESOLUTION_FULL_STEP;
1a00064c:	2300      	movs	r3, #0
1a00064e:	a904      	add	r1, sp, #16
1a000650:	f801 3d06 	strb.w	r3, [r1, #-6]!
							xQueueSend(stepperMotorMicroStepsQueue, &microSteps,
1a000654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000658:	4864      	ldr	r0, [pc, #400]	; (1a0007ec <commandProcessingTask+0x2e4>)
1a00065a:	6800      	ldr	r0, [r0, #0]
1a00065c:	f001 f8d6 	bl	1a00180c <xQueueGenericSend>
							break;
1a000660:	e76c      	b.n	1a00053c <commandProcessingTask+0x34>
							microSteps = RESOLUTION_HALF_STEP;
1a000662:	a904      	add	r1, sp, #16
1a000664:	2301      	movs	r3, #1
1a000666:	f801 3d06 	strb.w	r3, [r1, #-6]!
							xQueueSend(stepperMotorMicroStepsQueue, &microSteps,
1a00066a:	2300      	movs	r3, #0
1a00066c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000670:	485e      	ldr	r0, [pc, #376]	; (1a0007ec <commandProcessingTask+0x2e4>)
1a000672:	6800      	ldr	r0, [r0, #0]
1a000674:	f001 f8ca 	bl	1a00180c <xQueueGenericSend>
							break;
1a000678:	e760      	b.n	1a00053c <commandProcessingTask+0x34>
							switch (*(pCommandToProcess + 4)) {
1a00067a:	7903      	ldrb	r3, [r0, #4]
1a00067c:	2b34      	cmp	r3, #52	; 0x34
1a00067e:	d00e      	beq.n	1a00069e <commandProcessingTask+0x196>
1a000680:	2b38      	cmp	r3, #56	; 0x38
1a000682:	f47f af5b 	bne.w	1a00053c <commandProcessingTask+0x34>
								microSteps=RESOLUTION_8_STEP;
1a000686:	a904      	add	r1, sp, #16
1a000688:	2303      	movs	r3, #3
1a00068a:	f801 3d06 	strb.w	r3, [r1, #-6]!
								xQueueSend(stepperMotorMicroStepsQueue, &microSteps,
1a00068e:	2300      	movs	r3, #0
1a000690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000694:	4855      	ldr	r0, [pc, #340]	; (1a0007ec <commandProcessingTask+0x2e4>)
1a000696:	6800      	ldr	r0, [r0, #0]
1a000698:	f001 f8b8 	bl	1a00180c <xQueueGenericSend>
								break;
1a00069c:	e74e      	b.n	1a00053c <commandProcessingTask+0x34>
								microSteps=RESOLUTION_4_STEP;
1a00069e:	a904      	add	r1, sp, #16
1a0006a0:	2302      	movs	r3, #2
1a0006a2:	f801 3d06 	strb.w	r3, [r1, #-6]!
								xQueueSend(stepperMotorMicroStepsQueue, &microSteps,
1a0006a6:	2300      	movs	r3, #0
1a0006a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0006ac:	484f      	ldr	r0, [pc, #316]	; (1a0007ec <commandProcessingTask+0x2e4>)
1a0006ae:	6800      	ldr	r0, [r0, #0]
1a0006b0:	f001 f8ac 	bl	1a00180c <xQueueGenericSend>
								break;
1a0006b4:	e742      	b.n	1a00053c <commandProcessingTask+0x34>
							if (*(pCommandToProcess + 4) == '6') {
1a0006b6:	7903      	ldrb	r3, [r0, #4]
1a0006b8:	2b36      	cmp	r3, #54	; 0x36
1a0006ba:	f47f af3f 	bne.w	1a00053c <commandProcessingTask+0x34>
								microSteps=RESOLUTION_16_STEP;
1a0006be:	a904      	add	r1, sp, #16
1a0006c0:	2304      	movs	r3, #4
1a0006c2:	f801 3d06 	strb.w	r3, [r1, #-6]!
								xQueueSend(stepperMotorMicroStepsQueue, &microSteps,
1a0006c6:	2300      	movs	r3, #0
1a0006c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0006cc:	4847      	ldr	r0, [pc, #284]	; (1a0007ec <commandProcessingTask+0x2e4>)
1a0006ce:	6800      	ldr	r0, [r0, #0]
1a0006d0:	f001 f89c 	bl	1a00180c <xQueueGenericSend>
1a0006d4:	e732      	b.n	1a00053c <commandProcessingTask+0x34>
							if (*(pCommandToProcess + 4) == '2') {
1a0006d6:	7903      	ldrb	r3, [r0, #4]
1a0006d8:	2b32      	cmp	r3, #50	; 0x32
1a0006da:	f47f af2f 	bne.w	1a00053c <commandProcessingTask+0x34>
								microSteps = RESOLUTION_32_STEP;
1a0006de:	a904      	add	r1, sp, #16
1a0006e0:	2305      	movs	r3, #5
1a0006e2:	f801 3d06 	strb.w	r3, [r1, #-6]!
								xQueueSend(stepperMotorMicroStepsQueue, &microSteps,
1a0006e6:	2300      	movs	r3, #0
1a0006e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0006ec:	483f      	ldr	r0, [pc, #252]	; (1a0007ec <commandProcessingTask+0x2e4>)
1a0006ee:	6800      	ldr	r0, [r0, #0]
1a0006f0:	f001 f88c 	bl	1a00180c <xQueueGenericSend>
1a0006f4:	e722      	b.n	1a00053c <commandProcessingTask+0x34>
							switch(*(pCommandToProcess + 2)){
1a0006f6:	7883      	ldrb	r3, [r0, #2]
1a0006f8:	2b41      	cmp	r3, #65	; 0x41
1a0006fa:	d00d      	beq.n	1a000718 <commandProcessingTask+0x210>
1a0006fc:	2b48      	cmp	r3, #72	; 0x48
1a0006fe:	f47f af1d 	bne.w	1a00053c <commandProcessingTask+0x34>
								directionMotor = STEPPER_RIGHT_OPEN;
1a000702:	2300      	movs	r3, #0
1a000704:	a904      	add	r1, sp, #16
1a000706:	f801 3d07 	strb.w	r3, [r1, #-7]!
								xQueueSend(stepperMotorDirectionQueue, &directionMotor,portMAX_DELAY);
1a00070a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00070e:	4838      	ldr	r0, [pc, #224]	; (1a0007f0 <commandProcessingTask+0x2e8>)
1a000710:	6800      	ldr	r0, [r0, #0]
1a000712:	f001 f87b 	bl	1a00180c <xQueueGenericSend>
								break;
1a000716:	e711      	b.n	1a00053c <commandProcessingTask+0x34>
								directionMotor = STEPPER_LEFT_CLOSE;
1a000718:	a904      	add	r1, sp, #16
1a00071a:	2301      	movs	r3, #1
1a00071c:	f801 3d07 	strb.w	r3, [r1, #-7]!
								xQueueSend(stepperMotorDirectionQueue, &directionMotor,portMAX_DELAY);
1a000720:	2300      	movs	r3, #0
1a000722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000726:	4832      	ldr	r0, [pc, #200]	; (1a0007f0 <commandProcessingTask+0x2e8>)
1a000728:	6800      	ldr	r0, [r0, #0]
1a00072a:	f001 f86f 	bl	1a00180c <xQueueGenericSend>
								break;
1a00072e:	e705      	b.n	1a00053c <commandProcessingTask+0x34>
							i++;
1a000730:	3201      	adds	r2, #1
1a000732:	b2d2      	uxtb	r2, r2
						while(*(pCommandToProcess + i)!='\0'){
1a000734:	5c83      	ldrb	r3, [r0, r2]
1a000736:	b143      	cbz	r3, 1a00074a <commandProcessingTask+0x242>
							if('0'<=*(pCommandToProcess + i) && '9'>=*(pCommandToProcess + i)){
1a000738:	3b30      	subs	r3, #48	; 0x30
1a00073a:	b2db      	uxtb	r3, r3
1a00073c:	2b09      	cmp	r3, #9
1a00073e:	d9f7      	bls.n	1a000730 <commandProcessingTask+0x228>
								validCommand=FALSE;
1a000740:	2100      	movs	r1, #0
1a000742:	e7f5      	b.n	1a000730 <commandProcessingTask+0x228>
						validCommand=TRUE;
1a000744:	2101      	movs	r1, #1
						i=2;
1a000746:	2202      	movs	r2, #2
1a000748:	e7f4      	b.n	1a000734 <commandProcessingTask+0x22c>
						if(validCommand==FALSE){
1a00074a:	b919      	cbnz	r1, 1a000754 <commandProcessingTask+0x24c>
							printf("Comando Invalido.....\n");
1a00074c:	4829      	ldr	r0, [pc, #164]	; (1a0007f4 <commandProcessingTask+0x2ec>)
1a00074e:	f005 fdcb 	bl	1a0062e8 <puts>
1a000752:	e6f3      	b.n	1a00053c <commandProcessingTask+0x34>
							numberOfSteps = commandProcessingConverterCaracterToDecimal((pCommandToProcess + 2),4);
1a000754:	2104      	movs	r1, #4
1a000756:	3002      	adds	r0, #2
1a000758:	f7ff febe 	bl	1a0004d8 <commandProcessingConverterCaracterToDecimal>
1a00075c:	4601      	mov	r1, r0
1a00075e:	ac04      	add	r4, sp, #16
1a000760:	f824 0d0a 	strh.w	r0, [r4, #-10]!
							printf("numero de pasos:%d\n",numberOfSteps);
1a000764:	4824      	ldr	r0, [pc, #144]	; (1a0007f8 <commandProcessingTask+0x2f0>)
1a000766:	f005 fd5d 	bl	1a006224 <printf>
							xQueueSend(stepperMotorPulseQueue, &numberOfSteps,portMAX_DELAY);
1a00076a:	2300      	movs	r3, #0
1a00076c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000770:	4621      	mov	r1, r4
1a000772:	4822      	ldr	r0, [pc, #136]	; (1a0007fc <commandProcessingTask+0x2f4>)
1a000774:	6800      	ldr	r0, [r0, #0]
1a000776:	f001 f849 	bl	1a00180c <xQueueGenericSend>
1a00077a:	e6df      	b.n	1a00053c <commandProcessingTask+0x34>
			case 'S': if(*(pCommandToProcess + 1)=='P'){
1a00077c:	7843      	ldrb	r3, [r0, #1]
1a00077e:	2b50      	cmp	r3, #80	; 0x50
1a000780:	f47f aedc 	bne.w	1a00053c <commandProcessingTask+0x34>
						sp = commandProcessingConverterCaracterToDecimal((pCommandToProcess + 2),3);
1a000784:	2103      	movs	r1, #3
1a000786:	3002      	adds	r0, #2
1a000788:	f7ff fea6 	bl	1a0004d8 <commandProcessingConverterCaracterToDecimal>
1a00078c:	4604      	mov	r4, r0
						taskENTER_CRITICAL();
1a00078e:	f002 fad9 	bl	1a002d44 <vPortEnterCritical>
						printf("Set Point:%d\n",sp);
1a000792:	4621      	mov	r1, r4
1a000794:	481a      	ldr	r0, [pc, #104]	; (1a000800 <commandProcessingTask+0x2f8>)
1a000796:	f005 fd45 	bl	1a006224 <printf>
						taskEXIT_CRITICAL();
1a00079a:	f002 faf5 	bl	1a002d88 <vPortExitCritical>
						switch(sp){
1a00079e:	2c32      	cmp	r4, #50	; 0x32
1a0007a0:	d015      	beq.n	1a0007ce <commandProcessingTask+0x2c6>
1a0007a2:	d807      	bhi.n	1a0007b4 <commandProcessingTask+0x2ac>
1a0007a4:	b17c      	cbz	r4, 1a0007c6 <commandProcessingTask+0x2be>
1a0007a6:	2c19      	cmp	r4, #25
1a0007a8:	f47f aec8 	bne.w	1a00053c <commandProcessingTask+0x34>
									case 25: 	pid.setPoint = 0.277750;
1a0007ac:	4b15      	ldr	r3, [pc, #84]	; (1a000804 <commandProcessingTask+0x2fc>)
1a0007ae:	4a16      	ldr	r2, [pc, #88]	; (1a000808 <commandProcessingTask+0x300>)
1a0007b0:	625a      	str	r2, [r3, #36]	; 0x24
									break;
1a0007b2:	e6c3      	b.n	1a00053c <commandProcessingTask+0x34>
						switch(sp){
1a0007b4:	2c4b      	cmp	r4, #75	; 0x4b
1a0007b6:	d00e      	beq.n	1a0007d6 <commandProcessingTask+0x2ce>
1a0007b8:	2c64      	cmp	r4, #100	; 0x64
1a0007ba:	f47f aebf 	bne.w	1a00053c <commandProcessingTask+0x34>
									case 100: 	pid.setPoint = 0.97100;
1a0007be:	4b11      	ldr	r3, [pc, #68]	; (1a000804 <commandProcessingTask+0x2fc>)
1a0007c0:	4a12      	ldr	r2, [pc, #72]	; (1a00080c <commandProcessingTask+0x304>)
1a0007c2:	625a      	str	r2, [r3, #36]	; 0x24
									break;
1a0007c4:	e6ba      	b.n	1a00053c <commandProcessingTask+0x34>
									case 0: 	pid.setPoint = 0.0000000;
1a0007c6:	4b0f      	ldr	r3, [pc, #60]	; (1a000804 <commandProcessingTask+0x2fc>)
1a0007c8:	2200      	movs	r2, #0
1a0007ca:	625a      	str	r2, [r3, #36]	; 0x24
									break;
1a0007cc:	e6b6      	b.n	1a00053c <commandProcessingTask+0x34>
									case 50: 	pid.setPoint = 0.43550;
1a0007ce:	4b0d      	ldr	r3, [pc, #52]	; (1a000804 <commandProcessingTask+0x2fc>)
1a0007d0:	4a0f      	ldr	r2, [pc, #60]	; (1a000810 <commandProcessingTask+0x308>)
1a0007d2:	625a      	str	r2, [r3, #36]	; 0x24
									break;
1a0007d4:	e6b2      	b.n	1a00053c <commandProcessingTask+0x34>
									case 75: 	pid.setPoint = 0.653250;
1a0007d6:	4b0b      	ldr	r3, [pc, #44]	; (1a000804 <commandProcessingTask+0x2fc>)
1a0007d8:	4a0e      	ldr	r2, [pc, #56]	; (1a000814 <commandProcessingTask+0x30c>)
1a0007da:	625a      	str	r2, [r3, #36]	; 0x24
									break;
1a0007dc:	e6ae      	b.n	1a00053c <commandProcessingTask+0x34>
1a0007de:	bf00      	nop
1a0007e0:	1a00a2b8 	.word	0x1a00a2b8
1a0007e4:	10007968 	.word	0x10007968
1a0007e8:	100079a4 	.word	0x100079a4
1a0007ec:	100079ac 	.word	0x100079ac
1a0007f0:	10007998 	.word	0x10007998
1a0007f4:	1a00a2cc 	.word	0x1a00a2cc
1a0007f8:	1a00a2e4 	.word	0x1a00a2e4
1a0007fc:	1000796c 	.word	0x1000796c
1a000800:	1a00a2f8 	.word	0x1a00a2f8
1a000804:	10007930 	.word	0x10007930
1a000808:	3e8e353f 	.word	0x3e8e353f
1a00080c:	3f789375 	.word	0x3f789375
1a000810:	3edef9db 	.word	0x3edef9db
1a000814:	3f273b64 	.word	0x3f273b64

1a000818 <main>:

/*==================[funcion principal]======================================*/

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main(void)
{
1a000818:	b500      	push	{lr}
1a00081a:	b085      	sub	sp, #20
   // ---------- CONFIGURACIONES ------------------------------
   // Inicializar y configurar la plataforma
   boardConfig();
1a00081c:	f003 ff68 	bl	1a0046f0 <boardInit>
   serialPortForInterruptInit();
1a000820:	f7ff fe0c 	bl	1a00043c <serialPortForInterruptInit>
   // inicializo el motor PaP
   stepperMotorInit(&stepper,400,GPIO2,GPIO1,GPIO0,GPIO3,GPIO4,GPIO5,0.9 );
1a000824:	230d      	movs	r3, #13
1a000826:	9303      	str	r3, [sp, #12]
1a000828:	231e      	movs	r3, #30
1a00082a:	9302      	str	r3, [sp, #8]
1a00082c:	230e      	movs	r3, #14
1a00082e:	9301      	str	r3, [sp, #4]
1a000830:	2320      	movs	r3, #32
1a000832:	9300      	str	r3, [sp, #0]
1a000834:	ed9f 0a45 	vldr	s0, [pc, #276]	; 1a00094c <main+0x134>
1a000838:	230f      	movs	r3, #15
1a00083a:	221f      	movs	r2, #31
1a00083c:	f44f 71c8 	mov.w	r1, #400	; 0x190
1a000840:	4843      	ldr	r0, [pc, #268]	; (1a000950 <main+0x138>)
1a000842:	f000 f9a7 	bl	1a000b94 <stepperMotorInit>
   startPid(&pid,0, 0,0.00000, 0.00000,0.00000,0.00000,1.20000,0.00000,1.00000, 0.006666, 0.00000 );
1a000846:	ed9f 0a43 	vldr	s0, [pc, #268]	; 1a000954 <main+0x13c>
1a00084a:	eeb0 4a40 	vmov.f32	s8, s0
1a00084e:	eddf 3a42 	vldr	s7, [pc, #264]	; 1a000958 <main+0x140>
1a000852:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
1a000856:	eef0 2a40 	vmov.f32	s5, s0
1a00085a:	ed9f 2a40 	vldr	s4, [pc, #256]	; 1a00095c <main+0x144>
1a00085e:	eef0 1a40 	vmov.f32	s3, s0
1a000862:	eeb0 1a40 	vmov.f32	s2, s0
1a000866:	eef0 0a40 	vmov.f32	s1, s0
1a00086a:	2200      	movs	r2, #0
1a00086c:	4611      	mov	r1, r2
1a00086e:	483c      	ldr	r0, [pc, #240]	; (1a000960 <main+0x148>)
1a000870:	f7ff fd58 	bl	1a000324 <startPid>
   adcStart();
1a000874:	f000 fb0c 	bl	1a000e90 <adcStart>
   printf( "Trabajo Final con freeRTOS y sAPI.\n" );
1a000878:	483a      	ldr	r0, [pc, #232]	; (1a000964 <main+0x14c>)
1a00087a:	f005 fd35 	bl	1a0062e8 <puts>

   serialPortQueueCreate();
1a00087e:	f7ff fdcb 	bl	1a000418 <serialPortQueueCreate>
   stepperMotorQueueCreate();
1a000882:	f000 f907 	bl	1a000a94 <stepperMotorQueueCreate>
   commandProcessingQueueCreate();
1a000886:	f7ff fe15 	bl	1a0004b4 <commandProcessingQueueCreate>
   PdiCreateQueue();
1a00088a:	f7ff fd39 	bl	1a000300 <PdiCreateQueue>
   stepperMotorTimerInit();
1a00088e:	f000 f94f 	bl	1a000b30 <stepperMotorTimerInit>
   // Crear tarea en freeRTOS
   xTaskCreate(
1a000892:	2400      	movs	r4, #0
1a000894:	9401      	str	r4, [sp, #4]
1a000896:	2601      	movs	r6, #1
1a000898:	9600      	str	r6, [sp, #0]
1a00089a:	4623      	mov	r3, r4
1a00089c:	22b4      	movs	r2, #180	; 0xb4
1a00089e:	4932      	ldr	r1, [pc, #200]	; (1a000968 <main+0x150>)
1a0008a0:	4832      	ldr	r0, [pc, #200]	; (1a00096c <main+0x154>)
1a0008a2:	f001 fc18 	bl	1a0020d6 <xTaskCreate>
      configMINIMAL_STACK_SIZE*2, // Cantidad de stack de la tarea
      0,                          // Parametros de tarea
      tskIDLE_PRIORITY+1,         // Prioridad de la tarea
      0                           // Puntero a la tarea creada en el sistema
   );
   xTaskCreate(
1a0008a6:	9401      	str	r4, [sp, #4]
1a0008a8:	2503      	movs	r5, #3
1a0008aa:	9500      	str	r5, [sp, #0]
1a0008ac:	4623      	mov	r3, r4
1a0008ae:	22b4      	movs	r2, #180	; 0xb4
1a0008b0:	492f      	ldr	r1, [pc, #188]	; (1a000970 <main+0x158>)
1a0008b2:	4830      	ldr	r0, [pc, #192]	; (1a000974 <main+0x15c>)
1a0008b4:	f001 fc0f 	bl	1a0020d6 <xTaskCreate>
         configMINIMAL_STACK_SIZE*2, // Cantidad de stack de la tarea
         0,                          // Parametros de tarea
         tskIDLE_PRIORITY+3,         // Prioridad de la tarea
         0                           // Puntero a la tarea creada en el sistema
      );
   xTaskCreate(
1a0008b8:	9401      	str	r4, [sp, #4]
1a0008ba:	9500      	str	r5, [sp, #0]
1a0008bc:	4623      	mov	r3, r4
1a0008be:	f44f 7207 	mov.w	r2, #540	; 0x21c
1a0008c2:	492d      	ldr	r1, [pc, #180]	; (1a000978 <main+0x160>)
1a0008c4:	482d      	ldr	r0, [pc, #180]	; (1a00097c <main+0x164>)
1a0008c6:	f001 fc06 	bl	1a0020d6 <xTaskCreate>
            0,                          // Parametros de tarea
            tskIDLE_PRIORITY+3,         // Prioridad de la tarea
            0                           // Puntero a la tarea creada en el sistema
         );

   xTaskCreate(
1a0008ca:	9401      	str	r4, [sp, #4]
1a0008cc:	9500      	str	r5, [sp, #0]
1a0008ce:	4623      	mov	r3, r4
1a0008d0:	22b4      	movs	r2, #180	; 0xb4
1a0008d2:	492b      	ldr	r1, [pc, #172]	; (1a000980 <main+0x168>)
1a0008d4:	482b      	ldr	r0, [pc, #172]	; (1a000984 <main+0x16c>)
1a0008d6:	f001 fbfe 	bl	1a0020d6 <xTaskCreate>
               0,                          // Parametros de tarea
               tskIDLE_PRIORITY+3,         // Prioridad de la tarea
               0                           // Puntero a la tarea creada en el sistema
            );

   xTaskCreate(
1a0008da:	9401      	str	r4, [sp, #4]
1a0008dc:	9500      	str	r5, [sp, #0]
1a0008de:	4623      	mov	r3, r4
1a0008e0:	f44f 7287 	mov.w	r2, #270	; 0x10e
1a0008e4:	4928      	ldr	r1, [pc, #160]	; (1a000988 <main+0x170>)
1a0008e6:	4829      	ldr	r0, [pc, #164]	; (1a00098c <main+0x174>)
1a0008e8:	f001 fbf5 	bl	1a0020d6 <xTaskCreate>
                  configMINIMAL_STACK_SIZE*3, // Cantidad de stack de la tarea
                  0,                          // Parametros de tarea
                  tskIDLE_PRIORITY+3,         // Prioridad de la tarea
                  0                           // Puntero a la tarea creada en el sistema
               );
   xTaskCreate(
1a0008ec:	9401      	str	r4, [sp, #4]
1a0008ee:	9500      	str	r5, [sp, #0]
1a0008f0:	4623      	mov	r3, r4
1a0008f2:	22b4      	movs	r2, #180	; 0xb4
1a0008f4:	4926      	ldr	r1, [pc, #152]	; (1a000990 <main+0x178>)
1a0008f6:	4827      	ldr	r0, [pc, #156]	; (1a000994 <main+0x17c>)
1a0008f8:	f001 fbed 	bl	1a0020d6 <xTaskCreate>
                  configMINIMAL_STACK_SIZE*2, // Cantidad de stack de la tarea
                  0,                          // Parametros de tarea
                  tskIDLE_PRIORITY+3,         // Prioridad de la tarea
                  0                           // Puntero a la tarea creada en el sistema
               );
   xTaskCreate(
1a0008fc:	9401      	str	r4, [sp, #4]
1a0008fe:	2504      	movs	r5, #4
1a000900:	9500      	str	r5, [sp, #0]
1a000902:	4623      	mov	r3, r4
1a000904:	f44f 7287 	mov.w	r2, #270	; 0x10e
1a000908:	4923      	ldr	r1, [pc, #140]	; (1a000998 <main+0x180>)
1a00090a:	4824      	ldr	r0, [pc, #144]	; (1a00099c <main+0x184>)
1a00090c:	f001 fbe3 	bl	1a0020d6 <xTaskCreate>
                     0,                          // Parametros de tarea
                     tskIDLE_PRIORITY+4,         // Prioridad de la tarea
                     0                           // Puntero a la tarea creada en el sistema
                  );

   xTaskCreate(
1a000910:	9401      	str	r4, [sp, #4]
1a000912:	9500      	str	r5, [sp, #0]
1a000914:	4623      	mov	r3, r4
1a000916:	22b4      	movs	r2, #180	; 0xb4
1a000918:	4921      	ldr	r1, [pc, #132]	; (1a0009a0 <main+0x188>)
1a00091a:	4822      	ldr	r0, [pc, #136]	; (1a0009a4 <main+0x18c>)
1a00091c:	f001 fbdb 	bl	1a0020d6 <xTaskCreate>
                        0,                          // Parametros de tarea
                        tskIDLE_PRIORITY+4,         // Prioridad de la tarea
                        0                           // Puntero a la tarea creada en el sistema
                     );

   xTaskCreate(
1a000920:	9401      	str	r4, [sp, #4]
1a000922:	9500      	str	r5, [sp, #0]
1a000924:	4623      	mov	r3, r4
1a000926:	f44f 72b4 	mov.w	r2, #360	; 0x168
1a00092a:	491f      	ldr	r1, [pc, #124]	; (1a0009a8 <main+0x190>)
1a00092c:	481f      	ldr	r0, [pc, #124]	; (1a0009ac <main+0x194>)
1a00092e:	f001 fbd2 	bl	1a0020d6 <xTaskCreate>
                           0                           // Puntero a la tarea creada en el sistema
                        );



   xTaskCreate(
1a000932:	9401      	str	r4, [sp, #4]
1a000934:	9600      	str	r6, [sp, #0]
1a000936:	4623      	mov	r3, r4
1a000938:	f44f 72b4 	mov.w	r2, #360	; 0x168
1a00093c:	491c      	ldr	r1, [pc, #112]	; (1a0009b0 <main+0x198>)
1a00093e:	481d      	ldr	r0, [pc, #116]	; (1a0009b4 <main+0x19c>)
1a000940:	f001 fbc9 	bl	1a0020d6 <xTaskCreate>
                        0                           // Puntero a la tarea creada en el sistema
                     );


   //Iniciar scheduler
   vTaskStartScheduler();
1a000944:	f001 fbfa 	bl	1a00213c <vTaskStartScheduler>
1a000948:	e7fe      	b.n	1a000948 <main+0x130>
1a00094a:	bf00      	nop
1a00094c:	3f666666 	.word	0x3f666666
1a000950:	10007974 	.word	0x10007974
1a000954:	00000000 	.word	0x00000000
1a000958:	3bda6e76 	.word	0x3bda6e76
1a00095c:	3f99999a 	.word	0x3f99999a
1a000960:	10007930 	.word	0x10007930
1a000964:	1a00a308 	.word	0x1a00a308
1a000968:	1a00a32c 	.word	0x1a00a32c
1a00096c:	1a0009b9 	.word	0x1a0009b9
1a000970:	1a00a338 	.word	0x1a00a338
1a000974:	1a000465 	.word	0x1a000465
1a000978:	1a00a358 	.word	0x1a00a358
1a00097c:	1a000509 	.word	0x1a000509
1a000980:	1a00a380 	.word	0x1a00a380
1a000984:	1a000bf9 	.word	0x1a000bf9
1a000988:	1a00a3a8 	.word	0x1a00a3a8
1a00098c:	1a000dc9 	.word	0x1a000dc9
1a000990:	1a00a3c8 	.word	0x1a00a3c8
1a000994:	1a000c61 	.word	0x1a000c61
1a000998:	1a00a400 	.word	0x1a00a400
1a00099c:	1a000cc9 	.word	0x1a000cc9
1a0009a0:	1a00a428 	.word	0x1a00a428
1a0009a4:	1a000d41 	.word	0x1a000d41
1a0009a8:	1a00a458 	.word	0x1a00a458
1a0009ac:	1a000351 	.word	0x1a000351
1a0009b0:	1a00a478 	.word	0x1a00a478
1a0009b4:	1a000ea1 	.word	0x1a000ea1

1a0009b8 <heartBeat>:
#include "bibliotecasfreeRTOS.h"


// Implementacion de funcion de la tarea heartbeat
void heartBeat( void* taskParmPtr )
{
1a0009b8:	b500      	push	{lr}
1a0009ba:	b083      	sub	sp, #12
   // ---------- CONFIGURACIONES ------------------------------
   // Tarea periodica cada 500 ms
   portTickType xPeriodicity =  500 / portTICK_RATE_MS;
   portTickType xLastWakeTime = xTaskGetTickCount();
1a0009bc:	f001 fc10 	bl	1a0021e0 <xTaskGetTickCount>
1a0009c0:	9001      	str	r0, [sp, #4]

   // ---------- REPETIR POR SIEMPRE --------------------------
   while(TRUE) {
      gpioToggle( LEDB );
1a0009c2:	202a      	movs	r0, #42	; 0x2a
1a0009c4:	f003 fe7b 	bl	1a0046be <gpioToggle>

      // Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
      vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a0009c8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
1a0009cc:	a801      	add	r0, sp, #4
1a0009ce:	f001 fd13 	bl	1a0023f8 <vTaskDelayUntil>
1a0009d2:	e7f6      	b.n	1a0009c2 <heartBeat+0xa>

1a0009d4 <stepperMotorAutoReloadTimerServo>:
		}
	}

}

static void stepperMotorAutoReloadTimerServo(TimerHandle_t xTimer) {
1a0009d4:	b500      	push	{lr}
1a0009d6:	b083      	sub	sp, #12
	static bool_t flagDutyCycle = TRUE;

	if (stepper.flagPulse == TRUE) {
1a0009d8:	4b12      	ldr	r3, [pc, #72]	; (1a000a24 <stepperMotorAutoReloadTimerServo+0x50>)
1a0009da:	7d5b      	ldrb	r3, [r3, #21]
1a0009dc:	2b01      	cmp	r3, #1
1a0009de:	d117      	bne.n	1a000a10 <stepperMotorAutoReloadTimerServo+0x3c>
		if (flagDutyCycle == TRUE) {
1a0009e0:	4b11      	ldr	r3, [pc, #68]	; (1a000a28 <stepperMotorAutoReloadTimerServo+0x54>)
1a0009e2:	781b      	ldrb	r3, [r3, #0]
1a0009e4:	2b01      	cmp	r3, #1
1a0009e6:	d009      	beq.n	1a0009fc <stepperMotorAutoReloadTimerServo+0x28>
			gpioWrite(stepper.pulsePin, ON);
			flagDutyCycle = FALSE;
		} else {
			gpioWrite(stepper.pulsePin, OFF);
1a0009e8:	2100      	movs	r1, #0
1a0009ea:	4b0e      	ldr	r3, [pc, #56]	; (1a000a24 <stepperMotorAutoReloadTimerServo+0x50>)
1a0009ec:	f993 000c 	ldrsb.w	r0, [r3, #12]
1a0009f0:	f003 fdfc 	bl	1a0045ec <gpioWrite>
			flagDutyCycle = TRUE;
1a0009f4:	4b0c      	ldr	r3, [pc, #48]	; (1a000a28 <stepperMotorAutoReloadTimerServo+0x54>)
1a0009f6:	2201      	movs	r2, #1
1a0009f8:	701a      	strb	r2, [r3, #0]
1a0009fa:	e00f      	b.n	1a000a1c <stepperMotorAutoReloadTimerServo+0x48>
			gpioWrite(stepper.pulsePin, ON);
1a0009fc:	2101      	movs	r1, #1
1a0009fe:	4b09      	ldr	r3, [pc, #36]	; (1a000a24 <stepperMotorAutoReloadTimerServo+0x50>)
1a000a00:	f993 000c 	ldrsb.w	r0, [r3, #12]
1a000a04:	f003 fdf2 	bl	1a0045ec <gpioWrite>
			flagDutyCycle = FALSE;
1a000a08:	4b07      	ldr	r3, [pc, #28]	; (1a000a28 <stepperMotorAutoReloadTimerServo+0x54>)
1a000a0a:	2200      	movs	r2, #0
1a000a0c:	701a      	strb	r2, [r3, #0]
1a000a0e:	e005      	b.n	1a000a1c <stepperMotorAutoReloadTimerServo+0x48>
		}

	}else
	{
		xTimerStop(xTimer,0);
1a000a10:	2200      	movs	r2, #0
1a000a12:	9200      	str	r2, [sp, #0]
1a000a14:	4613      	mov	r3, r2
1a000a16:	2103      	movs	r1, #3
1a000a18:	f001 ffb2 	bl	1a002980 <xTimerGenericCommand>
	}

}
1a000a1c:	b003      	add	sp, #12
1a000a1e:	f85d fb04 	ldr.w	pc, [sp], #4
1a000a22:	bf00      	nop
1a000a24:	10007974 	.word	0x10007974
1a000a28:	10000001 	.word	0x10000001

1a000a2c <stepperMotorAutoReloadTimer>:
static void stepperMotorAutoReloadTimer(TimerHandle_t xTimer){
1a000a2c:	b510      	push	{r4, lr}
1a000a2e:	b082      	sub	sp, #8
	if(numOfStepes>0){
1a000a30:	4b15      	ldr	r3, [pc, #84]	; (1a000a88 <stepperMotorAutoReloadTimer+0x5c>)
1a000a32:	881b      	ldrh	r3, [r3, #0]
1a000a34:	b1e3      	cbz	r3, 1a000a70 <stepperMotorAutoReloadTimer+0x44>
		if(flag==TRUE){
1a000a36:	4b15      	ldr	r3, [pc, #84]	; (1a000a8c <stepperMotorAutoReloadTimer+0x60>)
1a000a38:	781b      	ldrb	r3, [r3, #0]
1a000a3a:	2b01      	cmp	r3, #1
1a000a3c:	d00e      	beq.n	1a000a5c <stepperMotorAutoReloadTimer+0x30>
			gpioWrite(stepper.pulsePin,OFF);
1a000a3e:	2100      	movs	r1, #0
1a000a40:	4b13      	ldr	r3, [pc, #76]	; (1a000a90 <stepperMotorAutoReloadTimer+0x64>)
1a000a42:	f993 000c 	ldrsb.w	r0, [r3, #12]
1a000a46:	f003 fdd1 	bl	1a0045ec <gpioWrite>
			flag=TRUE;
1a000a4a:	4b10      	ldr	r3, [pc, #64]	; (1a000a8c <stepperMotorAutoReloadTimer+0x60>)
1a000a4c:	2201      	movs	r2, #1
1a000a4e:	701a      	strb	r2, [r3, #0]
			numOfStepes--;
1a000a50:	4a0d      	ldr	r2, [pc, #52]	; (1a000a88 <stepperMotorAutoReloadTimer+0x5c>)
1a000a52:	8813      	ldrh	r3, [r2, #0]
1a000a54:	3b01      	subs	r3, #1
1a000a56:	8013      	strh	r3, [r2, #0]
}
1a000a58:	b002      	add	sp, #8
1a000a5a:	bd10      	pop	{r4, pc}
			gpioWrite(stepper.pulsePin,ON);
1a000a5c:	2101      	movs	r1, #1
1a000a5e:	4b0c      	ldr	r3, [pc, #48]	; (1a000a90 <stepperMotorAutoReloadTimer+0x64>)
1a000a60:	f993 000c 	ldrsb.w	r0, [r3, #12]
1a000a64:	f003 fdc2 	bl	1a0045ec <gpioWrite>
			flag=FALSE;
1a000a68:	4b08      	ldr	r3, [pc, #32]	; (1a000a8c <stepperMotorAutoReloadTimer+0x60>)
1a000a6a:	2200      	movs	r2, #0
1a000a6c:	701a      	strb	r2, [r3, #0]
1a000a6e:	e7f3      	b.n	1a000a58 <stepperMotorAutoReloadTimer+0x2c>
		xTimerStop(xTimer,0);
1a000a70:	2400      	movs	r4, #0
1a000a72:	9400      	str	r4, [sp, #0]
1a000a74:	4623      	mov	r3, r4
1a000a76:	4622      	mov	r2, r4
1a000a78:	2103      	movs	r1, #3
1a000a7a:	f001 ff81 	bl	1a002980 <xTimerGenericCommand>
		gpioWrite( LED1,OFF );
1a000a7e:	4621      	mov	r1, r4
1a000a80:	202b      	movs	r0, #43	; 0x2b
1a000a82:	f003 fdb3 	bl	1a0045ec <gpioWrite>
}
1a000a86:	e7e7      	b.n	1a000a58 <stepperMotorAutoReloadTimer+0x2c>
1a000a88:	100079a0 	.word	0x100079a0
1a000a8c:	10000000 	.word	0x10000000
1a000a90:	10007974 	.word	0x10007974

1a000a94 <stepperMotorQueueCreate>:
void stepperMotorQueueCreate(void) {
1a000a94:	b508      	push	{r3, lr}
	stepperMotorEnableQueue = xQueueCreate(SIZEQUEUEMOTORENABLE,
1a000a96:	2200      	movs	r2, #0
1a000a98:	2101      	movs	r1, #1
1a000a9a:	2003      	movs	r0, #3
1a000a9c:	f000 fe8f 	bl	1a0017be <xQueueGenericCreate>
1a000aa0:	4b1e      	ldr	r3, [pc, #120]	; (1a000b1c <stepperMotorQueueCreate+0x88>)
1a000aa2:	6018      	str	r0, [r3, #0]
	if (stepperMotorEnableQueue == NULL) {/*Si devolvio NULL es muy probable que no haya suficiente memoria para crear la cola*/
1a000aa4:	b160      	cbz	r0, 1a000ac0 <stepperMotorQueueCreate+0x2c>
	stepperMotorMicroStepsQueue = xQueueCreate(SIZEQUEUEMICROSTEPS,
1a000aa6:	2200      	movs	r2, #0
1a000aa8:	2101      	movs	r1, #1
1a000aaa:	2003      	movs	r0, #3
1a000aac:	f000 fe87 	bl	1a0017be <xQueueGenericCreate>
1a000ab0:	4b1b      	ldr	r3, [pc, #108]	; (1a000b20 <stepperMotorQueueCreate+0x8c>)
1a000ab2:	6018      	str	r0, [r3, #0]
	if (stepperMotorMicroStepsQueue == NULL) {/*Si devolvio NULL es muy probable que no haya suficiente memoria para crear la cola*/
1a000ab4:	b948      	cbnz	r0, 1a000aca <stepperMotorQueueCreate+0x36>
		gpioWrite(LED2, ON);
1a000ab6:	2101      	movs	r1, #1
1a000ab8:	202c      	movs	r0, #44	; 0x2c
1a000aba:	f003 fd97 	bl	1a0045ec <gpioWrite>
1a000abe:	e7fe      	b.n	1a000abe <stepperMotorQueueCreate+0x2a>
		gpioWrite(LED2, ON);
1a000ac0:	2101      	movs	r1, #1
1a000ac2:	202c      	movs	r0, #44	; 0x2c
1a000ac4:	f003 fd92 	bl	1a0045ec <gpioWrite>
1a000ac8:	e7fe      	b.n	1a000ac8 <stepperMotorQueueCreate+0x34>
	stepperMotorDirectionQueue = xQueueCreate(SIZEQUEUEDIRECTION,
1a000aca:	2200      	movs	r2, #0
1a000acc:	2101      	movs	r1, #1
1a000ace:	2003      	movs	r0, #3
1a000ad0:	f000 fe75 	bl	1a0017be <xQueueGenericCreate>
1a000ad4:	4b13      	ldr	r3, [pc, #76]	; (1a000b24 <stepperMotorQueueCreate+0x90>)
1a000ad6:	6018      	str	r0, [r3, #0]
	if (stepperMotorDirectionQueue == NULL) {/*Si devolvio NULL es muy probable que no haya suficiente memoria para crear la cola*/
1a000ad8:	b920      	cbnz	r0, 1a000ae4 <stepperMotorQueueCreate+0x50>
		gpioWrite(LED2, ON);
1a000ada:	2101      	movs	r1, #1
1a000adc:	202c      	movs	r0, #44	; 0x2c
1a000ade:	f003 fd85 	bl	1a0045ec <gpioWrite>
1a000ae2:	e7fe      	b.n	1a000ae2 <stepperMotorQueueCreate+0x4e>
		stepperMotorPulseQueue = xQueueCreate(SIZEQUEUEPULSE,
1a000ae4:	2200      	movs	r2, #0
1a000ae6:	2102      	movs	r1, #2
1a000ae8:	2003      	movs	r0, #3
1a000aea:	f000 fe68 	bl	1a0017be <xQueueGenericCreate>
1a000aee:	4b0e      	ldr	r3, [pc, #56]	; (1a000b28 <stepperMotorQueueCreate+0x94>)
1a000af0:	6018      	str	r0, [r3, #0]
		if (stepperMotorPulseQueue == NULL) {/*Si devolvio NULL es muy probable que no haya suficiente memoria para crear la cola*/
1a000af2:	b140      	cbz	r0, 1a000b06 <stepperMotorQueueCreate+0x72>
		 stepperMotorPulseServoQueue = xQueueCreate(SIZEQUEUEPULSESERVO,
1a000af4:	2200      	movs	r2, #0
1a000af6:	2101      	movs	r1, #1
1a000af8:	2005      	movs	r0, #5
1a000afa:	f000 fe60 	bl	1a0017be <xQueueGenericCreate>
1a000afe:	4b0b      	ldr	r3, [pc, #44]	; (1a000b2c <stepperMotorQueueCreate+0x98>)
1a000b00:	6018      	str	r0, [r3, #0]
		   if (stepperMotorPulseServoQueue == NULL) {/*Si devolvio NULL es muy probable que no haya suficiente memoria para crear la cola*/
1a000b02:	b128      	cbz	r0, 1a000b10 <stepperMotorQueueCreate+0x7c>
}
1a000b04:	bd08      	pop	{r3, pc}
			gpioWrite(LED2, ON);
1a000b06:	2101      	movs	r1, #1
1a000b08:	202c      	movs	r0, #44	; 0x2c
1a000b0a:	f003 fd6f 	bl	1a0045ec <gpioWrite>
1a000b0e:	e7fe      	b.n	1a000b0e <stepperMotorQueueCreate+0x7a>
		   			gpioWrite(LED2, ON);
1a000b10:	2101      	movs	r1, #1
1a000b12:	202c      	movs	r0, #44	; 0x2c
1a000b14:	f003 fd6a 	bl	1a0045ec <gpioWrite>
1a000b18:	e7fe      	b.n	1a000b18 <stepperMotorQueueCreate+0x84>
1a000b1a:	bf00      	nop
1a000b1c:	100079a4 	.word	0x100079a4
1a000b20:	100079ac 	.word	0x100079ac
1a000b24:	10007998 	.word	0x10007998
1a000b28:	1000796c 	.word	0x1000796c
1a000b2c:	1000799c 	.word	0x1000799c

1a000b30 <stepperMotorTimerInit>:
void stepperMotorTimerInit(){
1a000b30:	b500      	push	{lr}
1a000b32:	b083      	sub	sp, #12
	xAutoReloadTimer=xTimerCreate("AutoReload", AUTO_RELOAD_TIMER_PERIODO,pdTRUE,0,stepperMotorAutoReloadTimer);
1a000b34:	4b11      	ldr	r3, [pc, #68]	; (1a000b7c <stepperMotorTimerInit+0x4c>)
1a000b36:	9300      	str	r3, [sp, #0]
1a000b38:	2300      	movs	r3, #0
1a000b3a:	2201      	movs	r2, #1
1a000b3c:	2164      	movs	r1, #100	; 0x64
1a000b3e:	4810      	ldr	r0, [pc, #64]	; (1a000b80 <stepperMotorTimerInit+0x50>)
1a000b40:	f001 ff02 	bl	1a002948 <xTimerCreate>
1a000b44:	4b0f      	ldr	r3, [pc, #60]	; (1a000b84 <stepperMotorTimerInit+0x54>)
1a000b46:	6018      	str	r0, [r3, #0]
	if (xAutoReloadTimer== NULL) {/*Si devolvio NULL es porqe no se creo el temporizador*/
1a000b48:	b168      	cbz	r0, 1a000b66 <stepperMotorTimerInit+0x36>
	xAutoReloadTimerServo = xTimerCreate("AutoReloadServo", AUTO_RELOAD_TIMER_PERIODO_SERVO,pdTRUE,0,stepperMotorAutoReloadTimerServo);
1a000b4a:	4b0f      	ldr	r3, [pc, #60]	; (1a000b88 <stepperMotorTimerInit+0x58>)
1a000b4c:	9300      	str	r3, [sp, #0]
1a000b4e:	2300      	movs	r3, #0
1a000b50:	2201      	movs	r2, #1
1a000b52:	2114      	movs	r1, #20
1a000b54:	480d      	ldr	r0, [pc, #52]	; (1a000b8c <stepperMotorTimerInit+0x5c>)
1a000b56:	f001 fef7 	bl	1a002948 <xTimerCreate>
1a000b5a:	4b0d      	ldr	r3, [pc, #52]	; (1a000b90 <stepperMotorTimerInit+0x60>)
1a000b5c:	6018      	str	r0, [r3, #0]
		if (xAutoReloadTimerServo == NULL) {/*Si devolvio NULL es porqe no se creo el temporizador*/
1a000b5e:	b138      	cbz	r0, 1a000b70 <stepperMotorTimerInit+0x40>
}
1a000b60:	b003      	add	sp, #12
1a000b62:	f85d fb04 	ldr.w	pc, [sp], #4
				gpioWrite(LED2, ON);
1a000b66:	2101      	movs	r1, #1
1a000b68:	202c      	movs	r0, #44	; 0x2c
1a000b6a:	f003 fd3f 	bl	1a0045ec <gpioWrite>
1a000b6e:	e7fe      	b.n	1a000b6e <stepperMotorTimerInit+0x3e>
					gpioWrite(LED2, ON);
1a000b70:	2101      	movs	r1, #1
1a000b72:	202c      	movs	r0, #44	; 0x2c
1a000b74:	f003 fd3a 	bl	1a0045ec <gpioWrite>
1a000b78:	e7fe      	b.n	1a000b78 <stepperMotorTimerInit+0x48>
1a000b7a:	bf00      	nop
1a000b7c:	1a000a2d 	.word	0x1a000a2d
1a000b80:	1a00a568 	.word	0x1a00a568
1a000b84:	10007994 	.word	0x10007994
1a000b88:	1a0009d5 	.word	0x1a0009d5
1a000b8c:	1a00a574 	.word	0x1a00a574
1a000b90:	100079a8 	.word	0x100079a8

1a000b94 <stepperMotorInit>:
		gpioMap_t microStepsM1Pin, gpioMap_t microStepsM2Pin, float stepAngle) {
1a000b94:	b510      	push	{r4, lr}
1a000b96:	4604      	mov	r4, r0
	stepper->stepsPerRevolution = stepsPerRevolution;
1a000b98:	6001      	str	r1, [r0, #0]
	stepper->pulsePin = pulsePin;
1a000b9a:	7302      	strb	r2, [r0, #12]
	stepper->directionPin = directionPin;
1a000b9c:	7343      	strb	r3, [r0, #13]
	stepper->enablePin = enablePin;
1a000b9e:	f99d 3008 	ldrsb.w	r3, [sp, #8]
1a000ba2:	7383      	strb	r3, [r0, #14]
	stepper->microStepsM0Pin = microStepsM0Pin;
1a000ba4:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a000ba8:	73c3      	strb	r3, [r0, #15]
	stepper->microStepsM1Pin = microStepsM1Pin;
1a000baa:	f99d 3010 	ldrsb.w	r3, [sp, #16]
1a000bae:	7403      	strb	r3, [r0, #16]
	stepper->microStepsM2Pin = microStepsM2Pin;
1a000bb0:	f99d 3014 	ldrsb.w	r3, [sp, #20]
1a000bb4:	7443      	strb	r3, [r0, #17]
	stepper->stepAngle = stepAngle;
1a000bb6:	ed80 0a07 	vstr	s0, [r0, #28]
	gpioConfig(stepper->pulsePin, GPIO_OUTPUT);
1a000bba:	2101      	movs	r1, #1
1a000bbc:	4610      	mov	r0, r2
1a000bbe:	f003 fc3f 	bl	1a004440 <gpioInit>
	gpioConfig(stepper->directionPin, GPIO_OUTPUT);
1a000bc2:	2101      	movs	r1, #1
1a000bc4:	f994 000d 	ldrsb.w	r0, [r4, #13]
1a000bc8:	f003 fc3a 	bl	1a004440 <gpioInit>
	gpioConfig(stepper->enablePin, GPIO_OUTPUT);
1a000bcc:	2101      	movs	r1, #1
1a000bce:	f994 000e 	ldrsb.w	r0, [r4, #14]
1a000bd2:	f003 fc35 	bl	1a004440 <gpioInit>
	gpioConfig(stepper->microStepsM0Pin, GPIO_OUTPUT);
1a000bd6:	2101      	movs	r1, #1
1a000bd8:	f994 000f 	ldrsb.w	r0, [r4, #15]
1a000bdc:	f003 fc30 	bl	1a004440 <gpioInit>
	gpioConfig(stepper->microStepsM1Pin, GPIO_OUTPUT);
1a000be0:	2101      	movs	r1, #1
1a000be2:	f994 0010 	ldrsb.w	r0, [r4, #16]
1a000be6:	f003 fc2b 	bl	1a004440 <gpioInit>
	gpioConfig(stepper->microStepsM2Pin, GPIO_OUTPUT);
1a000bea:	2101      	movs	r1, #1
1a000bec:	f994 0011 	ldrsb.w	r0, [r4, #17]
1a000bf0:	f003 fc26 	bl	1a004440 <gpioInit>
}
1a000bf4:	bd10      	pop	{r4, pc}
1a000bf6:	Address 0x000000001a000bf6 is out of bounds.


1a000bf8 <stepperMotorEnableTask>:
void stepperMotorEnableTask(void * taskParmPtr) {
1a000bf8:	b500      	push	{lr}
1a000bfa:	b083      	sub	sp, #12
1a000bfc:	e00b      	b.n	1a000c16 <stepperMotorEnableTask+0x1e>
				gpioWrite(stepper.enablePin, FALSE);
1a000bfe:	4c14      	ldr	r4, [pc, #80]	; (1a000c50 <stepperMotorEnableTask+0x58>)
1a000c00:	2100      	movs	r1, #0
1a000c02:	f994 000e 	ldrsb.w	r0, [r4, #14]
1a000c06:	f003 fcf1 	bl	1a0045ec <gpioWrite>
				stepper.isEnable = ena;
1a000c0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000c0e:	74e3      	strb	r3, [r4, #19]
				printf("Motor Deshabilitado\n");
1a000c10:	4810      	ldr	r0, [pc, #64]	; (1a000c54 <stepperMotorEnableTask+0x5c>)
1a000c12:	f005 fb69 	bl	1a0062e8 <puts>
		if (xQueueReceive(stepperMotorEnableQueue, &ena,
1a000c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000c1a:	f10d 0107 	add.w	r1, sp, #7
1a000c1e:	4b0e      	ldr	r3, [pc, #56]	; (1a000c58 <stepperMotorEnableTask+0x60>)
1a000c20:	6818      	ldr	r0, [r3, #0]
1a000c22:	f000 ff17 	bl	1a001a54 <xQueueReceive>
1a000c26:	2801      	cmp	r0, #1
1a000c28:	d1f5      	bne.n	1a000c16 <stepperMotorEnableTask+0x1e>
			switch (ena) {
1a000c2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000c2e:	2b00      	cmp	r3, #0
1a000c30:	d0e5      	beq.n	1a000bfe <stepperMotorEnableTask+0x6>
1a000c32:	2b01      	cmp	r3, #1
1a000c34:	d1ef      	bne.n	1a000c16 <stepperMotorEnableTask+0x1e>
				gpioWrite(stepper.enablePin, TRUE); //activo en bajo, en el hardware implemente una compuerta NOT
1a000c36:	4c06      	ldr	r4, [pc, #24]	; (1a000c50 <stepperMotorEnableTask+0x58>)
1a000c38:	2101      	movs	r1, #1
1a000c3a:	f994 000e 	ldrsb.w	r0, [r4, #14]
1a000c3e:	f003 fcd5 	bl	1a0045ec <gpioWrite>
				stepper.isEnable = ena;
1a000c42:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000c46:	74e3      	strb	r3, [r4, #19]
				printf("Motor Habilitado\n");
1a000c48:	4804      	ldr	r0, [pc, #16]	; (1a000c5c <stepperMotorEnableTask+0x64>)
1a000c4a:	f005 fb4d 	bl	1a0062e8 <puts>
				break;
1a000c4e:	e7e2      	b.n	1a000c16 <stepperMotorEnableTask+0x1e>
1a000c50:	10007974 	.word	0x10007974
1a000c54:	1a00a4bc 	.word	0x1a00a4bc
1a000c58:	100079a4 	.word	0x100079a4
1a000c5c:	1a00a4a8 	.word	0x1a00a4a8

1a000c60 <stepperMotorSetDirectionTask>:
void stepperMotorSetDirectionTask(void * taskParmPtr){
1a000c60:	b500      	push	{lr}
1a000c62:	b083      	sub	sp, #12
1a000c64:	e00b      	b.n	1a000c7e <stepperMotorSetDirectionTask+0x1e>
				gpioWrite(stepper.directionPin, TRUE);
1a000c66:	4c14      	ldr	r4, [pc, #80]	; (1a000cb8 <stepperMotorSetDirectionTask+0x58>)
1a000c68:	2101      	movs	r1, #1
1a000c6a:	f994 000d 	ldrsb.w	r0, [r4, #13]
1a000c6e:	f003 fcbd 	bl	1a0045ec <gpioWrite>
				stepper.direction = directionMotor;
1a000c72:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000c76:	74a3      	strb	r3, [r4, #18]
				printf("Sentido Horario\n");
1a000c78:	4810      	ldr	r0, [pc, #64]	; (1a000cbc <stepperMotorSetDirectionTask+0x5c>)
1a000c7a:	f005 fb35 	bl	1a0062e8 <puts>
	if(xQueueReceive(stepperMotorDirectionQueue, &directionMotor,
1a000c7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000c82:	f10d 0107 	add.w	r1, sp, #7
1a000c86:	4b0e      	ldr	r3, [pc, #56]	; (1a000cc0 <stepperMotorSetDirectionTask+0x60>)
1a000c88:	6818      	ldr	r0, [r3, #0]
1a000c8a:	f000 fee3 	bl	1a001a54 <xQueueReceive>
1a000c8e:	2801      	cmp	r0, #1
1a000c90:	d1f5      	bne.n	1a000c7e <stepperMotorSetDirectionTask+0x1e>
		switch (directionMotor) {
1a000c92:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000c96:	2b00      	cmp	r3, #0
1a000c98:	d0e5      	beq.n	1a000c66 <stepperMotorSetDirectionTask+0x6>
1a000c9a:	2b01      	cmp	r3, #1
1a000c9c:	d1ef      	bne.n	1a000c7e <stepperMotorSetDirectionTask+0x1e>
				gpioWrite(stepper.directionPin, FALSE);
1a000c9e:	4c06      	ldr	r4, [pc, #24]	; (1a000cb8 <stepperMotorSetDirectionTask+0x58>)
1a000ca0:	2100      	movs	r1, #0
1a000ca2:	f994 000d 	ldrsb.w	r0, [r4, #13]
1a000ca6:	f003 fca1 	bl	1a0045ec <gpioWrite>
				stepper.direction = directionMotor;
1a000caa:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000cae:	74a3      	strb	r3, [r4, #18]
				printf("Sentido AntiHorario\n");
1a000cb0:	4804      	ldr	r0, [pc, #16]	; (1a000cc4 <stepperMotorSetDirectionTask+0x64>)
1a000cb2:	f005 fb19 	bl	1a0062e8 <puts>
				break;
1a000cb6:	e7e2      	b.n	1a000c7e <stepperMotorSetDirectionTask+0x1e>
1a000cb8:	10007974 	.word	0x10007974
1a000cbc:	1a00a508 	.word	0x1a00a508
1a000cc0:	10007998 	.word	0x10007998
1a000cc4:	1a00a518 	.word	0x1a00a518

1a000cc8 <stepperMotorSetPulseTask>:
void stepperMotorSetPulseTask(void * taskParmPtr) {
1a000cc8:	b500      	push	{lr}
1a000cca:	b085      	sub	sp, #20
	uint16_t nOfSteps =0;
1a000ccc:	2300      	movs	r3, #0
1a000cce:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (xQueueReceive(stepperMotorPulseQueue, &nOfSteps,
1a000cd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000cd6:	f10d 010e 	add.w	r1, sp, #14
1a000cda:	4b13      	ldr	r3, [pc, #76]	; (1a000d28 <stepperMotorSetPulseTask+0x60>)
1a000cdc:	6818      	ldr	r0, [r3, #0]
1a000cde:	f000 feb9 	bl	1a001a54 <xQueueReceive>
1a000ce2:	2801      	cmp	r0, #1
1a000ce4:	d1f5      	bne.n	1a000cd2 <stepperMotorSetPulseTask+0xa>
			printf("numero de pasos:%d\n", nOfSteps);
1a000ce6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
1a000cea:	4810      	ldr	r0, [pc, #64]	; (1a000d2c <stepperMotorSetPulseTask+0x64>)
1a000cec:	f005 fa9a 	bl	1a006224 <printf>
			stepper.lastNumberOfSteps = nOfSteps;
1a000cf0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
1a000cf4:	4b0e      	ldr	r3, [pc, #56]	; (1a000d30 <stepperMotorSetPulseTask+0x68>)
1a000cf6:	809a      	strh	r2, [r3, #4]
			numOfStepes = stepper.lastNumberOfSteps;
1a000cf8:	490e      	ldr	r1, [pc, #56]	; (1a000d34 <stepperMotorSetPulseTask+0x6c>)
1a000cfa:	800a      	strh	r2, [r1, #0]
			gpioWrite(stepper.pulsePin, OFF);
1a000cfc:	2100      	movs	r1, #0
1a000cfe:	f993 000c 	ldrsb.w	r0, [r3, #12]
1a000d02:	f003 fc73 	bl	1a0045ec <gpioWrite>
			if (xTimerStart(xAutoReloadTimer,0) == pdFALSE) {
1a000d06:	4b0c      	ldr	r3, [pc, #48]	; (1a000d38 <stepperMotorSetPulseTask+0x70>)
1a000d08:	681c      	ldr	r4, [r3, #0]
1a000d0a:	f001 fa69 	bl	1a0021e0 <xTaskGetTickCount>
1a000d0e:	2300      	movs	r3, #0
1a000d10:	9300      	str	r3, [sp, #0]
1a000d12:	4602      	mov	r2, r0
1a000d14:	2101      	movs	r1, #1
1a000d16:	4620      	mov	r0, r4
1a000d18:	f001 fe32 	bl	1a002980 <xTimerGenericCommand>
1a000d1c:	2800      	cmp	r0, #0
1a000d1e:	d1d8      	bne.n	1a000cd2 <stepperMotorSetPulseTask+0xa>
				printf(
1a000d20:	4806      	ldr	r0, [pc, #24]	; (1a000d3c <stepperMotorSetPulseTask+0x74>)
1a000d22:	f005 fae1 	bl	1a0062e8 <puts>
1a000d26:	e7d4      	b.n	1a000cd2 <stepperMotorSetPulseTask+0xa>
1a000d28:	1000796c 	.word	0x1000796c
1a000d2c:	1a00a2e4 	.word	0x1a00a2e4
1a000d30:	10007974 	.word	0x10007974
1a000d34:	100079a0 	.word	0x100079a0
1a000d38:	10007994 	.word	0x10007994
1a000d3c:	1a00a52c 	.word	0x1a00a52c

1a000d40 <stepperMotorSetPulseServoTask>:
void stepperMotorSetPulseServoTask(void * taskParmPtr){
1a000d40:	b500      	push	{lr}
1a000d42:	b085      	sub	sp, #20
			if (xQueueReceive(stepperMotorPulseServoQueue, &flagStep,
1a000d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000d48:	f10d 010f 	add.w	r1, sp, #15
1a000d4c:	4b0f      	ldr	r3, [pc, #60]	; (1a000d8c <stepperMotorSetPulseServoTask+0x4c>)
1a000d4e:	6818      	ldr	r0, [r3, #0]
1a000d50:	f000 fe80 	bl	1a001a54 <xQueueReceive>
1a000d54:	2801      	cmp	r0, #1
1a000d56:	d1f5      	bne.n	1a000d44 <stepperMotorSetPulseServoTask+0x4>
					stepper.flagPulse = flagStep;
1a000d58:	4b0d      	ldr	r3, [pc, #52]	; (1a000d90 <stepperMotorSetPulseServoTask+0x50>)
1a000d5a:	f89d 200f 	ldrb.w	r2, [sp, #15]
1a000d5e:	755a      	strb	r2, [r3, #21]
					gpioWrite(stepper.pulsePin, OFF);
1a000d60:	2100      	movs	r1, #0
1a000d62:	f993 000c 	ldrsb.w	r0, [r3, #12]
1a000d66:	f003 fc41 	bl	1a0045ec <gpioWrite>
					if (xTimerStart(xAutoReloadTimerServo,0) == pdFALSE) {
1a000d6a:	4b0a      	ldr	r3, [pc, #40]	; (1a000d94 <stepperMotorSetPulseServoTask+0x54>)
1a000d6c:	681c      	ldr	r4, [r3, #0]
1a000d6e:	f001 fa37 	bl	1a0021e0 <xTaskGetTickCount>
1a000d72:	2300      	movs	r3, #0
1a000d74:	9300      	str	r3, [sp, #0]
1a000d76:	4602      	mov	r2, r0
1a000d78:	2101      	movs	r1, #1
1a000d7a:	4620      	mov	r0, r4
1a000d7c:	f001 fe00 	bl	1a002980 <xTimerGenericCommand>
1a000d80:	2800      	cmp	r0, #0
1a000d82:	d1df      	bne.n	1a000d44 <stepperMotorSetPulseServoTask+0x4>
									printf(
1a000d84:	4804      	ldr	r0, [pc, #16]	; (1a000d98 <stepperMotorSetPulseServoTask+0x58>)
1a000d86:	f005 faaf 	bl	1a0062e8 <puts>
1a000d8a:	e7db      	b.n	1a000d44 <stepperMotorSetPulseServoTask+0x4>
1a000d8c:	1000799c 	.word	0x1000799c
1a000d90:	10007974 	.word	0x10007974
1a000d94:	100079a8 	.word	0x100079a8
1a000d98:	1a00a52c 	.word	0x1a00a52c

1a000d9c <stepperMotorSetMicroSteps>:


void stepperMotorSetMicroSteps(bool_t m0MicroStep, bool_t m1MicroStep,
		bool_t m2MicroStep) {
1a000d9c:	b570      	push	{r4, r5, r6, lr}
1a000d9e:	460e      	mov	r6, r1
1a000da0:	4615      	mov	r5, r2
	//controlar que el eje del motor no este girando para poder establecer un microsteps....
	//podemos preguntar si pulseCount=0
	gpioWrite(stepper.microStepsM0Pin, m0MicroStep);
1a000da2:	4c08      	ldr	r4, [pc, #32]	; (1a000dc4 <stepperMotorSetMicroSteps+0x28>)
1a000da4:	4601      	mov	r1, r0
1a000da6:	f994 000f 	ldrsb.w	r0, [r4, #15]
1a000daa:	f003 fc1f 	bl	1a0045ec <gpioWrite>
	gpioWrite(stepper.microStepsM1Pin, m1MicroStep);
1a000dae:	4631      	mov	r1, r6
1a000db0:	f994 0010 	ldrsb.w	r0, [r4, #16]
1a000db4:	f003 fc1a 	bl	1a0045ec <gpioWrite>
	gpioWrite(stepper.microStepsM2Pin, m2MicroStep);
1a000db8:	4629      	mov	r1, r5
1a000dba:	f994 0011 	ldrsb.w	r0, [r4, #17]
1a000dbe:	f003 fc15 	bl	1a0045ec <gpioWrite>
}
1a000dc2:	bd70      	pop	{r4, r5, r6, pc}
1a000dc4:	10007974 	.word	0x10007974

1a000dc8 <stepperMotorMicroStepsTask>:
void stepperMotorMicroStepsTask(void * taskParmPtr) {
1a000dc8:	b500      	push	{lr}
1a000dca:	b083      	sub	sp, #12
1a000dcc:	e007      	b.n	1a000dde <stepperMotorMicroStepsTask+0x16>
				stepperMotorSetMicroSteps( FALSE, FALSE, FALSE);
1a000dce:	2200      	movs	r2, #0
1a000dd0:	4611      	mov	r1, r2
1a000dd2:	4610      	mov	r0, r2
1a000dd4:	f7ff ffe2 	bl	1a000d9c <stepperMotorSetMicroSteps>
				printf("FULL_STEP\n");
1a000dd8:	4826      	ldr	r0, [pc, #152]	; (1a000e74 <stepperMotorMicroStepsTask+0xac>)
1a000dda:	f005 fa85 	bl	1a0062e8 <puts>
		if (xQueueReceive(stepperMotorMicroStepsQueue, &mSteps,
1a000dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000de2:	f10d 0107 	add.w	r1, sp, #7
1a000de6:	4b24      	ldr	r3, [pc, #144]	; (1a000e78 <stepperMotorMicroStepsTask+0xb0>)
1a000de8:	6818      	ldr	r0, [r3, #0]
1a000dea:	f000 fe33 	bl	1a001a54 <xQueueReceive>
1a000dee:	2801      	cmp	r0, #1
1a000df0:	d1f5      	bne.n	1a000dde <stepperMotorMicroStepsTask+0x16>
			switch (mSteps) {
1a000df2:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000df6:	2b05      	cmp	r3, #5
1a000df8:	d8f1      	bhi.n	1a000dde <stepperMotorMicroStepsTask+0x16>
1a000dfa:	a201      	add	r2, pc, #4	; (adr r2, 1a000e00 <stepperMotorMicroStepsTask+0x38>)
1a000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a000e00:	1a000dcf 	.word	0x1a000dcf
1a000e04:	1a000e19 	.word	0x1a000e19
1a000e08:	1a000e2b 	.word	0x1a000e2b
1a000e0c:	1a000e3d 	.word	0x1a000e3d
1a000e10:	1a000e4f 	.word	0x1a000e4f
1a000e14:	1a000e61 	.word	0x1a000e61
				stepperMotorSetMicroSteps(TRUE, FALSE, FALSE);
1a000e18:	2200      	movs	r2, #0
1a000e1a:	4611      	mov	r1, r2
1a000e1c:	2001      	movs	r0, #1
1a000e1e:	f7ff ffbd 	bl	1a000d9c <stepperMotorSetMicroSteps>
				printf("HALF_STEP\n");
1a000e22:	4816      	ldr	r0, [pc, #88]	; (1a000e7c <stepperMotorMicroStepsTask+0xb4>)
1a000e24:	f005 fa60 	bl	1a0062e8 <puts>
				break;
1a000e28:	e7d9      	b.n	1a000dde <stepperMotorMicroStepsTask+0x16>
				stepperMotorSetMicroSteps(FALSE, TRUE, FALSE);
1a000e2a:	2200      	movs	r2, #0
1a000e2c:	2101      	movs	r1, #1
1a000e2e:	4610      	mov	r0, r2
1a000e30:	f7ff ffb4 	bl	1a000d9c <stepperMotorSetMicroSteps>
				printf("4_STEP\n");
1a000e34:	4812      	ldr	r0, [pc, #72]	; (1a000e80 <stepperMotorMicroStepsTask+0xb8>)
1a000e36:	f005 fa57 	bl	1a0062e8 <puts>
				break;
1a000e3a:	e7d0      	b.n	1a000dde <stepperMotorMicroStepsTask+0x16>
				stepperMotorSetMicroSteps(TRUE, TRUE, FALSE);
1a000e3c:	2200      	movs	r2, #0
1a000e3e:	2101      	movs	r1, #1
1a000e40:	4608      	mov	r0, r1
1a000e42:	f7ff ffab 	bl	1a000d9c <stepperMotorSetMicroSteps>
				printf("8_STEP\n");
1a000e46:	480f      	ldr	r0, [pc, #60]	; (1a000e84 <stepperMotorMicroStepsTask+0xbc>)
1a000e48:	f005 fa4e 	bl	1a0062e8 <puts>
				break;
1a000e4c:	e7c7      	b.n	1a000dde <stepperMotorMicroStepsTask+0x16>
				stepperMotorSetMicroSteps(FALSE, FALSE, TRUE);
1a000e4e:	2201      	movs	r2, #1
1a000e50:	2100      	movs	r1, #0
1a000e52:	4608      	mov	r0, r1
1a000e54:	f7ff ffa2 	bl	1a000d9c <stepperMotorSetMicroSteps>
				printf("16_STEP\n");
1a000e58:	480b      	ldr	r0, [pc, #44]	; (1a000e88 <stepperMotorMicroStepsTask+0xc0>)
1a000e5a:	f005 fa45 	bl	1a0062e8 <puts>
				break;
1a000e5e:	e7be      	b.n	1a000dde <stepperMotorMicroStepsTask+0x16>
				stepperMotorSetMicroSteps(TRUE, TRUE, TRUE);
1a000e60:	2201      	movs	r2, #1
1a000e62:	4611      	mov	r1, r2
1a000e64:	4610      	mov	r0, r2
1a000e66:	f7ff ff99 	bl	1a000d9c <stepperMotorSetMicroSteps>
				printf("32_STEP\n");
1a000e6a:	4808      	ldr	r0, [pc, #32]	; (1a000e8c <stepperMotorMicroStepsTask+0xc4>)
1a000e6c:	f005 fa3c 	bl	1a0062e8 <puts>
				break;
1a000e70:	e7b5      	b.n	1a000dde <stepperMotorMicroStepsTask+0x16>
1a000e72:	bf00      	nop
1a000e74:	1a00a4d0 	.word	0x1a00a4d0
1a000e78:	100079ac 	.word	0x100079ac
1a000e7c:	1a00a4dc 	.word	0x1a00a4dc
1a000e80:	1a00a4e8 	.word	0x1a00a4e8
1a000e84:	1a00a4f0 	.word	0x1a00a4f0
1a000e88:	1a00a4f8 	.word	0x1a00a4f8
1a000e8c:	1a00a500 	.word	0x1a00a500

1a000e90 <adcStart>:

/*==================[inlcusiones]============================================*/
#include "adc.h"
#include "pid.h"

void adcStart() {
1a000e90:	b508      	push	{r3, lr}
	adcConfig(ADC_ENABLE); /* ADC */
1a000e92:	2000      	movs	r0, #0
1a000e94:	f003 fa32 	bl	1a0042fc <adcInit>
}
1a000e98:	bd08      	pop	{r3, pc}
1a000e9a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000e9e:	Address 0x000000001a000e9e is out of bounds.


1a000ea0 <adcScanChannelTask>:

void adcScanChannelTask(void * taskParmPtr) {
1a000ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000ea4:	b082      	sub	sp, #8
	portTickType xPeriodicity = 10 / portTICK_RATE_MS;// cada 10mseg escanea los canales 1 y 2 del ADC
	portTickType xLastWakeTime = xTaskGetTickCount();
1a000ea6:	f001 f99b 	bl	1a0021e0 <xTaskGetTickCount>
1a000eaa:	9001      	str	r0, [sp, #4]
	uint16_t executePid = 0;

	uint16_t channel2 = 0;
	uint16_t index = 0;

	servo.flagCompA = TRUE;
1a000eac:	4bb6      	ldr	r3, [pc, #728]	; (1a001188 <adcScanChannelTask+0x2e8>)
1a000eae:	2201      	movs	r2, #1
1a000eb0:	729a      	strb	r2, [r3, #10]
	servo.flagCompB = TRUE;
1a000eb2:	72da      	strb	r2, [r3, #11]
	uint16_t index = 0;
1a000eb4:	2400      	movs	r4, #0
	uint16_t channel2 = 0;
1a000eb6:	4625      	mov	r5, r4
	uint16_t executePid = 0;
1a000eb8:	46a2      	mov	sl, r4
1a000eba:	e0d8      	b.n	1a00106e <adcScanChannelTask+0x1ce>
	while (TRUE) {
		// pregunto si se cumplio un segundo para ejecutar el PID
		executePid++;
		if(executePid >= UNSEGUNDO){
			for(index=0; index<FILTRO_PROMEDIO_MOVIL; index++){
				pid.sensorPresion += adcRead(CH1);
1a000ebc:	2000      	movs	r0, #0
1a000ebe:	f003 fa79 	bl	1a0043b4 <adcRead>
1a000ec2:	4bb2      	ldr	r3, [pc, #712]	; (1a00118c <adcScanChannelTask+0x2ec>)
1a000ec4:	885a      	ldrh	r2, [r3, #2]
1a000ec6:	4410      	add	r0, r2
1a000ec8:	8058      	strh	r0, [r3, #2]
			for(index=0; index<FILTRO_PROMEDIO_MOVIL; index++){
1a000eca:	3401      	adds	r4, #1
1a000ecc:	b2a4      	uxth	r4, r4
1a000ece:	2c04      	cmp	r4, #4
1a000ed0:	d9f4      	bls.n	1a000ebc <adcScanChannelTask+0x1c>
			}
			pid.sensorPresion = pid.sensorPresion/FILTRO_PROMEDIO_MOVIL;
1a000ed2:	4cae      	ldr	r4, [pc, #696]	; (1a00118c <adcScanChannelTask+0x2ec>)
1a000ed4:	8860      	ldrh	r0, [r4, #2]
1a000ed6:	4bae      	ldr	r3, [pc, #696]	; (1a001190 <adcScanChannelTask+0x2f0>)
1a000ed8:	fba3 3000 	umull	r3, r0, r3, r0
			pid.inPut = pid.sensorPresion * 0.00322;// convierto a tensión ymultiplico por 100
1a000edc:	0880      	lsrs	r0, r0, #2
1a000ede:	f003 fdd5 	bl	1a004a8c <__aeabi_i2d>
1a000ee2:	a3a1      	add	r3, pc, #644	; (adr r3, 1a001168 <adcScanChannelTask+0x2c8>)
1a000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000ee8:	f003 fe3a 	bl	1a004b60 <__aeabi_dmul>
1a000eec:	f004 f8d2 	bl	1a005094 <__aeabi_d2f>
1a000ef0:	ee07 0a10 	vmov	s14, r0
1a000ef4:	6060      	str	r0, [r4, #4]
			pid.sensorPresion = 0;
1a000ef6:	2300      	movs	r3, #0
1a000ef8:	8063      	strh	r3, [r4, #2]

			pid.error= pid.setPoint - pid.inPut;
1a000efa:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
1a000efe:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a000f02:	edc4 7a02 	vstr	s15, [r4, #8]
			if((pid.error <= 0.00324) && (pid.error >= -0.00324)) pid.error = 0.0000;
1a000f06:	ee17 0a90 	vmov	r0, s15
1a000f0a:	f003 fdd1 	bl	1a004ab0 <__aeabi_f2d>
1a000f0e:	4606      	mov	r6, r0
1a000f10:	460f      	mov	r7, r1
1a000f12:	a397      	add	r3, pc, #604	; (adr r3, 1a001170 <adcScanChannelTask+0x2d0>)
1a000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000f18:	f004 f89e 	bl	1a005058 <__aeabi_dcmple>
1a000f1c:	b148      	cbz	r0, 1a000f32 <adcScanChannelTask+0x92>
1a000f1e:	a396      	add	r3, pc, #600	; (adr r3, 1a001178 <adcScanChannelTask+0x2d8>)
1a000f20:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000f24:	4630      	mov	r0, r6
1a000f26:	4639      	mov	r1, r7
1a000f28:	f004 f8a0 	bl	1a00506c <__aeabi_dcmpge>
1a000f2c:	b108      	cbz	r0, 1a000f32 <adcScanChannelTask+0x92>
1a000f2e:	2200      	movs	r2, #0
1a000f30:	60a2      	str	r2, [r4, #8]
			//printf("Set-Point:%.5f\n",pid.setPoint);


			pid.iTerm +=(pid.ki*pid.error);
1a000f32:	4b96      	ldr	r3, [pc, #600]	; (1a00118c <adcScanChannelTask+0x2ec>)
1a000f34:	edd3 7a07 	vldr	s15, [r3, #28]
1a000f38:	ed93 7a02 	vldr	s14, [r3, #8]
1a000f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
1a000f40:	edd3 6a03 	vldr	s13, [r3, #12]
1a000f44:	ee77 7aa6 	vadd.f32	s15, s15, s13
1a000f48:	edc3 7a03 	vstr	s15, [r3, #12]
			if (pid.iTerm > pid.outMax)pid.iTerm = pid.outMax;
1a000f4c:	ed93 6a04 	vldr	s12, [r3, #16]
1a000f50:	eef4 7ac6 	vcmpe.f32	s15, s12
1a000f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000f58:	dd01      	ble.n	1a000f5e <adcScanChannelTask+0xbe>
1a000f5a:	ed83 6a03 	vstr	s12, [r3, #12]
			if (pid.iTerm < pid.outMin)pid.iTerm = pid.outMin;
1a000f5e:	4b8b      	ldr	r3, [pc, #556]	; (1a00118c <adcScanChannelTask+0x2ec>)
1a000f60:	edd3 7a03 	vldr	s15, [r3, #12]
1a000f64:	edd3 6a05 	vldr	s13, [r3, #20]
1a000f68:	eef4 7ae6 	vcmpe.f32	s15, s13
1a000f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000f70:	d501      	bpl.n	1a000f76 <adcScanChannelTask+0xd6>
1a000f72:	edc3 6a03 	vstr	s13, [r3, #12]

			pid.outPut = pid.kp * pid.error + pid.iTerm;
1a000f76:	4b85      	ldr	r3, [pc, #532]	; (1a00118c <adcScanChannelTask+0x2ec>)
1a000f78:	edd3 7a06 	vldr	s15, [r3, #24]
1a000f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
1a000f80:	edd3 5a03 	vldr	s11, [r3, #12]
1a000f84:	ee77 7aa5 	vadd.f32	s15, s15, s11
1a000f88:	edc3 7a08 	vstr	s15, [r3, #32]
			if (pid.outPut > pid.outMax)pid.outPut = pid.outMax;
1a000f8c:	eeb4 6ae7 	vcmpe.f32	s12, s15
1a000f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000f94:	d501      	bpl.n	1a000f9a <adcScanChannelTask+0xfa>
1a000f96:	ed83 6a08 	vstr	s12, [r3, #32]
			if (pid.outPut < pid.outMin)pid.outPut = pid.outMin;
1a000f9a:	4b7c      	ldr	r3, [pc, #496]	; (1a00118c <adcScanChannelTask+0x2ec>)
1a000f9c:	edd3 7a08 	vldr	s15, [r3, #32]
1a000fa0:	eef4 6ae7 	vcmpe.f32	s13, s15
1a000fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000fa8:	dd01      	ble.n	1a000fae <adcScanChannelTask+0x10e>
1a000faa:	edc3 6a08 	vstr	s13, [r3, #32]
			index=0;

			//taskENTER_CRITICAL();
				printf("Error:%.5f\n",pid.error);
1a000fae:	ee17 0a10 	vmov	r0, s14
1a000fb2:	f003 fd7d 	bl	1a004ab0 <__aeabi_f2d>
1a000fb6:	4602      	mov	r2, r0
1a000fb8:	460b      	mov	r3, r1
1a000fba:	4876      	ldr	r0, [pc, #472]	; (1a001194 <adcScanChannelTask+0x2f4>)
1a000fbc:	f005 f932 	bl	1a006224 <printf>
				printf("Salida OutPut:%.5f\n", pid.outPut);
1a000fc0:	4b72      	ldr	r3, [pc, #456]	; (1a00118c <adcScanChannelTask+0x2ec>)
1a000fc2:	6a18      	ldr	r0, [r3, #32]
1a000fc4:	f003 fd74 	bl	1a004ab0 <__aeabi_f2d>
1a000fc8:	4602      	mov	r2, r0
1a000fca:	460b      	mov	r3, r1
1a000fcc:	4872      	ldr	r0, [pc, #456]	; (1a001198 <adcScanChannelTask+0x2f8>)
1a000fce:	f005 f929 	bl	1a006224 <printf>
				printf("Potenciometro del eje:%.5f\n", servo.potentiometer);
1a000fd2:	4b6d      	ldr	r3, [pc, #436]	; (1a001188 <adcScanChannelTask+0x2e8>)
1a000fd4:	6858      	ldr	r0, [r3, #4]
1a000fd6:	f003 fd6b 	bl	1a004ab0 <__aeabi_f2d>
1a000fda:	4602      	mov	r2, r0
1a000fdc:	460b      	mov	r3, r1
1a000fde:	486f      	ldr	r0, [pc, #444]	; (1a00119c <adcScanChannelTask+0x2fc>)
1a000fe0:	f005 f920 	bl	1a006224 <printf>
			index=0;
1a000fe4:	2400      	movs	r4, #0
				//fflush(stdout);
			//taskEXIT_CRITICAL();

			executePid = 0;
1a000fe6:	46a2      	mov	sl, r4
1a000fe8:	e048      	b.n	1a00107c <adcScanChannelTask+0x1dc>
			for(index=0; index<FILTRO_PROMEDIO_MOVIL; index++){
1a000fea:	2400      	movs	r4, #0
1a000fec:	e76f      	b.n	1a000ece <adcScanChannelTask+0x2e>
			servo.potentiometer = channel2 *0.00322;//convierto a tensión
			           //
			if(pid.outPut -4*0.00322> servo.potentiometer){//Abre la valvula
				if(servo.flagCompA == TRUE){
					//detengo al motor
					servo.flagPulse=FALSE;
1a000fee:	4c66      	ldr	r4, [pc, #408]	; (1a001188 <adcScanChannelTask+0x2e8>)
1a000ff0:	2500      	movs	r5, #0
1a000ff2:	4626      	mov	r6, r4
1a000ff4:	f806 5f08 	strb.w	r5, [r6, #8]!
					xQueueSend(stepperMotorPulseServoQueue, &servo.flagPulse,
1a000ff8:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 1a0011a4 <adcScanChannelTask+0x304>
1a000ffc:	462b      	mov	r3, r5
1a000ffe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001002:	4631      	mov	r1, r6
1a001004:	f8d8 0000 	ldr.w	r0, [r8]
1a001008:	f000 fc00 	bl	1a00180c <xQueueGenericSend>
												portMAX_DELAY);
					//establezco el sentido de giro
					servo.direction = STEPPER_LEFT_CLOSE;
1a00100c:	2701      	movs	r7, #1
1a00100e:	4621      	mov	r1, r4
1a001010:	f801 7f09 	strb.w	r7, [r1, #9]!
					xQueueSend(stepperMotorDirectionQueue, &servo.direction,portMAX_DELAY);
1a001014:	462b      	mov	r3, r5
1a001016:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00101a:	4861      	ldr	r0, [pc, #388]	; (1a0011a0 <adcScanChannelTask+0x300>)
1a00101c:	6800      	ldr	r0, [r0, #0]
1a00101e:	f000 fbf5 	bl	1a00180c <xQueueGenericSend>
					//habilito la generación de pulsos
					servo.flagPulse = TRUE;
1a001022:	7227      	strb	r7, [r4, #8]
					xQueueSend(stepperMotorPulseServoQueue, &servo.flagPulse,
1a001024:	462b      	mov	r3, r5
1a001026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00102a:	4631      	mov	r1, r6
1a00102c:	f8d8 0000 	ldr.w	r0, [r8]
1a001030:	f000 fbec 	bl	1a00180c <xQueueGenericSend>
																	portMAX_DELAY);
					servo.flagCompA = FALSE;
1a001034:	72a5      	strb	r5, [r4, #10]
					servo.flagCompB = TRUE;
1a001036:	72e7      	strb	r7, [r4, #11]
				}

			}

			channel2 = 0;
			index = 0;
1a001038:	462c      	mov	r4, r5
1a00103a:	e014      	b.n	1a001066 <adcScanChannelTask+0x1c6>
				if(pid.outPut+4*0.00322<servo.potentiometer){ //Cierra la valvula
1a00103c:	a350      	add	r3, pc, #320	; (adr r3, 1a001180 <adcScanChannelTask+0x2e0>)
1a00103e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001042:	4640      	mov	r0, r8
1a001044:	4649      	mov	r1, r9
1a001046:	f003 fbd5 	bl	1a0047f4 <__adddf3>
1a00104a:	4602      	mov	r2, r0
1a00104c:	460b      	mov	r3, r1
1a00104e:	4620      	mov	r0, r4
1a001050:	4629      	mov	r1, r5
1a001052:	f004 f815 	bl	1a005080 <__aeabi_dcmpgt>
1a001056:	2800      	cmp	r0, #0
1a001058:	d072      	beq.n	1a001140 <adcScanChannelTask+0x2a0>
					if(servo.flagCompB == TRUE){
1a00105a:	4b4b      	ldr	r3, [pc, #300]	; (1a001188 <adcScanChannelTask+0x2e8>)
1a00105c:	7adb      	ldrb	r3, [r3, #11]
1a00105e:	2b01      	cmp	r3, #1
1a001060:	d047      	beq.n	1a0010f2 <adcScanChannelTask+0x252>
			index = 0;
1a001062:	2400      	movs	r4, #0
			channel2 = 0;
1a001064:	4625      	mov	r5, r4
		}
		vTaskDelayUntil(&xLastWakeTime, xPeriodicity);
1a001066:	210a      	movs	r1, #10
1a001068:	a801      	add	r0, sp, #4
1a00106a:	f001 f9c5 	bl	1a0023f8 <vTaskDelayUntil>
		executePid++;
1a00106e:	f10a 0a01 	add.w	sl, sl, #1
1a001072:	fa1f fa8a 	uxth.w	sl, sl
		if(executePid >= UNSEGUNDO){
1a001076:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
1a00107a:	d8b6      	bhi.n	1a000fea <adcScanChannelTask+0x14a>
		channel2 = channel2 + adcRead(CH2);//potenciometro del eje
1a00107c:	2001      	movs	r0, #1
1a00107e:	f003 f999 	bl	1a0043b4 <adcRead>
1a001082:	4405      	add	r5, r0
1a001084:	b2ad      	uxth	r5, r5
		index++;
1a001086:	3401      	adds	r4, #1
1a001088:	b2a4      	uxth	r4, r4
		if (index == FILTRO_PROMEDIO_MOVIL) {// siendo el Filtro_promedio Movil =20, entonces cada 2 segundos tengo un valor de Voltaje, presión y altura
1a00108a:	2c05      	cmp	r4, #5
1a00108c:	d1eb      	bne.n	1a001066 <adcScanChannelTask+0x1c6>
			channel2 = channel2 / FILTRO_PROMEDIO_MOVIL;
1a00108e:	4840      	ldr	r0, [pc, #256]	; (1a001190 <adcScanChannelTask+0x2f0>)
1a001090:	fba0 3005 	umull	r3, r0, r0, r5
			servo.potentiometer = channel2 *0.00322;//convierto a tensión
1a001094:	f3c0 008f 	ubfx	r0, r0, #2, #16
1a001098:	f003 fcf8 	bl	1a004a8c <__aeabi_i2d>
1a00109c:	a332      	add	r3, pc, #200	; (adr r3, 1a001168 <adcScanChannelTask+0x2c8>)
1a00109e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0010a2:	f003 fd5d 	bl	1a004b60 <__aeabi_dmul>
1a0010a6:	f003 fff5 	bl	1a005094 <__aeabi_d2f>
1a0010aa:	4604      	mov	r4, r0
1a0010ac:	4b36      	ldr	r3, [pc, #216]	; (1a001188 <adcScanChannelTask+0x2e8>)
1a0010ae:	6058      	str	r0, [r3, #4]
			if(pid.outPut -4*0.00322> servo.potentiometer){//Abre la valvula
1a0010b0:	4b36      	ldr	r3, [pc, #216]	; (1a00118c <adcScanChannelTask+0x2ec>)
1a0010b2:	6a18      	ldr	r0, [r3, #32]
1a0010b4:	f003 fcfc 	bl	1a004ab0 <__aeabi_f2d>
1a0010b8:	4680      	mov	r8, r0
1a0010ba:	4689      	mov	r9, r1
1a0010bc:	a330      	add	r3, pc, #192	; (adr r3, 1a001180 <adcScanChannelTask+0x2e0>)
1a0010be:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0010c2:	f003 fb95 	bl	1a0047f0 <__aeabi_dsub>
1a0010c6:	4606      	mov	r6, r0
1a0010c8:	460f      	mov	r7, r1
1a0010ca:	4620      	mov	r0, r4
1a0010cc:	f003 fcf0 	bl	1a004ab0 <__aeabi_f2d>
1a0010d0:	4604      	mov	r4, r0
1a0010d2:	460d      	mov	r5, r1
1a0010d4:	4602      	mov	r2, r0
1a0010d6:	460b      	mov	r3, r1
1a0010d8:	4630      	mov	r0, r6
1a0010da:	4639      	mov	r1, r7
1a0010dc:	f003 ffd0 	bl	1a005080 <__aeabi_dcmpgt>
1a0010e0:	2800      	cmp	r0, #0
1a0010e2:	d0ab      	beq.n	1a00103c <adcScanChannelTask+0x19c>
				if(servo.flagCompA == TRUE){
1a0010e4:	4b28      	ldr	r3, [pc, #160]	; (1a001188 <adcScanChannelTask+0x2e8>)
1a0010e6:	7a9b      	ldrb	r3, [r3, #10]
1a0010e8:	2b01      	cmp	r3, #1
1a0010ea:	d080      	beq.n	1a000fee <adcScanChannelTask+0x14e>
			index = 0;
1a0010ec:	2400      	movs	r4, #0
			channel2 = 0;
1a0010ee:	4625      	mov	r5, r4
1a0010f0:	e7b9      	b.n	1a001066 <adcScanChannelTask+0x1c6>
							servo.flagPulse=FALSE;
1a0010f2:	4c25      	ldr	r4, [pc, #148]	; (1a001188 <adcScanChannelTask+0x2e8>)
1a0010f4:	2500      	movs	r5, #0
1a0010f6:	4626      	mov	r6, r4
1a0010f8:	f806 5f08 	strb.w	r5, [r6, #8]!
							xQueueSend(stepperMotorPulseServoQueue, &servo.flagPulse,
1a0010fc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1a0011a4 <adcScanChannelTask+0x304>
1a001100:	462b      	mov	r3, r5
1a001102:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001106:	4631      	mov	r1, r6
1a001108:	f8d8 0000 	ldr.w	r0, [r8]
1a00110c:	f000 fb7e 	bl	1a00180c <xQueueGenericSend>
							servo.direction = STEPPER_RIGHT_OPEN;
1a001110:	4621      	mov	r1, r4
1a001112:	f801 5f09 	strb.w	r5, [r1, #9]!
							xQueueSend(stepperMotorDirectionQueue, &servo.direction,portMAX_DELAY);
1a001116:	462b      	mov	r3, r5
1a001118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00111c:	4820      	ldr	r0, [pc, #128]	; (1a0011a0 <adcScanChannelTask+0x300>)
1a00111e:	6800      	ldr	r0, [r0, #0]
1a001120:	f000 fb74 	bl	1a00180c <xQueueGenericSend>
							servo.flagPulse=TRUE;
1a001124:	2701      	movs	r7, #1
1a001126:	7227      	strb	r7, [r4, #8]
							xQueueSend(stepperMotorPulseServoQueue, &servo.flagPulse,
1a001128:	462b      	mov	r3, r5
1a00112a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00112e:	4631      	mov	r1, r6
1a001130:	f8d8 0000 	ldr.w	r0, [r8]
1a001134:	f000 fb6a 	bl	1a00180c <xQueueGenericSend>
							servo.flagCompA = TRUE;
1a001138:	72a7      	strb	r7, [r4, #10]
							servo.flagCompB = FALSE;
1a00113a:	72e5      	strb	r5, [r4, #11]
			index = 0;
1a00113c:	462c      	mov	r4, r5
1a00113e:	e792      	b.n	1a001066 <adcScanChannelTask+0x1c6>
						servo.flagPulse=FALSE;
1a001140:	4c11      	ldr	r4, [pc, #68]	; (1a001188 <adcScanChannelTask+0x2e8>)
1a001142:	2500      	movs	r5, #0
1a001144:	4621      	mov	r1, r4
1a001146:	f801 5f08 	strb.w	r5, [r1, #8]!
					    xQueueSend(stepperMotorPulseServoQueue, &servo.flagPulse,
1a00114a:	462b      	mov	r3, r5
1a00114c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001150:	4814      	ldr	r0, [pc, #80]	; (1a0011a4 <adcScanChannelTask+0x304>)
1a001152:	6800      	ldr	r0, [r0, #0]
1a001154:	f000 fb5a 	bl	1a00180c <xQueueGenericSend>
					    servo.flagCompA = TRUE;
1a001158:	2301      	movs	r3, #1
1a00115a:	72a3      	strb	r3, [r4, #10]
						servo.flagCompB = TRUE;
1a00115c:	72e3      	strb	r3, [r4, #11]
			index = 0;
1a00115e:	462c      	mov	r4, r5
1a001160:	e781      	b.n	1a001066 <adcScanChannelTask+0x1c6>
1a001162:	bf00      	nop
1a001164:	f3af 8000 	nop.w
1a001168:	562e09ff 	.word	0x562e09ff
1a00116c:	3f6a60d4 	.word	0x3f6a60d4
1a001170:	c13fd0d0 	.word	0xc13fd0d0
1a001174:	3f6a8ac5 	.word	0x3f6a8ac5
1a001178:	c13fd0d0 	.word	0xc13fd0d0
1a00117c:	bf6a8ac5 	.word	0xbf6a8ac5
1a001180:	562e09ff 	.word	0x562e09ff
1a001184:	3f8a60d4 	.word	0x3f8a60d4
1a001188:	100079b0 	.word	0x100079b0
1a00118c:	10007930 	.word	0x10007930
1a001190:	cccccccd 	.word	0xcccccccd
1a001194:	1a00a584 	.word	0x1a00a584
1a001198:	1a00a590 	.word	0x1a00a590
1a00119c:	1a00a5a4 	.word	0x1a00a5a4
1a0011a0:	10007998 	.word	0x10007998
1a0011a4:	1000799c 	.word	0x1000799c

1a0011a8 <initialise_monitor_handles>:
}
1a0011a8:	4770      	bx	lr
1a0011aa:	Address 0x000000001a0011aa is out of bounds.


1a0011ac <Reset_Handler>:
void Reset_Handler(void) {
1a0011ac:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0011ae:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0011b0:	4b19      	ldr	r3, [pc, #100]	; (1a001218 <Reset_Handler+0x6c>)
1a0011b2:	4a1a      	ldr	r2, [pc, #104]	; (1a00121c <Reset_Handler+0x70>)
1a0011b4:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0011b6:	3304      	adds	r3, #4
1a0011b8:	4a19      	ldr	r2, [pc, #100]	; (1a001220 <Reset_Handler+0x74>)
1a0011ba:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0011bc:	2300      	movs	r3, #0
1a0011be:	e005      	b.n	1a0011cc <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0011c0:	4a18      	ldr	r2, [pc, #96]	; (1a001224 <Reset_Handler+0x78>)
1a0011c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0011c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0011ca:	3301      	adds	r3, #1
1a0011cc:	2b07      	cmp	r3, #7
1a0011ce:	d9f7      	bls.n	1a0011c0 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0011d0:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0011d2:	4b15      	ldr	r3, [pc, #84]	; (1a001228 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0011d4:	e007      	b.n	1a0011e6 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0011d6:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0011da:	689a      	ldr	r2, [r3, #8]
1a0011dc:	6859      	ldr	r1, [r3, #4]
1a0011de:	6818      	ldr	r0, [r3, #0]
1a0011e0:	f7fe ffd3 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0011e4:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0011e6:	4a11      	ldr	r2, [pc, #68]	; (1a00122c <Reset_Handler+0x80>)
1a0011e8:	4293      	cmp	r3, r2
1a0011ea:	d3f4      	bcc.n	1a0011d6 <Reset_Handler+0x2a>
1a0011ec:	e006      	b.n	1a0011fc <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0011ee:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0011f0:	6859      	ldr	r1, [r3, #4]
1a0011f2:	f854 0b08 	ldr.w	r0, [r4], #8
1a0011f6:	f7fe ffd7 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0011fa:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0011fc:	4a0c      	ldr	r2, [pc, #48]	; (1a001230 <Reset_Handler+0x84>)
1a0011fe:	4293      	cmp	r3, r2
1a001200:	d3f5      	bcc.n	1a0011ee <Reset_Handler+0x42>
    SystemInit();
1a001202:	f002 fe3f 	bl	1a003e84 <SystemInit>
    __libc_init_array();
1a001206:	f004 fc29 	bl	1a005a5c <__libc_init_array>
    initialise_monitor_handles();
1a00120a:	f7ff ffcd 	bl	1a0011a8 <initialise_monitor_handles>
    main();
1a00120e:	f7ff fb03 	bl	1a000818 <main>
        __asm__ volatile("wfi");
1a001212:	bf30      	wfi
1a001214:	e7fd      	b.n	1a001212 <Reset_Handler+0x66>
1a001216:	bf00      	nop
1a001218:	40053100 	.word	0x40053100
1a00121c:	10df1000 	.word	0x10df1000
1a001220:	01dff7ff 	.word	0x01dff7ff
1a001224:	e000e280 	.word	0xe000e280
1a001228:	1a000114 	.word	0x1a000114
1a00122c:	1a000150 	.word	0x1a000150
1a001230:	1a000178 	.word	0x1a000178

1a001234 <_fini>:
void _fini(void) {}
1a001234:	4770      	bx	lr

1a001236 <_init>:
void _init(void) {}
1a001236:	4770      	bx	lr

1a001238 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a001238:	2309      	movs	r3, #9
1a00123a:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00123c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001240:	4770      	bx	lr

1a001242 <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a001242:	2358      	movs	r3, #88	; 0x58
1a001244:	6003      	str	r3, [r0, #0]
   return -1;
}
1a001246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00124a:	4770      	bx	lr

1a00124c <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a00124c:	2902      	cmp	r1, #2
1a00124e:	d801      	bhi.n	1a001254 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a001250:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a001252:	4770      	bx	lr
       SET_ERR(EBADF);
1a001254:	2309      	movs	r3, #9
1a001256:	6003      	str	r3, [r0, #0]
       return -1;
1a001258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00125c:	4770      	bx	lr

1a00125e <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00125e:	2358      	movs	r3, #88	; 0x58
1a001260:	6003      	str	r3, [r0, #0]
   return -1;
}
1a001262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001266:	4770      	bx	lr

1a001268 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a001268:	2902      	cmp	r1, #2
1a00126a:	d81f      	bhi.n	1a0012ac <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a00126c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001270:	461d      	mov	r5, r3
1a001272:	4617      	mov	r7, r2
1a001274:	4606      	mov	r6, r0
  size_t i = 0;
1a001276:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a001278:	42ac      	cmp	r4, r5
1a00127a:	d211      	bcs.n	1a0012a0 <_read_r+0x38>
         int c = __stdio_getchar();
1a00127c:	f001 ffb9 	bl	1a0031f2 <__stdio_getchar>
         if( c != -1 ){
1a001280:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001284:	d0f8      	beq.n	1a001278 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a001286:	f104 0801 	add.w	r8, r4, #1
1a00128a:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a00128c:	280d      	cmp	r0, #13
1a00128e:	d003      	beq.n	1a001298 <_read_r+0x30>
1a001290:	280a      	cmp	r0, #10
1a001292:	d001      	beq.n	1a001298 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a001294:	4644      	mov	r4, r8
1a001296:	e7ef      	b.n	1a001278 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a001298:	f001 ffab 	bl	1a0031f2 <__stdio_getchar>
               return i;
1a00129c:	4640      	mov	r0, r8
1a00129e:	e003      	b.n	1a0012a8 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a0012a0:	2313      	movs	r3, #19
1a0012a2:	6033      	str	r3, [r6, #0]
      return -1;
1a0012a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a0012a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a0012ac:	2313      	movs	r3, #19
1a0012ae:	6003      	str	r3, [r0, #0]
      return -1;
1a0012b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0012b4:	4770      	bx	lr

1a0012b6 <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a0012b6:	2902      	cmp	r1, #2
1a0012b8:	d80c      	bhi.n	1a0012d4 <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a0012ba:	b570      	push	{r4, r5, r6, lr}
1a0012bc:	461d      	mov	r5, r3
1a0012be:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0012c0:	2400      	movs	r4, #0
1a0012c2:	e003      	b.n	1a0012cc <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a0012c4:	5d30      	ldrb	r0, [r6, r4]
1a0012c6:	f001 ff8f 	bl	1a0031e8 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a0012ca:	3401      	adds	r4, #1
1a0012cc:	42ac      	cmp	r4, r5
1a0012ce:	d3f9      	bcc.n	1a0012c4 <_write_r+0xe>
       return n;
1a0012d0:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0012d2:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0012d4:	2313      	movs	r3, #19
1a0012d6:	6003      	str	r3, [r0, #0]
       return -1;
1a0012d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0012dc:	4770      	bx	lr
1a0012de:	Address 0x000000001a0012de is out of bounds.


1a0012e0 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0012e0:	4b05      	ldr	r3, [pc, #20]	; (1a0012f8 <_sbrk_r+0x18>)
1a0012e2:	681b      	ldr	r3, [r3, #0]
1a0012e4:	b123      	cbz	r3, 1a0012f0 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0012e6:	4b04      	ldr	r3, [pc, #16]	; (1a0012f8 <_sbrk_r+0x18>)
1a0012e8:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0012ea:	4401      	add	r1, r0
1a0012ec:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0012ee:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0012f0:	4b01      	ldr	r3, [pc, #4]	; (1a0012f8 <_sbrk_r+0x18>)
1a0012f2:	4a02      	ldr	r2, [pc, #8]	; (1a0012fc <_sbrk_r+0x1c>)
1a0012f4:	601a      	str	r2, [r3, #0]
1a0012f6:	e7f6      	b.n	1a0012e6 <_sbrk_r+0x6>
1a0012f8:	10000a7c 	.word	0x10000a7c
1a0012fc:	10007a28 	.word	0x10007a28

1a001300 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a001300:	4a12      	ldr	r2, [pc, #72]	; (1a00134c <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a001302:	f012 0f07 	tst.w	r2, #7
1a001306:	d01e      	beq.n	1a001346 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a001308:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a00130a:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a00130e:	f5c1 43c8 	rsb	r3, r1, #25600	; 0x6400
1a001312:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a001314:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a001316:	480e      	ldr	r0, [pc, #56]	; (1a001350 <prvHeapInit+0x50>)
1a001318:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a00131a:	2100      	movs	r1, #0
1a00131c:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a00131e:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a001320:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a001322:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a001326:	480b      	ldr	r0, [pc, #44]	; (1a001354 <prvHeapInit+0x54>)
1a001328:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a00132a:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a00132c:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a00132e:	1a99      	subs	r1, r3, r2
1a001330:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a001332:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a001334:	4b08      	ldr	r3, [pc, #32]	; (1a001358 <prvHeapInit+0x58>)
1a001336:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a001338:	4b08      	ldr	r3, [pc, #32]	; (1a00135c <prvHeapInit+0x5c>)
1a00133a:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a00133c:	4b08      	ldr	r3, [pc, #32]	; (1a001360 <prvHeapInit+0x60>)
1a00133e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a001342:	601a      	str	r2, [r3, #0]
}
1a001344:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a001346:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
1a00134a:	e7e4      	b.n	1a001316 <prvHeapInit+0x16>
1a00134c:	10000a84 	.word	0x10000a84
1a001350:	10006e90 	.word	0x10006e90
1a001354:	10000a80 	.word	0x10000a80
1a001358:	10006e8c 	.word	0x10006e8c
1a00135c:	10006e88 	.word	0x10006e88
1a001360:	10006e84 	.word	0x10006e84

1a001364 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a001364:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a001366:	4b13      	ldr	r3, [pc, #76]	; (1a0013b4 <prvInsertBlockIntoFreeList+0x50>)
1a001368:	681a      	ldr	r2, [r3, #0]
1a00136a:	4282      	cmp	r2, r0
1a00136c:	d31b      	bcc.n	1a0013a6 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a00136e:	6859      	ldr	r1, [r3, #4]
1a001370:	185c      	adds	r4, r3, r1
1a001372:	4284      	cmp	r4, r0
1a001374:	d103      	bne.n	1a00137e <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a001376:	6840      	ldr	r0, [r0, #4]
1a001378:	4401      	add	r1, r0
1a00137a:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
1a00137c:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a00137e:	6841      	ldr	r1, [r0, #4]
1a001380:	1844      	adds	r4, r0, r1
1a001382:	42a2      	cmp	r2, r4
1a001384:	d113      	bne.n	1a0013ae <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a001386:	4c0c      	ldr	r4, [pc, #48]	; (1a0013b8 <prvInsertBlockIntoFreeList+0x54>)
1a001388:	6824      	ldr	r4, [r4, #0]
1a00138a:	42a2      	cmp	r2, r4
1a00138c:	d00d      	beq.n	1a0013aa <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a00138e:	6852      	ldr	r2, [r2, #4]
1a001390:	4411      	add	r1, r2
1a001392:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a001394:	681a      	ldr	r2, [r3, #0]
1a001396:	6812      	ldr	r2, [r2, #0]
1a001398:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a00139a:	4298      	cmp	r0, r3
1a00139c:	d000      	beq.n	1a0013a0 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a00139e:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a0013a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0013a4:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a0013a6:	4613      	mov	r3, r2
1a0013a8:	e7de      	b.n	1a001368 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a0013aa:	6004      	str	r4, [r0, #0]
1a0013ac:	e7f5      	b.n	1a00139a <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a0013ae:	6002      	str	r2, [r0, #0]
1a0013b0:	e7f3      	b.n	1a00139a <prvInsertBlockIntoFreeList+0x36>
1a0013b2:	bf00      	nop
1a0013b4:	10006e90 	.word	0x10006e90
1a0013b8:	10000a80 	.word	0x10000a80

1a0013bc <pvPortMalloc>:
{
1a0013bc:	b570      	push	{r4, r5, r6, lr}
1a0013be:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a0013c0:	f000 ff06 	bl	1a0021d0 <vTaskSuspendAll>
		if( pxEnd == NULL )
1a0013c4:	4b3f      	ldr	r3, [pc, #252]	; (1a0014c4 <pvPortMalloc+0x108>)
1a0013c6:	681b      	ldr	r3, [r3, #0]
1a0013c8:	b1a3      	cbz	r3, 1a0013f4 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a0013ca:	4b3f      	ldr	r3, [pc, #252]	; (1a0014c8 <pvPortMalloc+0x10c>)
1a0013cc:	681b      	ldr	r3, [r3, #0]
1a0013ce:	421c      	tst	r4, r3
1a0013d0:	d013      	beq.n	1a0013fa <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
1a0013d2:	f000 ff97 	bl	1a002304 <xTaskResumeAll>
void *pvReturn = NULL;
1a0013d6:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a0013d8:	f000 fc9c 	bl	1a001d14 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a0013dc:	f016 0f07 	tst.w	r6, #7
1a0013e0:	d06e      	beq.n	1a0014c0 <pvPortMalloc+0x104>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0013e2:	f04f 0320 	mov.w	r3, #32
1a0013e6:	f383 8811 	msr	BASEPRI, r3
1a0013ea:	f3bf 8f6f 	isb	sy
1a0013ee:	f3bf 8f4f 	dsb	sy
1a0013f2:	e7fe      	b.n	1a0013f2 <pvPortMalloc+0x36>
			prvHeapInit();
1a0013f4:	f7ff ff84 	bl	1a001300 <prvHeapInit>
1a0013f8:	e7e7      	b.n	1a0013ca <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
1a0013fa:	b194      	cbz	r4, 1a001422 <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a0013fc:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a0013fe:	f014 0f07 	tst.w	r4, #7
1a001402:	d00e      	beq.n	1a001422 <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a001404:	f024 0407 	bic.w	r4, r4, #7
1a001408:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a00140a:	f004 0307 	and.w	r3, r4, #7
1a00140e:	b143      	cbz	r3, 1a001422 <pvPortMalloc+0x66>
1a001410:	f04f 0320 	mov.w	r3, #32
1a001414:	f383 8811 	msr	BASEPRI, r3
1a001418:	f3bf 8f6f 	isb	sy
1a00141c:	f3bf 8f4f 	dsb	sy
1a001420:	e7fe      	b.n	1a001420 <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a001422:	b134      	cbz	r4, 1a001432 <pvPortMalloc+0x76>
1a001424:	4b29      	ldr	r3, [pc, #164]	; (1a0014cc <pvPortMalloc+0x110>)
1a001426:	681b      	ldr	r3, [r3, #0]
1a001428:	42a3      	cmp	r3, r4
1a00142a:	d306      	bcc.n	1a00143a <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a00142c:	4b28      	ldr	r3, [pc, #160]	; (1a0014d0 <pvPortMalloc+0x114>)
1a00142e:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a001430:	e009      	b.n	1a001446 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a001432:	f000 ff67 	bl	1a002304 <xTaskResumeAll>
void *pvReturn = NULL;
1a001436:	2600      	movs	r6, #0
1a001438:	e7ce      	b.n	1a0013d8 <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
1a00143a:	f000 ff63 	bl	1a002304 <xTaskResumeAll>
void *pvReturn = NULL;
1a00143e:	2600      	movs	r6, #0
1a001440:	e7ca      	b.n	1a0013d8 <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
1a001442:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a001444:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a001446:	686a      	ldr	r2, [r5, #4]
1a001448:	42a2      	cmp	r2, r4
1a00144a:	d202      	bcs.n	1a001452 <pvPortMalloc+0x96>
1a00144c:	682a      	ldr	r2, [r5, #0]
1a00144e:	2a00      	cmp	r2, #0
1a001450:	d1f7      	bne.n	1a001442 <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a001452:	4a1c      	ldr	r2, [pc, #112]	; (1a0014c4 <pvPortMalloc+0x108>)
1a001454:	6812      	ldr	r2, [r2, #0]
1a001456:	42aa      	cmp	r2, r5
1a001458:	d014      	beq.n	1a001484 <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a00145a:	681e      	ldr	r6, [r3, #0]
1a00145c:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a00145e:	682a      	ldr	r2, [r5, #0]
1a001460:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a001462:	686b      	ldr	r3, [r5, #4]
1a001464:	1b1b      	subs	r3, r3, r4
1a001466:	2b10      	cmp	r3, #16
1a001468:	d914      	bls.n	1a001494 <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a00146a:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a00146c:	f010 0f07 	tst.w	r0, #7
1a001470:	d00c      	beq.n	1a00148c <pvPortMalloc+0xd0>
1a001472:	f04f 0320 	mov.w	r3, #32
1a001476:	f383 8811 	msr	BASEPRI, r3
1a00147a:	f3bf 8f6f 	isb	sy
1a00147e:	f3bf 8f4f 	dsb	sy
1a001482:	e7fe      	b.n	1a001482 <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a001484:	f000 ff3e 	bl	1a002304 <xTaskResumeAll>
void *pvReturn = NULL;
1a001488:	2600      	movs	r6, #0
1a00148a:	e7a5      	b.n	1a0013d8 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a00148c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a00148e:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a001490:	f7ff ff68 	bl	1a001364 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a001494:	686a      	ldr	r2, [r5, #4]
1a001496:	490d      	ldr	r1, [pc, #52]	; (1a0014cc <pvPortMalloc+0x110>)
1a001498:	680b      	ldr	r3, [r1, #0]
1a00149a:	1a9b      	subs	r3, r3, r2
1a00149c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a00149e:	490d      	ldr	r1, [pc, #52]	; (1a0014d4 <pvPortMalloc+0x118>)
1a0014a0:	6809      	ldr	r1, [r1, #0]
1a0014a2:	428b      	cmp	r3, r1
1a0014a4:	d201      	bcs.n	1a0014aa <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a0014a6:	490b      	ldr	r1, [pc, #44]	; (1a0014d4 <pvPortMalloc+0x118>)
1a0014a8:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a0014aa:	4b07      	ldr	r3, [pc, #28]	; (1a0014c8 <pvPortMalloc+0x10c>)
1a0014ac:	681b      	ldr	r3, [r3, #0]
1a0014ae:	4313      	orrs	r3, r2
1a0014b0:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a0014b2:	2300      	movs	r3, #0
1a0014b4:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a0014b6:	f000 ff25 	bl	1a002304 <xTaskResumeAll>
		if( pvReturn == NULL )
1a0014ba:	2e00      	cmp	r6, #0
1a0014bc:	d18e      	bne.n	1a0013dc <pvPortMalloc+0x20>
1a0014be:	e78b      	b.n	1a0013d8 <pvPortMalloc+0x1c>
}
1a0014c0:	4630      	mov	r0, r6
1a0014c2:	bd70      	pop	{r4, r5, r6, pc}
1a0014c4:	10000a80 	.word	0x10000a80
1a0014c8:	10006e84 	.word	0x10006e84
1a0014cc:	10006e88 	.word	0x10006e88
1a0014d0:	10006e90 	.word	0x10006e90
1a0014d4:	10006e8c 	.word	0x10006e8c

1a0014d8 <vPortFree>:
	if( pv != NULL )
1a0014d8:	b380      	cbz	r0, 1a00153c <vPortFree+0x64>
{
1a0014da:	b538      	push	{r3, r4, r5, lr}
1a0014dc:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a0014de:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a0014e2:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a0014e6:	4916      	ldr	r1, [pc, #88]	; (1a001540 <vPortFree+0x68>)
1a0014e8:	6809      	ldr	r1, [r1, #0]
1a0014ea:	420a      	tst	r2, r1
1a0014ec:	d108      	bne.n	1a001500 <vPortFree+0x28>
1a0014ee:	f04f 0320 	mov.w	r3, #32
1a0014f2:	f383 8811 	msr	BASEPRI, r3
1a0014f6:	f3bf 8f6f 	isb	sy
1a0014fa:	f3bf 8f4f 	dsb	sy
1a0014fe:	e7fe      	b.n	1a0014fe <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a001500:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a001504:	b140      	cbz	r0, 1a001518 <vPortFree+0x40>
1a001506:	f04f 0320 	mov.w	r3, #32
1a00150a:	f383 8811 	msr	BASEPRI, r3
1a00150e:	f3bf 8f6f 	isb	sy
1a001512:	f3bf 8f4f 	dsb	sy
1a001516:	e7fe      	b.n	1a001516 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a001518:	ea22 0201 	bic.w	r2, r2, r1
1a00151c:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a001520:	f000 fe56 	bl	1a0021d0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a001524:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a001528:	4a06      	ldr	r2, [pc, #24]	; (1a001544 <vPortFree+0x6c>)
1a00152a:	6813      	ldr	r3, [r2, #0]
1a00152c:	440b      	add	r3, r1
1a00152e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a001530:	4628      	mov	r0, r5
1a001532:	f7ff ff17 	bl	1a001364 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a001536:	f000 fee5 	bl	1a002304 <xTaskResumeAll>
}
1a00153a:	bd38      	pop	{r3, r4, r5, pc}
1a00153c:	4770      	bx	lr
1a00153e:	bf00      	nop
1a001540:	10006e84 	.word	0x10006e84
1a001544:	10006e88 	.word	0x10006e88

1a001548 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a001548:	b510      	push	{r4, lr}
1a00154a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a00154c:	f001 fbfa 	bl	1a002d44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a001550:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001552:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001554:	429a      	cmp	r2, r3
1a001556:	d004      	beq.n	1a001562 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a001558:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a00155a:	f001 fc15 	bl	1a002d88 <vPortExitCritical>

	return xReturn;
}
1a00155e:	4620      	mov	r0, r4
1a001560:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a001562:	2401      	movs	r4, #1
1a001564:	e7f9      	b.n	1a00155a <prvIsQueueFull+0x12>

1a001566 <prvIsQueueEmpty>:
{
1a001566:	b510      	push	{r4, lr}
1a001568:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a00156a:	f001 fbeb 	bl	1a002d44 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a00156e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001570:	b123      	cbz	r3, 1a00157c <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a001572:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001574:	f001 fc08 	bl	1a002d88 <vPortExitCritical>
}
1a001578:	4620      	mov	r0, r4
1a00157a:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a00157c:	2401      	movs	r4, #1
1a00157e:	e7f9      	b.n	1a001574 <prvIsQueueEmpty+0xe>

1a001580 <prvCopyDataToQueue>:
{
1a001580:	b570      	push	{r4, r5, r6, lr}
1a001582:	4604      	mov	r4, r0
1a001584:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001586:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a001588:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00158a:	b95a      	cbnz	r2, 1a0015a4 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a00158c:	6803      	ldr	r3, [r0, #0]
1a00158e:	b11b      	cbz	r3, 1a001598 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a001590:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a001592:	3501      	adds	r5, #1
1a001594:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a001596:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a001598:	6840      	ldr	r0, [r0, #4]
1a00159a:	f001 f8bf 	bl	1a00271c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a00159e:	2300      	movs	r3, #0
1a0015a0:	6063      	str	r3, [r4, #4]
1a0015a2:	e7f6      	b.n	1a001592 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a0015a4:	b96e      	cbnz	r6, 1a0015c2 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a0015a6:	6880      	ldr	r0, [r0, #8]
1a0015a8:	f004 fd4c 	bl	1a006044 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a0015ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0015ae:	68a3      	ldr	r3, [r4, #8]
1a0015b0:	4413      	add	r3, r2
1a0015b2:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0015b4:	6862      	ldr	r2, [r4, #4]
1a0015b6:	4293      	cmp	r3, r2
1a0015b8:	d319      	bcc.n	1a0015ee <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a0015ba:	6823      	ldr	r3, [r4, #0]
1a0015bc:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a0015be:	2000      	movs	r0, #0
1a0015c0:	e7e7      	b.n	1a001592 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0015c2:	68c0      	ldr	r0, [r0, #12]
1a0015c4:	f004 fd3e 	bl	1a006044 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a0015c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0015ca:	4252      	negs	r2, r2
1a0015cc:	68e3      	ldr	r3, [r4, #12]
1a0015ce:	4413      	add	r3, r2
1a0015d0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0015d2:	6821      	ldr	r1, [r4, #0]
1a0015d4:	428b      	cmp	r3, r1
1a0015d6:	d202      	bcs.n	1a0015de <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a0015d8:	6863      	ldr	r3, [r4, #4]
1a0015da:	441a      	add	r2, r3
1a0015dc:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a0015de:	2e02      	cmp	r6, #2
1a0015e0:	d001      	beq.n	1a0015e6 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a0015e2:	2000      	movs	r0, #0
1a0015e4:	e7d5      	b.n	1a001592 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0015e6:	b125      	cbz	r5, 1a0015f2 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a0015e8:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a0015ea:	2000      	movs	r0, #0
1a0015ec:	e7d1      	b.n	1a001592 <prvCopyDataToQueue+0x12>
1a0015ee:	2000      	movs	r0, #0
1a0015f0:	e7cf      	b.n	1a001592 <prvCopyDataToQueue+0x12>
1a0015f2:	2000      	movs	r0, #0
1a0015f4:	e7cd      	b.n	1a001592 <prvCopyDataToQueue+0x12>

1a0015f6 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a0015f6:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0015f8:	b172      	cbz	r2, 1a001618 <prvCopyDataFromQueue+0x22>
{
1a0015fa:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a0015fc:	68c3      	ldr	r3, [r0, #12]
1a0015fe:	4413      	add	r3, r2
1a001600:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a001602:	6844      	ldr	r4, [r0, #4]
1a001604:	42a3      	cmp	r3, r4
1a001606:	d301      	bcc.n	1a00160c <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a001608:	6803      	ldr	r3, [r0, #0]
1a00160a:	60c3      	str	r3, [r0, #12]
1a00160c:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a00160e:	68c1      	ldr	r1, [r0, #12]
1a001610:	4620      	mov	r0, r4
1a001612:	f004 fd17 	bl	1a006044 <memcpy>
}
1a001616:	bd10      	pop	{r4, pc}
1a001618:	4770      	bx	lr

1a00161a <prvUnlockQueue>:
{
1a00161a:	b538      	push	{r3, r4, r5, lr}
1a00161c:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a00161e:	f001 fb91 	bl	1a002d44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a001622:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a001626:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a001628:	e003      	b.n	1a001632 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a00162a:	f001 f861 	bl	1a0026f0 <vTaskMissedYield>
			--cTxLock;
1a00162e:	3c01      	subs	r4, #1
1a001630:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a001632:	2c00      	cmp	r4, #0
1a001634:	dd08      	ble.n	1a001648 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001636:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a001638:	b133      	cbz	r3, 1a001648 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00163a:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a00163e:	f000 ffc5 	bl	1a0025cc <xTaskRemoveFromEventList>
1a001642:	2800      	cmp	r0, #0
1a001644:	d0f3      	beq.n	1a00162e <prvUnlockQueue+0x14>
1a001646:	e7f0      	b.n	1a00162a <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a001648:	23ff      	movs	r3, #255	; 0xff
1a00164a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a00164e:	f001 fb9b 	bl	1a002d88 <vPortExitCritical>
	taskENTER_CRITICAL();
1a001652:	f001 fb77 	bl	1a002d44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a001656:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a00165a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a00165c:	e003      	b.n	1a001666 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a00165e:	f001 f847 	bl	1a0026f0 <vTaskMissedYield>
				--cRxLock;
1a001662:	3c01      	subs	r4, #1
1a001664:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a001666:	2c00      	cmp	r4, #0
1a001668:	dd08      	ble.n	1a00167c <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00166a:	692b      	ldr	r3, [r5, #16]
1a00166c:	b133      	cbz	r3, 1a00167c <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00166e:	f105 0010 	add.w	r0, r5, #16
1a001672:	f000 ffab 	bl	1a0025cc <xTaskRemoveFromEventList>
1a001676:	2800      	cmp	r0, #0
1a001678:	d0f3      	beq.n	1a001662 <prvUnlockQueue+0x48>
1a00167a:	e7f0      	b.n	1a00165e <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a00167c:	23ff      	movs	r3, #255	; 0xff
1a00167e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a001682:	f001 fb81 	bl	1a002d88 <vPortExitCritical>
}
1a001686:	bd38      	pop	{r3, r4, r5, pc}

1a001688 <xQueueGenericReset>:
{
1a001688:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a00168a:	b940      	cbnz	r0, 1a00169e <xQueueGenericReset+0x16>
1a00168c:	f04f 0320 	mov.w	r3, #32
1a001690:	f383 8811 	msr	BASEPRI, r3
1a001694:	f3bf 8f6f 	isb	sy
1a001698:	f3bf 8f4f 	dsb	sy
1a00169c:	e7fe      	b.n	1a00169c <xQueueGenericReset+0x14>
1a00169e:	4604      	mov	r4, r0
1a0016a0:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a0016a2:	f001 fb4f 	bl	1a002d44 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a0016a6:	6821      	ldr	r1, [r4, #0]
1a0016a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0016aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0016ac:	fb03 1002 	mla	r0, r3, r2, r1
1a0016b0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a0016b2:	2000      	movs	r0, #0
1a0016b4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a0016b6:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a0016b8:	3a01      	subs	r2, #1
1a0016ba:	fb02 1303 	mla	r3, r2, r3, r1
1a0016be:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a0016c0:	23ff      	movs	r3, #255	; 0xff
1a0016c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a0016c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a0016ca:	b9a5      	cbnz	r5, 1a0016f6 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0016cc:	6923      	ldr	r3, [r4, #16]
1a0016ce:	b91b      	cbnz	r3, 1a0016d8 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a0016d0:	f001 fb5a 	bl	1a002d88 <vPortExitCritical>
}
1a0016d4:	2001      	movs	r0, #1
1a0016d6:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0016d8:	f104 0010 	add.w	r0, r4, #16
1a0016dc:	f000 ff76 	bl	1a0025cc <xTaskRemoveFromEventList>
1a0016e0:	2800      	cmp	r0, #0
1a0016e2:	d0f5      	beq.n	1a0016d0 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a0016e4:	4b08      	ldr	r3, [pc, #32]	; (1a001708 <xQueueGenericReset+0x80>)
1a0016e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0016ea:	601a      	str	r2, [r3, #0]
1a0016ec:	f3bf 8f4f 	dsb	sy
1a0016f0:	f3bf 8f6f 	isb	sy
1a0016f4:	e7ec      	b.n	1a0016d0 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a0016f6:	f104 0010 	add.w	r0, r4, #16
1a0016fa:	f000 fa94 	bl	1a001c26 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a0016fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001702:	f000 fa90 	bl	1a001c26 <vListInitialise>
1a001706:	e7e3      	b.n	1a0016d0 <xQueueGenericReset+0x48>
1a001708:	e000ed04 	.word	0xe000ed04

1a00170c <prvInitialiseNewQueue>:
{
1a00170c:	b538      	push	{r3, r4, r5, lr}
1a00170e:	461d      	mov	r5, r3
1a001710:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a001712:	460b      	mov	r3, r1
1a001714:	b149      	cbz	r1, 1a00172a <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a001716:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a001718:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a00171a:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a00171c:	2101      	movs	r1, #1
1a00171e:	4620      	mov	r0, r4
1a001720:	f7ff ffb2 	bl	1a001688 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a001724:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a001728:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a00172a:	6024      	str	r4, [r4, #0]
1a00172c:	e7f4      	b.n	1a001718 <prvInitialiseNewQueue+0xc>

1a00172e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a00172e:	b940      	cbnz	r0, 1a001742 <xQueueGenericCreateStatic+0x14>
1a001730:	f04f 0320 	mov.w	r3, #32
1a001734:	f383 8811 	msr	BASEPRI, r3
1a001738:	f3bf 8f6f 	isb	sy
1a00173c:	f3bf 8f4f 	dsb	sy
1a001740:	e7fe      	b.n	1a001740 <xQueueGenericCreateStatic+0x12>
	{
1a001742:	b510      	push	{r4, lr}
1a001744:	b084      	sub	sp, #16
1a001746:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a001748:	b153      	cbz	r3, 1a001760 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a00174a:	b192      	cbz	r2, 1a001772 <xQueueGenericCreateStatic+0x44>
1a00174c:	b989      	cbnz	r1, 1a001772 <xQueueGenericCreateStatic+0x44>
1a00174e:	f04f 0320 	mov.w	r3, #32
1a001752:	f383 8811 	msr	BASEPRI, r3
1a001756:	f3bf 8f6f 	isb	sy
1a00175a:	f3bf 8f4f 	dsb	sy
1a00175e:	e7fe      	b.n	1a00175e <xQueueGenericCreateStatic+0x30>
1a001760:	f04f 0320 	mov.w	r3, #32
1a001764:	f383 8811 	msr	BASEPRI, r3
1a001768:	f3bf 8f6f 	isb	sy
1a00176c:	f3bf 8f4f 	dsb	sy
1a001770:	e7fe      	b.n	1a001770 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a001772:	b94a      	cbnz	r2, 1a001788 <xQueueGenericCreateStatic+0x5a>
1a001774:	b141      	cbz	r1, 1a001788 <xQueueGenericCreateStatic+0x5a>
1a001776:	f04f 0320 	mov.w	r3, #32
1a00177a:	f383 8811 	msr	BASEPRI, r3
1a00177e:	f3bf 8f6f 	isb	sy
1a001782:	f3bf 8f4f 	dsb	sy
1a001786:	e7fe      	b.n	1a001786 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a001788:	2050      	movs	r0, #80	; 0x50
1a00178a:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a00178c:	9803      	ldr	r0, [sp, #12]
1a00178e:	2850      	cmp	r0, #80	; 0x50
1a001790:	d008      	beq.n	1a0017a4 <xQueueGenericCreateStatic+0x76>
1a001792:	f04f 0320 	mov.w	r3, #32
1a001796:	f383 8811 	msr	BASEPRI, r3
1a00179a:	f3bf 8f6f 	isb	sy
1a00179e:	f3bf 8f4f 	dsb	sy
1a0017a2:	e7fe      	b.n	1a0017a2 <xQueueGenericCreateStatic+0x74>
1a0017a4:	4620      	mov	r0, r4
1a0017a6:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a0017a8:	2301      	movs	r3, #1
1a0017aa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a0017ae:	9400      	str	r4, [sp, #0]
1a0017b0:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a0017b4:	f7ff ffaa 	bl	1a00170c <prvInitialiseNewQueue>
	}
1a0017b8:	4620      	mov	r0, r4
1a0017ba:	b004      	add	sp, #16
1a0017bc:	bd10      	pop	{r4, pc}

1a0017be <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0017be:	b940      	cbnz	r0, 1a0017d2 <xQueueGenericCreate+0x14>
1a0017c0:	f04f 0320 	mov.w	r3, #32
1a0017c4:	f383 8811 	msr	BASEPRI, r3
1a0017c8:	f3bf 8f6f 	isb	sy
1a0017cc:	f3bf 8f4f 	dsb	sy
1a0017d0:	e7fe      	b.n	1a0017d0 <xQueueGenericCreate+0x12>
	{
1a0017d2:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0017d4:	b083      	sub	sp, #12
1a0017d6:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a0017d8:	b111      	cbz	r1, 1a0017e0 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0017da:	fb01 f000 	mul.w	r0, r1, r0
1a0017de:	e000      	b.n	1a0017e2 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a0017e0:	2000      	movs	r0, #0
1a0017e2:	4617      	mov	r7, r2
1a0017e4:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a0017e6:	3050      	adds	r0, #80	; 0x50
1a0017e8:	f7ff fde8 	bl	1a0013bc <pvPortMalloc>
		if( pxNewQueue != NULL )
1a0017ec:	4605      	mov	r5, r0
1a0017ee:	b150      	cbz	r0, 1a001806 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a0017f0:	2300      	movs	r3, #0
1a0017f2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a0017f6:	9000      	str	r0, [sp, #0]
1a0017f8:	463b      	mov	r3, r7
1a0017fa:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a0017fe:	4621      	mov	r1, r4
1a001800:	4630      	mov	r0, r6
1a001802:	f7ff ff83 	bl	1a00170c <prvInitialiseNewQueue>
	}
1a001806:	4628      	mov	r0, r5
1a001808:	b003      	add	sp, #12
1a00180a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a00180c <xQueueGenericSend>:
{
1a00180c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00180e:	b085      	sub	sp, #20
1a001810:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a001812:	b160      	cbz	r0, 1a00182e <xQueueGenericSend+0x22>
1a001814:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001816:	b999      	cbnz	r1, 1a001840 <xQueueGenericSend+0x34>
1a001818:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00181a:	b18a      	cbz	r2, 1a001840 <xQueueGenericSend+0x34>
1a00181c:	f04f 0320 	mov.w	r3, #32
1a001820:	f383 8811 	msr	BASEPRI, r3
1a001824:	f3bf 8f6f 	isb	sy
1a001828:	f3bf 8f4f 	dsb	sy
1a00182c:	e7fe      	b.n	1a00182c <xQueueGenericSend+0x20>
1a00182e:	f04f 0320 	mov.w	r3, #32
1a001832:	f383 8811 	msr	BASEPRI, r3
1a001836:	f3bf 8f6f 	isb	sy
1a00183a:	f3bf 8f4f 	dsb	sy
1a00183e:	e7fe      	b.n	1a00183e <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001840:	2b02      	cmp	r3, #2
1a001842:	d10b      	bne.n	1a00185c <xQueueGenericSend+0x50>
1a001844:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a001846:	2a01      	cmp	r2, #1
1a001848:	d008      	beq.n	1a00185c <xQueueGenericSend+0x50>
1a00184a:	f04f 0320 	mov.w	r3, #32
1a00184e:	f383 8811 	msr	BASEPRI, r3
1a001852:	f3bf 8f6f 	isb	sy
1a001856:	f3bf 8f4f 	dsb	sy
1a00185a:	e7fe      	b.n	1a00185a <xQueueGenericSend+0x4e>
1a00185c:	461e      	mov	r6, r3
1a00185e:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001860:	f000 ff4c 	bl	1a0026fc <xTaskGetSchedulerState>
1a001864:	b950      	cbnz	r0, 1a00187c <xQueueGenericSend+0x70>
1a001866:	9b01      	ldr	r3, [sp, #4]
1a001868:	b153      	cbz	r3, 1a001880 <xQueueGenericSend+0x74>
1a00186a:	f04f 0320 	mov.w	r3, #32
1a00186e:	f383 8811 	msr	BASEPRI, r3
1a001872:	f3bf 8f6f 	isb	sy
1a001876:	f3bf 8f4f 	dsb	sy
1a00187a:	e7fe      	b.n	1a00187a <xQueueGenericSend+0x6e>
1a00187c:	2500      	movs	r5, #0
1a00187e:	e03a      	b.n	1a0018f6 <xQueueGenericSend+0xea>
1a001880:	2500      	movs	r5, #0
1a001882:	e038      	b.n	1a0018f6 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001884:	4632      	mov	r2, r6
1a001886:	4639      	mov	r1, r7
1a001888:	4620      	mov	r0, r4
1a00188a:	f7ff fe79 	bl	1a001580 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00188e:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001890:	b94b      	cbnz	r3, 1a0018a6 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a001892:	b1a8      	cbz	r0, 1a0018c0 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a001894:	4b3b      	ldr	r3, [pc, #236]	; (1a001984 <xQueueGenericSend+0x178>)
1a001896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00189a:	601a      	str	r2, [r3, #0]
1a00189c:	f3bf 8f4f 	dsb	sy
1a0018a0:	f3bf 8f6f 	isb	sy
1a0018a4:	e00c      	b.n	1a0018c0 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0018a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0018aa:	f000 fe8f 	bl	1a0025cc <xTaskRemoveFromEventList>
1a0018ae:	b138      	cbz	r0, 1a0018c0 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a0018b0:	4b34      	ldr	r3, [pc, #208]	; (1a001984 <xQueueGenericSend+0x178>)
1a0018b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0018b6:	601a      	str	r2, [r3, #0]
1a0018b8:	f3bf 8f4f 	dsb	sy
1a0018bc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a0018c0:	f001 fa62 	bl	1a002d88 <vPortExitCritical>
				return pdPASS;
1a0018c4:	2001      	movs	r0, #1
}
1a0018c6:	b005      	add	sp, #20
1a0018c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a0018ca:	f001 fa5d 	bl	1a002d88 <vPortExitCritical>
					return errQUEUE_FULL;
1a0018ce:	2000      	movs	r0, #0
1a0018d0:	e7f9      	b.n	1a0018c6 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0018d2:	a802      	add	r0, sp, #8
1a0018d4:	f000 fec0 	bl	1a002658 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0018d8:	2501      	movs	r5, #1
1a0018da:	e019      	b.n	1a001910 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a0018dc:	2300      	movs	r3, #0
1a0018de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0018e2:	e021      	b.n	1a001928 <xQueueGenericSend+0x11c>
1a0018e4:	2300      	movs	r3, #0
1a0018e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0018ea:	e023      	b.n	1a001934 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a0018ec:	4620      	mov	r0, r4
1a0018ee:	f7ff fe94 	bl	1a00161a <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0018f2:	f000 fd07 	bl	1a002304 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a0018f6:	f001 fa25 	bl	1a002d44 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a0018fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0018fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0018fe:	429a      	cmp	r2, r3
1a001900:	d3c0      	bcc.n	1a001884 <xQueueGenericSend+0x78>
1a001902:	2e02      	cmp	r6, #2
1a001904:	d0be      	beq.n	1a001884 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001906:	9b01      	ldr	r3, [sp, #4]
1a001908:	2b00      	cmp	r3, #0
1a00190a:	d0de      	beq.n	1a0018ca <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a00190c:	2d00      	cmp	r5, #0
1a00190e:	d0e0      	beq.n	1a0018d2 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a001910:	f001 fa3a 	bl	1a002d88 <vPortExitCritical>
		vTaskSuspendAll();
1a001914:	f000 fc5c 	bl	1a0021d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001918:	f001 fa14 	bl	1a002d44 <vPortEnterCritical>
1a00191c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001920:	b25b      	sxtb	r3, r3
1a001922:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001926:	d0d9      	beq.n	1a0018dc <xQueueGenericSend+0xd0>
1a001928:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a00192c:	b25b      	sxtb	r3, r3
1a00192e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001932:	d0d7      	beq.n	1a0018e4 <xQueueGenericSend+0xd8>
1a001934:	f001 fa28 	bl	1a002d88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001938:	a901      	add	r1, sp, #4
1a00193a:	a802      	add	r0, sp, #8
1a00193c:	f000 fe98 	bl	1a002670 <xTaskCheckForTimeOut>
1a001940:	b9c8      	cbnz	r0, 1a001976 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a001942:	4620      	mov	r0, r4
1a001944:	f7ff fe00 	bl	1a001548 <prvIsQueueFull>
1a001948:	2800      	cmp	r0, #0
1a00194a:	d0cf      	beq.n	1a0018ec <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a00194c:	9901      	ldr	r1, [sp, #4]
1a00194e:	f104 0010 	add.w	r0, r4, #16
1a001952:	f000 fe07 	bl	1a002564 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001956:	4620      	mov	r0, r4
1a001958:	f7ff fe5f 	bl	1a00161a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a00195c:	f000 fcd2 	bl	1a002304 <xTaskResumeAll>
1a001960:	2800      	cmp	r0, #0
1a001962:	d1c8      	bne.n	1a0018f6 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a001964:	4b07      	ldr	r3, [pc, #28]	; (1a001984 <xQueueGenericSend+0x178>)
1a001966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00196a:	601a      	str	r2, [r3, #0]
1a00196c:	f3bf 8f4f 	dsb	sy
1a001970:	f3bf 8f6f 	isb	sy
1a001974:	e7bf      	b.n	1a0018f6 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a001976:	4620      	mov	r0, r4
1a001978:	f7ff fe4f 	bl	1a00161a <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a00197c:	f000 fcc2 	bl	1a002304 <xTaskResumeAll>
			return errQUEUE_FULL;
1a001980:	2000      	movs	r0, #0
1a001982:	e7a0      	b.n	1a0018c6 <xQueueGenericSend+0xba>
1a001984:	e000ed04 	.word	0xe000ed04

1a001988 <xQueueGenericSendFromISR>:
{
1a001988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a00198c:	b160      	cbz	r0, 1a0019a8 <xQueueGenericSendFromISR+0x20>
1a00198e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001990:	b999      	cbnz	r1, 1a0019ba <xQueueGenericSendFromISR+0x32>
1a001992:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a001994:	b188      	cbz	r0, 1a0019ba <xQueueGenericSendFromISR+0x32>
1a001996:	f04f 0320 	mov.w	r3, #32
1a00199a:	f383 8811 	msr	BASEPRI, r3
1a00199e:	f3bf 8f6f 	isb	sy
1a0019a2:	f3bf 8f4f 	dsb	sy
1a0019a6:	e7fe      	b.n	1a0019a6 <xQueueGenericSendFromISR+0x1e>
1a0019a8:	f04f 0320 	mov.w	r3, #32
1a0019ac:	f383 8811 	msr	BASEPRI, r3
1a0019b0:	f3bf 8f6f 	isb	sy
1a0019b4:	f3bf 8f4f 	dsb	sy
1a0019b8:	e7fe      	b.n	1a0019b8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0019ba:	2b02      	cmp	r3, #2
1a0019bc:	d10b      	bne.n	1a0019d6 <xQueueGenericSendFromISR+0x4e>
1a0019be:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a0019c0:	2801      	cmp	r0, #1
1a0019c2:	d008      	beq.n	1a0019d6 <xQueueGenericSendFromISR+0x4e>
1a0019c4:	f04f 0320 	mov.w	r3, #32
1a0019c8:	f383 8811 	msr	BASEPRI, r3
1a0019cc:	f3bf 8f6f 	isb	sy
1a0019d0:	f3bf 8f4f 	dsb	sy
1a0019d4:	e7fe      	b.n	1a0019d4 <xQueueGenericSendFromISR+0x4c>
1a0019d6:	461f      	mov	r7, r3
1a0019d8:	4690      	mov	r8, r2
1a0019da:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a0019dc:	f001 fadc 	bl	1a002f98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a0019e0:	f3ef 8611 	mrs	r6, BASEPRI
1a0019e4:	f04f 0320 	mov.w	r3, #32
1a0019e8:	f383 8811 	msr	BASEPRI, r3
1a0019ec:	f3bf 8f6f 	isb	sy
1a0019f0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a0019f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0019f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0019f8:	429a      	cmp	r2, r3
1a0019fa:	d303      	bcc.n	1a001a04 <xQueueGenericSendFromISR+0x7c>
1a0019fc:	2f02      	cmp	r7, #2
1a0019fe:	d001      	beq.n	1a001a04 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a001a00:	2000      	movs	r0, #0
1a001a02:	e00f      	b.n	1a001a24 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a001a04:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a001a08:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001a0a:	463a      	mov	r2, r7
1a001a0c:	4649      	mov	r1, r9
1a001a0e:	4620      	mov	r0, r4
1a001a10:	f7ff fdb6 	bl	1a001580 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a001a14:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001a18:	d008      	beq.n	1a001a2c <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a001a1a:	1c6b      	adds	r3, r5, #1
1a001a1c:	b25b      	sxtb	r3, r3
1a001a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a001a22:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a001a24:	f386 8811 	msr	BASEPRI, r6
}
1a001a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001a2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001a2e:	b15b      	cbz	r3, 1a001a48 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001a30:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001a34:	f000 fdca 	bl	1a0025cc <xTaskRemoveFromEventList>
1a001a38:	b140      	cbz	r0, 1a001a4c <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a001a3a:	f1b8 0f00 	cmp.w	r8, #0
1a001a3e:	d007      	beq.n	1a001a50 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a001a40:	2001      	movs	r0, #1
1a001a42:	f8c8 0000 	str.w	r0, [r8]
1a001a46:	e7ed      	b.n	1a001a24 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a001a48:	2001      	movs	r0, #1
1a001a4a:	e7eb      	b.n	1a001a24 <xQueueGenericSendFromISR+0x9c>
1a001a4c:	2001      	movs	r0, #1
1a001a4e:	e7e9      	b.n	1a001a24 <xQueueGenericSendFromISR+0x9c>
1a001a50:	2001      	movs	r0, #1
1a001a52:	e7e7      	b.n	1a001a24 <xQueueGenericSendFromISR+0x9c>

1a001a54 <xQueueReceive>:
{
1a001a54:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001a56:	b085      	sub	sp, #20
1a001a58:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001a5a:	b160      	cbz	r0, 1a001a76 <xQueueReceive+0x22>
1a001a5c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001a5e:	b999      	cbnz	r1, 1a001a88 <xQueueReceive+0x34>
1a001a60:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001a62:	b18b      	cbz	r3, 1a001a88 <xQueueReceive+0x34>
	__asm volatile
1a001a64:	f04f 0320 	mov.w	r3, #32
1a001a68:	f383 8811 	msr	BASEPRI, r3
1a001a6c:	f3bf 8f6f 	isb	sy
1a001a70:	f3bf 8f4f 	dsb	sy
1a001a74:	e7fe      	b.n	1a001a74 <xQueueReceive+0x20>
1a001a76:	f04f 0320 	mov.w	r3, #32
1a001a7a:	f383 8811 	msr	BASEPRI, r3
1a001a7e:	f3bf 8f6f 	isb	sy
1a001a82:	f3bf 8f4f 	dsb	sy
1a001a86:	e7fe      	b.n	1a001a86 <xQueueReceive+0x32>
1a001a88:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001a8a:	f000 fe37 	bl	1a0026fc <xTaskGetSchedulerState>
1a001a8e:	b950      	cbnz	r0, 1a001aa6 <xQueueReceive+0x52>
1a001a90:	9b01      	ldr	r3, [sp, #4]
1a001a92:	b153      	cbz	r3, 1a001aaa <xQueueReceive+0x56>
1a001a94:	f04f 0320 	mov.w	r3, #32
1a001a98:	f383 8811 	msr	BASEPRI, r3
1a001a9c:	f3bf 8f6f 	isb	sy
1a001aa0:	f3bf 8f4f 	dsb	sy
1a001aa4:	e7fe      	b.n	1a001aa4 <xQueueReceive+0x50>
1a001aa6:	2600      	movs	r6, #0
1a001aa8:	e03e      	b.n	1a001b28 <xQueueReceive+0xd4>
1a001aaa:	2600      	movs	r6, #0
1a001aac:	e03c      	b.n	1a001b28 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a001aae:	4639      	mov	r1, r7
1a001ab0:	4620      	mov	r0, r4
1a001ab2:	f7ff fda0 	bl	1a0015f6 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a001ab6:	3d01      	subs	r5, #1
1a001ab8:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001aba:	6923      	ldr	r3, [r4, #16]
1a001abc:	b923      	cbnz	r3, 1a001ac8 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a001abe:	f001 f963 	bl	1a002d88 <vPortExitCritical>
				return pdPASS;
1a001ac2:	2001      	movs	r0, #1
}
1a001ac4:	b005      	add	sp, #20
1a001ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001ac8:	f104 0010 	add.w	r0, r4, #16
1a001acc:	f000 fd7e 	bl	1a0025cc <xTaskRemoveFromEventList>
1a001ad0:	2800      	cmp	r0, #0
1a001ad2:	d0f4      	beq.n	1a001abe <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a001ad4:	4b34      	ldr	r3, [pc, #208]	; (1a001ba8 <xQueueReceive+0x154>)
1a001ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001ada:	601a      	str	r2, [r3, #0]
1a001adc:	f3bf 8f4f 	dsb	sy
1a001ae0:	f3bf 8f6f 	isb	sy
1a001ae4:	e7eb      	b.n	1a001abe <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a001ae6:	f001 f94f 	bl	1a002d88 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001aea:	2000      	movs	r0, #0
1a001aec:	e7ea      	b.n	1a001ac4 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001aee:	a802      	add	r0, sp, #8
1a001af0:	f000 fdb2 	bl	1a002658 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001af4:	2601      	movs	r6, #1
1a001af6:	e021      	b.n	1a001b3c <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a001af8:	2300      	movs	r3, #0
1a001afa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001afe:	e029      	b.n	1a001b54 <xQueueReceive+0x100>
1a001b00:	2300      	movs	r3, #0
1a001b02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001b06:	e02b      	b.n	1a001b60 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a001b08:	4620      	mov	r0, r4
1a001b0a:	f7ff fd86 	bl	1a00161a <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001b0e:	f000 fbf9 	bl	1a002304 <xTaskResumeAll>
1a001b12:	e009      	b.n	1a001b28 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a001b14:	4620      	mov	r0, r4
1a001b16:	f7ff fd80 	bl	1a00161a <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001b1a:	f000 fbf3 	bl	1a002304 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001b1e:	4620      	mov	r0, r4
1a001b20:	f7ff fd21 	bl	1a001566 <prvIsQueueEmpty>
1a001b24:	2800      	cmp	r0, #0
1a001b26:	d13d      	bne.n	1a001ba4 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a001b28:	f001 f90c 	bl	1a002d44 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001b2c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001b2e:	2d00      	cmp	r5, #0
1a001b30:	d1bd      	bne.n	1a001aae <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001b32:	9b01      	ldr	r3, [sp, #4]
1a001b34:	2b00      	cmp	r3, #0
1a001b36:	d0d6      	beq.n	1a001ae6 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a001b38:	2e00      	cmp	r6, #0
1a001b3a:	d0d8      	beq.n	1a001aee <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a001b3c:	f001 f924 	bl	1a002d88 <vPortExitCritical>
		vTaskSuspendAll();
1a001b40:	f000 fb46 	bl	1a0021d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001b44:	f001 f8fe 	bl	1a002d44 <vPortEnterCritical>
1a001b48:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001b4c:	b25b      	sxtb	r3, r3
1a001b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001b52:	d0d1      	beq.n	1a001af8 <xQueueReceive+0xa4>
1a001b54:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001b58:	b25b      	sxtb	r3, r3
1a001b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001b5e:	d0cf      	beq.n	1a001b00 <xQueueReceive+0xac>
1a001b60:	f001 f912 	bl	1a002d88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001b64:	a901      	add	r1, sp, #4
1a001b66:	a802      	add	r0, sp, #8
1a001b68:	f000 fd82 	bl	1a002670 <xTaskCheckForTimeOut>
1a001b6c:	2800      	cmp	r0, #0
1a001b6e:	d1d1      	bne.n	1a001b14 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001b70:	4620      	mov	r0, r4
1a001b72:	f7ff fcf8 	bl	1a001566 <prvIsQueueEmpty>
1a001b76:	2800      	cmp	r0, #0
1a001b78:	d0c6      	beq.n	1a001b08 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001b7a:	9901      	ldr	r1, [sp, #4]
1a001b7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001b80:	f000 fcf0 	bl	1a002564 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001b84:	4620      	mov	r0, r4
1a001b86:	f7ff fd48 	bl	1a00161a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001b8a:	f000 fbbb 	bl	1a002304 <xTaskResumeAll>
1a001b8e:	2800      	cmp	r0, #0
1a001b90:	d1ca      	bne.n	1a001b28 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a001b92:	4b05      	ldr	r3, [pc, #20]	; (1a001ba8 <xQueueReceive+0x154>)
1a001b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001b98:	601a      	str	r2, [r3, #0]
1a001b9a:	f3bf 8f4f 	dsb	sy
1a001b9e:	f3bf 8f6f 	isb	sy
1a001ba2:	e7c1      	b.n	1a001b28 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a001ba4:	2000      	movs	r0, #0
1a001ba6:	e78d      	b.n	1a001ac4 <xQueueReceive+0x70>
1a001ba8:	e000ed04 	.word	0xe000ed04

1a001bac <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001bac:	2300      	movs	r3, #0
1a001bae:	2b07      	cmp	r3, #7
1a001bb0:	d80c      	bhi.n	1a001bcc <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001bb2:	4a07      	ldr	r2, [pc, #28]	; (1a001bd0 <vQueueAddToRegistry+0x24>)
1a001bb4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a001bb8:	b10a      	cbz	r2, 1a001bbe <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001bba:	3301      	adds	r3, #1
1a001bbc:	e7f7      	b.n	1a001bae <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a001bbe:	4a04      	ldr	r2, [pc, #16]	; (1a001bd0 <vQueueAddToRegistry+0x24>)
1a001bc0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001bc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001bc8:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a001bca:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a001bcc:	4770      	bx	lr
1a001bce:	bf00      	nop
1a001bd0:	100079bc 	.word	0x100079bc

1a001bd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001bd4:	b570      	push	{r4, r5, r6, lr}
1a001bd6:	4604      	mov	r4, r0
1a001bd8:	460d      	mov	r5, r1
1a001bda:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001bdc:	f001 f8b2 	bl	1a002d44 <vPortEnterCritical>
1a001be0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001be4:	b25b      	sxtb	r3, r3
1a001be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001bea:	d00d      	beq.n	1a001c08 <vQueueWaitForMessageRestricted+0x34>
1a001bec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001bf0:	b25b      	sxtb	r3, r3
1a001bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001bf6:	d00b      	beq.n	1a001c10 <vQueueWaitForMessageRestricted+0x3c>
1a001bf8:	f001 f8c6 	bl	1a002d88 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001bfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001bfe:	b15b      	cbz	r3, 1a001c18 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001c00:	4620      	mov	r0, r4
1a001c02:	f7ff fd0a 	bl	1a00161a <prvUnlockQueue>
	}
1a001c06:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a001c08:	2300      	movs	r3, #0
1a001c0a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001c0e:	e7ed      	b.n	1a001bec <vQueueWaitForMessageRestricted+0x18>
1a001c10:	2300      	movs	r3, #0
1a001c12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001c16:	e7ef      	b.n	1a001bf8 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001c18:	4632      	mov	r2, r6
1a001c1a:	4629      	mov	r1, r5
1a001c1c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001c20:	f000 fcb8 	bl	1a002594 <vTaskPlaceOnEventListRestricted>
1a001c24:	e7ec      	b.n	1a001c00 <vQueueWaitForMessageRestricted+0x2c>

1a001c26 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001c26:	f100 0308 	add.w	r3, r0, #8
1a001c2a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a001c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001c30:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001c32:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001c34:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001c36:	2300      	movs	r3, #0
1a001c38:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a001c3a:	4770      	bx	lr

1a001c3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001c3c:	2300      	movs	r3, #0
1a001c3e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001c40:	4770      	bx	lr

1a001c42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001c42:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001c44:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a001c46:	689a      	ldr	r2, [r3, #8]
1a001c48:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a001c4a:	689a      	ldr	r2, [r3, #8]
1a001c4c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001c4e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001c50:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001c52:	6803      	ldr	r3, [r0, #0]
1a001c54:	3301      	adds	r3, #1
1a001c56:	6003      	str	r3, [r0, #0]
}
1a001c58:	4770      	bx	lr

1a001c5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a001c5a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001c5c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001c5e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001c62:	d002      	beq.n	1a001c6a <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001c64:	f100 0208 	add.w	r2, r0, #8
1a001c68:	e002      	b.n	1a001c70 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a001c6a:	6902      	ldr	r2, [r0, #16]
1a001c6c:	e004      	b.n	1a001c78 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001c6e:	461a      	mov	r2, r3
1a001c70:	6853      	ldr	r3, [r2, #4]
1a001c72:	681c      	ldr	r4, [r3, #0]
1a001c74:	42ac      	cmp	r4, r5
1a001c76:	d9fa      	bls.n	1a001c6e <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a001c78:	6853      	ldr	r3, [r2, #4]
1a001c7a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001c7c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001c7e:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001c80:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001c82:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001c84:	6803      	ldr	r3, [r0, #0]
1a001c86:	3301      	adds	r3, #1
1a001c88:	6003      	str	r3, [r0, #0]
}
1a001c8a:	bc30      	pop	{r4, r5}
1a001c8c:	4770      	bx	lr

1a001c8e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001c8e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001c90:	6842      	ldr	r2, [r0, #4]
1a001c92:	6881      	ldr	r1, [r0, #8]
1a001c94:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a001c96:	6882      	ldr	r2, [r0, #8]
1a001c98:	6841      	ldr	r1, [r0, #4]
1a001c9a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001c9c:	685a      	ldr	r2, [r3, #4]
1a001c9e:	4282      	cmp	r2, r0
1a001ca0:	d006      	beq.n	1a001cb0 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001ca2:	2200      	movs	r2, #0
1a001ca4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a001ca6:	681a      	ldr	r2, [r3, #0]
1a001ca8:	3a01      	subs	r2, #1
1a001caa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001cac:	6818      	ldr	r0, [r3, #0]
}
1a001cae:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001cb0:	6882      	ldr	r2, [r0, #8]
1a001cb2:	605a      	str	r2, [r3, #4]
1a001cb4:	e7f5      	b.n	1a001ca2 <uxListRemove+0x14>
1a001cb6:	Address 0x000000001a001cb6 is out of bounds.


1a001cb8 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a001cb8:	4b03      	ldr	r3, [pc, #12]	; (1a001cc8 <vApplicationGetIdleTaskMemory+0x10>)
1a001cba:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a001cbc:	4b03      	ldr	r3, [pc, #12]	; (1a001ccc <vApplicationGetIdleTaskMemory+0x14>)
1a001cbe:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001cc0:	235a      	movs	r3, #90	; 0x5a
1a001cc2:	6013      	str	r3, [r2, #0]
}
1a001cc4:	4770      	bx	lr
1a001cc6:	bf00      	nop
1a001cc8:	100075a0 	.word	0x100075a0
1a001ccc:	10006e98 	.word	0x10006e98

1a001cd0 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001cd0:	4b03      	ldr	r3, [pc, #12]	; (1a001ce0 <vApplicationGetTimerTaskMemory+0x10>)
1a001cd2:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a001cd4:	4b03      	ldr	r3, [pc, #12]	; (1a001ce4 <vApplicationGetTimerTaskMemory+0x14>)
1a001cd6:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a001cd8:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a001cdc:	6013      	str	r3, [r2, #0]
1a001cde:	4770      	bx	lr
1a001ce0:	10007600 	.word	0x10007600
1a001ce4:	10007000 	.word	0x10007000

1a001ce8 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a001ce8:	b510      	push	{r4, lr}
1a001cea:	b082      	sub	sp, #8
1a001cec:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a001cee:	9001      	str	r0, [sp, #4]
1a001cf0:	2300      	movs	r3, #0
1a001cf2:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a001cf4:	f001 f826 	bl	1a002d44 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a001cf8:	9901      	ldr	r1, [sp, #4]
1a001cfa:	4622      	mov	r2, r4
1a001cfc:	4804      	ldr	r0, [pc, #16]	; (1a001d10 <vAssertCalled+0x28>)
1a001cfe:	f004 fa91 	bl	1a006224 <printf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a001d02:	9b00      	ldr	r3, [sp, #0]
1a001d04:	2b00      	cmp	r3, #0
1a001d06:	d0fc      	beq.n	1a001d02 <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a001d08:	f001 f83e 	bl	1a002d88 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a001d0c:	b002      	add	sp, #8
1a001d0e:	bd10      	pop	{r4, pc}
1a001d10:	1a00a634 	.word	0x1a00a634

1a001d14 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a001d14:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a001d16:	4804      	ldr	r0, [pc, #16]	; (1a001d28 <vApplicationMallocFailedHook+0x14>)
1a001d18:	f004 fae6 	bl	1a0062e8 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a001d1c:	4903      	ldr	r1, [pc, #12]	; (1a001d2c <vApplicationMallocFailedHook+0x18>)
1a001d1e:	202c      	movs	r0, #44	; 0x2c
1a001d20:	f7ff ffe2 	bl	1a001ce8 <vAssertCalled>
}
1a001d24:	bd08      	pop	{r3, pc}
1a001d26:	bf00      	nop
1a001d28:	1a00a5c0 	.word	0x1a00a5c0
1a001d2c:	1a00a5e4 	.word	0x1a00a5e4

1a001d30 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a001d30:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a001d32:	4804      	ldr	r0, [pc, #16]	; (1a001d44 <vApplicationStackOverflowHook+0x14>)
1a001d34:	f004 fa76 	bl	1a006224 <printf>
   vAssertCalled( __LINE__, __FILE__ );
1a001d38:	4903      	ldr	r1, [pc, #12]	; (1a001d48 <vApplicationStackOverflowHook+0x18>)
1a001d3a:	2050      	movs	r0, #80	; 0x50
1a001d3c:	f7ff ffd4 	bl	1a001ce8 <vAssertCalled>
}
1a001d40:	bd08      	pop	{r3, pc}
1a001d42:	bf00      	nop
1a001d44:	1a00a604 	.word	0x1a00a604
1a001d48:	1a00a5e4 	.word	0x1a00a5e4

1a001d4c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001d4c:	4b08      	ldr	r3, [pc, #32]	; (1a001d70 <prvResetNextTaskUnblockTime+0x24>)
1a001d4e:	681b      	ldr	r3, [r3, #0]
1a001d50:	681b      	ldr	r3, [r3, #0]
1a001d52:	b13b      	cbz	r3, 1a001d64 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001d54:	4b06      	ldr	r3, [pc, #24]	; (1a001d70 <prvResetNextTaskUnblockTime+0x24>)
1a001d56:	681b      	ldr	r3, [r3, #0]
1a001d58:	68db      	ldr	r3, [r3, #12]
1a001d5a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001d5c:	685a      	ldr	r2, [r3, #4]
1a001d5e:	4b05      	ldr	r3, [pc, #20]	; (1a001d74 <prvResetNextTaskUnblockTime+0x28>)
1a001d60:	601a      	str	r2, [r3, #0]
	}
}
1a001d62:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a001d64:	4b03      	ldr	r3, [pc, #12]	; (1a001d74 <prvResetNextTaskUnblockTime+0x28>)
1a001d66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001d6a:	601a      	str	r2, [r3, #0]
1a001d6c:	4770      	bx	lr
1a001d6e:	bf00      	nop
1a001d70:	10007664 	.word	0x10007664
1a001d74:	10007738 	.word	0x10007738

1a001d78 <prvInitialiseNewTask>:
{
1a001d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001d7c:	4681      	mov	r9, r0
1a001d7e:	460d      	mov	r5, r1
1a001d80:	4617      	mov	r7, r2
1a001d82:	469a      	mov	sl, r3
1a001d84:	9e08      	ldr	r6, [sp, #32]
1a001d86:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a001d8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001d8c:	0092      	lsls	r2, r2, #2
1a001d8e:	21a5      	movs	r1, #165	; 0xa5
1a001d90:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001d92:	f004 f9f1 	bl	1a006178 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001d96:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001d98:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001d9c:	3a01      	subs	r2, #1
1a001d9e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001da2:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001da6:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001da8:	2300      	movs	r3, #0
1a001daa:	2b0f      	cmp	r3, #15
1a001dac:	d807      	bhi.n	1a001dbe <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001dae:	5ce9      	ldrb	r1, [r5, r3]
1a001db0:	18e2      	adds	r2, r4, r3
1a001db2:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a001db6:	5cea      	ldrb	r2, [r5, r3]
1a001db8:	b10a      	cbz	r2, 1a001dbe <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001dba:	3301      	adds	r3, #1
1a001dbc:	e7f5      	b.n	1a001daa <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001dbe:	2300      	movs	r3, #0
1a001dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001dc4:	2e06      	cmp	r6, #6
1a001dc6:	d900      	bls.n	1a001dca <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001dc8:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001dca:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001dcc:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001dce:	2500      	movs	r5, #0
1a001dd0:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001dd2:	1d20      	adds	r0, r4, #4
1a001dd4:	f7ff ff32 	bl	1a001c3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001dd8:	f104 0018 	add.w	r0, r4, #24
1a001ddc:	f7ff ff2e 	bl	1a001c3c <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001de0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001de2:	f1c6 0607 	rsb	r6, r6, #7
1a001de6:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001de8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001dea:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001dec:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001df0:	4652      	mov	r2, sl
1a001df2:	4649      	mov	r1, r9
1a001df4:	4638      	mov	r0, r7
1a001df6:	f000 ff7d 	bl	1a002cf4 <pxPortInitialiseStack>
1a001dfa:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001dfc:	f1b8 0f00 	cmp.w	r8, #0
1a001e00:	d001      	beq.n	1a001e06 <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001e02:	f8c8 4000 	str.w	r4, [r8]
}
1a001e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001e0a:	Address 0x000000001a001e0a is out of bounds.


1a001e0c <prvInitialiseTaskLists>:
{
1a001e0c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001e0e:	2400      	movs	r4, #0
1a001e10:	e007      	b.n	1a001e22 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001e12:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001e16:	0093      	lsls	r3, r2, #2
1a001e18:	480e      	ldr	r0, [pc, #56]	; (1a001e54 <prvInitialiseTaskLists+0x48>)
1a001e1a:	4418      	add	r0, r3
1a001e1c:	f7ff ff03 	bl	1a001c26 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001e20:	3401      	adds	r4, #1
1a001e22:	2c06      	cmp	r4, #6
1a001e24:	d9f5      	bls.n	1a001e12 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a001e26:	4d0c      	ldr	r5, [pc, #48]	; (1a001e58 <prvInitialiseTaskLists+0x4c>)
1a001e28:	4628      	mov	r0, r5
1a001e2a:	f7ff fefc 	bl	1a001c26 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001e2e:	4c0b      	ldr	r4, [pc, #44]	; (1a001e5c <prvInitialiseTaskLists+0x50>)
1a001e30:	4620      	mov	r0, r4
1a001e32:	f7ff fef8 	bl	1a001c26 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a001e36:	480a      	ldr	r0, [pc, #40]	; (1a001e60 <prvInitialiseTaskLists+0x54>)
1a001e38:	f7ff fef5 	bl	1a001c26 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001e3c:	4809      	ldr	r0, [pc, #36]	; (1a001e64 <prvInitialiseTaskLists+0x58>)
1a001e3e:	f7ff fef2 	bl	1a001c26 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001e42:	4809      	ldr	r0, [pc, #36]	; (1a001e68 <prvInitialiseTaskLists+0x5c>)
1a001e44:	f7ff feef 	bl	1a001c26 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001e48:	4b08      	ldr	r3, [pc, #32]	; (1a001e6c <prvInitialiseTaskLists+0x60>)
1a001e4a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001e4c:	4b08      	ldr	r3, [pc, #32]	; (1a001e70 <prvInitialiseTaskLists+0x64>)
1a001e4e:	601c      	str	r4, [r3, #0]
}
1a001e50:	bd38      	pop	{r3, r4, r5, pc}
1a001e52:	bf00      	nop
1a001e54:	1000766c 	.word	0x1000766c
1a001e58:	10007710 	.word	0x10007710
1a001e5c:	10007724 	.word	0x10007724
1a001e60:	10007740 	.word	0x10007740
1a001e64:	1000776c 	.word	0x1000776c
1a001e68:	10007758 	.word	0x10007758
1a001e6c:	10007664 	.word	0x10007664
1a001e70:	10007668 	.word	0x10007668

1a001e74 <prvAddNewTaskToReadyList>:
{
1a001e74:	b510      	push	{r4, lr}
1a001e76:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001e78:	f000 ff64 	bl	1a002d44 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001e7c:	4a21      	ldr	r2, [pc, #132]	; (1a001f04 <prvAddNewTaskToReadyList+0x90>)
1a001e7e:	6813      	ldr	r3, [r2, #0]
1a001e80:	3301      	adds	r3, #1
1a001e82:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001e84:	4b20      	ldr	r3, [pc, #128]	; (1a001f08 <prvAddNewTaskToReadyList+0x94>)
1a001e86:	681b      	ldr	r3, [r3, #0]
1a001e88:	b15b      	cbz	r3, 1a001ea2 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a001e8a:	4b20      	ldr	r3, [pc, #128]	; (1a001f0c <prvAddNewTaskToReadyList+0x98>)
1a001e8c:	681b      	ldr	r3, [r3, #0]
1a001e8e:	b96b      	cbnz	r3, 1a001eac <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001e90:	4b1d      	ldr	r3, [pc, #116]	; (1a001f08 <prvAddNewTaskToReadyList+0x94>)
1a001e92:	681b      	ldr	r3, [r3, #0]
1a001e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001e96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001e98:	429a      	cmp	r2, r3
1a001e9a:	d807      	bhi.n	1a001eac <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001e9c:	4b1a      	ldr	r3, [pc, #104]	; (1a001f08 <prvAddNewTaskToReadyList+0x94>)
1a001e9e:	601c      	str	r4, [r3, #0]
1a001ea0:	e004      	b.n	1a001eac <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a001ea2:	4b19      	ldr	r3, [pc, #100]	; (1a001f08 <prvAddNewTaskToReadyList+0x94>)
1a001ea4:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a001ea6:	6813      	ldr	r3, [r2, #0]
1a001ea8:	2b01      	cmp	r3, #1
1a001eaa:	d027      	beq.n	1a001efc <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001eac:	4a18      	ldr	r2, [pc, #96]	; (1a001f10 <prvAddNewTaskToReadyList+0x9c>)
1a001eae:	6813      	ldr	r3, [r2, #0]
1a001eb0:	3301      	adds	r3, #1
1a001eb2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001eb4:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a001eb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001eb8:	2201      	movs	r2, #1
1a001eba:	409a      	lsls	r2, r3
1a001ebc:	4915      	ldr	r1, [pc, #84]	; (1a001f14 <prvAddNewTaskToReadyList+0xa0>)
1a001ebe:	6808      	ldr	r0, [r1, #0]
1a001ec0:	4302      	orrs	r2, r0
1a001ec2:	600a      	str	r2, [r1, #0]
1a001ec4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001ec8:	009a      	lsls	r2, r3, #2
1a001eca:	1d21      	adds	r1, r4, #4
1a001ecc:	4812      	ldr	r0, [pc, #72]	; (1a001f18 <prvAddNewTaskToReadyList+0xa4>)
1a001ece:	4410      	add	r0, r2
1a001ed0:	f7ff feb7 	bl	1a001c42 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001ed4:	f000 ff58 	bl	1a002d88 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001ed8:	4b0c      	ldr	r3, [pc, #48]	; (1a001f0c <prvAddNewTaskToReadyList+0x98>)
1a001eda:	681b      	ldr	r3, [r3, #0]
1a001edc:	b16b      	cbz	r3, 1a001efa <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001ede:	4b0a      	ldr	r3, [pc, #40]	; (1a001f08 <prvAddNewTaskToReadyList+0x94>)
1a001ee0:	681b      	ldr	r3, [r3, #0]
1a001ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001ee4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001ee6:	429a      	cmp	r2, r3
1a001ee8:	d207      	bcs.n	1a001efa <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a001eea:	4b0c      	ldr	r3, [pc, #48]	; (1a001f1c <prvAddNewTaskToReadyList+0xa8>)
1a001eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001ef0:	601a      	str	r2, [r3, #0]
1a001ef2:	f3bf 8f4f 	dsb	sy
1a001ef6:	f3bf 8f6f 	isb	sy
}
1a001efa:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001efc:	f7ff ff86 	bl	1a001e0c <prvInitialiseTaskLists>
1a001f00:	e7d4      	b.n	1a001eac <prvAddNewTaskToReadyList+0x38>
1a001f02:	bf00      	nop
1a001f04:	100076f8 	.word	0x100076f8
1a001f08:	10007660 	.word	0x10007660
1a001f0c:	10007754 	.word	0x10007754
1a001f10:	10007708 	.word	0x10007708
1a001f14:	1000770c 	.word	0x1000770c
1a001f18:	1000766c 	.word	0x1000766c
1a001f1c:	e000ed04 	.word	0xe000ed04

1a001f20 <prvDeleteTCB>:
	{
1a001f20:	b510      	push	{r4, lr}
1a001f22:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a001f24:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001f28:	b933      	cbnz	r3, 1a001f38 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a001f2a:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001f2c:	f7ff fad4 	bl	1a0014d8 <vPortFree>
				vPortFree( pxTCB );
1a001f30:	4620      	mov	r0, r4
1a001f32:	f7ff fad1 	bl	1a0014d8 <vPortFree>
	}
1a001f36:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001f38:	2b01      	cmp	r3, #1
1a001f3a:	d00a      	beq.n	1a001f52 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001f3c:	2b02      	cmp	r3, #2
1a001f3e:	d0fa      	beq.n	1a001f36 <prvDeleteTCB+0x16>
1a001f40:	f04f 0320 	mov.w	r3, #32
1a001f44:	f383 8811 	msr	BASEPRI, r3
1a001f48:	f3bf 8f6f 	isb	sy
1a001f4c:	f3bf 8f4f 	dsb	sy
1a001f50:	e7fe      	b.n	1a001f50 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a001f52:	f7ff fac1 	bl	1a0014d8 <vPortFree>
1a001f56:	e7ee      	b.n	1a001f36 <prvDeleteTCB+0x16>

1a001f58 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001f58:	4b0f      	ldr	r3, [pc, #60]	; (1a001f98 <prvCheckTasksWaitingTermination+0x40>)
1a001f5a:	681b      	ldr	r3, [r3, #0]
1a001f5c:	b1d3      	cbz	r3, 1a001f94 <prvCheckTasksWaitingTermination+0x3c>
{
1a001f5e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001f60:	f000 fef0 	bl	1a002d44 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001f64:	4b0d      	ldr	r3, [pc, #52]	; (1a001f9c <prvCheckTasksWaitingTermination+0x44>)
1a001f66:	68db      	ldr	r3, [r3, #12]
1a001f68:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001f6a:	1d20      	adds	r0, r4, #4
1a001f6c:	f7ff fe8f 	bl	1a001c8e <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001f70:	4a0b      	ldr	r2, [pc, #44]	; (1a001fa0 <prvCheckTasksWaitingTermination+0x48>)
1a001f72:	6813      	ldr	r3, [r2, #0]
1a001f74:	3b01      	subs	r3, #1
1a001f76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001f78:	4a07      	ldr	r2, [pc, #28]	; (1a001f98 <prvCheckTasksWaitingTermination+0x40>)
1a001f7a:	6813      	ldr	r3, [r2, #0]
1a001f7c:	3b01      	subs	r3, #1
1a001f7e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001f80:	f000 ff02 	bl	1a002d88 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a001f84:	4620      	mov	r0, r4
1a001f86:	f7ff ffcb 	bl	1a001f20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001f8a:	4b03      	ldr	r3, [pc, #12]	; (1a001f98 <prvCheckTasksWaitingTermination+0x40>)
1a001f8c:	681b      	ldr	r3, [r3, #0]
1a001f8e:	2b00      	cmp	r3, #0
1a001f90:	d1e6      	bne.n	1a001f60 <prvCheckTasksWaitingTermination+0x8>
}
1a001f92:	bd10      	pop	{r4, pc}
1a001f94:	4770      	bx	lr
1a001f96:	bf00      	nop
1a001f98:	100076fc 	.word	0x100076fc
1a001f9c:	1000776c 	.word	0x1000776c
1a001fa0:	100076f8 	.word	0x100076f8

1a001fa4 <prvIdleTask>:
{
1a001fa4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a001fa6:	f7ff ffd7 	bl	1a001f58 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a001faa:	4b06      	ldr	r3, [pc, #24]	; (1a001fc4 <prvIdleTask+0x20>)
1a001fac:	681b      	ldr	r3, [r3, #0]
1a001fae:	2b01      	cmp	r3, #1
1a001fb0:	d9f9      	bls.n	1a001fa6 <prvIdleTask+0x2>
				taskYIELD();
1a001fb2:	4b05      	ldr	r3, [pc, #20]	; (1a001fc8 <prvIdleTask+0x24>)
1a001fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001fb8:	601a      	str	r2, [r3, #0]
1a001fba:	f3bf 8f4f 	dsb	sy
1a001fbe:	f3bf 8f6f 	isb	sy
1a001fc2:	e7f0      	b.n	1a001fa6 <prvIdleTask+0x2>
1a001fc4:	1000766c 	.word	0x1000766c
1a001fc8:	e000ed04 	.word	0xe000ed04

1a001fcc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001fcc:	b570      	push	{r4, r5, r6, lr}
1a001fce:	4604      	mov	r4, r0
1a001fd0:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a001fd2:	4b1d      	ldr	r3, [pc, #116]	; (1a002048 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001fd4:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001fd6:	4b1d      	ldr	r3, [pc, #116]	; (1a00204c <prvAddCurrentTaskToDelayedList+0x80>)
1a001fd8:	6818      	ldr	r0, [r3, #0]
1a001fda:	3004      	adds	r0, #4
1a001fdc:	f7ff fe57 	bl	1a001c8e <uxListRemove>
1a001fe0:	b950      	cbnz	r0, 1a001ff8 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a001fe2:	4b1a      	ldr	r3, [pc, #104]	; (1a00204c <prvAddCurrentTaskToDelayedList+0x80>)
1a001fe4:	681b      	ldr	r3, [r3, #0]
1a001fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001fe8:	2301      	movs	r3, #1
1a001fea:	fa03 f202 	lsl.w	r2, r3, r2
1a001fee:	4918      	ldr	r1, [pc, #96]	; (1a002050 <prvAddCurrentTaskToDelayedList+0x84>)
1a001ff0:	680b      	ldr	r3, [r1, #0]
1a001ff2:	ea23 0302 	bic.w	r3, r3, r2
1a001ff6:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001ff8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001ffc:	d013      	beq.n	1a002026 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001ffe:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a002000:	4b12      	ldr	r3, [pc, #72]	; (1a00204c <prvAddCurrentTaskToDelayedList+0x80>)
1a002002:	681b      	ldr	r3, [r3, #0]
1a002004:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a002006:	42a5      	cmp	r5, r4
1a002008:	d816      	bhi.n	1a002038 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00200a:	4b12      	ldr	r3, [pc, #72]	; (1a002054 <prvAddCurrentTaskToDelayedList+0x88>)
1a00200c:	6818      	ldr	r0, [r3, #0]
1a00200e:	4b0f      	ldr	r3, [pc, #60]	; (1a00204c <prvAddCurrentTaskToDelayedList+0x80>)
1a002010:	6819      	ldr	r1, [r3, #0]
1a002012:	3104      	adds	r1, #4
1a002014:	f7ff fe21 	bl	1a001c5a <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a002018:	4b0f      	ldr	r3, [pc, #60]	; (1a002058 <prvAddCurrentTaskToDelayedList+0x8c>)
1a00201a:	681b      	ldr	r3, [r3, #0]
1a00201c:	42a3      	cmp	r3, r4
1a00201e:	d912      	bls.n	1a002046 <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a002020:	4b0d      	ldr	r3, [pc, #52]	; (1a002058 <prvAddCurrentTaskToDelayedList+0x8c>)
1a002022:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a002024:	e00f      	b.n	1a002046 <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a002026:	2e00      	cmp	r6, #0
1a002028:	d0e9      	beq.n	1a001ffe <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00202a:	4b08      	ldr	r3, [pc, #32]	; (1a00204c <prvAddCurrentTaskToDelayedList+0x80>)
1a00202c:	6819      	ldr	r1, [r3, #0]
1a00202e:	3104      	adds	r1, #4
1a002030:	480a      	ldr	r0, [pc, #40]	; (1a00205c <prvAddCurrentTaskToDelayedList+0x90>)
1a002032:	f7ff fe06 	bl	1a001c42 <vListInsertEnd>
1a002036:	e006      	b.n	1a002046 <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a002038:	4b09      	ldr	r3, [pc, #36]	; (1a002060 <prvAddCurrentTaskToDelayedList+0x94>)
1a00203a:	6818      	ldr	r0, [r3, #0]
1a00203c:	4b03      	ldr	r3, [pc, #12]	; (1a00204c <prvAddCurrentTaskToDelayedList+0x80>)
1a00203e:	6819      	ldr	r1, [r3, #0]
1a002040:	3104      	adds	r1, #4
1a002042:	f7ff fe0a 	bl	1a001c5a <vListInsert>
}
1a002046:	bd70      	pop	{r4, r5, r6, pc}
1a002048:	10007780 	.word	0x10007780
1a00204c:	10007660 	.word	0x10007660
1a002050:	1000770c 	.word	0x1000770c
1a002054:	10007664 	.word	0x10007664
1a002058:	10007738 	.word	0x10007738
1a00205c:	10007758 	.word	0x10007758
1a002060:	10007668 	.word	0x10007668

1a002064 <xTaskCreateStatic>:
	{
1a002064:	b570      	push	{r4, r5, r6, lr}
1a002066:	b086      	sub	sp, #24
1a002068:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a00206a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a00206c:	b945      	cbnz	r5, 1a002080 <xTaskCreateStatic+0x1c>
1a00206e:	f04f 0320 	mov.w	r3, #32
1a002072:	f383 8811 	msr	BASEPRI, r3
1a002076:	f3bf 8f6f 	isb	sy
1a00207a:	f3bf 8f4f 	dsb	sy
1a00207e:	e7fe      	b.n	1a00207e <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a002080:	b944      	cbnz	r4, 1a002094 <xTaskCreateStatic+0x30>
1a002082:	f04f 0320 	mov.w	r3, #32
1a002086:	f383 8811 	msr	BASEPRI, r3
1a00208a:	f3bf 8f6f 	isb	sy
1a00208e:	f3bf 8f4f 	dsb	sy
1a002092:	e7fe      	b.n	1a002092 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a002094:	2660      	movs	r6, #96	; 0x60
1a002096:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a002098:	9e04      	ldr	r6, [sp, #16]
1a00209a:	2e60      	cmp	r6, #96	; 0x60
1a00209c:	d008      	beq.n	1a0020b0 <xTaskCreateStatic+0x4c>
1a00209e:	f04f 0320 	mov.w	r3, #32
1a0020a2:	f383 8811 	msr	BASEPRI, r3
1a0020a6:	f3bf 8f6f 	isb	sy
1a0020aa:	f3bf 8f4f 	dsb	sy
1a0020ae:	e7fe      	b.n	1a0020ae <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a0020b0:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a0020b2:	2502      	movs	r5, #2
1a0020b4:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a0020b8:	2500      	movs	r5, #0
1a0020ba:	9503      	str	r5, [sp, #12]
1a0020bc:	9402      	str	r4, [sp, #8]
1a0020be:	ad05      	add	r5, sp, #20
1a0020c0:	9501      	str	r5, [sp, #4]
1a0020c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0020c4:	9500      	str	r5, [sp, #0]
1a0020c6:	f7ff fe57 	bl	1a001d78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0020ca:	4620      	mov	r0, r4
1a0020cc:	f7ff fed2 	bl	1a001e74 <prvAddNewTaskToReadyList>
	}
1a0020d0:	9805      	ldr	r0, [sp, #20]
1a0020d2:	b006      	add	sp, #24
1a0020d4:	bd70      	pop	{r4, r5, r6, pc}

1a0020d6 <xTaskCreate>:
	{
1a0020d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0020da:	b085      	sub	sp, #20
1a0020dc:	4607      	mov	r7, r0
1a0020de:	4688      	mov	r8, r1
1a0020e0:	4615      	mov	r5, r2
1a0020e2:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0020e4:	0090      	lsls	r0, r2, #2
1a0020e6:	f7ff f969 	bl	1a0013bc <pvPortMalloc>
			if( pxStack != NULL )
1a0020ea:	b308      	cbz	r0, 1a002130 <xTaskCreate+0x5a>
1a0020ec:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a0020ee:	2060      	movs	r0, #96	; 0x60
1a0020f0:	f7ff f964 	bl	1a0013bc <pvPortMalloc>
				if( pxNewTCB != NULL )
1a0020f4:	4604      	mov	r4, r0
1a0020f6:	b1b8      	cbz	r0, 1a002128 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a0020f8:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a0020fa:	b1e4      	cbz	r4, 1a002136 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a0020fc:	2300      	movs	r3, #0
1a0020fe:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a002102:	9303      	str	r3, [sp, #12]
1a002104:	9402      	str	r4, [sp, #8]
1a002106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a002108:	9301      	str	r3, [sp, #4]
1a00210a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00210c:	9300      	str	r3, [sp, #0]
1a00210e:	464b      	mov	r3, r9
1a002110:	462a      	mov	r2, r5
1a002112:	4641      	mov	r1, r8
1a002114:	4638      	mov	r0, r7
1a002116:	f7ff fe2f 	bl	1a001d78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a00211a:	4620      	mov	r0, r4
1a00211c:	f7ff feaa 	bl	1a001e74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a002120:	2001      	movs	r0, #1
	}
1a002122:	b005      	add	sp, #20
1a002124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a002128:	4630      	mov	r0, r6
1a00212a:	f7ff f9d5 	bl	1a0014d8 <vPortFree>
1a00212e:	e7e4      	b.n	1a0020fa <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a002130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002134:	e7f5      	b.n	1a002122 <xTaskCreate+0x4c>
1a002136:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a00213a:	e7f2      	b.n	1a002122 <xTaskCreate+0x4c>

1a00213c <vTaskStartScheduler>:
{
1a00213c:	b510      	push	{r4, lr}
1a00213e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a002140:	2400      	movs	r4, #0
1a002142:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a002144:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a002146:	aa07      	add	r2, sp, #28
1a002148:	a906      	add	r1, sp, #24
1a00214a:	a805      	add	r0, sp, #20
1a00214c:	f7ff fdb4 	bl	1a001cb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a002150:	9b05      	ldr	r3, [sp, #20]
1a002152:	9302      	str	r3, [sp, #8]
1a002154:	9b06      	ldr	r3, [sp, #24]
1a002156:	9301      	str	r3, [sp, #4]
1a002158:	9400      	str	r4, [sp, #0]
1a00215a:	4623      	mov	r3, r4
1a00215c:	9a07      	ldr	r2, [sp, #28]
1a00215e:	4917      	ldr	r1, [pc, #92]	; (1a0021bc <vTaskStartScheduler+0x80>)
1a002160:	4817      	ldr	r0, [pc, #92]	; (1a0021c0 <vTaskStartScheduler+0x84>)
1a002162:	f7ff ff7f 	bl	1a002064 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a002166:	b140      	cbz	r0, 1a00217a <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a002168:	f000 fbbc 	bl	1a0028e4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a00216c:	2801      	cmp	r0, #1
1a00216e:	d006      	beq.n	1a00217e <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a002170:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002174:	d018      	beq.n	1a0021a8 <vTaskStartScheduler+0x6c>
}
1a002176:	b008      	add	sp, #32
1a002178:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a00217a:	2000      	movs	r0, #0
1a00217c:	e7f6      	b.n	1a00216c <vTaskStartScheduler+0x30>
1a00217e:	f04f 0320 	mov.w	r3, #32
1a002182:	f383 8811 	msr	BASEPRI, r3
1a002186:	f3bf 8f6f 	isb	sy
1a00218a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a00218e:	4b0d      	ldr	r3, [pc, #52]	; (1a0021c4 <vTaskStartScheduler+0x88>)
1a002190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002194:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a002196:	4b0c      	ldr	r3, [pc, #48]	; (1a0021c8 <vTaskStartScheduler+0x8c>)
1a002198:	2201      	movs	r2, #1
1a00219a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a00219c:	4b0b      	ldr	r3, [pc, #44]	; (1a0021cc <vTaskStartScheduler+0x90>)
1a00219e:	2200      	movs	r2, #0
1a0021a0:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a0021a2:	f000 fe71 	bl	1a002e88 <xPortStartScheduler>
1a0021a6:	e7e6      	b.n	1a002176 <vTaskStartScheduler+0x3a>
1a0021a8:	f04f 0320 	mov.w	r3, #32
1a0021ac:	f383 8811 	msr	BASEPRI, r3
1a0021b0:	f3bf 8f6f 	isb	sy
1a0021b4:	f3bf 8f4f 	dsb	sy
1a0021b8:	e7fe      	b.n	1a0021b8 <vTaskStartScheduler+0x7c>
1a0021ba:	bf00      	nop
1a0021bc:	1a00a674 	.word	0x1a00a674
1a0021c0:	1a001fa5 	.word	0x1a001fa5
1a0021c4:	10007738 	.word	0x10007738
1a0021c8:	10007754 	.word	0x10007754
1a0021cc:	10007780 	.word	0x10007780

1a0021d0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a0021d0:	4a02      	ldr	r2, [pc, #8]	; (1a0021dc <vTaskSuspendAll+0xc>)
1a0021d2:	6813      	ldr	r3, [r2, #0]
1a0021d4:	3301      	adds	r3, #1
1a0021d6:	6013      	str	r3, [r2, #0]
}
1a0021d8:	4770      	bx	lr
1a0021da:	bf00      	nop
1a0021dc:	10007704 	.word	0x10007704

1a0021e0 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a0021e0:	4b01      	ldr	r3, [pc, #4]	; (1a0021e8 <xTaskGetTickCount+0x8>)
1a0021e2:	6818      	ldr	r0, [r3, #0]
}
1a0021e4:	4770      	bx	lr
1a0021e6:	bf00      	nop
1a0021e8:	10007780 	.word	0x10007780

1a0021ec <xTaskIncrementTick>:
{
1a0021ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0021ee:	4b3a      	ldr	r3, [pc, #232]	; (1a0022d8 <xTaskIncrementTick+0xec>)
1a0021f0:	681b      	ldr	r3, [r3, #0]
1a0021f2:	2b00      	cmp	r3, #0
1a0021f4:	d164      	bne.n	1a0022c0 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a0021f6:	4b39      	ldr	r3, [pc, #228]	; (1a0022dc <xTaskIncrementTick+0xf0>)
1a0021f8:	681d      	ldr	r5, [r3, #0]
1a0021fa:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a0021fc:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a0021fe:	b9c5      	cbnz	r5, 1a002232 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a002200:	4b37      	ldr	r3, [pc, #220]	; (1a0022e0 <xTaskIncrementTick+0xf4>)
1a002202:	681b      	ldr	r3, [r3, #0]
1a002204:	681b      	ldr	r3, [r3, #0]
1a002206:	b143      	cbz	r3, 1a00221a <xTaskIncrementTick+0x2e>
1a002208:	f04f 0320 	mov.w	r3, #32
1a00220c:	f383 8811 	msr	BASEPRI, r3
1a002210:	f3bf 8f6f 	isb	sy
1a002214:	f3bf 8f4f 	dsb	sy
1a002218:	e7fe      	b.n	1a002218 <xTaskIncrementTick+0x2c>
1a00221a:	4a31      	ldr	r2, [pc, #196]	; (1a0022e0 <xTaskIncrementTick+0xf4>)
1a00221c:	6811      	ldr	r1, [r2, #0]
1a00221e:	4b31      	ldr	r3, [pc, #196]	; (1a0022e4 <xTaskIncrementTick+0xf8>)
1a002220:	6818      	ldr	r0, [r3, #0]
1a002222:	6010      	str	r0, [r2, #0]
1a002224:	6019      	str	r1, [r3, #0]
1a002226:	4a30      	ldr	r2, [pc, #192]	; (1a0022e8 <xTaskIncrementTick+0xfc>)
1a002228:	6813      	ldr	r3, [r2, #0]
1a00222a:	3301      	adds	r3, #1
1a00222c:	6013      	str	r3, [r2, #0]
1a00222e:	f7ff fd8d 	bl	1a001d4c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a002232:	4b2e      	ldr	r3, [pc, #184]	; (1a0022ec <xTaskIncrementTick+0x100>)
1a002234:	681b      	ldr	r3, [r3, #0]
1a002236:	42ab      	cmp	r3, r5
1a002238:	d938      	bls.n	1a0022ac <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a00223a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a00223c:	4b2c      	ldr	r3, [pc, #176]	; (1a0022f0 <xTaskIncrementTick+0x104>)
1a00223e:	681b      	ldr	r3, [r3, #0]
1a002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002242:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002246:	009a      	lsls	r2, r3, #2
1a002248:	4b2a      	ldr	r3, [pc, #168]	; (1a0022f4 <xTaskIncrementTick+0x108>)
1a00224a:	589b      	ldr	r3, [r3, r2]
1a00224c:	2b01      	cmp	r3, #1
1a00224e:	d93c      	bls.n	1a0022ca <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a002250:	2401      	movs	r4, #1
1a002252:	e03a      	b.n	1a0022ca <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a002254:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a002256:	4b22      	ldr	r3, [pc, #136]	; (1a0022e0 <xTaskIncrementTick+0xf4>)
1a002258:	681b      	ldr	r3, [r3, #0]
1a00225a:	681b      	ldr	r3, [r3, #0]
1a00225c:	b343      	cbz	r3, 1a0022b0 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a00225e:	4b20      	ldr	r3, [pc, #128]	; (1a0022e0 <xTaskIncrementTick+0xf4>)
1a002260:	681b      	ldr	r3, [r3, #0]
1a002262:	68db      	ldr	r3, [r3, #12]
1a002264:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a002266:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a002268:	429d      	cmp	r5, r3
1a00226a:	d326      	bcc.n	1a0022ba <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00226c:	1d37      	adds	r7, r6, #4
1a00226e:	4638      	mov	r0, r7
1a002270:	f7ff fd0d 	bl	1a001c8e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a002274:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a002276:	b11b      	cbz	r3, 1a002280 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a002278:	f106 0018 	add.w	r0, r6, #24
1a00227c:	f7ff fd07 	bl	1a001c8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a002280:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a002282:	2201      	movs	r2, #1
1a002284:	409a      	lsls	r2, r3
1a002286:	491c      	ldr	r1, [pc, #112]	; (1a0022f8 <xTaskIncrementTick+0x10c>)
1a002288:	6808      	ldr	r0, [r1, #0]
1a00228a:	4302      	orrs	r2, r0
1a00228c:	600a      	str	r2, [r1, #0]
1a00228e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002292:	009a      	lsls	r2, r3, #2
1a002294:	4639      	mov	r1, r7
1a002296:	4817      	ldr	r0, [pc, #92]	; (1a0022f4 <xTaskIncrementTick+0x108>)
1a002298:	4410      	add	r0, r2
1a00229a:	f7ff fcd2 	bl	1a001c42 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a00229e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a0022a0:	4b13      	ldr	r3, [pc, #76]	; (1a0022f0 <xTaskIncrementTick+0x104>)
1a0022a2:	681b      	ldr	r3, [r3, #0]
1a0022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0022a6:	429a      	cmp	r2, r3
1a0022a8:	d2d4      	bcs.n	1a002254 <xTaskIncrementTick+0x68>
1a0022aa:	e7d4      	b.n	1a002256 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a0022ac:	2400      	movs	r4, #0
1a0022ae:	e7d2      	b.n	1a002256 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0022b0:	4b0e      	ldr	r3, [pc, #56]	; (1a0022ec <xTaskIncrementTick+0x100>)
1a0022b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0022b6:	601a      	str	r2, [r3, #0]
					break;
1a0022b8:	e7c0      	b.n	1a00223c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a0022ba:	4a0c      	ldr	r2, [pc, #48]	; (1a0022ec <xTaskIncrementTick+0x100>)
1a0022bc:	6013      	str	r3, [r2, #0]
						break;
1a0022be:	e7bd      	b.n	1a00223c <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a0022c0:	4a0e      	ldr	r2, [pc, #56]	; (1a0022fc <xTaskIncrementTick+0x110>)
1a0022c2:	6813      	ldr	r3, [r2, #0]
1a0022c4:	3301      	adds	r3, #1
1a0022c6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a0022c8:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a0022ca:	4b0d      	ldr	r3, [pc, #52]	; (1a002300 <xTaskIncrementTick+0x114>)
1a0022cc:	681b      	ldr	r3, [r3, #0]
1a0022ce:	b103      	cbz	r3, 1a0022d2 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a0022d0:	2401      	movs	r4, #1
}
1a0022d2:	4620      	mov	r0, r4
1a0022d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0022d6:	bf00      	nop
1a0022d8:	10007704 	.word	0x10007704
1a0022dc:	10007780 	.word	0x10007780
1a0022e0:	10007664 	.word	0x10007664
1a0022e4:	10007668 	.word	0x10007668
1a0022e8:	1000773c 	.word	0x1000773c
1a0022ec:	10007738 	.word	0x10007738
1a0022f0:	10007660 	.word	0x10007660
1a0022f4:	1000766c 	.word	0x1000766c
1a0022f8:	1000770c 	.word	0x1000770c
1a0022fc:	10007700 	.word	0x10007700
1a002300:	10007784 	.word	0x10007784

1a002304 <xTaskResumeAll>:
{
1a002304:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a002306:	4b33      	ldr	r3, [pc, #204]	; (1a0023d4 <xTaskResumeAll+0xd0>)
1a002308:	681b      	ldr	r3, [r3, #0]
1a00230a:	b943      	cbnz	r3, 1a00231e <xTaskResumeAll+0x1a>
1a00230c:	f04f 0320 	mov.w	r3, #32
1a002310:	f383 8811 	msr	BASEPRI, r3
1a002314:	f3bf 8f6f 	isb	sy
1a002318:	f3bf 8f4f 	dsb	sy
1a00231c:	e7fe      	b.n	1a00231c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a00231e:	f000 fd11 	bl	1a002d44 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a002322:	4b2c      	ldr	r3, [pc, #176]	; (1a0023d4 <xTaskResumeAll+0xd0>)
1a002324:	681a      	ldr	r2, [r3, #0]
1a002326:	3a01      	subs	r2, #1
1a002328:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00232a:	681b      	ldr	r3, [r3, #0]
1a00232c:	2b00      	cmp	r3, #0
1a00232e:	d14d      	bne.n	1a0023cc <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a002330:	4b29      	ldr	r3, [pc, #164]	; (1a0023d8 <xTaskResumeAll+0xd4>)
1a002332:	681b      	ldr	r3, [r3, #0]
1a002334:	b923      	cbnz	r3, 1a002340 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a002336:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a002338:	f000 fd26 	bl	1a002d88 <vPortExitCritical>
}
1a00233c:	4620      	mov	r0, r4
1a00233e:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a002340:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a002342:	4b26      	ldr	r3, [pc, #152]	; (1a0023dc <xTaskResumeAll+0xd8>)
1a002344:	681b      	ldr	r3, [r3, #0]
1a002346:	b31b      	cbz	r3, 1a002390 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a002348:	4b24      	ldr	r3, [pc, #144]	; (1a0023dc <xTaskResumeAll+0xd8>)
1a00234a:	68db      	ldr	r3, [r3, #12]
1a00234c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a00234e:	f104 0018 	add.w	r0, r4, #24
1a002352:	f7ff fc9c 	bl	1a001c8e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a002356:	1d25      	adds	r5, r4, #4
1a002358:	4628      	mov	r0, r5
1a00235a:	f7ff fc98 	bl	1a001c8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a00235e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002360:	2201      	movs	r2, #1
1a002362:	409a      	lsls	r2, r3
1a002364:	491e      	ldr	r1, [pc, #120]	; (1a0023e0 <xTaskResumeAll+0xdc>)
1a002366:	6808      	ldr	r0, [r1, #0]
1a002368:	4302      	orrs	r2, r0
1a00236a:	600a      	str	r2, [r1, #0]
1a00236c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002370:	009a      	lsls	r2, r3, #2
1a002372:	4629      	mov	r1, r5
1a002374:	481b      	ldr	r0, [pc, #108]	; (1a0023e4 <xTaskResumeAll+0xe0>)
1a002376:	4410      	add	r0, r2
1a002378:	f7ff fc63 	bl	1a001c42 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a00237c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00237e:	4b1a      	ldr	r3, [pc, #104]	; (1a0023e8 <xTaskResumeAll+0xe4>)
1a002380:	681b      	ldr	r3, [r3, #0]
1a002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002384:	429a      	cmp	r2, r3
1a002386:	d3dc      	bcc.n	1a002342 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a002388:	4b18      	ldr	r3, [pc, #96]	; (1a0023ec <xTaskResumeAll+0xe8>)
1a00238a:	2201      	movs	r2, #1
1a00238c:	601a      	str	r2, [r3, #0]
1a00238e:	e7d8      	b.n	1a002342 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a002390:	b10c      	cbz	r4, 1a002396 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a002392:	f7ff fcdb 	bl	1a001d4c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a002396:	4b16      	ldr	r3, [pc, #88]	; (1a0023f0 <xTaskResumeAll+0xec>)
1a002398:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a00239a:	b154      	cbz	r4, 1a0023b2 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a00239c:	f7ff ff26 	bl	1a0021ec <xTaskIncrementTick>
1a0023a0:	b110      	cbz	r0, 1a0023a8 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a0023a2:	4b12      	ldr	r3, [pc, #72]	; (1a0023ec <xTaskResumeAll+0xe8>)
1a0023a4:	2201      	movs	r2, #1
1a0023a6:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a0023a8:	3c01      	subs	r4, #1
1a0023aa:	d1f7      	bne.n	1a00239c <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a0023ac:	4b10      	ldr	r3, [pc, #64]	; (1a0023f0 <xTaskResumeAll+0xec>)
1a0023ae:	2200      	movs	r2, #0
1a0023b0:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a0023b2:	4b0e      	ldr	r3, [pc, #56]	; (1a0023ec <xTaskResumeAll+0xe8>)
1a0023b4:	681b      	ldr	r3, [r3, #0]
1a0023b6:	b15b      	cbz	r3, 1a0023d0 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a0023b8:	4b0e      	ldr	r3, [pc, #56]	; (1a0023f4 <xTaskResumeAll+0xf0>)
1a0023ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0023be:	601a      	str	r2, [r3, #0]
1a0023c0:	f3bf 8f4f 	dsb	sy
1a0023c4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a0023c8:	2401      	movs	r4, #1
1a0023ca:	e7b5      	b.n	1a002338 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a0023cc:	2400      	movs	r4, #0
1a0023ce:	e7b3      	b.n	1a002338 <xTaskResumeAll+0x34>
1a0023d0:	2400      	movs	r4, #0
1a0023d2:	e7b1      	b.n	1a002338 <xTaskResumeAll+0x34>
1a0023d4:	10007704 	.word	0x10007704
1a0023d8:	100076f8 	.word	0x100076f8
1a0023dc:	10007740 	.word	0x10007740
1a0023e0:	1000770c 	.word	0x1000770c
1a0023e4:	1000766c 	.word	0x1000766c
1a0023e8:	10007660 	.word	0x10007660
1a0023ec:	10007784 	.word	0x10007784
1a0023f0:	10007700 	.word	0x10007700
1a0023f4:	e000ed04 	.word	0xe000ed04

1a0023f8 <vTaskDelayUntil>:
	{
1a0023f8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a0023fa:	b150      	cbz	r0, 1a002412 <vTaskDelayUntil+0x1a>
1a0023fc:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a0023fe:	b989      	cbnz	r1, 1a002424 <vTaskDelayUntil+0x2c>
1a002400:	f04f 0320 	mov.w	r3, #32
1a002404:	f383 8811 	msr	BASEPRI, r3
1a002408:	f3bf 8f6f 	isb	sy
1a00240c:	f3bf 8f4f 	dsb	sy
1a002410:	e7fe      	b.n	1a002410 <vTaskDelayUntil+0x18>
1a002412:	f04f 0320 	mov.w	r3, #32
1a002416:	f383 8811 	msr	BASEPRI, r3
1a00241a:	f3bf 8f6f 	isb	sy
1a00241e:	f3bf 8f4f 	dsb	sy
1a002422:	e7fe      	b.n	1a002422 <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a002424:	4b1a      	ldr	r3, [pc, #104]	; (1a002490 <vTaskDelayUntil+0x98>)
1a002426:	681b      	ldr	r3, [r3, #0]
1a002428:	b143      	cbz	r3, 1a00243c <vTaskDelayUntil+0x44>
1a00242a:	f04f 0320 	mov.w	r3, #32
1a00242e:	f383 8811 	msr	BASEPRI, r3
1a002432:	f3bf 8f6f 	isb	sy
1a002436:	f3bf 8f4f 	dsb	sy
1a00243a:	e7fe      	b.n	1a00243a <vTaskDelayUntil+0x42>
1a00243c:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a00243e:	f7ff fec7 	bl	1a0021d0 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a002442:	4b14      	ldr	r3, [pc, #80]	; (1a002494 <vTaskDelayUntil+0x9c>)
1a002444:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a002446:	682a      	ldr	r2, [r5, #0]
1a002448:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a00244a:	4282      	cmp	r2, r0
1a00244c:	d918      	bls.n	1a002480 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a00244e:	42a2      	cmp	r2, r4
1a002450:	d80c      	bhi.n	1a00246c <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a002452:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a002454:	f7ff ff56 	bl	1a002304 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a002458:	b938      	cbnz	r0, 1a00246a <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a00245a:	4b0f      	ldr	r3, [pc, #60]	; (1a002498 <vTaskDelayUntil+0xa0>)
1a00245c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002460:	601a      	str	r2, [r3, #0]
1a002462:	f3bf 8f4f 	dsb	sy
1a002466:	f3bf 8f6f 	isb	sy
	}
1a00246a:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a00246c:	42a0      	cmp	r0, r4
1a00246e:	d301      	bcc.n	1a002474 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a002470:	602c      	str	r4, [r5, #0]
1a002472:	e7ef      	b.n	1a002454 <vTaskDelayUntil+0x5c>
1a002474:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a002476:	2100      	movs	r1, #0
1a002478:	1a20      	subs	r0, r4, r0
1a00247a:	f7ff fda7 	bl	1a001fcc <prvAddCurrentTaskToDelayedList>
1a00247e:	e7e9      	b.n	1a002454 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a002480:	42a2      	cmp	r2, r4
1a002482:	d801      	bhi.n	1a002488 <vTaskDelayUntil+0x90>
1a002484:	42a0      	cmp	r0, r4
1a002486:	d201      	bcs.n	1a00248c <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a002488:	602c      	str	r4, [r5, #0]
1a00248a:	e7f4      	b.n	1a002476 <vTaskDelayUntil+0x7e>
1a00248c:	602c      	str	r4, [r5, #0]
1a00248e:	e7e1      	b.n	1a002454 <vTaskDelayUntil+0x5c>
1a002490:	10007704 	.word	0x10007704
1a002494:	10007780 	.word	0x10007780
1a002498:	e000ed04 	.word	0xe000ed04

1a00249c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a00249c:	4b2c      	ldr	r3, [pc, #176]	; (1a002550 <vTaskSwitchContext+0xb4>)
1a00249e:	681b      	ldr	r3, [r3, #0]
1a0024a0:	b11b      	cbz	r3, 1a0024aa <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a0024a2:	4b2c      	ldr	r3, [pc, #176]	; (1a002554 <vTaskSwitchContext+0xb8>)
1a0024a4:	2201      	movs	r2, #1
1a0024a6:	601a      	str	r2, [r3, #0]
1a0024a8:	4770      	bx	lr
{
1a0024aa:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a0024ac:	4b29      	ldr	r3, [pc, #164]	; (1a002554 <vTaskSwitchContext+0xb8>)
1a0024ae:	2200      	movs	r2, #0
1a0024b0:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a0024b2:	4b29      	ldr	r3, [pc, #164]	; (1a002558 <vTaskSwitchContext+0xbc>)
1a0024b4:	681b      	ldr	r3, [r3, #0]
1a0024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0024b8:	681a      	ldr	r2, [r3, #0]
1a0024ba:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0024be:	d103      	bne.n	1a0024c8 <vTaskSwitchContext+0x2c>
1a0024c0:	685a      	ldr	r2, [r3, #4]
1a0024c2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0024c6:	d01b      	beq.n	1a002500 <vTaskSwitchContext+0x64>
1a0024c8:	4b23      	ldr	r3, [pc, #140]	; (1a002558 <vTaskSwitchContext+0xbc>)
1a0024ca:	6818      	ldr	r0, [r3, #0]
1a0024cc:	6819      	ldr	r1, [r3, #0]
1a0024ce:	3134      	adds	r1, #52	; 0x34
1a0024d0:	f7ff fc2e 	bl	1a001d30 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0024d4:	4b21      	ldr	r3, [pc, #132]	; (1a00255c <vTaskSwitchContext+0xc0>)
1a0024d6:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a0024d8:	fab3 f383 	clz	r3, r3
1a0024dc:	b2db      	uxtb	r3, r3
1a0024de:	f1c3 031f 	rsb	r3, r3, #31
1a0024e2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0024e6:	008a      	lsls	r2, r1, #2
1a0024e8:	491d      	ldr	r1, [pc, #116]	; (1a002560 <vTaskSwitchContext+0xc4>)
1a0024ea:	588a      	ldr	r2, [r1, r2]
1a0024ec:	b98a      	cbnz	r2, 1a002512 <vTaskSwitchContext+0x76>
	__asm volatile
1a0024ee:	f04f 0320 	mov.w	r3, #32
1a0024f2:	f383 8811 	msr	BASEPRI, r3
1a0024f6:	f3bf 8f6f 	isb	sy
1a0024fa:	f3bf 8f4f 	dsb	sy
1a0024fe:	e7fe      	b.n	1a0024fe <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a002500:	689a      	ldr	r2, [r3, #8]
1a002502:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a002506:	d1df      	bne.n	1a0024c8 <vTaskSwitchContext+0x2c>
1a002508:	68db      	ldr	r3, [r3, #12]
1a00250a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a00250e:	d1db      	bne.n	1a0024c8 <vTaskSwitchContext+0x2c>
1a002510:	e7e0      	b.n	1a0024d4 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a002512:	4813      	ldr	r0, [pc, #76]	; (1a002560 <vTaskSwitchContext+0xc4>)
1a002514:	009a      	lsls	r2, r3, #2
1a002516:	18d4      	adds	r4, r2, r3
1a002518:	00a1      	lsls	r1, r4, #2
1a00251a:	4401      	add	r1, r0
1a00251c:	684c      	ldr	r4, [r1, #4]
1a00251e:	6864      	ldr	r4, [r4, #4]
1a002520:	604c      	str	r4, [r1, #4]
1a002522:	441a      	add	r2, r3
1a002524:	0091      	lsls	r1, r2, #2
1a002526:	3108      	adds	r1, #8
1a002528:	4408      	add	r0, r1
1a00252a:	4284      	cmp	r4, r0
1a00252c:	d009      	beq.n	1a002542 <vTaskSwitchContext+0xa6>
1a00252e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002532:	009a      	lsls	r2, r3, #2
1a002534:	4b0a      	ldr	r3, [pc, #40]	; (1a002560 <vTaskSwitchContext+0xc4>)
1a002536:	4413      	add	r3, r2
1a002538:	685b      	ldr	r3, [r3, #4]
1a00253a:	68da      	ldr	r2, [r3, #12]
1a00253c:	4b06      	ldr	r3, [pc, #24]	; (1a002558 <vTaskSwitchContext+0xbc>)
1a00253e:	601a      	str	r2, [r3, #0]
}
1a002540:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a002542:	6861      	ldr	r1, [r4, #4]
1a002544:	4806      	ldr	r0, [pc, #24]	; (1a002560 <vTaskSwitchContext+0xc4>)
1a002546:	2214      	movs	r2, #20
1a002548:	fb02 0203 	mla	r2, r2, r3, r0
1a00254c:	6051      	str	r1, [r2, #4]
1a00254e:	e7ee      	b.n	1a00252e <vTaskSwitchContext+0x92>
1a002550:	10007704 	.word	0x10007704
1a002554:	10007784 	.word	0x10007784
1a002558:	10007660 	.word	0x10007660
1a00255c:	1000770c 	.word	0x1000770c
1a002560:	1000766c 	.word	0x1000766c

1a002564 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a002564:	b940      	cbnz	r0, 1a002578 <vTaskPlaceOnEventList+0x14>
1a002566:	f04f 0320 	mov.w	r3, #32
1a00256a:	f383 8811 	msr	BASEPRI, r3
1a00256e:	f3bf 8f6f 	isb	sy
1a002572:	f3bf 8f4f 	dsb	sy
1a002576:	e7fe      	b.n	1a002576 <vTaskPlaceOnEventList+0x12>
{
1a002578:	b510      	push	{r4, lr}
1a00257a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a00257c:	4b04      	ldr	r3, [pc, #16]	; (1a002590 <vTaskPlaceOnEventList+0x2c>)
1a00257e:	6819      	ldr	r1, [r3, #0]
1a002580:	3118      	adds	r1, #24
1a002582:	f7ff fb6a 	bl	1a001c5a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a002586:	2101      	movs	r1, #1
1a002588:	4620      	mov	r0, r4
1a00258a:	f7ff fd1f 	bl	1a001fcc <prvAddCurrentTaskToDelayedList>
}
1a00258e:	bd10      	pop	{r4, pc}
1a002590:	10007660 	.word	0x10007660

1a002594 <vTaskPlaceOnEventListRestricted>:
	{
1a002594:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a002596:	b940      	cbnz	r0, 1a0025aa <vTaskPlaceOnEventListRestricted+0x16>
1a002598:	f04f 0320 	mov.w	r3, #32
1a00259c:	f383 8811 	msr	BASEPRI, r3
1a0025a0:	f3bf 8f6f 	isb	sy
1a0025a4:	f3bf 8f4f 	dsb	sy
1a0025a8:	e7fe      	b.n	1a0025a8 <vTaskPlaceOnEventListRestricted+0x14>
1a0025aa:	460c      	mov	r4, r1
1a0025ac:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0025ae:	4a06      	ldr	r2, [pc, #24]	; (1a0025c8 <vTaskPlaceOnEventListRestricted+0x34>)
1a0025b0:	6811      	ldr	r1, [r2, #0]
1a0025b2:	3118      	adds	r1, #24
1a0025b4:	f7ff fb45 	bl	1a001c42 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a0025b8:	b10d      	cbz	r5, 1a0025be <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a0025ba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a0025be:	4629      	mov	r1, r5
1a0025c0:	4620      	mov	r0, r4
1a0025c2:	f7ff fd03 	bl	1a001fcc <prvAddCurrentTaskToDelayedList>
	}
1a0025c6:	bd38      	pop	{r3, r4, r5, pc}
1a0025c8:	10007660 	.word	0x10007660

1a0025cc <xTaskRemoveFromEventList>:
{
1a0025cc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a0025ce:	68c3      	ldr	r3, [r0, #12]
1a0025d0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a0025d2:	b944      	cbnz	r4, 1a0025e6 <xTaskRemoveFromEventList+0x1a>
1a0025d4:	f04f 0320 	mov.w	r3, #32
1a0025d8:	f383 8811 	msr	BASEPRI, r3
1a0025dc:	f3bf 8f6f 	isb	sy
1a0025e0:	f3bf 8f4f 	dsb	sy
1a0025e4:	e7fe      	b.n	1a0025e4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a0025e6:	f104 0518 	add.w	r5, r4, #24
1a0025ea:	4628      	mov	r0, r5
1a0025ec:	f7ff fb4f 	bl	1a001c8e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0025f0:	4b13      	ldr	r3, [pc, #76]	; (1a002640 <xTaskRemoveFromEventList+0x74>)
1a0025f2:	681b      	ldr	r3, [r3, #0]
1a0025f4:	b9e3      	cbnz	r3, 1a002630 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a0025f6:	1d25      	adds	r5, r4, #4
1a0025f8:	4628      	mov	r0, r5
1a0025fa:	f7ff fb48 	bl	1a001c8e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a0025fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002600:	2201      	movs	r2, #1
1a002602:	409a      	lsls	r2, r3
1a002604:	490f      	ldr	r1, [pc, #60]	; (1a002644 <xTaskRemoveFromEventList+0x78>)
1a002606:	6808      	ldr	r0, [r1, #0]
1a002608:	4302      	orrs	r2, r0
1a00260a:	600a      	str	r2, [r1, #0]
1a00260c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002610:	009a      	lsls	r2, r3, #2
1a002612:	4629      	mov	r1, r5
1a002614:	480c      	ldr	r0, [pc, #48]	; (1a002648 <xTaskRemoveFromEventList+0x7c>)
1a002616:	4410      	add	r0, r2
1a002618:	f7ff fb13 	bl	1a001c42 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a00261c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00261e:	4b0b      	ldr	r3, [pc, #44]	; (1a00264c <xTaskRemoveFromEventList+0x80>)
1a002620:	681b      	ldr	r3, [r3, #0]
1a002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002624:	429a      	cmp	r2, r3
1a002626:	d908      	bls.n	1a00263a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a002628:	2001      	movs	r0, #1
1a00262a:	4b09      	ldr	r3, [pc, #36]	; (1a002650 <xTaskRemoveFromEventList+0x84>)
1a00262c:	6018      	str	r0, [r3, #0]
}
1a00262e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a002630:	4629      	mov	r1, r5
1a002632:	4808      	ldr	r0, [pc, #32]	; (1a002654 <xTaskRemoveFromEventList+0x88>)
1a002634:	f7ff fb05 	bl	1a001c42 <vListInsertEnd>
1a002638:	e7f0      	b.n	1a00261c <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a00263a:	2000      	movs	r0, #0
	return xReturn;
1a00263c:	e7f7      	b.n	1a00262e <xTaskRemoveFromEventList+0x62>
1a00263e:	bf00      	nop
1a002640:	10007704 	.word	0x10007704
1a002644:	1000770c 	.word	0x1000770c
1a002648:	1000766c 	.word	0x1000766c
1a00264c:	10007660 	.word	0x10007660
1a002650:	10007784 	.word	0x10007784
1a002654:	10007740 	.word	0x10007740

1a002658 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a002658:	4b03      	ldr	r3, [pc, #12]	; (1a002668 <vTaskInternalSetTimeOutState+0x10>)
1a00265a:	681b      	ldr	r3, [r3, #0]
1a00265c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a00265e:	4b03      	ldr	r3, [pc, #12]	; (1a00266c <vTaskInternalSetTimeOutState+0x14>)
1a002660:	681b      	ldr	r3, [r3, #0]
1a002662:	6043      	str	r3, [r0, #4]
}
1a002664:	4770      	bx	lr
1a002666:	bf00      	nop
1a002668:	1000773c 	.word	0x1000773c
1a00266c:	10007780 	.word	0x10007780

1a002670 <xTaskCheckForTimeOut>:
{
1a002670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a002672:	b150      	cbz	r0, 1a00268a <xTaskCheckForTimeOut+0x1a>
1a002674:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a002676:	b989      	cbnz	r1, 1a00269c <xTaskCheckForTimeOut+0x2c>
1a002678:	f04f 0320 	mov.w	r3, #32
1a00267c:	f383 8811 	msr	BASEPRI, r3
1a002680:	f3bf 8f6f 	isb	sy
1a002684:	f3bf 8f4f 	dsb	sy
1a002688:	e7fe      	b.n	1a002688 <xTaskCheckForTimeOut+0x18>
1a00268a:	f04f 0320 	mov.w	r3, #32
1a00268e:	f383 8811 	msr	BASEPRI, r3
1a002692:	f3bf 8f6f 	isb	sy
1a002696:	f3bf 8f4f 	dsb	sy
1a00269a:	e7fe      	b.n	1a00269a <xTaskCheckForTimeOut+0x2a>
1a00269c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a00269e:	f000 fb51 	bl	1a002d44 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a0026a2:	4b11      	ldr	r3, [pc, #68]	; (1a0026e8 <xTaskCheckForTimeOut+0x78>)
1a0026a4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a0026a6:	6868      	ldr	r0, [r5, #4]
1a0026a8:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a0026aa:	6823      	ldr	r3, [r4, #0]
1a0026ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0026b0:	d016      	beq.n	1a0026e0 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a0026b2:	682f      	ldr	r7, [r5, #0]
1a0026b4:	4e0d      	ldr	r6, [pc, #52]	; (1a0026ec <xTaskCheckForTimeOut+0x7c>)
1a0026b6:	6836      	ldr	r6, [r6, #0]
1a0026b8:	42b7      	cmp	r7, r6
1a0026ba:	d001      	beq.n	1a0026c0 <xTaskCheckForTimeOut+0x50>
1a0026bc:	4288      	cmp	r0, r1
1a0026be:	d911      	bls.n	1a0026e4 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a0026c0:	4293      	cmp	r3, r2
1a0026c2:	d803      	bhi.n	1a0026cc <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a0026c4:	2300      	movs	r3, #0
1a0026c6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a0026c8:	2401      	movs	r4, #1
1a0026ca:	e005      	b.n	1a0026d8 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a0026cc:	1a9b      	subs	r3, r3, r2
1a0026ce:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a0026d0:	4628      	mov	r0, r5
1a0026d2:	f7ff ffc1 	bl	1a002658 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a0026d6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0026d8:	f000 fb56 	bl	1a002d88 <vPortExitCritical>
}
1a0026dc:	4620      	mov	r0, r4
1a0026de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a0026e0:	2400      	movs	r4, #0
1a0026e2:	e7f9      	b.n	1a0026d8 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a0026e4:	2401      	movs	r4, #1
1a0026e6:	e7f7      	b.n	1a0026d8 <xTaskCheckForTimeOut+0x68>
1a0026e8:	10007780 	.word	0x10007780
1a0026ec:	1000773c 	.word	0x1000773c

1a0026f0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a0026f0:	4b01      	ldr	r3, [pc, #4]	; (1a0026f8 <vTaskMissedYield+0x8>)
1a0026f2:	2201      	movs	r2, #1
1a0026f4:	601a      	str	r2, [r3, #0]
}
1a0026f6:	4770      	bx	lr
1a0026f8:	10007784 	.word	0x10007784

1a0026fc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a0026fc:	4b05      	ldr	r3, [pc, #20]	; (1a002714 <xTaskGetSchedulerState+0x18>)
1a0026fe:	681b      	ldr	r3, [r3, #0]
1a002700:	b133      	cbz	r3, 1a002710 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002702:	4b05      	ldr	r3, [pc, #20]	; (1a002718 <xTaskGetSchedulerState+0x1c>)
1a002704:	681b      	ldr	r3, [r3, #0]
1a002706:	b10b      	cbz	r3, 1a00270c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a002708:	2000      	movs	r0, #0
	}
1a00270a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a00270c:	2002      	movs	r0, #2
1a00270e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a002710:	2001      	movs	r0, #1
1a002712:	4770      	bx	lr
1a002714:	10007754 	.word	0x10007754
1a002718:	10007704 	.word	0x10007704

1a00271c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a00271c:	2800      	cmp	r0, #0
1a00271e:	d049      	beq.n	1a0027b4 <xTaskPriorityDisinherit+0x98>
	{
1a002720:	b538      	push	{r3, r4, r5, lr}
1a002722:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a002724:	4a26      	ldr	r2, [pc, #152]	; (1a0027c0 <xTaskPriorityDisinherit+0xa4>)
1a002726:	6812      	ldr	r2, [r2, #0]
1a002728:	4282      	cmp	r2, r0
1a00272a:	d008      	beq.n	1a00273e <xTaskPriorityDisinherit+0x22>
1a00272c:	f04f 0320 	mov.w	r3, #32
1a002730:	f383 8811 	msr	BASEPRI, r3
1a002734:	f3bf 8f6f 	isb	sy
1a002738:	f3bf 8f4f 	dsb	sy
1a00273c:	e7fe      	b.n	1a00273c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a00273e:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a002740:	b942      	cbnz	r2, 1a002754 <xTaskPriorityDisinherit+0x38>
1a002742:	f04f 0320 	mov.w	r3, #32
1a002746:	f383 8811 	msr	BASEPRI, r3
1a00274a:	f3bf 8f6f 	isb	sy
1a00274e:	f3bf 8f4f 	dsb	sy
1a002752:	e7fe      	b.n	1a002752 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a002754:	3a01      	subs	r2, #1
1a002756:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a002758:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a00275a:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a00275c:	4288      	cmp	r0, r1
1a00275e:	d02b      	beq.n	1a0027b8 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a002760:	bb62      	cbnz	r2, 1a0027bc <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002762:	1d25      	adds	r5, r4, #4
1a002764:	4628      	mov	r0, r5
1a002766:	f7ff fa92 	bl	1a001c8e <uxListRemove>
1a00276a:	b970      	cbnz	r0, 1a00278a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a00276c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00276e:	2314      	movs	r3, #20
1a002770:	fb03 f302 	mul.w	r3, r3, r2
1a002774:	4913      	ldr	r1, [pc, #76]	; (1a0027c4 <xTaskPriorityDisinherit+0xa8>)
1a002776:	58cb      	ldr	r3, [r1, r3]
1a002778:	b93b      	cbnz	r3, 1a00278a <xTaskPriorityDisinherit+0x6e>
1a00277a:	2301      	movs	r3, #1
1a00277c:	fa03 f202 	lsl.w	r2, r3, r2
1a002780:	4911      	ldr	r1, [pc, #68]	; (1a0027c8 <xTaskPriorityDisinherit+0xac>)
1a002782:	680b      	ldr	r3, [r1, #0]
1a002784:	ea23 0302 	bic.w	r3, r3, r2
1a002788:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a00278a:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a00278c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00278e:	f1c3 0207 	rsb	r2, r3, #7
1a002792:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a002794:	2401      	movs	r4, #1
1a002796:	fa04 f203 	lsl.w	r2, r4, r3
1a00279a:	490b      	ldr	r1, [pc, #44]	; (1a0027c8 <xTaskPriorityDisinherit+0xac>)
1a00279c:	6808      	ldr	r0, [r1, #0]
1a00279e:	4302      	orrs	r2, r0
1a0027a0:	600a      	str	r2, [r1, #0]
1a0027a2:	4629      	mov	r1, r5
1a0027a4:	4a07      	ldr	r2, [pc, #28]	; (1a0027c4 <xTaskPriorityDisinherit+0xa8>)
1a0027a6:	2014      	movs	r0, #20
1a0027a8:	fb00 2003 	mla	r0, r0, r3, r2
1a0027ac:	f7ff fa49 	bl	1a001c42 <vListInsertEnd>
					xReturn = pdTRUE;
1a0027b0:	4620      	mov	r0, r4
	}
1a0027b2:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a0027b4:	2000      	movs	r0, #0
	}
1a0027b6:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a0027b8:	2000      	movs	r0, #0
1a0027ba:	e7fa      	b.n	1a0027b2 <xTaskPriorityDisinherit+0x96>
1a0027bc:	2000      	movs	r0, #0
		return xReturn;
1a0027be:	e7f8      	b.n	1a0027b2 <xTaskPriorityDisinherit+0x96>
1a0027c0:	10007660 	.word	0x10007660
1a0027c4:	1000766c 	.word	0x1000766c
1a0027c8:	1000770c 	.word	0x1000770c

1a0027cc <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a0027cc:	4b06      	ldr	r3, [pc, #24]	; (1a0027e8 <prvGetNextExpireTime+0x1c>)
1a0027ce:	681a      	ldr	r2, [r3, #0]
1a0027d0:	6813      	ldr	r3, [r2, #0]
1a0027d2:	fab3 f383 	clz	r3, r3
1a0027d6:	095b      	lsrs	r3, r3, #5
1a0027d8:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a0027da:	b913      	cbnz	r3, 1a0027e2 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0027dc:	68d3      	ldr	r3, [r2, #12]
1a0027de:	6818      	ldr	r0, [r3, #0]
1a0027e0:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a0027e2:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a0027e4:	4770      	bx	lr
1a0027e6:	bf00      	nop
1a0027e8:	10007788 	.word	0x10007788

1a0027ec <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a0027ec:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a0027ee:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a0027f0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a0027f2:	4291      	cmp	r1, r2
1a0027f4:	d80c      	bhi.n	1a002810 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0027f6:	1ad2      	subs	r2, r2, r3
1a0027f8:	6983      	ldr	r3, [r0, #24]
1a0027fa:	429a      	cmp	r2, r3
1a0027fc:	d301      	bcc.n	1a002802 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a0027fe:	2001      	movs	r0, #1
1a002800:	e010      	b.n	1a002824 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a002802:	1d01      	adds	r1, r0, #4
1a002804:	4b09      	ldr	r3, [pc, #36]	; (1a00282c <prvInsertTimerInActiveList+0x40>)
1a002806:	6818      	ldr	r0, [r3, #0]
1a002808:	f7ff fa27 	bl	1a001c5a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a00280c:	2000      	movs	r0, #0
1a00280e:	e009      	b.n	1a002824 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a002810:	429a      	cmp	r2, r3
1a002812:	d201      	bcs.n	1a002818 <prvInsertTimerInActiveList+0x2c>
1a002814:	4299      	cmp	r1, r3
1a002816:	d206      	bcs.n	1a002826 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002818:	1d01      	adds	r1, r0, #4
1a00281a:	4b05      	ldr	r3, [pc, #20]	; (1a002830 <prvInsertTimerInActiveList+0x44>)
1a00281c:	6818      	ldr	r0, [r3, #0]
1a00281e:	f7ff fa1c 	bl	1a001c5a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002822:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a002824:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a002826:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a002828:	e7fc      	b.n	1a002824 <prvInsertTimerInActiveList+0x38>
1a00282a:	bf00      	nop
1a00282c:	1000778c 	.word	0x1000778c
1a002830:	10007788 	.word	0x10007788

1a002834 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a002834:	b530      	push	{r4, r5, lr}
1a002836:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a002838:	f000 fa84 	bl	1a002d44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a00283c:	4b11      	ldr	r3, [pc, #68]	; (1a002884 <prvCheckForValidListAndQueue+0x50>)
1a00283e:	681b      	ldr	r3, [r3, #0]
1a002840:	b11b      	cbz	r3, 1a00284a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a002842:	f000 faa1 	bl	1a002d88 <vPortExitCritical>
}
1a002846:	b003      	add	sp, #12
1a002848:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a00284a:	4d0f      	ldr	r5, [pc, #60]	; (1a002888 <prvCheckForValidListAndQueue+0x54>)
1a00284c:	4628      	mov	r0, r5
1a00284e:	f7ff f9ea 	bl	1a001c26 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a002852:	4c0e      	ldr	r4, [pc, #56]	; (1a00288c <prvCheckForValidListAndQueue+0x58>)
1a002854:	4620      	mov	r0, r4
1a002856:	f7ff f9e6 	bl	1a001c26 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a00285a:	4b0d      	ldr	r3, [pc, #52]	; (1a002890 <prvCheckForValidListAndQueue+0x5c>)
1a00285c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a00285e:	4b0d      	ldr	r3, [pc, #52]	; (1a002894 <prvCheckForValidListAndQueue+0x60>)
1a002860:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a002862:	2300      	movs	r3, #0
1a002864:	9300      	str	r3, [sp, #0]
1a002866:	4b0c      	ldr	r3, [pc, #48]	; (1a002898 <prvCheckForValidListAndQueue+0x64>)
1a002868:	4a0c      	ldr	r2, [pc, #48]	; (1a00289c <prvCheckForValidListAndQueue+0x68>)
1a00286a:	2110      	movs	r1, #16
1a00286c:	200a      	movs	r0, #10
1a00286e:	f7fe ff5e 	bl	1a00172e <xQueueGenericCreateStatic>
1a002872:	4b04      	ldr	r3, [pc, #16]	; (1a002884 <prvCheckForValidListAndQueue+0x50>)
1a002874:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a002876:	2800      	cmp	r0, #0
1a002878:	d0e3      	beq.n	1a002842 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a00287a:	4909      	ldr	r1, [pc, #36]	; (1a0028a0 <prvCheckForValidListAndQueue+0x6c>)
1a00287c:	f7ff f996 	bl	1a001bac <vQueueAddToRegistry>
1a002880:	e7df      	b.n	1a002842 <prvCheckForValidListAndQueue+0xe>
1a002882:	bf00      	nop
1a002884:	100078ac 	.word	0x100078ac
1a002888:	10007830 	.word	0x10007830
1a00288c:	10007844 	.word	0x10007844
1a002890:	10007788 	.word	0x10007788
1a002894:	1000778c 	.word	0x1000778c
1a002898:	1000785c 	.word	0x1000785c
1a00289c:	10007790 	.word	0x10007790
1a0028a0:	1a00a67c 	.word	0x1a00a67c

1a0028a4 <prvInitialiseNewTimer>:
{
1a0028a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0028a8:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a0028aa:	b941      	cbnz	r1, 1a0028be <prvInitialiseNewTimer+0x1a>
1a0028ac:	f04f 0320 	mov.w	r3, #32
1a0028b0:	f383 8811 	msr	BASEPRI, r3
1a0028b4:	f3bf 8f6f 	isb	sy
1a0028b8:	f3bf 8f4f 	dsb	sy
1a0028bc:	e7fe      	b.n	1a0028bc <prvInitialiseNewTimer+0x18>
1a0028be:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a0028c0:	b174      	cbz	r4, 1a0028e0 <prvInitialiseNewTimer+0x3c>
1a0028c2:	461d      	mov	r5, r3
1a0028c4:	4616      	mov	r6, r2
1a0028c6:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a0028c8:	f7ff ffb4 	bl	1a002834 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a0028cc:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a0028d0:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a0028d2:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a0028d4:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a0028d6:	9b06      	ldr	r3, [sp, #24]
1a0028d8:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a0028da:	1d20      	adds	r0, r4, #4
1a0028dc:	f7ff f9ae 	bl	1a001c3c <vListInitialiseItem>
}
1a0028e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a0028e4 <xTimerCreateTimerTask>:
{
1a0028e4:	b510      	push	{r4, lr}
1a0028e6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a0028e8:	f7ff ffa4 	bl	1a002834 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a0028ec:	4b12      	ldr	r3, [pc, #72]	; (1a002938 <xTimerCreateTimerTask+0x54>)
1a0028ee:	681b      	ldr	r3, [r3, #0]
1a0028f0:	b1cb      	cbz	r3, 1a002926 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a0028f2:	2400      	movs	r4, #0
1a0028f4:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a0028f6:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a0028f8:	aa07      	add	r2, sp, #28
1a0028fa:	a906      	add	r1, sp, #24
1a0028fc:	a805      	add	r0, sp, #20
1a0028fe:	f7ff f9e7 	bl	1a001cd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a002902:	9b05      	ldr	r3, [sp, #20]
1a002904:	9302      	str	r3, [sp, #8]
1a002906:	9b06      	ldr	r3, [sp, #24]
1a002908:	9301      	str	r3, [sp, #4]
1a00290a:	2304      	movs	r3, #4
1a00290c:	9300      	str	r3, [sp, #0]
1a00290e:	4623      	mov	r3, r4
1a002910:	9a07      	ldr	r2, [sp, #28]
1a002912:	490a      	ldr	r1, [pc, #40]	; (1a00293c <xTimerCreateTimerTask+0x58>)
1a002914:	480a      	ldr	r0, [pc, #40]	; (1a002940 <xTimerCreateTimerTask+0x5c>)
1a002916:	f7ff fba5 	bl	1a002064 <xTaskCreateStatic>
1a00291a:	4b0a      	ldr	r3, [pc, #40]	; (1a002944 <xTimerCreateTimerTask+0x60>)
1a00291c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a00291e:	b110      	cbz	r0, 1a002926 <xTimerCreateTimerTask+0x42>
}
1a002920:	2001      	movs	r0, #1
1a002922:	b008      	add	sp, #32
1a002924:	bd10      	pop	{r4, pc}
1a002926:	f04f 0320 	mov.w	r3, #32
1a00292a:	f383 8811 	msr	BASEPRI, r3
1a00292e:	f3bf 8f6f 	isb	sy
1a002932:	f3bf 8f4f 	dsb	sy
1a002936:	e7fe      	b.n	1a002936 <xTimerCreateTimerTask+0x52>
1a002938:	100078ac 	.word	0x100078ac
1a00293c:	1a00a684 	.word	0x1a00a684
1a002940:	1a002c61 	.word	0x1a002c61
1a002944:	100078b0 	.word	0x100078b0

1a002948 <xTimerCreate>:
	{
1a002948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00294c:	b082      	sub	sp, #8
1a00294e:	4605      	mov	r5, r0
1a002950:	460e      	mov	r6, r1
1a002952:	4617      	mov	r7, r2
1a002954:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
1a002956:	2030      	movs	r0, #48	; 0x30
1a002958:	f7fe fd30 	bl	1a0013bc <pvPortMalloc>
		if( pxNewTimer != NULL )
1a00295c:	4604      	mov	r4, r0
1a00295e:	b158      	cbz	r0, 1a002978 <xTimerCreate+0x30>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a002960:	9001      	str	r0, [sp, #4]
1a002962:	9b08      	ldr	r3, [sp, #32]
1a002964:	9300      	str	r3, [sp, #0]
1a002966:	4643      	mov	r3, r8
1a002968:	463a      	mov	r2, r7
1a00296a:	4631      	mov	r1, r6
1a00296c:	4628      	mov	r0, r5
1a00296e:	f7ff ff99 	bl	1a0028a4 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
1a002972:	2300      	movs	r3, #0
1a002974:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a002978:	4620      	mov	r0, r4
1a00297a:	b002      	add	sp, #8
1a00297c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a002980 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a002980:	b1c8      	cbz	r0, 1a0029b6 <xTimerGenericCommand+0x36>
{
1a002982:	b530      	push	{r4, r5, lr}
1a002984:	b085      	sub	sp, #20
1a002986:	4615      	mov	r5, r2
1a002988:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a00298a:	4a17      	ldr	r2, [pc, #92]	; (1a0029e8 <xTimerGenericCommand+0x68>)
1a00298c:	6810      	ldr	r0, [r2, #0]
1a00298e:	b340      	cbz	r0, 1a0029e2 <xTimerGenericCommand+0x62>
1a002990:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a002992:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a002994:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a002996:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a002998:	2905      	cmp	r1, #5
1a00299a:	dc1d      	bgt.n	1a0029d8 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a00299c:	f7ff feae 	bl	1a0026fc <xTaskGetSchedulerState>
1a0029a0:	2802      	cmp	r0, #2
1a0029a2:	d011      	beq.n	1a0029c8 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a0029a4:	2300      	movs	r3, #0
1a0029a6:	461a      	mov	r2, r3
1a0029a8:	4669      	mov	r1, sp
1a0029aa:	480f      	ldr	r0, [pc, #60]	; (1a0029e8 <xTimerGenericCommand+0x68>)
1a0029ac:	6800      	ldr	r0, [r0, #0]
1a0029ae:	f7fe ff2d 	bl	1a00180c <xQueueGenericSend>
}
1a0029b2:	b005      	add	sp, #20
1a0029b4:	bd30      	pop	{r4, r5, pc}
1a0029b6:	f04f 0320 	mov.w	r3, #32
1a0029ba:	f383 8811 	msr	BASEPRI, r3
1a0029be:	f3bf 8f6f 	isb	sy
1a0029c2:	f3bf 8f4f 	dsb	sy
1a0029c6:	e7fe      	b.n	1a0029c6 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0029c8:	2300      	movs	r3, #0
1a0029ca:	9a08      	ldr	r2, [sp, #32]
1a0029cc:	4669      	mov	r1, sp
1a0029ce:	4806      	ldr	r0, [pc, #24]	; (1a0029e8 <xTimerGenericCommand+0x68>)
1a0029d0:	6800      	ldr	r0, [r0, #0]
1a0029d2:	f7fe ff1b 	bl	1a00180c <xQueueGenericSend>
1a0029d6:	e7ec      	b.n	1a0029b2 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0029d8:	2300      	movs	r3, #0
1a0029da:	4669      	mov	r1, sp
1a0029dc:	f7fe ffd4 	bl	1a001988 <xQueueGenericSendFromISR>
1a0029e0:	e7e7      	b.n	1a0029b2 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a0029e2:	2000      	movs	r0, #0
	return xReturn;
1a0029e4:	e7e5      	b.n	1a0029b2 <xTimerGenericCommand+0x32>
1a0029e6:	bf00      	nop
1a0029e8:	100078ac 	.word	0x100078ac

1a0029ec <prvSwitchTimerLists>:
{
1a0029ec:	b570      	push	{r4, r5, r6, lr}
1a0029ee:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a0029f0:	4b1a      	ldr	r3, [pc, #104]	; (1a002a5c <prvSwitchTimerLists+0x70>)
1a0029f2:	681b      	ldr	r3, [r3, #0]
1a0029f4:	681a      	ldr	r2, [r3, #0]
1a0029f6:	b352      	cbz	r2, 1a002a4e <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0029f8:	68db      	ldr	r3, [r3, #12]
1a0029fa:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0029fc:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0029fe:	1d25      	adds	r5, r4, #4
1a002a00:	4628      	mov	r0, r5
1a002a02:	f7ff f944 	bl	1a001c8e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002a06:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002a08:	4620      	mov	r0, r4
1a002a0a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002a0c:	69e3      	ldr	r3, [r4, #28]
1a002a0e:	2b01      	cmp	r3, #1
1a002a10:	d1ee      	bne.n	1a0029f0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a002a12:	69a3      	ldr	r3, [r4, #24]
1a002a14:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a002a16:	429e      	cmp	r6, r3
1a002a18:	d207      	bcs.n	1a002a2a <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a002a1a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002a1c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002a1e:	4629      	mov	r1, r5
1a002a20:	4b0e      	ldr	r3, [pc, #56]	; (1a002a5c <prvSwitchTimerLists+0x70>)
1a002a22:	6818      	ldr	r0, [r3, #0]
1a002a24:	f7ff f919 	bl	1a001c5a <vListInsert>
1a002a28:	e7e2      	b.n	1a0029f0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002a2a:	2100      	movs	r1, #0
1a002a2c:	9100      	str	r1, [sp, #0]
1a002a2e:	460b      	mov	r3, r1
1a002a30:	4632      	mov	r2, r6
1a002a32:	4620      	mov	r0, r4
1a002a34:	f7ff ffa4 	bl	1a002980 <xTimerGenericCommand>
				configASSERT( xResult );
1a002a38:	2800      	cmp	r0, #0
1a002a3a:	d1d9      	bne.n	1a0029f0 <prvSwitchTimerLists+0x4>
1a002a3c:	f04f 0320 	mov.w	r3, #32
1a002a40:	f383 8811 	msr	BASEPRI, r3
1a002a44:	f3bf 8f6f 	isb	sy
1a002a48:	f3bf 8f4f 	dsb	sy
1a002a4c:	e7fe      	b.n	1a002a4c <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a002a4e:	4a04      	ldr	r2, [pc, #16]	; (1a002a60 <prvSwitchTimerLists+0x74>)
1a002a50:	6810      	ldr	r0, [r2, #0]
1a002a52:	4902      	ldr	r1, [pc, #8]	; (1a002a5c <prvSwitchTimerLists+0x70>)
1a002a54:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a002a56:	6013      	str	r3, [r2, #0]
}
1a002a58:	b002      	add	sp, #8
1a002a5a:	bd70      	pop	{r4, r5, r6, pc}
1a002a5c:	10007788 	.word	0x10007788
1a002a60:	1000778c 	.word	0x1000778c

1a002a64 <prvSampleTimeNow>:
{
1a002a64:	b538      	push	{r3, r4, r5, lr}
1a002a66:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a002a68:	f7ff fbba 	bl	1a0021e0 <xTaskGetTickCount>
1a002a6c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a002a6e:	4b07      	ldr	r3, [pc, #28]	; (1a002a8c <prvSampleTimeNow+0x28>)
1a002a70:	681b      	ldr	r3, [r3, #0]
1a002a72:	4283      	cmp	r3, r0
1a002a74:	d805      	bhi.n	1a002a82 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a002a76:	2300      	movs	r3, #0
1a002a78:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a002a7a:	4b04      	ldr	r3, [pc, #16]	; (1a002a8c <prvSampleTimeNow+0x28>)
1a002a7c:	601c      	str	r4, [r3, #0]
}
1a002a7e:	4620      	mov	r0, r4
1a002a80:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a002a82:	f7ff ffb3 	bl	1a0029ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a002a86:	2301      	movs	r3, #1
1a002a88:	602b      	str	r3, [r5, #0]
1a002a8a:	e7f6      	b.n	1a002a7a <prvSampleTimeNow+0x16>
1a002a8c:	10007858 	.word	0x10007858

1a002a90 <prvProcessExpiredTimer>:
{
1a002a90:	b570      	push	{r4, r5, r6, lr}
1a002a92:	b082      	sub	sp, #8
1a002a94:	4605      	mov	r5, r0
1a002a96:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002a98:	4b14      	ldr	r3, [pc, #80]	; (1a002aec <prvProcessExpiredTimer+0x5c>)
1a002a9a:	681b      	ldr	r3, [r3, #0]
1a002a9c:	68db      	ldr	r3, [r3, #12]
1a002a9e:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002aa0:	1d20      	adds	r0, r4, #4
1a002aa2:	f7ff f8f4 	bl	1a001c8e <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002aa6:	69e3      	ldr	r3, [r4, #28]
1a002aa8:	2b01      	cmp	r3, #1
1a002aaa:	d004      	beq.n	1a002ab6 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002aac:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002aae:	4620      	mov	r0, r4
1a002ab0:	4798      	blx	r3
}
1a002ab2:	b002      	add	sp, #8
1a002ab4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a002ab6:	69a1      	ldr	r1, [r4, #24]
1a002ab8:	462b      	mov	r3, r5
1a002aba:	4632      	mov	r2, r6
1a002abc:	4429      	add	r1, r5
1a002abe:	4620      	mov	r0, r4
1a002ac0:	f7ff fe94 	bl	1a0027ec <prvInsertTimerInActiveList>
1a002ac4:	2800      	cmp	r0, #0
1a002ac6:	d0f1      	beq.n	1a002aac <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002ac8:	2100      	movs	r1, #0
1a002aca:	9100      	str	r1, [sp, #0]
1a002acc:	460b      	mov	r3, r1
1a002ace:	462a      	mov	r2, r5
1a002ad0:	4620      	mov	r0, r4
1a002ad2:	f7ff ff55 	bl	1a002980 <xTimerGenericCommand>
			configASSERT( xResult );
1a002ad6:	2800      	cmp	r0, #0
1a002ad8:	d1e8      	bne.n	1a002aac <prvProcessExpiredTimer+0x1c>
1a002ada:	f04f 0320 	mov.w	r3, #32
1a002ade:	f383 8811 	msr	BASEPRI, r3
1a002ae2:	f3bf 8f6f 	isb	sy
1a002ae6:	f3bf 8f4f 	dsb	sy
1a002aea:	e7fe      	b.n	1a002aea <prvProcessExpiredTimer+0x5a>
1a002aec:	10007788 	.word	0x10007788

1a002af0 <prvProcessTimerOrBlockTask>:
{
1a002af0:	b570      	push	{r4, r5, r6, lr}
1a002af2:	b082      	sub	sp, #8
1a002af4:	4606      	mov	r6, r0
1a002af6:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a002af8:	f7ff fb6a 	bl	1a0021d0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002afc:	a801      	add	r0, sp, #4
1a002afe:	f7ff ffb1 	bl	1a002a64 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a002b02:	9b01      	ldr	r3, [sp, #4]
1a002b04:	bb1b      	cbnz	r3, 1a002b4e <prvProcessTimerOrBlockTask+0x5e>
1a002b06:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002b08:	b90c      	cbnz	r4, 1a002b0e <prvProcessTimerOrBlockTask+0x1e>
1a002b0a:	42b0      	cmp	r0, r6
1a002b0c:	d218      	bcs.n	1a002b40 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a002b0e:	b12c      	cbz	r4, 1a002b1c <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002b10:	4b11      	ldr	r3, [pc, #68]	; (1a002b58 <prvProcessTimerOrBlockTask+0x68>)
1a002b12:	681b      	ldr	r3, [r3, #0]
1a002b14:	681c      	ldr	r4, [r3, #0]
1a002b16:	fab4 f484 	clz	r4, r4
1a002b1a:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002b1c:	4622      	mov	r2, r4
1a002b1e:	1b71      	subs	r1, r6, r5
1a002b20:	4b0e      	ldr	r3, [pc, #56]	; (1a002b5c <prvProcessTimerOrBlockTask+0x6c>)
1a002b22:	6818      	ldr	r0, [r3, #0]
1a002b24:	f7ff f856 	bl	1a001bd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002b28:	f7ff fbec 	bl	1a002304 <xTaskResumeAll>
1a002b2c:	b988      	cbnz	r0, 1a002b52 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a002b2e:	4b0c      	ldr	r3, [pc, #48]	; (1a002b60 <prvProcessTimerOrBlockTask+0x70>)
1a002b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002b34:	601a      	str	r2, [r3, #0]
1a002b36:	f3bf 8f4f 	dsb	sy
1a002b3a:	f3bf 8f6f 	isb	sy
1a002b3e:	e008      	b.n	1a002b52 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002b40:	f7ff fbe0 	bl	1a002304 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002b44:	4629      	mov	r1, r5
1a002b46:	4630      	mov	r0, r6
1a002b48:	f7ff ffa2 	bl	1a002a90 <prvProcessExpiredTimer>
1a002b4c:	e001      	b.n	1a002b52 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a002b4e:	f7ff fbd9 	bl	1a002304 <xTaskResumeAll>
}
1a002b52:	b002      	add	sp, #8
1a002b54:	bd70      	pop	{r4, r5, r6, pc}
1a002b56:	bf00      	nop
1a002b58:	1000778c 	.word	0x1000778c
1a002b5c:	100078ac 	.word	0x100078ac
1a002b60:	e000ed04 	.word	0xe000ed04

1a002b64 <prvProcessReceivedCommands>:
{
1a002b64:	b530      	push	{r4, r5, lr}
1a002b66:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002b68:	e002      	b.n	1a002b70 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a002b6a:	9b04      	ldr	r3, [sp, #16]
1a002b6c:	2b00      	cmp	r3, #0
1a002b6e:	da0f      	bge.n	1a002b90 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002b70:	2200      	movs	r2, #0
1a002b72:	a904      	add	r1, sp, #16
1a002b74:	4b39      	ldr	r3, [pc, #228]	; (1a002c5c <prvProcessReceivedCommands+0xf8>)
1a002b76:	6818      	ldr	r0, [r3, #0]
1a002b78:	f7fe ff6c 	bl	1a001a54 <xQueueReceive>
1a002b7c:	2800      	cmp	r0, #0
1a002b7e:	d06a      	beq.n	1a002c56 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002b80:	9b04      	ldr	r3, [sp, #16]
1a002b82:	2b00      	cmp	r3, #0
1a002b84:	daf1      	bge.n	1a002b6a <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a002b86:	9907      	ldr	r1, [sp, #28]
1a002b88:	9806      	ldr	r0, [sp, #24]
1a002b8a:	9b05      	ldr	r3, [sp, #20]
1a002b8c:	4798      	blx	r3
1a002b8e:	e7ec      	b.n	1a002b6a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a002b90:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a002b92:	6963      	ldr	r3, [r4, #20]
1a002b94:	b113      	cbz	r3, 1a002b9c <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002b96:	1d20      	adds	r0, r4, #4
1a002b98:	f7ff f879 	bl	1a001c8e <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002b9c:	a803      	add	r0, sp, #12
1a002b9e:	f7ff ff61 	bl	1a002a64 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a002ba2:	9b04      	ldr	r3, [sp, #16]
1a002ba4:	2b09      	cmp	r3, #9
1a002ba6:	d8e3      	bhi.n	1a002b70 <prvProcessReceivedCommands+0xc>
1a002ba8:	a201      	add	r2, pc, #4	; (adr r2, 1a002bb0 <prvProcessReceivedCommands+0x4c>)
1a002baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a002bae:	bf00      	nop
1a002bb0:	1a002bd9 	.word	0x1a002bd9
1a002bb4:	1a002bd9 	.word	0x1a002bd9
1a002bb8:	1a002bd9 	.word	0x1a002bd9
1a002bbc:	1a002b71 	.word	0x1a002b71
1a002bc0:	1a002c21 	.word	0x1a002c21
1a002bc4:	1a002c47 	.word	0x1a002c47
1a002bc8:	1a002bd9 	.word	0x1a002bd9
1a002bcc:	1a002bd9 	.word	0x1a002bd9
1a002bd0:	1a002b71 	.word	0x1a002b71
1a002bd4:	1a002c21 	.word	0x1a002c21
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a002bd8:	9905      	ldr	r1, [sp, #20]
1a002bda:	69a5      	ldr	r5, [r4, #24]
1a002bdc:	460b      	mov	r3, r1
1a002bde:	4602      	mov	r2, r0
1a002be0:	4429      	add	r1, r5
1a002be2:	4620      	mov	r0, r4
1a002be4:	f7ff fe02 	bl	1a0027ec <prvInsertTimerInActiveList>
1a002be8:	2800      	cmp	r0, #0
1a002bea:	d0c1      	beq.n	1a002b70 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002bec:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002bee:	4620      	mov	r0, r4
1a002bf0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002bf2:	69e3      	ldr	r3, [r4, #28]
1a002bf4:	2b01      	cmp	r3, #1
1a002bf6:	d1bb      	bne.n	1a002b70 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002bf8:	69a2      	ldr	r2, [r4, #24]
1a002bfa:	2100      	movs	r1, #0
1a002bfc:	9100      	str	r1, [sp, #0]
1a002bfe:	460b      	mov	r3, r1
1a002c00:	9805      	ldr	r0, [sp, #20]
1a002c02:	4402      	add	r2, r0
1a002c04:	4620      	mov	r0, r4
1a002c06:	f7ff febb 	bl	1a002980 <xTimerGenericCommand>
							configASSERT( xResult );
1a002c0a:	2800      	cmp	r0, #0
1a002c0c:	d1b0      	bne.n	1a002b70 <prvProcessReceivedCommands+0xc>
1a002c0e:	f04f 0320 	mov.w	r3, #32
1a002c12:	f383 8811 	msr	BASEPRI, r3
1a002c16:	f3bf 8f6f 	isb	sy
1a002c1a:	f3bf 8f4f 	dsb	sy
1a002c1e:	e7fe      	b.n	1a002c1e <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002c20:	9905      	ldr	r1, [sp, #20]
1a002c22:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002c24:	b131      	cbz	r1, 1a002c34 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002c26:	4603      	mov	r3, r0
1a002c28:	4602      	mov	r2, r0
1a002c2a:	4401      	add	r1, r0
1a002c2c:	4620      	mov	r0, r4
1a002c2e:	f7ff fddd 	bl	1a0027ec <prvInsertTimerInActiveList>
					break;
1a002c32:	e79d      	b.n	1a002b70 <prvProcessReceivedCommands+0xc>
1a002c34:	f04f 0320 	mov.w	r3, #32
1a002c38:	f383 8811 	msr	BASEPRI, r3
1a002c3c:	f3bf 8f6f 	isb	sy
1a002c40:	f3bf 8f4f 	dsb	sy
1a002c44:	e7fe      	b.n	1a002c44 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a002c46:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002c4a:	2b00      	cmp	r3, #0
1a002c4c:	d190      	bne.n	1a002b70 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a002c4e:	4620      	mov	r0, r4
1a002c50:	f7fe fc42 	bl	1a0014d8 <vPortFree>
1a002c54:	e78c      	b.n	1a002b70 <prvProcessReceivedCommands+0xc>
}
1a002c56:	b009      	add	sp, #36	; 0x24
1a002c58:	bd30      	pop	{r4, r5, pc}
1a002c5a:	bf00      	nop
1a002c5c:	100078ac 	.word	0x100078ac

1a002c60 <prvTimerTask>:
{
1a002c60:	b500      	push	{lr}
1a002c62:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002c64:	a801      	add	r0, sp, #4
1a002c66:	f7ff fdb1 	bl	1a0027cc <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a002c6a:	9901      	ldr	r1, [sp, #4]
1a002c6c:	f7ff ff40 	bl	1a002af0 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002c70:	f7ff ff78 	bl	1a002b64 <prvProcessReceivedCommands>
1a002c74:	e7f6      	b.n	1a002c64 <prvTimerTask+0x4>
1a002c76:	Address 0x000000001a002c76 is out of bounds.


1a002c78 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002c78:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a002c7a:	2300      	movs	r3, #0
1a002c7c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002c7e:	4b0d      	ldr	r3, [pc, #52]	; (1a002cb4 <prvTaskExitError+0x3c>)
1a002c80:	681b      	ldr	r3, [r3, #0]
1a002c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002c86:	d008      	beq.n	1a002c9a <prvTaskExitError+0x22>
1a002c88:	f04f 0320 	mov.w	r3, #32
1a002c8c:	f383 8811 	msr	BASEPRI, r3
1a002c90:	f3bf 8f6f 	isb	sy
1a002c94:	f3bf 8f4f 	dsb	sy
1a002c98:	e7fe      	b.n	1a002c98 <prvTaskExitError+0x20>
1a002c9a:	f04f 0320 	mov.w	r3, #32
1a002c9e:	f383 8811 	msr	BASEPRI, r3
1a002ca2:	f3bf 8f6f 	isb	sy
1a002ca6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a002caa:	9b01      	ldr	r3, [sp, #4]
1a002cac:	2b00      	cmp	r3, #0
1a002cae:	d0fc      	beq.n	1a002caa <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002cb0:	b002      	add	sp, #8
1a002cb2:	4770      	bx	lr
1a002cb4:	10000004 	.word	0x10000004

1a002cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002cb8:	4808      	ldr	r0, [pc, #32]	; (1a002cdc <prvPortStartFirstTask+0x24>)
1a002cba:	6800      	ldr	r0, [r0, #0]
1a002cbc:	6800      	ldr	r0, [r0, #0]
1a002cbe:	f380 8808 	msr	MSP, r0
1a002cc2:	f04f 0000 	mov.w	r0, #0
1a002cc6:	f380 8814 	msr	CONTROL, r0
1a002cca:	b662      	cpsie	i
1a002ccc:	b661      	cpsie	f
1a002cce:	f3bf 8f4f 	dsb	sy
1a002cd2:	f3bf 8f6f 	isb	sy
1a002cd6:	df00      	svc	0
1a002cd8:	bf00      	nop
1a002cda:	0000      	.short	0x0000
1a002cdc:	e000ed08 	.word	0xe000ed08

1a002ce0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a002ce0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002cf0 <vPortEnableVFP+0x10>
1a002ce4:	6801      	ldr	r1, [r0, #0]
1a002ce6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002cea:	6001      	str	r1, [r0, #0]
1a002cec:	4770      	bx	lr
1a002cee:	0000      	.short	0x0000
1a002cf0:	e000ed88 	.word	0xe000ed88

1a002cf4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002cf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002cf8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002cfc:	f021 0101 	bic.w	r1, r1, #1
1a002d00:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002d04:	4b05      	ldr	r3, [pc, #20]	; (1a002d1c <pxPortInitialiseStack+0x28>)
1a002d06:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002d0a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002d0e:	f06f 0302 	mvn.w	r3, #2
1a002d12:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a002d16:	3844      	subs	r0, #68	; 0x44
1a002d18:	4770      	bx	lr
1a002d1a:	bf00      	nop
1a002d1c:	1a002c79 	.word	0x1a002c79

1a002d20 <SVC_Handler>:
	__asm volatile (
1a002d20:	4b07      	ldr	r3, [pc, #28]	; (1a002d40 <pxCurrentTCBConst2>)
1a002d22:	6819      	ldr	r1, [r3, #0]
1a002d24:	6808      	ldr	r0, [r1, #0]
1a002d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002d2a:	f380 8809 	msr	PSP, r0
1a002d2e:	f3bf 8f6f 	isb	sy
1a002d32:	f04f 0000 	mov.w	r0, #0
1a002d36:	f380 8811 	msr	BASEPRI, r0
1a002d3a:	4770      	bx	lr
1a002d3c:	f3af 8000 	nop.w

1a002d40 <pxCurrentTCBConst2>:
1a002d40:	10007660 	.word	0x10007660

1a002d44 <vPortEnterCritical>:
1a002d44:	f04f 0320 	mov.w	r3, #32
1a002d48:	f383 8811 	msr	BASEPRI, r3
1a002d4c:	f3bf 8f6f 	isb	sy
1a002d50:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002d54:	4a0a      	ldr	r2, [pc, #40]	; (1a002d80 <vPortEnterCritical+0x3c>)
1a002d56:	6813      	ldr	r3, [r2, #0]
1a002d58:	3301      	adds	r3, #1
1a002d5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a002d5c:	2b01      	cmp	r3, #1
1a002d5e:	d000      	beq.n	1a002d62 <vPortEnterCritical+0x1e>
}
1a002d60:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002d62:	4b08      	ldr	r3, [pc, #32]	; (1a002d84 <vPortEnterCritical+0x40>)
1a002d64:	681b      	ldr	r3, [r3, #0]
1a002d66:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002d6a:	d0f9      	beq.n	1a002d60 <vPortEnterCritical+0x1c>
1a002d6c:	f04f 0320 	mov.w	r3, #32
1a002d70:	f383 8811 	msr	BASEPRI, r3
1a002d74:	f3bf 8f6f 	isb	sy
1a002d78:	f3bf 8f4f 	dsb	sy
1a002d7c:	e7fe      	b.n	1a002d7c <vPortEnterCritical+0x38>
1a002d7e:	bf00      	nop
1a002d80:	10000004 	.word	0x10000004
1a002d84:	e000ed04 	.word	0xe000ed04

1a002d88 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002d88:	4b09      	ldr	r3, [pc, #36]	; (1a002db0 <vPortExitCritical+0x28>)
1a002d8a:	681b      	ldr	r3, [r3, #0]
1a002d8c:	b943      	cbnz	r3, 1a002da0 <vPortExitCritical+0x18>
1a002d8e:	f04f 0320 	mov.w	r3, #32
1a002d92:	f383 8811 	msr	BASEPRI, r3
1a002d96:	f3bf 8f6f 	isb	sy
1a002d9a:	f3bf 8f4f 	dsb	sy
1a002d9e:	e7fe      	b.n	1a002d9e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002da0:	3b01      	subs	r3, #1
1a002da2:	4a03      	ldr	r2, [pc, #12]	; (1a002db0 <vPortExitCritical+0x28>)
1a002da4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002da6:	b90b      	cbnz	r3, 1a002dac <vPortExitCritical+0x24>
	__asm volatile
1a002da8:	f383 8811 	msr	BASEPRI, r3
}
1a002dac:	4770      	bx	lr
1a002dae:	bf00      	nop
1a002db0:	10000004 	.word	0x10000004
1a002db4:	ffffffff 	.word	0xffffffff
1a002db8:	ffffffff 	.word	0xffffffff
1a002dbc:	ffffffff 	.word	0xffffffff

1a002dc0 <PendSV_Handler>:
	__asm volatile
1a002dc0:	f3ef 8009 	mrs	r0, PSP
1a002dc4:	f3bf 8f6f 	isb	sy
1a002dc8:	4b15      	ldr	r3, [pc, #84]	; (1a002e20 <pxCurrentTCBConst>)
1a002dca:	681a      	ldr	r2, [r3, #0]
1a002dcc:	f01e 0f10 	tst.w	lr, #16
1a002dd0:	bf08      	it	eq
1a002dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002dda:	6010      	str	r0, [r2, #0]
1a002ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002de0:	f04f 0020 	mov.w	r0, #32
1a002de4:	f380 8811 	msr	BASEPRI, r0
1a002de8:	f3bf 8f4f 	dsb	sy
1a002dec:	f3bf 8f6f 	isb	sy
1a002df0:	f7ff fb54 	bl	1a00249c <vTaskSwitchContext>
1a002df4:	f04f 0000 	mov.w	r0, #0
1a002df8:	f380 8811 	msr	BASEPRI, r0
1a002dfc:	bc09      	pop	{r0, r3}
1a002dfe:	6819      	ldr	r1, [r3, #0]
1a002e00:	6808      	ldr	r0, [r1, #0]
1a002e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002e06:	f01e 0f10 	tst.w	lr, #16
1a002e0a:	bf08      	it	eq
1a002e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002e10:	f380 8809 	msr	PSP, r0
1a002e14:	f3bf 8f6f 	isb	sy
1a002e18:	4770      	bx	lr
1a002e1a:	bf00      	nop
1a002e1c:	f3af 8000 	nop.w

1a002e20 <pxCurrentTCBConst>:
1a002e20:	10007660 	.word	0x10007660

1a002e24 <SysTick_Handler>:
{
1a002e24:	b508      	push	{r3, lr}
	__asm volatile
1a002e26:	f04f 0320 	mov.w	r3, #32
1a002e2a:	f383 8811 	msr	BASEPRI, r3
1a002e2e:	f3bf 8f6f 	isb	sy
1a002e32:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002e36:	f7ff f9d9 	bl	1a0021ec <xTaskIncrementTick>
1a002e3a:	b118      	cbz	r0, 1a002e44 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a002e3c:	4b03      	ldr	r3, [pc, #12]	; (1a002e4c <SysTick_Handler+0x28>)
1a002e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002e42:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002e44:	2300      	movs	r3, #0
1a002e46:	f383 8811 	msr	BASEPRI, r3
}
1a002e4a:	bd08      	pop	{r3, pc}
1a002e4c:	e000ed04 	.word	0xe000ed04

1a002e50 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002e50:	4a08      	ldr	r2, [pc, #32]	; (1a002e74 <vPortSetupTimerInterrupt+0x24>)
1a002e52:	2300      	movs	r3, #0
1a002e54:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002e56:	4908      	ldr	r1, [pc, #32]	; (1a002e78 <vPortSetupTimerInterrupt+0x28>)
1a002e58:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a002e5a:	4b08      	ldr	r3, [pc, #32]	; (1a002e7c <vPortSetupTimerInterrupt+0x2c>)
1a002e5c:	681b      	ldr	r3, [r3, #0]
1a002e5e:	4908      	ldr	r1, [pc, #32]	; (1a002e80 <vPortSetupTimerInterrupt+0x30>)
1a002e60:	fba1 1303 	umull	r1, r3, r1, r3
1a002e64:	099b      	lsrs	r3, r3, #6
1a002e66:	3b01      	subs	r3, #1
1a002e68:	4906      	ldr	r1, [pc, #24]	; (1a002e84 <vPortSetupTimerInterrupt+0x34>)
1a002e6a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a002e6c:	2307      	movs	r3, #7
1a002e6e:	6013      	str	r3, [r2, #0]
}
1a002e70:	4770      	bx	lr
1a002e72:	bf00      	nop
1a002e74:	e000e010 	.word	0xe000e010
1a002e78:	e000e018 	.word	0xe000e018
1a002e7c:	100079fc 	.word	0x100079fc
1a002e80:	10624dd3 	.word	0x10624dd3
1a002e84:	e000e014 	.word	0xe000e014

1a002e88 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002e88:	4b3a      	ldr	r3, [pc, #232]	; (1a002f74 <xPortStartScheduler+0xec>)
1a002e8a:	681a      	ldr	r2, [r3, #0]
1a002e8c:	4b3a      	ldr	r3, [pc, #232]	; (1a002f78 <xPortStartScheduler+0xf0>)
1a002e8e:	429a      	cmp	r2, r3
1a002e90:	d00d      	beq.n	1a002eae <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002e92:	4b38      	ldr	r3, [pc, #224]	; (1a002f74 <xPortStartScheduler+0xec>)
1a002e94:	681a      	ldr	r2, [r3, #0]
1a002e96:	4b39      	ldr	r3, [pc, #228]	; (1a002f7c <xPortStartScheduler+0xf4>)
1a002e98:	429a      	cmp	r2, r3
1a002e9a:	d111      	bne.n	1a002ec0 <xPortStartScheduler+0x38>
	__asm volatile
1a002e9c:	f04f 0320 	mov.w	r3, #32
1a002ea0:	f383 8811 	msr	BASEPRI, r3
1a002ea4:	f3bf 8f6f 	isb	sy
1a002ea8:	f3bf 8f4f 	dsb	sy
1a002eac:	e7fe      	b.n	1a002eac <xPortStartScheduler+0x24>
1a002eae:	f04f 0320 	mov.w	r3, #32
1a002eb2:	f383 8811 	msr	BASEPRI, r3
1a002eb6:	f3bf 8f6f 	isb	sy
1a002eba:	f3bf 8f4f 	dsb	sy
1a002ebe:	e7fe      	b.n	1a002ebe <xPortStartScheduler+0x36>
{
1a002ec0:	b510      	push	{r4, lr}
1a002ec2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002ec4:	4b2e      	ldr	r3, [pc, #184]	; (1a002f80 <xPortStartScheduler+0xf8>)
1a002ec6:	781a      	ldrb	r2, [r3, #0]
1a002ec8:	b2d2      	uxtb	r2, r2
1a002eca:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a002ecc:	22ff      	movs	r2, #255	; 0xff
1a002ece:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002ed0:	781b      	ldrb	r3, [r3, #0]
1a002ed2:	b2db      	uxtb	r3, r3
1a002ed4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002ed8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002edc:	f003 0320 	and.w	r3, r3, #32
1a002ee0:	4a28      	ldr	r2, [pc, #160]	; (1a002f84 <xPortStartScheduler+0xfc>)
1a002ee2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002ee4:	4b28      	ldr	r3, [pc, #160]	; (1a002f88 <xPortStartScheduler+0x100>)
1a002ee6:	2207      	movs	r2, #7
1a002ee8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002eea:	e009      	b.n	1a002f00 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a002eec:	4a26      	ldr	r2, [pc, #152]	; (1a002f88 <xPortStartScheduler+0x100>)
1a002eee:	6813      	ldr	r3, [r2, #0]
1a002ef0:	3b01      	subs	r3, #1
1a002ef2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002ef4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002ef8:	005b      	lsls	r3, r3, #1
1a002efa:	b2db      	uxtb	r3, r3
1a002efc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002f00:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002f04:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002f08:	d1f0      	bne.n	1a002eec <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a002f0a:	4b1f      	ldr	r3, [pc, #124]	; (1a002f88 <xPortStartScheduler+0x100>)
1a002f0c:	681b      	ldr	r3, [r3, #0]
1a002f0e:	2b04      	cmp	r3, #4
1a002f10:	d008      	beq.n	1a002f24 <xPortStartScheduler+0x9c>
1a002f12:	f04f 0320 	mov.w	r3, #32
1a002f16:	f383 8811 	msr	BASEPRI, r3
1a002f1a:	f3bf 8f6f 	isb	sy
1a002f1e:	f3bf 8f4f 	dsb	sy
1a002f22:	e7fe      	b.n	1a002f22 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002f24:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002f26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002f2a:	4a17      	ldr	r2, [pc, #92]	; (1a002f88 <xPortStartScheduler+0x100>)
1a002f2c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a002f2e:	9b01      	ldr	r3, [sp, #4]
1a002f30:	b2db      	uxtb	r3, r3
1a002f32:	4a13      	ldr	r2, [pc, #76]	; (1a002f80 <xPortStartScheduler+0xf8>)
1a002f34:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002f36:	4b15      	ldr	r3, [pc, #84]	; (1a002f8c <xPortStartScheduler+0x104>)
1a002f38:	681a      	ldr	r2, [r3, #0]
1a002f3a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a002f3e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002f40:	681a      	ldr	r2, [r3, #0]
1a002f42:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002f46:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002f48:	f7ff ff82 	bl	1a002e50 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a002f4c:	2400      	movs	r4, #0
1a002f4e:	4b10      	ldr	r3, [pc, #64]	; (1a002f90 <xPortStartScheduler+0x108>)
1a002f50:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002f52:	f7ff fec5 	bl	1a002ce0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002f56:	4a0f      	ldr	r2, [pc, #60]	; (1a002f94 <xPortStartScheduler+0x10c>)
1a002f58:	6813      	ldr	r3, [r2, #0]
1a002f5a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a002f5e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002f60:	f7ff feaa 	bl	1a002cb8 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002f64:	f7ff fa9a 	bl	1a00249c <vTaskSwitchContext>
	prvTaskExitError();
1a002f68:	f7ff fe86 	bl	1a002c78 <prvTaskExitError>
}
1a002f6c:	4620      	mov	r0, r4
1a002f6e:	b002      	add	sp, #8
1a002f70:	bd10      	pop	{r4, pc}
1a002f72:	bf00      	nop
1a002f74:	e000ed00 	.word	0xe000ed00
1a002f78:	410fc271 	.word	0x410fc271
1a002f7c:	410fc270 	.word	0x410fc270
1a002f80:	e000e400 	.word	0xe000e400
1a002f84:	100078b4 	.word	0x100078b4
1a002f88:	100078b8 	.word	0x100078b8
1a002f8c:	e000ed20 	.word	0xe000ed20
1a002f90:	10000004 	.word	0x10000004
1a002f94:	e000ef34 	.word	0xe000ef34

1a002f98 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002f98:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a002f9c:	2b0f      	cmp	r3, #15
1a002f9e:	d90f      	bls.n	1a002fc0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002fa0:	4a10      	ldr	r2, [pc, #64]	; (1a002fe4 <vPortValidateInterruptPriority+0x4c>)
1a002fa2:	5c9b      	ldrb	r3, [r3, r2]
1a002fa4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002fa6:	4a10      	ldr	r2, [pc, #64]	; (1a002fe8 <vPortValidateInterruptPriority+0x50>)
1a002fa8:	7812      	ldrb	r2, [r2, #0]
1a002faa:	429a      	cmp	r2, r3
1a002fac:	d908      	bls.n	1a002fc0 <vPortValidateInterruptPriority+0x28>
1a002fae:	f04f 0320 	mov.w	r3, #32
1a002fb2:	f383 8811 	msr	BASEPRI, r3
1a002fb6:	f3bf 8f6f 	isb	sy
1a002fba:	f3bf 8f4f 	dsb	sy
1a002fbe:	e7fe      	b.n	1a002fbe <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002fc0:	4b0a      	ldr	r3, [pc, #40]	; (1a002fec <vPortValidateInterruptPriority+0x54>)
1a002fc2:	681b      	ldr	r3, [r3, #0]
1a002fc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002fc8:	4a09      	ldr	r2, [pc, #36]	; (1a002ff0 <vPortValidateInterruptPriority+0x58>)
1a002fca:	6812      	ldr	r2, [r2, #0]
1a002fcc:	4293      	cmp	r3, r2
1a002fce:	d908      	bls.n	1a002fe2 <vPortValidateInterruptPriority+0x4a>
1a002fd0:	f04f 0320 	mov.w	r3, #32
1a002fd4:	f383 8811 	msr	BASEPRI, r3
1a002fd8:	f3bf 8f6f 	isb	sy
1a002fdc:	f3bf 8f4f 	dsb	sy
1a002fe0:	e7fe      	b.n	1a002fe0 <vPortValidateInterruptPriority+0x48>
	}
1a002fe2:	4770      	bx	lr
1a002fe4:	e000e3f0 	.word	0xe000e3f0
1a002fe8:	100078b4 	.word	0x100078b4
1a002fec:	e000ed0c 	.word	0xe000ed0c
1a002ff0:	100078b8 	.word	0x100078b8

1a002ff4 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a002ff4:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a002ff6:	4b05      	ldr	r3, [pc, #20]	; (1a00300c <DAC_IRQHandler+0x18>)
1a002ff8:	2201      	movs	r2, #1
1a002ffa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a002ffe:	4b04      	ldr	r3, [pc, #16]	; (1a003010 <DAC_IRQHandler+0x1c>)
1a003000:	681b      	ldr	r3, [r3, #0]
1a003002:	b113      	cbz	r3, 1a00300a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a003004:	4b02      	ldr	r3, [pc, #8]	; (1a003010 <DAC_IRQHandler+0x1c>)
1a003006:	681b      	ldr	r3, [r3, #0]
1a003008:	4798      	blx	r3
   }
}
1a00300a:	bd08      	pop	{r3, pc}
1a00300c:	e000e100 	.word	0xe000e100
1a003010:	100078bc 	.word	0x100078bc

1a003014 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003014:	2200      	movs	r2, #0
1a003016:	2a05      	cmp	r2, #5
1a003018:	d819      	bhi.n	1a00304e <Board_LED_Init+0x3a>
{
1a00301a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00301c:	490c      	ldr	r1, [pc, #48]	; (1a003050 <Board_LED_Init+0x3c>)
1a00301e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a003022:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a003026:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a003028:	4b0a      	ldr	r3, [pc, #40]	; (1a003054 <Board_LED_Init+0x40>)
1a00302a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00302e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a003032:	2001      	movs	r0, #1
1a003034:	40a0      	lsls	r0, r4
1a003036:	4301      	orrs	r1, r0
1a003038:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00303c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a003040:	2100      	movs	r1, #0
1a003042:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003044:	3201      	adds	r2, #1
1a003046:	2a05      	cmp	r2, #5
1a003048:	d9e8      	bls.n	1a00301c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00304a:	bc70      	pop	{r4, r5, r6}
1a00304c:	4770      	bx	lr
1a00304e:	4770      	bx	lr
1a003050:	1a00a698 	.word	0x1a00a698
1a003054:	400f4000 	.word	0x400f4000

1a003058 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a003058:	2300      	movs	r3, #0
1a00305a:	2b03      	cmp	r3, #3
1a00305c:	d816      	bhi.n	1a00308c <Board_TEC_Init+0x34>
{
1a00305e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a003060:	490b      	ldr	r1, [pc, #44]	; (1a003090 <Board_TEC_Init+0x38>)
1a003062:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a003066:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00306a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00306c:	4c09      	ldr	r4, [pc, #36]	; (1a003094 <Board_TEC_Init+0x3c>)
1a00306e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003072:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a003076:	2001      	movs	r0, #1
1a003078:	40a8      	lsls	r0, r5
1a00307a:	ea21 0100 	bic.w	r1, r1, r0
1a00307e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a003082:	3301      	adds	r3, #1
1a003084:	2b03      	cmp	r3, #3
1a003086:	d9eb      	bls.n	1a003060 <Board_TEC_Init+0x8>
   }
}
1a003088:	bc30      	pop	{r4, r5}
1a00308a:	4770      	bx	lr
1a00308c:	4770      	bx	lr
1a00308e:	bf00      	nop
1a003090:	1a00a690 	.word	0x1a00a690
1a003094:	400f4000 	.word	0x400f4000

1a003098 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a003098:	2300      	movs	r3, #0
1a00309a:	2b08      	cmp	r3, #8
1a00309c:	d816      	bhi.n	1a0030cc <Board_GPIO_Init+0x34>
{
1a00309e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0030a0:	490b      	ldr	r1, [pc, #44]	; (1a0030d0 <Board_GPIO_Init+0x38>)
1a0030a2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0030a6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0030aa:	784d      	ldrb	r5, [r1, #1]
1a0030ac:	4c09      	ldr	r4, [pc, #36]	; (1a0030d4 <Board_GPIO_Init+0x3c>)
1a0030ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0030b2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0030b6:	2001      	movs	r0, #1
1a0030b8:	40a8      	lsls	r0, r5
1a0030ba:	ea21 0100 	bic.w	r1, r1, r0
1a0030be:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0030c2:	3301      	adds	r3, #1
1a0030c4:	2b08      	cmp	r3, #8
1a0030c6:	d9eb      	bls.n	1a0030a0 <Board_GPIO_Init+0x8>
   }
}
1a0030c8:	bc30      	pop	{r4, r5}
1a0030ca:	4770      	bx	lr
1a0030cc:	4770      	bx	lr
1a0030ce:	bf00      	nop
1a0030d0:	1a00a6a4 	.word	0x1a00a6a4
1a0030d4:	400f4000 	.word	0x400f4000

1a0030d8 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0030d8:	b510      	push	{r4, lr}
1a0030da:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a0030dc:	4c08      	ldr	r4, [pc, #32]	; (1a003100 <Board_ADC_Init+0x28>)
1a0030de:	4669      	mov	r1, sp
1a0030e0:	4620      	mov	r0, r4
1a0030e2:	f000 fa2f 	bl	1a003544 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0030e6:	4a07      	ldr	r2, [pc, #28]	; (1a003104 <Board_ADC_Init+0x2c>)
1a0030e8:	4669      	mov	r1, sp
1a0030ea:	4620      	mov	r0, r4
1a0030ec:	f000 fa94 	bl	1a003618 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0030f0:	2200      	movs	r2, #0
1a0030f2:	4669      	mov	r1, sp
1a0030f4:	4620      	mov	r0, r4
1a0030f6:	f000 faa8 	bl	1a00364a <Chip_ADC_SetResolution>
}
1a0030fa:	b002      	add	sp, #8
1a0030fc:	bd10      	pop	{r4, pc}
1a0030fe:	bf00      	nop
1a003100:	400e3000 	.word	0x400e3000
1a003104:	00061a80 	.word	0x00061a80

1a003108 <Board_SPI_Init>:
{
1a003108:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00310a:	4c0b      	ldr	r4, [pc, #44]	; (1a003138 <Board_SPI_Init+0x30>)
1a00310c:	4620      	mov	r0, r4
1a00310e:	f000 fe9d 	bl	1a003e4c <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003112:	6863      	ldr	r3, [r4, #4]
1a003114:	f023 0304 	bic.w	r3, r3, #4
1a003118:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00311a:	6823      	ldr	r3, [r4, #0]
1a00311c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003120:	f043 0307 	orr.w	r3, r3, #7
1a003124:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a003126:	4905      	ldr	r1, [pc, #20]	; (1a00313c <Board_SPI_Init+0x34>)
1a003128:	4620      	mov	r0, r4
1a00312a:	f000 fe70 	bl	1a003e0e <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00312e:	6863      	ldr	r3, [r4, #4]
1a003130:	f043 0302 	orr.w	r3, r3, #2
1a003134:	6063      	str	r3, [r4, #4]
}
1a003136:	bd10      	pop	{r4, pc}
1a003138:	400c5000 	.word	0x400c5000
1a00313c:	000186a0 	.word	0x000186a0

1a003140 <Board_I2C_Init>:
{
1a003140:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a003142:	2000      	movs	r0, #0
1a003144:	f000 f8c6 	bl	1a0032d4 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a003148:	4b04      	ldr	r3, [pc, #16]	; (1a00315c <Board_I2C_Init+0x1c>)
1a00314a:	f640 0208 	movw	r2, #2056	; 0x808
1a00314e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a003152:	4903      	ldr	r1, [pc, #12]	; (1a003160 <Board_I2C_Init+0x20>)
1a003154:	2000      	movs	r0, #0
1a003156:	f000 f8cf 	bl	1a0032f8 <Chip_I2C_SetClockRate>
}
1a00315a:	bd08      	pop	{r3, pc}
1a00315c:	40086000 	.word	0x40086000
1a003160:	000f4240 	.word	0x000f4240

1a003164 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a003164:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a003166:	4c07      	ldr	r4, [pc, #28]	; (1a003184 <Board_Debug_Init+0x20>)
1a003168:	4620      	mov	r0, r4
1a00316a:	f000 f8f7 	bl	1a00335c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00316e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a003172:	4620      	mov	r0, r4
1a003174:	f000 f93c 	bl	1a0033f0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a003178:	2303      	movs	r3, #3
1a00317a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00317c:	2301      	movs	r3, #1
1a00317e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a003180:	bd10      	pop	{r4, pc}
1a003182:	bf00      	nop
1a003184:	400c1000 	.word	0x400c1000

1a003188 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a003188:	4b03      	ldr	r3, [pc, #12]	; (1a003198 <Board_UARTPutChar+0x10>)
1a00318a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a00318c:	f013 0f20 	tst.w	r3, #32
1a003190:	d0fa      	beq.n	1a003188 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a003192:	4b01      	ldr	r3, [pc, #4]	; (1a003198 <Board_UARTPutChar+0x10>)
1a003194:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a003196:	4770      	bx	lr
1a003198:	400c1000 	.word	0x400c1000

1a00319c <Board_UARTGetChar>:
	return pUART->LSR;
1a00319c:	4b05      	ldr	r3, [pc, #20]	; (1a0031b4 <Board_UARTGetChar+0x18>)
1a00319e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0031a0:	f013 0f01 	tst.w	r3, #1
1a0031a4:	d003      	beq.n	1a0031ae <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0031a6:	4b03      	ldr	r3, [pc, #12]	; (1a0031b4 <Board_UARTGetChar+0x18>)
1a0031a8:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a0031aa:	b2c0      	uxtb	r0, r0
1a0031ac:	4770      	bx	lr
   }
   return EOF;
1a0031ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0031b2:	4770      	bx	lr
1a0031b4:	400c1000 	.word	0x400c1000

1a0031b8 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0031b8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0031ba:	f7ff ffd3 	bl	1a003164 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0031be:	4809      	ldr	r0, [pc, #36]	; (1a0031e4 <Board_Init+0x2c>)
1a0031c0:	f000 fe04 	bl	1a003dcc <Chip_GPIO_Init>

   Board_GPIO_Init();
1a0031c4:	f7ff ff68 	bl	1a003098 <Board_GPIO_Init>
   Board_ADC_Init();
1a0031c8:	f7ff ff86 	bl	1a0030d8 <Board_ADC_Init>
   Board_SPI_Init();
1a0031cc:	f7ff ff9c 	bl	1a003108 <Board_SPI_Init>
   Board_I2C_Init();
1a0031d0:	f7ff ffb6 	bl	1a003140 <Board_I2C_Init>

   Board_LED_Init();
1a0031d4:	f7ff ff1e 	bl	1a003014 <Board_LED_Init>
   Board_TEC_Init();
1a0031d8:	f7ff ff3e 	bl	1a003058 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a0031dc:	f000 fd42 	bl	1a003c64 <SystemCoreClockUpdate>
}
1a0031e0:	bd08      	pop	{r3, pc}
1a0031e2:	bf00      	nop
1a0031e4:	400f4000 	.word	0x400f4000

1a0031e8 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a0031e8:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a0031ea:	b2c0      	uxtb	r0, r0
1a0031ec:	f7ff ffcc 	bl	1a003188 <Board_UARTPutChar>
}
1a0031f0:	bd08      	pop	{r3, pc}

1a0031f2 <__stdio_getchar>:

int __stdio_getchar()
{
1a0031f2:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a0031f4:	f7ff ffd2 	bl	1a00319c <Board_UARTGetChar>
}
1a0031f8:	bd08      	pop	{r3, pc}

1a0031fa <__stdio_init>:

void __stdio_init()
{
1a0031fa:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0031fc:	f7ff ffb2 	bl	1a003164 <Board_Debug_Init>
1a003200:	bd08      	pop	{r3, pc}
1a003202:	Address 0x000000001a003202 is out of bounds.


1a003204 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003204:	2300      	movs	r3, #0
1a003206:	2b1c      	cmp	r3, #28
1a003208:	d812      	bhi.n	1a003230 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00320a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00320c:	4a09      	ldr	r2, [pc, #36]	; (1a003234 <Board_SetupMuxing+0x30>)
1a00320e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a003212:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a003216:	784a      	ldrb	r2, [r1, #1]
1a003218:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00321a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00321e:	4906      	ldr	r1, [pc, #24]	; (1a003238 <Board_SetupMuxing+0x34>)
1a003220:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003224:	3301      	adds	r3, #1
1a003226:	2b1c      	cmp	r3, #28
1a003228:	d9f0      	bls.n	1a00320c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00322a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00322e:	4770      	bx	lr
1a003230:	4770      	bx	lr
1a003232:	bf00      	nop
1a003234:	1a00a6c0 	.word	0x1a00a6c0
1a003238:	40086000 	.word	0x40086000

1a00323c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00323c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00323e:	4a17      	ldr	r2, [pc, #92]	; (1a00329c <Board_SetupClocking+0x60>)
1a003240:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a003244:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003248:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00324c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a003250:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a003254:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003258:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00325c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a003260:	2201      	movs	r2, #1
1a003262:	490f      	ldr	r1, [pc, #60]	; (1a0032a0 <Board_SetupClocking+0x64>)
1a003264:	2006      	movs	r0, #6
1a003266:	f000 fd07 	bl	1a003c78 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00326a:	2400      	movs	r4, #0
1a00326c:	b14c      	cbz	r4, 1a003282 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00326e:	4b0b      	ldr	r3, [pc, #44]	; (1a00329c <Board_SetupClocking+0x60>)
1a003270:	685a      	ldr	r2, [r3, #4]
1a003272:	f022 020c 	bic.w	r2, r2, #12
1a003276:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a003278:	685a      	ldr	r2, [r3, #4]
1a00327a:	f042 0203 	orr.w	r2, r2, #3
1a00327e:	605a      	str	r2, [r3, #4]
}
1a003280:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a003282:	4808      	ldr	r0, [pc, #32]	; (1a0032a4 <Board_SetupClocking+0x68>)
1a003284:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003288:	2301      	movs	r3, #1
1a00328a:	788a      	ldrb	r2, [r1, #2]
1a00328c:	7849      	ldrb	r1, [r1, #1]
1a00328e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003292:	f000 fc29 	bl	1a003ae8 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a003296:	3401      	adds	r4, #1
1a003298:	e7e8      	b.n	1a00326c <Board_SetupClocking+0x30>
1a00329a:	bf00      	nop
1a00329c:	40043000 	.word	0x40043000
1a0032a0:	0c28cb00 	.word	0x0c28cb00
1a0032a4:	1a00a6bc 	.word	0x1a00a6bc

1a0032a8 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0032a8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0032aa:	f7ff ffab 	bl	1a003204 <Board_SetupMuxing>
    Board_SetupClocking();
1a0032ae:	f7ff ffc5 	bl	1a00323c <Board_SetupClocking>
}
1a0032b2:	bd08      	pop	{r3, pc}

1a0032b4 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0032b4:	2901      	cmp	r1, #1
1a0032b6:	d000      	beq.n	1a0032ba <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a0032b8:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a0032ba:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0032be:	0082      	lsls	r2, r0, #2
1a0032c0:	4b03      	ldr	r3, [pc, #12]	; (1a0032d0 <Chip_I2C_EventHandler+0x1c>)
1a0032c2:	4413      	add	r3, r2
1a0032c4:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a0032c6:	7d13      	ldrb	r3, [r2, #20]
1a0032c8:	b2db      	uxtb	r3, r3
1a0032ca:	2b04      	cmp	r3, #4
1a0032cc:	d0fb      	beq.n	1a0032c6 <Chip_I2C_EventHandler+0x12>
1a0032ce:	e7f3      	b.n	1a0032b8 <Chip_I2C_EventHandler+0x4>
1a0032d0:	10000008 	.word	0x10000008

1a0032d4 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0032d4:	b570      	push	{r4, r5, r6, lr}
1a0032d6:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0032d8:	4e06      	ldr	r6, [pc, #24]	; (1a0032f4 <Chip_I2C_Init+0x20>)
1a0032da:	00c4      	lsls	r4, r0, #3
1a0032dc:	1a22      	subs	r2, r4, r0
1a0032de:	0093      	lsls	r3, r2, #2
1a0032e0:	4433      	add	r3, r6
1a0032e2:	8898      	ldrh	r0, [r3, #4]
1a0032e4:	f000 fc64 	bl	1a003bb0 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0032e8:	1b64      	subs	r4, r4, r5
1a0032ea:	00a3      	lsls	r3, r4, #2
1a0032ec:	58f3      	ldr	r3, [r6, r3]
1a0032ee:	226c      	movs	r2, #108	; 0x6c
1a0032f0:	619a      	str	r2, [r3, #24]
}
1a0032f2:	bd70      	pop	{r4, r5, r6, pc}
1a0032f4:	10000008 	.word	0x10000008

1a0032f8 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0032f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0032fc:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0032fe:	4e0b      	ldr	r6, [pc, #44]	; (1a00332c <Chip_I2C_SetClockRate+0x34>)
1a003300:	00c5      	lsls	r5, r0, #3
1a003302:	1a2b      	subs	r3, r5, r0
1a003304:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a003308:	eb06 0308 	add.w	r3, r6, r8
1a00330c:	8898      	ldrh	r0, [r3, #4]
1a00330e:	f000 fc83 	bl	1a003c18 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a003312:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003316:	f856 3008 	ldr.w	r3, [r6, r8]
1a00331a:	0842      	lsrs	r2, r0, #1
1a00331c:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00331e:	f856 3008 	ldr.w	r3, [r6, r8]
1a003322:	691a      	ldr	r2, [r3, #16]
1a003324:	1a80      	subs	r0, r0, r2
1a003326:	6158      	str	r0, [r3, #20]
}
1a003328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00332c:	10000008 	.word	0x10000008

1a003330 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a003330:	4b09      	ldr	r3, [pc, #36]	; (1a003358 <Chip_UART_GetIndex+0x28>)
1a003332:	4298      	cmp	r0, r3
1a003334:	d009      	beq.n	1a00334a <Chip_UART_GetIndex+0x1a>
1a003336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00333a:	4298      	cmp	r0, r3
1a00333c:	d007      	beq.n	1a00334e <Chip_UART_GetIndex+0x1e>
1a00333e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a003342:	4298      	cmp	r0, r3
1a003344:	d005      	beq.n	1a003352 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a003346:	2000      	movs	r0, #0
1a003348:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00334a:	2002      	movs	r0, #2
1a00334c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00334e:	2003      	movs	r0, #3
1a003350:	4770      	bx	lr
			return 1;
1a003352:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a003354:	4770      	bx	lr
1a003356:	bf00      	nop
1a003358:	400c1000 	.word	0x400c1000

1a00335c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00335c:	b530      	push	{r4, r5, lr}
1a00335e:	b083      	sub	sp, #12
1a003360:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a003362:	f7ff ffe5 	bl	1a003330 <Chip_UART_GetIndex>
1a003366:	2301      	movs	r3, #1
1a003368:	461a      	mov	r2, r3
1a00336a:	4619      	mov	r1, r3
1a00336c:	4d0e      	ldr	r5, [pc, #56]	; (1a0033a8 <Chip_UART_Init+0x4c>)
1a00336e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a003372:	f000 fbff 	bl	1a003b74 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a003376:	2307      	movs	r3, #7
1a003378:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00337a:	2300      	movs	r3, #0
1a00337c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00337e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a003380:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a003382:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a003384:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a003386:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a003388:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00338a:	4b08      	ldr	r3, [pc, #32]	; (1a0033ac <Chip_UART_Init+0x50>)
1a00338c:	429c      	cmp	r4, r3
1a00338e:	d006      	beq.n	1a00339e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a003390:	2303      	movs	r3, #3
1a003392:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a003394:	2310      	movs	r3, #16
1a003396:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a003398:	9b01      	ldr	r3, [sp, #4]
}
1a00339a:	b003      	add	sp, #12
1a00339c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00339e:	2300      	movs	r3, #0
1a0033a0:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0033a2:	69a3      	ldr	r3, [r4, #24]
1a0033a4:	9301      	str	r3, [sp, #4]
1a0033a6:	e7f3      	b.n	1a003390 <Chip_UART_Init+0x34>
1a0033a8:	1a00a73c 	.word	0x1a00a73c
1a0033ac:	40082000 	.word	0x40082000

1a0033b0 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0033b0:	b538      	push	{r3, r4, r5, lr}
1a0033b2:	4605      	mov	r5, r0
1a0033b4:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0033b6:	f7ff ffbb 	bl	1a003330 <Chip_UART_GetIndex>
1a0033ba:	4b0c      	ldr	r3, [pc, #48]	; (1a0033ec <Chip_UART_SetBaud+0x3c>)
1a0033bc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0033c0:	f000 fc2a 	bl	1a003c18 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0033c4:	0123      	lsls	r3, r4, #4
1a0033c6:	fbb0 f3f3 	udiv	r3, r0, r3
1a0033ca:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0033cc:	68ea      	ldr	r2, [r5, #12]
1a0033ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0033d2:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a0033d4:	6029      	str	r1, [r5, #0]
1a0033d6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0033da:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0033dc:	68ea      	ldr	r2, [r5, #12]
1a0033de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0033e2:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0033e4:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0033e8:	0900      	lsrs	r0, r0, #4
1a0033ea:	bd38      	pop	{r3, r4, r5, pc}
1a0033ec:	1a00a734 	.word	0x1a00a734

1a0033f0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0033f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0033f4:	b083      	sub	sp, #12
1a0033f6:	4683      	mov	fp, r0
1a0033f8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0033fa:	f7ff ff99 	bl	1a003330 <Chip_UART_GetIndex>
1a0033fe:	4b35      	ldr	r3, [pc, #212]	; (1a0034d4 <Chip_UART_SetBaudFDR+0xe4>)
1a003400:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003404:	f000 fc08 	bl	1a003c18 <Chip_Clock_GetRate>
1a003408:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00340a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00340e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a003410:	2300      	movs	r3, #0
1a003412:	9301      	str	r3, [sp, #4]
1a003414:	46a2      	mov	sl, r4
1a003416:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a003418:	e02a      	b.n	1a003470 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00341a:	4242      	negs	r2, r0
				div ++;
1a00341c:	1c4b      	adds	r3, r1, #1
1a00341e:	e017      	b.n	1a003450 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a003420:	b30a      	cbz	r2, 1a003466 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a003422:	4617      	mov	r7, r2
			sd = d;
1a003424:	9501      	str	r5, [sp, #4]
			sm = m;
1a003426:	46a2      	mov	sl, r4
			sdiv = div;
1a003428:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00342a:	3501      	adds	r5, #1
1a00342c:	42ac      	cmp	r4, r5
1a00342e:	d91e      	bls.n	1a00346e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a003430:	0933      	lsrs	r3, r6, #4
1a003432:	0730      	lsls	r0, r6, #28
1a003434:	fba4 0100 	umull	r0, r1, r4, r0
1a003438:	fb04 1103 	mla	r1, r4, r3, r1
1a00343c:	1962      	adds	r2, r4, r5
1a00343e:	fb08 f202 	mul.w	r2, r8, r2
1a003442:	2300      	movs	r3, #0
1a003444:	f001 fe76 	bl	1a005134 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a003448:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00344a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00344c:	2800      	cmp	r0, #0
1a00344e:	dbe4      	blt.n	1a00341a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a003450:	4297      	cmp	r7, r2
1a003452:	d3ea      	bcc.n	1a00342a <Chip_UART_SetBaudFDR+0x3a>
1a003454:	2b00      	cmp	r3, #0
1a003456:	d0e8      	beq.n	1a00342a <Chip_UART_SetBaudFDR+0x3a>
1a003458:	0c19      	lsrs	r1, r3, #16
1a00345a:	d1e6      	bne.n	1a00342a <Chip_UART_SetBaudFDR+0x3a>
1a00345c:	2b02      	cmp	r3, #2
1a00345e:	d8df      	bhi.n	1a003420 <Chip_UART_SetBaudFDR+0x30>
1a003460:	2d00      	cmp	r5, #0
1a003462:	d0dd      	beq.n	1a003420 <Chip_UART_SetBaudFDR+0x30>
1a003464:	e7e1      	b.n	1a00342a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a003466:	4617      	mov	r7, r2
			sd = d;
1a003468:	9501      	str	r5, [sp, #4]
			sm = m;
1a00346a:	46a2      	mov	sl, r4
			sdiv = div;
1a00346c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00346e:	3401      	adds	r4, #1
1a003470:	b11f      	cbz	r7, 1a00347a <Chip_UART_SetBaudFDR+0x8a>
1a003472:	2c0f      	cmp	r4, #15
1a003474:	d801      	bhi.n	1a00347a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a003476:	2500      	movs	r5, #0
1a003478:	e7d8      	b.n	1a00342c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00347a:	f1b9 0f00 	cmp.w	r9, #0
1a00347e:	d024      	beq.n	1a0034ca <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003480:	f8db 300c 	ldr.w	r3, [fp, #12]
1a003484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003488:	f8cb 300c 	str.w	r3, [fp, #12]
1a00348c:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a003490:	f8cb 3000 	str.w	r3, [fp]
1a003494:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a003498:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00349c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0034a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0034a4:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0034a8:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0034ac:	b2db      	uxtb	r3, r3
1a0034ae:	9901      	ldr	r1, [sp, #4]
1a0034b0:	f001 020f 	and.w	r2, r1, #15
1a0034b4:	4313      	orrs	r3, r2
1a0034b6:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0034ba:	0933      	lsrs	r3, r6, #4
1a0034bc:	fb0a f303 	mul.w	r3, sl, r3
1a0034c0:	448a      	add	sl, r1
1a0034c2:	fb09 f90a 	mul.w	r9, r9, sl
1a0034c6:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0034ca:	4648      	mov	r0, r9
1a0034cc:	b003      	add	sp, #12
1a0034ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0034d2:	bf00      	nop
1a0034d4:	1a00a734 	.word	0x1a00a734

1a0034d8 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0034d8:	4b03      	ldr	r3, [pc, #12]	; (1a0034e8 <Chip_ADC_GetClockIndex+0x10>)
1a0034da:	4298      	cmp	r0, r3
1a0034dc:	d001      	beq.n	1a0034e2 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0034de:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0034e0:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0034e2:	2004      	movs	r0, #4
1a0034e4:	4770      	bx	lr
1a0034e6:	bf00      	nop
1a0034e8:	400e4000 	.word	0x400e4000

1a0034ec <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0034ec:	b570      	push	{r4, r5, r6, lr}
1a0034ee:	460d      	mov	r5, r1
1a0034f0:	4614      	mov	r4, r2
1a0034f2:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0034f4:	f7ff fff0 	bl	1a0034d8 <Chip_ADC_GetClockIndex>
1a0034f8:	f000 fb8e 	bl	1a003c18 <Chip_Clock_GetRate>
	if (burstMode) {
1a0034fc:	b965      	cbnz	r5, 1a003518 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a0034fe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a003502:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a003506:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00350a:	0064      	lsls	r4, r4, #1
1a00350c:	fbb0 f0f4 	udiv	r0, r0, r4
1a003510:	b2c0      	uxtb	r0, r0
1a003512:	3801      	subs	r0, #1
	return div;
}
1a003514:	b2c0      	uxtb	r0, r0
1a003516:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a003518:	fb04 f406 	mul.w	r4, r4, r6
1a00351c:	e7f3      	b.n	1a003506 <getClkDiv+0x1a>

1a00351e <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a00351e:	6803      	ldr	r3, [r0, #0]
1a003520:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a003524:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a003528:	6001      	str	r1, [r0, #0]
}
1a00352a:	4770      	bx	lr

1a00352c <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
1a00352c:	3104      	adds	r1, #4
1a00352e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
	if (!ADC_DR_DONE(temp)) {
1a003532:	2b00      	cmp	r3, #0
1a003534:	db01      	blt.n	1a00353a <readAdcVal+0xe>
		return ERROR;
1a003536:	2000      	movs	r0, #0
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
	return SUCCESS;
}
1a003538:	4770      	bx	lr
	*data = (uint16_t) ADC_DR_RESULT(temp);
1a00353a:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a00353e:	8013      	strh	r3, [r2, #0]
	return SUCCESS;
1a003540:	2001      	movs	r0, #1
1a003542:	4770      	bx	lr

1a003544 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a003544:	b538      	push	{r3, r4, r5, lr}
1a003546:	4605      	mov	r5, r0
1a003548:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00354a:	f7ff ffc5 	bl	1a0034d8 <Chip_ADC_GetClockIndex>
1a00354e:	2301      	movs	r3, #1
1a003550:	461a      	mov	r2, r3
1a003552:	4619      	mov	r1, r3
1a003554:	f000 fb0e 	bl	1a003b74 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a003558:	2100      	movs	r1, #0
1a00355a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a00355c:	4a08      	ldr	r2, [pc, #32]	; (1a003580 <Chip_ADC_Init+0x3c>)
1a00355e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a003560:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a003562:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a003564:	230b      	movs	r3, #11
1a003566:	4628      	mov	r0, r5
1a003568:	f7ff ffc0 	bl	1a0034ec <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00356c:	0200      	lsls	r0, r0, #8
1a00356e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003572:	7920      	ldrb	r0, [r4, #4]
1a003574:	0440      	lsls	r0, r0, #17
1a003576:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00357a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a00357c:	6028      	str	r0, [r5, #0]
}
1a00357e:	bd38      	pop	{r3, r4, r5, pc}
1a003580:	00061a80 	.word	0x00061a80

1a003584 <Chip_ADC_DeInit>:

/* Shutdown ADC */
void Chip_ADC_DeInit(LPC_ADC_T *pADC)
{
1a003584:	b508      	push	{r3, lr}
	pADC->INTEN = 0x00000100;
1a003586:	f44f 7280 	mov.w	r2, #256	; 0x100
1a00358a:	60c2      	str	r2, [r0, #12]
	pADC->CR = 0;
1a00358c:	2200      	movs	r2, #0
1a00358e:	6002      	str	r2, [r0, #0]
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
1a003590:	f7ff ffa2 	bl	1a0034d8 <Chip_ADC_GetClockIndex>
1a003594:	f000 fb26 	bl	1a003be4 <Chip_Clock_Disable>
}
1a003598:	bd08      	pop	{r3, pc}

1a00359a <Chip_ADC_ReadValue>:

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a00359a:	b508      	push	{r3, lr}
	return readAdcVal(pADC, channel, data);
1a00359c:	f7ff ffc6 	bl	1a00352c <readAdcVal>
}
1a0035a0:	bd08      	pop	{r3, pc}

1a0035a2 <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
	switch (StatusType) {
1a0035a2:	2a01      	cmp	r2, #1
1a0035a4:	d00a      	beq.n	1a0035bc <Chip_ADC_ReadStatus+0x1a>
1a0035a6:	b11a      	cbz	r2, 1a0035b0 <Chip_ADC_ReadStatus+0xe>
1a0035a8:	2a02      	cmp	r2, #2
1a0035aa:	d00f      	beq.n	1a0035cc <Chip_ADC_ReadStatus+0x2a>
		return pADC->STAT >> 16 ? SET : RESET;

	default:
		break;
	}
	return RESET;
1a0035ac:	2000      	movs	r0, #0
}
1a0035ae:	4770      	bx	lr
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a0035b0:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0035b2:	40c8      	lsrs	r0, r1
1a0035b4:	f000 0001 	and.w	r0, r0, #1
1a0035b8:	b2c0      	uxtb	r0, r0
1a0035ba:	4770      	bx	lr
		channel += 8;
1a0035bc:	3108      	adds	r1, #8
1a0035be:	b2c9      	uxtb	r1, r1
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a0035c0:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0035c2:	40c8      	lsrs	r0, r1
1a0035c4:	f000 0001 	and.w	r0, r0, #1
1a0035c8:	b2c0      	uxtb	r0, r0
1a0035ca:	4770      	bx	lr
		return pADC->STAT >> 16 ? SET : RESET;
1a0035cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a0035ce:	0c1b      	lsrs	r3, r3, #16
1a0035d0:	bf14      	ite	ne
1a0035d2:	2001      	movne	r0, #1
1a0035d4:	2000      	moveq	r0, #0
1a0035d6:	4770      	bx	lr

1a0035d8 <Chip_ADC_Int_SetChannelCmd>:

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a0035d8:	2a01      	cmp	r2, #1
1a0035da:	d007      	beq.n	1a0035ec <Chip_ADC_Int_SetChannelCmd+0x14>
		pADC->INTEN |= (1UL << channel);
	}
	else {
		pADC->INTEN &= (~(1UL << channel));
1a0035dc:	68c3      	ldr	r3, [r0, #12]
1a0035de:	2201      	movs	r2, #1
1a0035e0:	fa02 f101 	lsl.w	r1, r2, r1
1a0035e4:	ea23 0101 	bic.w	r1, r3, r1
1a0035e8:	60c1      	str	r1, [r0, #12]
	}
}
1a0035ea:	4770      	bx	lr
		pADC->INTEN |= (1UL << channel);
1a0035ec:	68c3      	ldr	r3, [r0, #12]
1a0035ee:	fa02 f101 	lsl.w	r1, r2, r1
1a0035f2:	4319      	orrs	r1, r3
1a0035f4:	60c1      	str	r1, [r0, #12]
1a0035f6:	4770      	bx	lr

1a0035f8 <Chip_ADC_SetStartMode>:

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a0035f8:	b508      	push	{r3, lr}
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a0035fa:	2901      	cmp	r1, #1
1a0035fc:	d904      	bls.n	1a003608 <Chip_ADC_SetStartMode+0x10>
		if (EdgeOption) {
1a0035fe:	b932      	cbnz	r2, 1a00360e <Chip_ADC_SetStartMode+0x16>
			pADC->CR |= ADC_CR_EDGE;
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
1a003600:	6803      	ldr	r3, [r0, #0]
1a003602:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a003606:	6003      	str	r3, [r0, #0]
		}
	}
	setStartMode(pADC, (uint8_t) mode);
1a003608:	f7ff ff89 	bl	1a00351e <setStartMode>
}
1a00360c:	bd08      	pop	{r3, pc}
			pADC->CR |= ADC_CR_EDGE;
1a00360e:	6803      	ldr	r3, [r0, #0]
1a003610:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a003614:	6003      	str	r3, [r0, #0]
1a003616:	e7f7      	b.n	1a003608 <Chip_ADC_SetStartMode+0x10>

1a003618 <Chip_ADC_SetSampleRate>:

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a003618:	b570      	push	{r4, r5, r6, lr}
1a00361a:	4605      	mov	r5, r0
1a00361c:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00361e:	6804      	ldr	r4, [r0, #0]
1a003620:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a003624:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a003628:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00362a:	790b      	ldrb	r3, [r1, #4]
1a00362c:	f1c3 030b 	rsb	r3, r3, #11
1a003630:	b2db      	uxtb	r3, r3
1a003632:	7949      	ldrb	r1, [r1, #5]
1a003634:	f7ff ff5a 	bl	1a0034ec <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003638:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00363c:	7930      	ldrb	r0, [r6, #4]
1a00363e:	0440      	lsls	r0, r0, #17
1a003640:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a003644:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a003646:	6028      	str	r0, [r5, #0]
}
1a003648:	bd70      	pop	{r4, r5, r6, pc}

1a00364a <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00364a:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a00364c:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00364e:	680a      	ldr	r2, [r1, #0]
1a003650:	f7ff ffe2 	bl	1a003618 <Chip_ADC_SetSampleRate>
}
1a003654:	bd08      	pop	{r3, pc}

1a003656 <Chip_ADC_EnableChannel>:

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a003656:	2a01      	cmp	r2, #1
1a003658:	d00b      	beq.n	1a003672 <Chip_ADC_EnableChannel+0x1c>
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a00365a:	6803      	ldr	r3, [r0, #0]
1a00365c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
1a003660:	6003      	str	r3, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a003662:	6803      	ldr	r3, [r0, #0]
1a003664:	2201      	movs	r2, #1
1a003666:	fa02 f101 	lsl.w	r1, r2, r1
1a00366a:	ea23 0101 	bic.w	r1, r3, r1
1a00366e:	6001      	str	r1, [r0, #0]
	}
}
1a003670:	4770      	bx	lr
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a003672:	6803      	ldr	r3, [r0, #0]
1a003674:	fa02 f101 	lsl.w	r1, r2, r1
1a003678:	4319      	orrs	r1, r3
1a00367a:	6001      	str	r1, [r0, #0]
1a00367c:	4770      	bx	lr

1a00367e <Chip_ADC_SetBurstCmd>:

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a00367e:	b538      	push	{r3, r4, r5, lr}
1a003680:	4604      	mov	r4, r0
1a003682:	460d      	mov	r5, r1
	setStartMode(pADC, ADC_NO_START);
1a003684:	2100      	movs	r1, #0
1a003686:	f7ff ff4a 	bl	1a00351e <setStartMode>
	
    if (NewState == DISABLE) {
1a00368a:	b125      	cbz	r5, 1a003696 <Chip_ADC_SetBurstCmd+0x18>
		pADC->CR &= ~ADC_CR_BURST;
	}
	else {
		pADC->CR |= ADC_CR_BURST;
1a00368c:	6823      	ldr	r3, [r4, #0]
1a00368e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a003692:	6023      	str	r3, [r4, #0]
	}
}
1a003694:	bd38      	pop	{r3, r4, r5, pc}
		pADC->CR &= ~ADC_CR_BURST;
1a003696:	6823      	ldr	r3, [r4, #0]
1a003698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a00369c:	6023      	str	r3, [r4, #0]
1a00369e:	e7f9      	b.n	1a003694 <Chip_ADC_SetBurstCmd+0x16>

1a0036a0 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0036a0:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0036a2:	680b      	ldr	r3, [r1, #0]
1a0036a4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0036a8:	d002      	beq.n	1a0036b0 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0036aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0036ae:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0036b0:	4607      	mov	r7, r0
1a0036b2:	2501      	movs	r5, #1
1a0036b4:	e03b      	b.n	1a00372e <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0036b6:	694b      	ldr	r3, [r1, #20]
1a0036b8:	fb03 f302 	mul.w	r3, r3, r2
1a0036bc:	fbb3 f3f5 	udiv	r3, r3, r5
1a0036c0:	e014      	b.n	1a0036ec <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0036c2:	461c      	mov	r4, r3
1a0036c4:	e020      	b.n	1a003708 <pll_calc_divs+0x68>
		return -val;
1a0036c6:	f1cc 0c00 	rsb	ip, ip, #0
1a0036ca:	e020      	b.n	1a00370e <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a0036cc:	3201      	adds	r2, #1
1a0036ce:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0036d2:	dc26      	bgt.n	1a003722 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a0036d4:	680c      	ldr	r4, [r1, #0]
1a0036d6:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0036da:	d0ec      	beq.n	1a0036b6 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0036dc:	1c73      	adds	r3, r6, #1
1a0036de:	fa02 fc03 	lsl.w	ip, r2, r3
1a0036e2:	694b      	ldr	r3, [r1, #20]
1a0036e4:	fb03 f30c 	mul.w	r3, r3, ip
1a0036e8:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0036ec:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a00373c <pll_calc_divs+0x9c>
1a0036f0:	4563      	cmp	r3, ip
1a0036f2:	d9eb      	bls.n	1a0036cc <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0036f4:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a003740 <pll_calc_divs+0xa0>
1a0036f8:	4563      	cmp	r3, ip
1a0036fa:	d812      	bhi.n	1a003722 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a0036fc:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003700:	d1df      	bne.n	1a0036c2 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a003702:	1c74      	adds	r4, r6, #1
1a003704:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a003708:	ebb0 0c04 	subs.w	ip, r0, r4
1a00370c:	d4db      	bmi.n	1a0036c6 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a00370e:	4567      	cmp	r7, ip
1a003710:	d9dc      	bls.n	1a0036cc <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a003712:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a003714:	1c77      	adds	r7, r6, #1
1a003716:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a003718:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00371a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a00371c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a00371e:	4667      	mov	r7, ip
1a003720:	e7d4      	b.n	1a0036cc <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a003722:	3601      	adds	r6, #1
1a003724:	2e03      	cmp	r6, #3
1a003726:	dc01      	bgt.n	1a00372c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a003728:	2201      	movs	r2, #1
1a00372a:	e7d0      	b.n	1a0036ce <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a00372c:	3501      	adds	r5, #1
1a00372e:	2d04      	cmp	r5, #4
1a003730:	dc01      	bgt.n	1a003736 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a003732:	2600      	movs	r6, #0
1a003734:	e7f6      	b.n	1a003724 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a003736:	bcf0      	pop	{r4, r5, r6, r7}
1a003738:	4770      	bx	lr
1a00373a:	bf00      	nop
1a00373c:	094c5eff 	.word	0x094c5eff
1a003740:	1312d000 	.word	0x1312d000

1a003744 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003744:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003746:	b099      	sub	sp, #100	; 0x64
1a003748:	4605      	mov	r5, r0
1a00374a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a00374c:	225c      	movs	r2, #92	; 0x5c
1a00374e:	2100      	movs	r1, #0
1a003750:	a801      	add	r0, sp, #4
1a003752:	f002 fd11 	bl	1a006178 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a003756:	2380      	movs	r3, #128	; 0x80
1a003758:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00375a:	6963      	ldr	r3, [r4, #20]
1a00375c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00375e:	7923      	ldrb	r3, [r4, #4]
1a003760:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a003764:	4669      	mov	r1, sp
1a003766:	4628      	mov	r0, r5
1a003768:	f7ff ff9a 	bl	1a0036a0 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a00376c:	9b06      	ldr	r3, [sp, #24]
1a00376e:	42ab      	cmp	r3, r5
1a003770:	d027      	beq.n	1a0037c2 <pll_get_frac+0x7e>
	if (val < 0)
1a003772:	1aeb      	subs	r3, r5, r3
1a003774:	d42e      	bmi.n	1a0037d4 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a003776:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a003778:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00377a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00377e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a003780:	6963      	ldr	r3, [r4, #20]
1a003782:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a003784:	7923      	ldrb	r3, [r4, #4]
1a003786:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00378a:	a910      	add	r1, sp, #64	; 0x40
1a00378c:	4628      	mov	r0, r5
1a00378e:	f7ff ff87 	bl	1a0036a0 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a003792:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a003794:	42ab      	cmp	r3, r5
1a003796:	d01f      	beq.n	1a0037d8 <pll_get_frac+0x94>
	if (val < 0)
1a003798:	1aeb      	subs	r3, r5, r3
1a00379a:	d425      	bmi.n	1a0037e8 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a00379c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a00379e:	4b2b      	ldr	r3, [pc, #172]	; (1a00384c <pll_get_frac+0x108>)
1a0037a0:	429d      	cmp	r5, r3
1a0037a2:	d923      	bls.n	1a0037ec <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0037a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0037a6:	1aed      	subs	r5, r5, r3
1a0037a8:	d433      	bmi.n	1a003812 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0037aa:	42ae      	cmp	r6, r5
1a0037ac:	dc3b      	bgt.n	1a003826 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0037ae:	42be      	cmp	r6, r7
1a0037b0:	dc31      	bgt.n	1a003816 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0037b2:	466d      	mov	r5, sp
1a0037b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0037b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0037b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0037bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0037c0:	e006      	b.n	1a0037d0 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0037c2:	466d      	mov	r5, sp
1a0037c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0037c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0037c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0037cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0037d0:	b019      	add	sp, #100	; 0x64
1a0037d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0037d4:	425b      	negs	r3, r3
1a0037d6:	e7ce      	b.n	1a003776 <pll_get_frac+0x32>
		*ppll = pll[2];
1a0037d8:	ad10      	add	r5, sp, #64	; 0x40
1a0037da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0037dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0037de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0037e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0037e6:	e7f3      	b.n	1a0037d0 <pll_get_frac+0x8c>
		return -val;
1a0037e8:	425b      	negs	r3, r3
1a0037ea:	e7d7      	b.n	1a00379c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0037ec:	2340      	movs	r3, #64	; 0x40
1a0037ee:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0037f0:	6963      	ldr	r3, [r4, #20]
1a0037f2:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0037f4:	a908      	add	r1, sp, #32
1a0037f6:	4628      	mov	r0, r5
1a0037f8:	f7ff ff52 	bl	1a0036a0 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0037fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0037fe:	42ab      	cmp	r3, r5
1a003800:	d1d0      	bne.n	1a0037a4 <pll_get_frac+0x60>
			*ppll = pll[1];
1a003802:	ad08      	add	r5, sp, #32
1a003804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003808:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00380c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a003810:	e7de      	b.n	1a0037d0 <pll_get_frac+0x8c>
		return -val;
1a003812:	426d      	negs	r5, r5
1a003814:	e7c9      	b.n	1a0037aa <pll_get_frac+0x66>
			*ppll = pll[2];
1a003816:	ad10      	add	r5, sp, #64	; 0x40
1a003818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00381a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00381c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003820:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003824:	e7d4      	b.n	1a0037d0 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a003826:	42af      	cmp	r7, r5
1a003828:	db07      	blt.n	1a00383a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00382a:	ad08      	add	r5, sp, #32
1a00382c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00382e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003830:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003834:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003838:	e7ca      	b.n	1a0037d0 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00383a:	ad10      	add	r5, sp, #64	; 0x40
1a00383c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00383e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003840:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003848:	e7c2      	b.n	1a0037d0 <pll_get_frac+0x8c>
1a00384a:	bf00      	nop
1a00384c:	068e7780 	.word	0x068e7780

1a003850 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a003850:	b430      	push	{r4, r5}
1a003852:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a003854:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a003856:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003858:	e000      	b.n	1a00385c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00385a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00385c:	281c      	cmp	r0, #28
1a00385e:	d118      	bne.n	1a003892 <Chip_Clock_FindBaseClock+0x42>
1a003860:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003864:	0051      	lsls	r1, r2, #1
1a003866:	4a0c      	ldr	r2, [pc, #48]	; (1a003898 <Chip_Clock_FindBaseClock+0x48>)
1a003868:	440a      	add	r2, r1
1a00386a:	7914      	ldrb	r4, [r2, #4]
1a00386c:	4284      	cmp	r4, r0
1a00386e:	d010      	beq.n	1a003892 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a003870:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a003874:	004a      	lsls	r2, r1, #1
1a003876:	4908      	ldr	r1, [pc, #32]	; (1a003898 <Chip_Clock_FindBaseClock+0x48>)
1a003878:	5a8a      	ldrh	r2, [r1, r2]
1a00387a:	42aa      	cmp	r2, r5
1a00387c:	d8ed      	bhi.n	1a00385a <Chip_Clock_FindBaseClock+0xa>
1a00387e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003882:	0051      	lsls	r1, r2, #1
1a003884:	4a04      	ldr	r2, [pc, #16]	; (1a003898 <Chip_Clock_FindBaseClock+0x48>)
1a003886:	440a      	add	r2, r1
1a003888:	8852      	ldrh	r2, [r2, #2]
1a00388a:	42aa      	cmp	r2, r5
1a00388c:	d3e5      	bcc.n	1a00385a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00388e:	4620      	mov	r0, r4
1a003890:	e7e4      	b.n	1a00385c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a003892:	bc30      	pop	{r4, r5}
1a003894:	4770      	bx	lr
1a003896:	bf00      	nop
1a003898:	1a00a750 	.word	0x1a00a750

1a00389c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a00389c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a00389e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0038a2:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0038a4:	4a0d      	ldr	r2, [pc, #52]	; (1a0038dc <Chip_Clock_EnableCrystal+0x40>)
1a0038a6:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0038a8:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0038ac:	6992      	ldr	r2, [r2, #24]
1a0038ae:	428a      	cmp	r2, r1
1a0038b0:	d001      	beq.n	1a0038b6 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0038b2:	4a0a      	ldr	r2, [pc, #40]	; (1a0038dc <Chip_Clock_EnableCrystal+0x40>)
1a0038b4:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0038b6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0038ba:	4a09      	ldr	r2, [pc, #36]	; (1a0038e0 <Chip_Clock_EnableCrystal+0x44>)
1a0038bc:	6811      	ldr	r1, [r2, #0]
1a0038be:	4a09      	ldr	r2, [pc, #36]	; (1a0038e4 <Chip_Clock_EnableCrystal+0x48>)
1a0038c0:	4291      	cmp	r1, r2
1a0038c2:	d901      	bls.n	1a0038c8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0038c4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0038c8:	4a04      	ldr	r2, [pc, #16]	; (1a0038dc <Chip_Clock_EnableCrystal+0x40>)
1a0038ca:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0038cc:	9b01      	ldr	r3, [sp, #4]
1a0038ce:	1e5a      	subs	r2, r3, #1
1a0038d0:	9201      	str	r2, [sp, #4]
1a0038d2:	2b00      	cmp	r3, #0
1a0038d4:	d1fa      	bne.n	1a0038cc <Chip_Clock_EnableCrystal+0x30>
}
1a0038d6:	b002      	add	sp, #8
1a0038d8:	4770      	bx	lr
1a0038da:	bf00      	nop
1a0038dc:	40050000 	.word	0x40050000
1a0038e0:	1a00a6b8 	.word	0x1a00a6b8
1a0038e4:	01312cff 	.word	0x01312cff

1a0038e8 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0038e8:	3012      	adds	r0, #18
1a0038ea:	4b05      	ldr	r3, [pc, #20]	; (1a003900 <Chip_Clock_GetDividerSource+0x18>)
1a0038ec:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0038f0:	f010 0f01 	tst.w	r0, #1
1a0038f4:	d102      	bne.n	1a0038fc <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0038f6:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0038fa:	4770      	bx	lr
		return CLKINPUT_PD;
1a0038fc:	2011      	movs	r0, #17
}
1a0038fe:	4770      	bx	lr
1a003900:	40050000 	.word	0x40050000

1a003904 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a003904:	f100 0212 	add.w	r2, r0, #18
1a003908:	4b03      	ldr	r3, [pc, #12]	; (1a003918 <Chip_Clock_GetDividerDivisor+0x14>)
1a00390a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00390e:	4b03      	ldr	r3, [pc, #12]	; (1a00391c <Chip_Clock_GetDividerDivisor+0x18>)
1a003910:	5c18      	ldrb	r0, [r3, r0]
}
1a003912:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a003916:	4770      	bx	lr
1a003918:	40050000 	.word	0x40050000
1a00391c:	1a00a748 	.word	0x1a00a748

1a003920 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003920:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003922:	2810      	cmp	r0, #16
1a003924:	d80a      	bhi.n	1a00393c <Chip_Clock_GetClockInputHz+0x1c>
1a003926:	e8df f000 	tbb	[pc, r0]
1a00392a:	0b42      	.short	0x0b42
1a00392c:	091f160d 	.word	0x091f160d
1a003930:	2b282522 	.word	0x2b282522
1a003934:	322e0909 	.word	0x322e0909
1a003938:	3a36      	.short	0x3a36
1a00393a:	3e          	.byte	0x3e
1a00393b:	00          	.byte	0x00
	uint32_t rate = 0;
1a00393c:	2000      	movs	r0, #0
1a00393e:	e038      	b.n	1a0039b2 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003940:	481e      	ldr	r0, [pc, #120]	; (1a0039bc <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003942:	e036      	b.n	1a0039b2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003944:	4b1e      	ldr	r3, [pc, #120]	; (1a0039c0 <Chip_Clock_GetClockInputHz+0xa0>)
1a003946:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00394a:	f003 0307 	and.w	r3, r3, #7
1a00394e:	2b04      	cmp	r3, #4
1a003950:	d130      	bne.n	1a0039b4 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a003952:	2000      	movs	r0, #0
1a003954:	e02d      	b.n	1a0039b2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003956:	4b1a      	ldr	r3, [pc, #104]	; (1a0039c0 <Chip_Clock_GetClockInputHz+0xa0>)
1a003958:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00395c:	f003 0307 	and.w	r3, r3, #7
1a003960:	2b04      	cmp	r3, #4
1a003962:	d029      	beq.n	1a0039b8 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a003964:	4817      	ldr	r0, [pc, #92]	; (1a0039c4 <Chip_Clock_GetClockInputHz+0xa4>)
1a003966:	e024      	b.n	1a0039b2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a003968:	4b17      	ldr	r3, [pc, #92]	; (1a0039c8 <Chip_Clock_GetClockInputHz+0xa8>)
1a00396a:	6818      	ldr	r0, [r3, #0]
		break;
1a00396c:	e021      	b.n	1a0039b2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00396e:	4b17      	ldr	r3, [pc, #92]	; (1a0039cc <Chip_Clock_GetClockInputHz+0xac>)
1a003970:	6818      	ldr	r0, [r3, #0]
		break;
1a003972:	e01e      	b.n	1a0039b2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a003974:	4b16      	ldr	r3, [pc, #88]	; (1a0039d0 <Chip_Clock_GetClockInputHz+0xb0>)
1a003976:	6818      	ldr	r0, [r3, #0]
		break;
1a003978:	e01b      	b.n	1a0039b2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00397a:	4b15      	ldr	r3, [pc, #84]	; (1a0039d0 <Chip_Clock_GetClockInputHz+0xb0>)
1a00397c:	6858      	ldr	r0, [r3, #4]
		break;
1a00397e:	e018      	b.n	1a0039b2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a003980:	f000 f86a 	bl	1a003a58 <Chip_Clock_GetMainPLLHz>
		break;
1a003984:	e015      	b.n	1a0039b2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a003986:	2100      	movs	r1, #0
1a003988:	f000 f89c 	bl	1a003ac4 <Chip_Clock_GetDivRate>
		break;
1a00398c:	e011      	b.n	1a0039b2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00398e:	2101      	movs	r1, #1
1a003990:	f000 f898 	bl	1a003ac4 <Chip_Clock_GetDivRate>
		break;
1a003994:	e00d      	b.n	1a0039b2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a003996:	2102      	movs	r1, #2
1a003998:	f000 f894 	bl	1a003ac4 <Chip_Clock_GetDivRate>
		break;
1a00399c:	e009      	b.n	1a0039b2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00399e:	2103      	movs	r1, #3
1a0039a0:	f000 f890 	bl	1a003ac4 <Chip_Clock_GetDivRate>
		break;
1a0039a4:	e005      	b.n	1a0039b2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0039a6:	2104      	movs	r1, #4
1a0039a8:	f000 f88c 	bl	1a003ac4 <Chip_Clock_GetDivRate>
		break;
1a0039ac:	e001      	b.n	1a0039b2 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a0039ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0039b2:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a0039b4:	4803      	ldr	r0, [pc, #12]	; (1a0039c4 <Chip_Clock_GetClockInputHz+0xa4>)
1a0039b6:	e7fc      	b.n	1a0039b2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a0039b8:	4806      	ldr	r0, [pc, #24]	; (1a0039d4 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a0039ba:	e7fa      	b.n	1a0039b2 <Chip_Clock_GetClockInputHz+0x92>
1a0039bc:	00b71b00 	.word	0x00b71b00
1a0039c0:	40043000 	.word	0x40043000
1a0039c4:	017d7840 	.word	0x017d7840
1a0039c8:	1a00a68c 	.word	0x1a00a68c
1a0039cc:	1a00a6b8 	.word	0x1a00a6b8
1a0039d0:	100078c0 	.word	0x100078c0
1a0039d4:	02faf080 	.word	0x02faf080

1a0039d8 <Chip_Clock_CalcMainPLLValue>:
{
1a0039d8:	b538      	push	{r3, r4, r5, lr}
1a0039da:	4605      	mov	r5, r0
1a0039dc:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0039de:	7908      	ldrb	r0, [r1, #4]
1a0039e0:	f7ff ff9e 	bl	1a003920 <Chip_Clock_GetClockInputHz>
1a0039e4:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0039e6:	4b19      	ldr	r3, [pc, #100]	; (1a003a4c <Chip_Clock_CalcMainPLLValue+0x74>)
1a0039e8:	442b      	add	r3, r5
1a0039ea:	4a19      	ldr	r2, [pc, #100]	; (1a003a50 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0039ec:	4293      	cmp	r3, r2
1a0039ee:	d821      	bhi.n	1a003a34 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0039f0:	b318      	cbz	r0, 1a003a3a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0039f2:	2380      	movs	r3, #128	; 0x80
1a0039f4:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0039f6:	2300      	movs	r3, #0
1a0039f8:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0039fa:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0039fc:	fbb5 f3f0 	udiv	r3, r5, r0
1a003a00:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a003a02:	4a14      	ldr	r2, [pc, #80]	; (1a003a54 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a003a04:	4295      	cmp	r5, r2
1a003a06:	d903      	bls.n	1a003a10 <Chip_Clock_CalcMainPLLValue+0x38>
1a003a08:	fb03 f000 	mul.w	r0, r3, r0
1a003a0c:	42a8      	cmp	r0, r5
1a003a0e:	d007      	beq.n	1a003a20 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003a10:	4621      	mov	r1, r4
1a003a12:	4628      	mov	r0, r5
1a003a14:	f7ff fe96 	bl	1a003744 <pll_get_frac>
		if (!ppll->nsel) {
1a003a18:	68a3      	ldr	r3, [r4, #8]
1a003a1a:	b18b      	cbz	r3, 1a003a40 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a003a1c:	3b01      	subs	r3, #1
1a003a1e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a003a20:	6923      	ldr	r3, [r4, #16]
1a003a22:	b183      	cbz	r3, 1a003a46 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a003a24:	68e2      	ldr	r2, [r4, #12]
1a003a26:	b10a      	cbz	r2, 1a003a2c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a003a28:	3a01      	subs	r2, #1
1a003a2a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a003a2c:	3b01      	subs	r3, #1
1a003a2e:	6123      	str	r3, [r4, #16]
	return 0;
1a003a30:	2000      	movs	r0, #0
}
1a003a32:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a003a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003a38:	e7fb      	b.n	1a003a32 <Chip_Clock_CalcMainPLLValue+0x5a>
1a003a3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003a3e:	e7f8      	b.n	1a003a32 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a003a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003a44:	e7f5      	b.n	1a003a32 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a003a46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003a4a:	e7f2      	b.n	1a003a32 <Chip_Clock_CalcMainPLLValue+0x5a>
1a003a4c:	ff6b3a10 	.word	0xff6b3a10
1a003a50:	0b940510 	.word	0x0b940510
1a003a54:	094c5eff 	.word	0x094c5eff

1a003a58 <Chip_Clock_GetMainPLLHz>:
{
1a003a58:	b530      	push	{r4, r5, lr}
1a003a5a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a003a5c:	4d17      	ldr	r5, [pc, #92]	; (1a003abc <Chip_Clock_GetMainPLLHz+0x64>)
1a003a5e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a003a60:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a003a64:	f7ff ff5c 	bl	1a003920 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a003a68:	4b15      	ldr	r3, [pc, #84]	; (1a003ac0 <Chip_Clock_GetMainPLLHz+0x68>)
1a003a6a:	681b      	ldr	r3, [r3, #0]
1a003a6c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a003a6e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a003a70:	f013 0f01 	tst.w	r3, #1
1a003a74:	d01f      	beq.n	1a003ab6 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a003a76:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a003a7a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a003a7e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a003a82:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a003a86:	3301      	adds	r3, #1
	n = nsel + 1;
1a003a88:	3201      	adds	r2, #1
	p = ptab[psel];
1a003a8a:	f10d 0c08 	add.w	ip, sp, #8
1a003a8e:	4461      	add	r1, ip
1a003a90:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a003a94:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003a98:	d108      	bne.n	1a003aac <Chip_Clock_GetMainPLLHz+0x54>
1a003a9a:	b93d      	cbnz	r5, 1a003aac <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a003a9c:	0049      	lsls	r1, r1, #1
1a003a9e:	fbb3 f3f1 	udiv	r3, r3, r1
1a003aa2:	fbb0 f0f2 	udiv	r0, r0, r2
1a003aa6:	fb00 f003 	mul.w	r0, r0, r3
1a003aaa:	e005      	b.n	1a003ab8 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a003aac:	fbb0 f0f2 	udiv	r0, r0, r2
1a003ab0:	fb03 f000 	mul.w	r0, r3, r0
1a003ab4:	e000      	b.n	1a003ab8 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a003ab6:	2000      	movs	r0, #0
}
1a003ab8:	b003      	add	sp, #12
1a003aba:	bd30      	pop	{r4, r5, pc}
1a003abc:	40050000 	.word	0x40050000
1a003ac0:	1a00a744 	.word	0x1a00a744

1a003ac4 <Chip_Clock_GetDivRate>:
{
1a003ac4:	b538      	push	{r3, r4, r5, lr}
1a003ac6:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a003ac8:	4608      	mov	r0, r1
1a003aca:	f7ff ff0d 	bl	1a0038e8 <Chip_Clock_GetDividerSource>
1a003ace:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a003ad0:	4620      	mov	r0, r4
1a003ad2:	f7ff ff17 	bl	1a003904 <Chip_Clock_GetDividerDivisor>
1a003ad6:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a003ad8:	4628      	mov	r0, r5
1a003ada:	f7ff ff21 	bl	1a003920 <Chip_Clock_GetClockInputHz>
1a003ade:	3401      	adds	r4, #1
}
1a003ae0:	fbb0 f0f4 	udiv	r0, r0, r4
1a003ae4:	bd38      	pop	{r3, r4, r5, pc}
1a003ae6:	Address 0x000000001a003ae6 is out of bounds.


1a003ae8 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a003ae8:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a003aea:	f100 0416 	add.w	r4, r0, #22
1a003aee:	00a4      	lsls	r4, r4, #2
1a003af0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a003af4:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a003af8:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a003afa:	281b      	cmp	r0, #27
1a003afc:	d813      	bhi.n	1a003b26 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a003afe:	2911      	cmp	r1, #17
1a003b00:	d01a      	beq.n	1a003b38 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a003b02:	4d0e      	ldr	r5, [pc, #56]	; (1a003b3c <Chip_Clock_SetBaseClock+0x54>)
1a003b04:	4025      	ands	r5, r4

			if (autoblocken) {
1a003b06:	b10a      	cbz	r2, 1a003b0c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a003b08:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a003b0c:	b10b      	cbz	r3, 1a003b12 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a003b0e:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a003b12:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a003b16:	3016      	adds	r0, #22
1a003b18:	0080      	lsls	r0, r0, #2
1a003b1a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003b1e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003b22:	6045      	str	r5, [r0, #4]
1a003b24:	e008      	b.n	1a003b38 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a003b26:	f044 0401 	orr.w	r4, r4, #1
1a003b2a:	3016      	adds	r0, #22
1a003b2c:	0080      	lsls	r0, r0, #2
1a003b2e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003b32:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003b36:	6044      	str	r4, [r0, #4]
	}
}
1a003b38:	bc30      	pop	{r4, r5}
1a003b3a:	4770      	bx	lr
1a003b3c:	e0fff7fe 	.word	0xe0fff7fe

1a003b40 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003b40:	281b      	cmp	r0, #27
1a003b42:	d80c      	bhi.n	1a003b5e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003b44:	3016      	adds	r0, #22
1a003b46:	0080      	lsls	r0, r0, #2
1a003b48:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003b4c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003b50:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a003b52:	f010 0f01 	tst.w	r0, #1
1a003b56:	d104      	bne.n	1a003b62 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003b58:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003b5c:	4770      	bx	lr
		return CLKINPUT_PD;
1a003b5e:	2011      	movs	r0, #17
1a003b60:	4770      	bx	lr
		return CLKINPUT_PD;
1a003b62:	2011      	movs	r0, #17
}
1a003b64:	4770      	bx	lr

1a003b66 <Chip_Clock_GetBaseClocktHz>:
{
1a003b66:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003b68:	f7ff ffea 	bl	1a003b40 <Chip_Clock_GetBaseClock>
1a003b6c:	f7ff fed8 	bl	1a003920 <Chip_Clock_GetClockInputHz>
}
1a003b70:	bd08      	pop	{r3, pc}
1a003b72:	Address 0x000000001a003b72 is out of bounds.


1a003b74 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003b74:	b969      	cbnz	r1, 1a003b92 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a003b76:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a003b78:	b10a      	cbz	r2, 1a003b7e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a003b7a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a003b7e:	2b02      	cmp	r3, #2
1a003b80:	d009      	beq.n	1a003b96 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003b82:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003b86:	d209      	bcs.n	1a003b9c <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003b88:	3020      	adds	r0, #32
1a003b8a:	4b07      	ldr	r3, [pc, #28]	; (1a003ba8 <Chip_Clock_EnableOpts+0x34>)
1a003b8c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a003b90:	4770      	bx	lr
		reg |= (1 << 1);
1a003b92:	2103      	movs	r1, #3
1a003b94:	e7f0      	b.n	1a003b78 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a003b96:	f041 0120 	orr.w	r1, r1, #32
1a003b9a:	e7f2      	b.n	1a003b82 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a003b9c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003ba0:	4b02      	ldr	r3, [pc, #8]	; (1a003bac <Chip_Clock_EnableOpts+0x38>)
1a003ba2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003ba6:	4770      	bx	lr
1a003ba8:	40051000 	.word	0x40051000
1a003bac:	40052000 	.word	0x40052000

1a003bb0 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003bb0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003bb4:	d208      	bcs.n	1a003bc8 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a003bb6:	4a09      	ldr	r2, [pc, #36]	; (1a003bdc <Chip_Clock_Enable+0x2c>)
1a003bb8:	3020      	adds	r0, #32
1a003bba:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003bbe:	f043 0301 	orr.w	r3, r3, #1
1a003bc2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a003bc6:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a003bc8:	4a05      	ldr	r2, [pc, #20]	; (1a003be0 <Chip_Clock_Enable+0x30>)
1a003bca:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003bce:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003bd2:	f043 0301 	orr.w	r3, r3, #1
1a003bd6:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003bda:	4770      	bx	lr
1a003bdc:	40051000 	.word	0x40051000
1a003be0:	40052000 	.word	0x40052000

1a003be4 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a003be4:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003be8:	d208      	bcs.n	1a003bfc <Chip_Clock_Disable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a003bea:	4a09      	ldr	r2, [pc, #36]	; (1a003c10 <Chip_Clock_Disable+0x2c>)
1a003bec:	3020      	adds	r0, #32
1a003bee:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003bf2:	f023 0301 	bic.w	r3, r3, #1
1a003bf6:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a003bfa:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a003bfc:	4a05      	ldr	r2, [pc, #20]	; (1a003c14 <Chip_Clock_Disable+0x30>)
1a003bfe:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003c02:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003c06:	f023 0301 	bic.w	r3, r3, #1
1a003c0a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003c0e:	4770      	bx	lr
1a003c10:	40051000 	.word	0x40051000
1a003c14:	40052000 	.word	0x40052000

1a003c18 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003c18:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a003c1a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003c1e:	d309      	bcc.n	1a003c34 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003c20:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003c24:	4a0d      	ldr	r2, [pc, #52]	; (1a003c5c <Chip_Clock_GetRate+0x44>)
1a003c26:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a003c2a:	f014 0f01 	tst.w	r4, #1
1a003c2e:	d107      	bne.n	1a003c40 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a003c30:	2000      	movs	r0, #0
	}

	return rate;
}
1a003c32:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003c34:	f100 0320 	add.w	r3, r0, #32
1a003c38:	4a09      	ldr	r2, [pc, #36]	; (1a003c60 <Chip_Clock_GetRate+0x48>)
1a003c3a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a003c3e:	e7f4      	b.n	1a003c2a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003c40:	f7ff fe06 	bl	1a003850 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003c44:	f7ff ff8f 	bl	1a003b66 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a003c48:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003c4c:	d103      	bne.n	1a003c56 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a003c4e:	2301      	movs	r3, #1
		rate = rate / div;
1a003c50:	fbb0 f0f3 	udiv	r0, r0, r3
1a003c54:	e7ed      	b.n	1a003c32 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a003c56:	2302      	movs	r3, #2
1a003c58:	e7fa      	b.n	1a003c50 <Chip_Clock_GetRate+0x38>
1a003c5a:	bf00      	nop
1a003c5c:	40052000 	.word	0x40052000
1a003c60:	40051000 	.word	0x40051000

1a003c64 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a003c64:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a003c66:	2069      	movs	r0, #105	; 0x69
1a003c68:	f7ff ffd6 	bl	1a003c18 <Chip_Clock_GetRate>
1a003c6c:	4b01      	ldr	r3, [pc, #4]	; (1a003c74 <SystemCoreClockUpdate+0x10>)
1a003c6e:	6018      	str	r0, [r3, #0]
}
1a003c70:	bd08      	pop	{r3, pc}
1a003c72:	bf00      	nop
1a003c74:	100079fc 	.word	0x100079fc

1a003c78 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003c78:	b570      	push	{r4, r5, r6, lr}
1a003c7a:	b08a      	sub	sp, #40	; 0x28
1a003c7c:	4605      	mov	r5, r0
1a003c7e:	460e      	mov	r6, r1
1a003c80:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a003c82:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003c86:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003c88:	2806      	cmp	r0, #6
1a003c8a:	d018      	beq.n	1a003cbe <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003c8c:	2300      	movs	r3, #0
1a003c8e:	2201      	movs	r2, #1
1a003c90:	4629      	mov	r1, r5
1a003c92:	2004      	movs	r0, #4
1a003c94:	f7ff ff28 	bl	1a003ae8 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003c98:	4a49      	ldr	r2, [pc, #292]	; (1a003dc0 <Chip_SetupCoreClock+0x148>)
1a003c9a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003c9c:	f043 0301 	orr.w	r3, r3, #1
1a003ca0:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003ca2:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003ca6:	a901      	add	r1, sp, #4
1a003ca8:	4630      	mov	r0, r6
1a003caa:	f7ff fe95 	bl	1a0039d8 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a003cae:	4b45      	ldr	r3, [pc, #276]	; (1a003dc4 <Chip_SetupCoreClock+0x14c>)
1a003cb0:	429e      	cmp	r6, r3
1a003cb2:	d916      	bls.n	1a003ce2 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003cb4:	9b01      	ldr	r3, [sp, #4]
1a003cb6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003cba:	d003      	beq.n	1a003cc4 <Chip_SetupCoreClock+0x4c>
1a003cbc:	e7fe      	b.n	1a003cbc <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a003cbe:	f7ff fded 	bl	1a00389c <Chip_Clock_EnableCrystal>
1a003cc2:	e7e3      	b.n	1a003c8c <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a003cc4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003cc8:	d005      	beq.n	1a003cd6 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003cca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003cce:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003cd0:	2500      	movs	r5, #0
			direct = 1;
1a003cd2:	2601      	movs	r6, #1
1a003cd4:	e007      	b.n	1a003ce6 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a003cd6:	9b04      	ldr	r3, [sp, #16]
1a003cd8:	3301      	adds	r3, #1
1a003cda:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a003cdc:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a003cde:	2600      	movs	r6, #0
1a003ce0:	e001      	b.n	1a003ce6 <Chip_SetupCoreClock+0x6e>
1a003ce2:	2500      	movs	r5, #0
1a003ce4:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003ce6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003cea:	9b01      	ldr	r3, [sp, #4]
1a003cec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003cf0:	9a05      	ldr	r2, [sp, #20]
1a003cf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003cf6:	9a03      	ldr	r2, [sp, #12]
1a003cf8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003cfc:	9a04      	ldr	r2, [sp, #16]
1a003cfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003d02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003d06:	4a2e      	ldr	r2, [pc, #184]	; (1a003dc0 <Chip_SetupCoreClock+0x148>)
1a003d08:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003d0a:	4b2d      	ldr	r3, [pc, #180]	; (1a003dc0 <Chip_SetupCoreClock+0x148>)
1a003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003d0e:	f013 0f01 	tst.w	r3, #1
1a003d12:	d0fa      	beq.n	1a003d0a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003d14:	2300      	movs	r3, #0
1a003d16:	2201      	movs	r2, #1
1a003d18:	2109      	movs	r1, #9
1a003d1a:	2004      	movs	r0, #4
1a003d1c:	f7ff fee4 	bl	1a003ae8 <Chip_Clock_SetBaseClock>

	if (direct) {
1a003d20:	b1fe      	cbz	r6, 1a003d62 <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003d22:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003d26:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003d2a:	1e5a      	subs	r2, r3, #1
1a003d2c:	9209      	str	r2, [sp, #36]	; 0x24
1a003d2e:	2b00      	cmp	r3, #0
1a003d30:	d1fa      	bne.n	1a003d28 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a003d32:	9b01      	ldr	r3, [sp, #4]
1a003d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003d38:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003d3a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003d3e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003d42:	9a05      	ldr	r2, [sp, #20]
1a003d44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003d48:	9a03      	ldr	r2, [sp, #12]
1a003d4a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003d4e:	9a04      	ldr	r2, [sp, #16]
1a003d50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003d54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003d58:	4a19      	ldr	r2, [pc, #100]	; (1a003dc0 <Chip_SetupCoreClock+0x148>)
1a003d5a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003d5c:	b36c      	cbz	r4, 1a003dba <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003d5e:	2400      	movs	r4, #0
1a003d60:	e029      	b.n	1a003db6 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a003d62:	2d00      	cmp	r5, #0
1a003d64:	d0fa      	beq.n	1a003d5c <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003d66:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003d6a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003d6e:	1e5a      	subs	r2, r3, #1
1a003d70:	9209      	str	r2, [sp, #36]	; 0x24
1a003d72:	2b00      	cmp	r3, #0
1a003d74:	d1fa      	bne.n	1a003d6c <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a003d76:	9b04      	ldr	r3, [sp, #16]
1a003d78:	1e5a      	subs	r2, r3, #1
1a003d7a:	9204      	str	r2, [sp, #16]
1a003d7c:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a003d80:	9b01      	ldr	r3, [sp, #4]
1a003d82:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a003d86:	9905      	ldr	r1, [sp, #20]
1a003d88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003d8c:	9903      	ldr	r1, [sp, #12]
1a003d8e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a003d92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003d96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003d9a:	4a09      	ldr	r2, [pc, #36]	; (1a003dc0 <Chip_SetupCoreClock+0x148>)
1a003d9c:	6453      	str	r3, [r2, #68]	; 0x44
1a003d9e:	e7dd      	b.n	1a003d5c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003da0:	4809      	ldr	r0, [pc, #36]	; (1a003dc8 <Chip_SetupCoreClock+0x150>)
1a003da2:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003da6:	78cb      	ldrb	r3, [r1, #3]
1a003da8:	788a      	ldrb	r2, [r1, #2]
1a003daa:	7849      	ldrb	r1, [r1, #1]
1a003dac:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003db0:	f7ff fe9a 	bl	1a003ae8 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003db4:	3401      	adds	r4, #1
1a003db6:	2c11      	cmp	r4, #17
1a003db8:	d9f2      	bls.n	1a003da0 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003dba:	b00a      	add	sp, #40	; 0x28
1a003dbc:	bd70      	pop	{r4, r5, r6, pc}
1a003dbe:	bf00      	nop
1a003dc0:	40050000 	.word	0x40050000
1a003dc4:	068e7780 	.word	0x068e7780
1a003dc8:	1a00a7bc 	.word	0x1a00a7bc

1a003dcc <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a003dcc:	4770      	bx	lr
1a003dce:	Address 0x000000001a003dce is out of bounds.


1a003dd0 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003dd0:	4b03      	ldr	r3, [pc, #12]	; (1a003de0 <Chip_SSP_GetClockIndex+0x10>)
1a003dd2:	4298      	cmp	r0, r3
1a003dd4:	d001      	beq.n	1a003dda <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003dd6:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003dd8:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a003dda:	20a5      	movs	r0, #165	; 0xa5
1a003ddc:	4770      	bx	lr
1a003dde:	bf00      	nop
1a003de0:	400c5000 	.word	0x400c5000

1a003de4 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003de4:	4b04      	ldr	r3, [pc, #16]	; (1a003df8 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003de6:	4298      	cmp	r0, r3
1a003de8:	d002      	beq.n	1a003df0 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003dea:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a003dee:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a003df0:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003df4:	4770      	bx	lr
1a003df6:	bf00      	nop
1a003df8:	400c5000 	.word	0x400c5000

1a003dfc <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003dfc:	6803      	ldr	r3, [r0, #0]
1a003dfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a003e02:	0209      	lsls	r1, r1, #8
1a003e04:	b289      	uxth	r1, r1
1a003e06:	4319      	orrs	r1, r3
1a003e08:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a003e0a:	6102      	str	r2, [r0, #16]
}
1a003e0c:	4770      	bx	lr

1a003e0e <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a003e0e:	b570      	push	{r4, r5, r6, lr}
1a003e10:	4606      	mov	r6, r0
1a003e12:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003e14:	f7ff ffe6 	bl	1a003de4 <Chip_SSP_GetPeriphClockIndex>
1a003e18:	f7ff fefe 	bl	1a003c18 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003e1c:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a003e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a003e22:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003e24:	e000      	b.n	1a003e28 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003e26:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003e28:	42ab      	cmp	r3, r5
1a003e2a:	d90b      	bls.n	1a003e44 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003e2c:	1c4c      	adds	r4, r1, #1
1a003e2e:	fb02 f304 	mul.w	r3, r2, r4
1a003e32:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003e36:	429d      	cmp	r5, r3
1a003e38:	d2f6      	bcs.n	1a003e28 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003e3a:	2cff      	cmp	r4, #255	; 0xff
1a003e3c:	d9f3      	bls.n	1a003e26 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a003e3e:	3202      	adds	r2, #2
				cr0_div = 0;
1a003e40:	2100      	movs	r1, #0
1a003e42:	e7f1      	b.n	1a003e28 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003e44:	4630      	mov	r0, r6
1a003e46:	f7ff ffd9 	bl	1a003dfc <Chip_SSP_SetClockRate>
}
1a003e4a:	bd70      	pop	{r4, r5, r6, pc}

1a003e4c <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003e4c:	b510      	push	{r4, lr}
1a003e4e:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003e50:	f7ff ffbe 	bl	1a003dd0 <Chip_SSP_GetClockIndex>
1a003e54:	f7ff feac 	bl	1a003bb0 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003e58:	4620      	mov	r0, r4
1a003e5a:	f7ff ffc3 	bl	1a003de4 <Chip_SSP_GetPeriphClockIndex>
1a003e5e:	f7ff fea7 	bl	1a003bb0 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003e62:	6863      	ldr	r3, [r4, #4]
1a003e64:	f023 0304 	bic.w	r3, r3, #4
1a003e68:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003e6a:	6823      	ldr	r3, [r4, #0]
1a003e6c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003e70:	f043 0307 	orr.w	r3, r3, #7
1a003e74:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003e76:	4902      	ldr	r1, [pc, #8]	; (1a003e80 <Chip_SSP_Init+0x34>)
1a003e78:	4620      	mov	r0, r4
1a003e7a:	f7ff ffc8 	bl	1a003e0e <Chip_SSP_SetBitRate>
}
1a003e7e:	bd10      	pop	{r4, pc}
1a003e80:	000186a0 	.word	0x000186a0

1a003e84 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a003e84:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a003e86:	4a0b      	ldr	r2, [pc, #44]	; (1a003eb4 <SystemInit+0x30>)
1a003e88:	4b0b      	ldr	r3, [pc, #44]	; (1a003eb8 <SystemInit+0x34>)
1a003e8a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003e8c:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003e90:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a003e92:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a003e96:	2b20      	cmp	r3, #32
1a003e98:	d004      	beq.n	1a003ea4 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a003e9a:	f7ff fa05 	bl	1a0032a8 <Board_SystemInit>
   Board_Init();
1a003e9e:	f7ff f98b 	bl	1a0031b8 <Board_Init>
}
1a003ea2:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003ea4:	4a04      	ldr	r2, [pc, #16]	; (1a003eb8 <SystemInit+0x34>)
1a003ea6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003eaa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003eae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a003eb2:	e7f2      	b.n	1a003e9a <SystemInit+0x16>
1a003eb4:	1a000000 	.word	0x1a000000
1a003eb8:	e000ed00 	.word	0xe000ed00

1a003ebc <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a003ebc:	4b04      	ldr	r3, [pc, #16]	; (1a003ed0 <cyclesCounterInit+0x14>)
1a003ebe:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a003ec0:	4a04      	ldr	r2, [pc, #16]	; (1a003ed4 <cyclesCounterInit+0x18>)
1a003ec2:	6813      	ldr	r3, [r2, #0]
1a003ec4:	f043 0301 	orr.w	r3, r3, #1
1a003ec8:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a003eca:	2001      	movs	r0, #1
1a003ecc:	4770      	bx	lr
1a003ece:	bf00      	nop
1a003ed0:	10000040 	.word	0x10000040
1a003ed4:	e0001000 	.word	0xe0001000

1a003ed8 <uartProcessIRQ>:
{
1a003ed8:	b570      	push	{r4, r5, r6, lr}
1a003eda:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a003edc:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a003ee0:	0093      	lsls	r3, r2, #2
1a003ee2:	4a22      	ldr	r2, [pc, #136]	; (1a003f6c <uartProcessIRQ+0x94>)
1a003ee4:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a003ee6:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a003ee8:	b2ed      	uxtb	r5, r5
1a003eea:	f015 0f01 	tst.w	r5, #1
1a003eee:	d00a      	beq.n	1a003f06 <uartProcessIRQ+0x2e>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a003ef0:	b928      	cbnz	r0, 1a003efe <uartProcessIRQ+0x26>
1a003ef2:	4b1f      	ldr	r3, [pc, #124]	; (1a003f70 <uartProcessIRQ+0x98>)
1a003ef4:	681b      	ldr	r3, [r3, #0]
1a003ef6:	b113      	cbz	r3, 1a003efe <uartProcessIRQ+0x26>
         (*rxIsrCallbackUART0)(rxIsrCallbackUART0Params);
1a003ef8:	4a1e      	ldr	r2, [pc, #120]	; (1a003f74 <uartProcessIRQ+0x9c>)
1a003efa:	6810      	ldr	r0, [r2, #0]
1a003efc:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a003efe:	2c03      	cmp	r4, #3
1a003f00:	d014      	beq.n	1a003f2c <uartProcessIRQ+0x54>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a003f02:	2c05      	cmp	r4, #5
1a003f04:	d01a      	beq.n	1a003f3c <uartProcessIRQ+0x64>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a003f06:	f015 0f20 	tst.w	r5, #32
1a003f0a:	d00e      	beq.n	1a003f2a <uartProcessIRQ+0x52>
	return pUART->IER;
1a003f0c:	6873      	ldr	r3, [r6, #4]
1a003f0e:	f013 0f02 	tst.w	r3, #2
1a003f12:	d00a      	beq.n	1a003f2a <uartProcessIRQ+0x52>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a003f14:	b92c      	cbnz	r4, 1a003f22 <uartProcessIRQ+0x4a>
1a003f16:	4b18      	ldr	r3, [pc, #96]	; (1a003f78 <uartProcessIRQ+0xa0>)
1a003f18:	681b      	ldr	r3, [r3, #0]
1a003f1a:	b113      	cbz	r3, 1a003f22 <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART0)(txIsrCallbackUART0Params);
1a003f1c:	4a17      	ldr	r2, [pc, #92]	; (1a003f7c <uartProcessIRQ+0xa4>)
1a003f1e:	6810      	ldr	r0, [r2, #0]
1a003f20:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003f22:	2c03      	cmp	r4, #3
1a003f24:	d012      	beq.n	1a003f4c <uartProcessIRQ+0x74>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003f26:	2c05      	cmp	r4, #5
1a003f28:	d018      	beq.n	1a003f5c <uartProcessIRQ+0x84>
}
1a003f2a:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a003f2c:	4b14      	ldr	r3, [pc, #80]	; (1a003f80 <uartProcessIRQ+0xa8>)
1a003f2e:	681b      	ldr	r3, [r3, #0]
1a003f30:	2b00      	cmp	r3, #0
1a003f32:	d0e6      	beq.n	1a003f02 <uartProcessIRQ+0x2a>
         (*rxIsrCallbackUART2)(rxIsrCallbackUART2Params);
1a003f34:	4a13      	ldr	r2, [pc, #76]	; (1a003f84 <uartProcessIRQ+0xac>)
1a003f36:	6810      	ldr	r0, [r2, #0]
1a003f38:	4798      	blx	r3
1a003f3a:	e7e2      	b.n	1a003f02 <uartProcessIRQ+0x2a>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a003f3c:	4b12      	ldr	r3, [pc, #72]	; (1a003f88 <uartProcessIRQ+0xb0>)
1a003f3e:	681b      	ldr	r3, [r3, #0]
1a003f40:	2b00      	cmp	r3, #0
1a003f42:	d0e0      	beq.n	1a003f06 <uartProcessIRQ+0x2e>
         (*rxIsrCallbackUART3)(rxIsrCallbackUART3Params);
1a003f44:	4a11      	ldr	r2, [pc, #68]	; (1a003f8c <uartProcessIRQ+0xb4>)
1a003f46:	6810      	ldr	r0, [r2, #0]
1a003f48:	4798      	blx	r3
1a003f4a:	e7dc      	b.n	1a003f06 <uartProcessIRQ+0x2e>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003f4c:	4b10      	ldr	r3, [pc, #64]	; (1a003f90 <uartProcessIRQ+0xb8>)
1a003f4e:	681b      	ldr	r3, [r3, #0]
1a003f50:	2b00      	cmp	r3, #0
1a003f52:	d0e8      	beq.n	1a003f26 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART2)(txIsrCallbackUART2Params);
1a003f54:	4a0f      	ldr	r2, [pc, #60]	; (1a003f94 <uartProcessIRQ+0xbc>)
1a003f56:	6810      	ldr	r0, [r2, #0]
1a003f58:	4798      	blx	r3
1a003f5a:	e7e4      	b.n	1a003f26 <uartProcessIRQ+0x4e>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003f5c:	4b0e      	ldr	r3, [pc, #56]	; (1a003f98 <uartProcessIRQ+0xc0>)
1a003f5e:	681b      	ldr	r3, [r3, #0]
1a003f60:	2b00      	cmp	r3, #0
1a003f62:	d0e2      	beq.n	1a003f2a <uartProcessIRQ+0x52>
         (*txIsrCallbackUART3)(txIsrCallbackUART3Params);
1a003f64:	4a0d      	ldr	r2, [pc, #52]	; (1a003f9c <uartProcessIRQ+0xc4>)
1a003f66:	6810      	ldr	r0, [r2, #0]
1a003f68:	4798      	blx	r3
}
1a003f6a:	e7de      	b.n	1a003f2a <uartProcessIRQ+0x52>
1a003f6c:	1a00a804 	.word	0x1a00a804
1a003f70:	100078c8 	.word	0x100078c8
1a003f74:	100078cc 	.word	0x100078cc
1a003f78:	100078e0 	.word	0x100078e0
1a003f7c:	100078e4 	.word	0x100078e4
1a003f80:	100078d0 	.word	0x100078d0
1a003f84:	100078d4 	.word	0x100078d4
1a003f88:	100078d8 	.word	0x100078d8
1a003f8c:	100078dc 	.word	0x100078dc
1a003f90:	100078e8 	.word	0x100078e8
1a003f94:	100078ec 	.word	0x100078ec
1a003f98:	100078f0 	.word	0x100078f0
1a003f9c:	100078f4 	.word	0x100078f4

1a003fa0 <uartInterrupt>:
   if( enable ) {
1a003fa0:	b341      	cbz	r1, 1a003ff4 <uartInterrupt+0x54>
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, mas baja prioridad)
1a003fa2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a003fa6:	009a      	lsls	r2, r3, #2
1a003fa8:	4b1e      	ldr	r3, [pc, #120]	; (1a004024 <uartInterrupt+0x84>)
1a003faa:	4413      	add	r3, r2
1a003fac:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003fb0:	2b00      	cmp	r3, #0
1a003fb2:	db18      	blt.n	1a003fe6 <uartInterrupt+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a003fb4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a003fb8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a003fbc:	22a0      	movs	r2, #160	; 0xa0
1a003fbe:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a003fc2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003fc6:	0082      	lsls	r2, r0, #2
1a003fc8:	4b16      	ldr	r3, [pc, #88]	; (1a004024 <uartInterrupt+0x84>)
1a003fca:	4413      	add	r3, r2
1a003fcc:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003fd0:	2b00      	cmp	r3, #0
1a003fd2:	db25      	blt.n	1a004020 <uartInterrupt+0x80>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a003fd4:	f003 011f 	and.w	r1, r3, #31
1a003fd8:	095b      	lsrs	r3, r3, #5
1a003fda:	2201      	movs	r2, #1
1a003fdc:	408a      	lsls	r2, r1
1a003fde:	4912      	ldr	r1, [pc, #72]	; (1a004028 <uartInterrupt+0x88>)
1a003fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a003fe4:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a003fe6:	f003 030f 	and.w	r3, r3, #15
1a003fea:	4a10      	ldr	r2, [pc, #64]	; (1a00402c <uartInterrupt+0x8c>)
1a003fec:	441a      	add	r2, r3
1a003fee:	23a0      	movs	r3, #160	; 0xa0
1a003ff0:	7613      	strb	r3, [r2, #24]
1a003ff2:	e7e6      	b.n	1a003fc2 <uartInterrupt+0x22>
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a003ff4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003ff8:	0082      	lsls	r2, r0, #2
1a003ffa:	4b0a      	ldr	r3, [pc, #40]	; (1a004024 <uartInterrupt+0x84>)
1a003ffc:	4413      	add	r3, r2
1a003ffe:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a004002:	2b00      	cmp	r3, #0
1a004004:	db0c      	blt.n	1a004020 <uartInterrupt+0x80>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a004006:	f003 011f 	and.w	r1, r3, #31
1a00400a:	095b      	lsrs	r3, r3, #5
1a00400c:	2201      	movs	r2, #1
1a00400e:	408a      	lsls	r2, r1
1a004010:	3320      	adds	r3, #32
1a004012:	4905      	ldr	r1, [pc, #20]	; (1a004028 <uartInterrupt+0x88>)
1a004014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a004018:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a00401c:	f3bf 8f6f 	isb	sy
}
1a004020:	4770      	bx	lr
1a004022:	bf00      	nop
1a004024:	1a00a804 	.word	0x1a00a804
1a004028:	e000e100 	.word	0xe000e100
1a00402c:	e000ecfc 	.word	0xe000ecfc

1a004030 <uartCallbackSet>:
{   
1a004030:	b410      	push	{r4}
   switch(event){
1a004032:	b161      	cbz	r1, 1a00404e <uartCallbackSet+0x1e>
1a004034:	2901      	cmp	r1, #1
1a004036:	d11c      	bne.n	1a004072 <uartCallbackSet+0x42>
         if( callbackFunc != 0 ) {
1a004038:	b1da      	cbz	r2, 1a004072 <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a00403a:	2801      	cmp	r0, #1
1a00403c:	d92c      	bls.n	1a004098 <uartCallbackSet+0x68>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a00403e:	1ec1      	subs	r1, r0, #3
1a004040:	b2c9      	uxtb	r1, r1
1a004042:	2901      	cmp	r1, #1
1a004044:	d92d      	bls.n	1a0040a2 <uartCallbackSet+0x72>
            if( uart == UART_232 ){
1a004046:	2805      	cmp	r0, #5
1a004048:	d030      	beq.n	1a0040ac <uartCallbackSet+0x7c>
         intMask = UART_IER_THREINT;
1a00404a:	2302      	movs	r3, #2
1a00404c:	e009      	b.n	1a004062 <uartCallbackSet+0x32>
         if( callbackFunc != 0 ) {
1a00404e:	b182      	cbz	r2, 1a004072 <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a004050:	2801      	cmp	r0, #1
1a004052:	d911      	bls.n	1a004078 <uartCallbackSet+0x48>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a004054:	1ec1      	subs	r1, r0, #3
1a004056:	b2c9      	uxtb	r1, r1
1a004058:	2901      	cmp	r1, #1
1a00405a:	d912      	bls.n	1a004082 <uartCallbackSet+0x52>
            if( uart == UART_232 ){
1a00405c:	2805      	cmp	r0, #5
1a00405e:	d015      	beq.n	1a00408c <uartCallbackSet+0x5c>
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a004060:	2305      	movs	r3, #5
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a004062:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004066:	0082      	lsls	r2, r0, #2
1a004068:	4913      	ldr	r1, [pc, #76]	; (1a0040b8 <uartCallbackSet+0x88>)
1a00406a:	588a      	ldr	r2, [r1, r2]
	pUART->IER |= intMask;
1a00406c:	6851      	ldr	r1, [r2, #4]
1a00406e:	430b      	orrs	r3, r1
1a004070:	6053      	str	r3, [r2, #4]
}
1a004072:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004076:	4770      	bx	lr
               rxIsrCallbackUART0 = callbackFunc;
1a004078:	4910      	ldr	r1, [pc, #64]	; (1a0040bc <uartCallbackSet+0x8c>)
1a00407a:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART0Params = callbackParam;
1a00407c:	4910      	ldr	r1, [pc, #64]	; (1a0040c0 <uartCallbackSet+0x90>)
1a00407e:	600b      	str	r3, [r1, #0]
1a004080:	e7e8      	b.n	1a004054 <uartCallbackSet+0x24>
               rxIsrCallbackUART2 = callbackFunc;
1a004082:	4910      	ldr	r1, [pc, #64]	; (1a0040c4 <uartCallbackSet+0x94>)
1a004084:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART2Params = callbackParam;
1a004086:	4910      	ldr	r1, [pc, #64]	; (1a0040c8 <uartCallbackSet+0x98>)
1a004088:	600b      	str	r3, [r1, #0]
1a00408a:	e7e7      	b.n	1a00405c <uartCallbackSet+0x2c>
               rxIsrCallbackUART3 = callbackFunc;
1a00408c:	490f      	ldr	r1, [pc, #60]	; (1a0040cc <uartCallbackSet+0x9c>)
1a00408e:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART3Params = callbackParam;
1a004090:	4a0f      	ldr	r2, [pc, #60]	; (1a0040d0 <uartCallbackSet+0xa0>)
1a004092:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a004094:	2305      	movs	r3, #5
1a004096:	e7e4      	b.n	1a004062 <uartCallbackSet+0x32>
               txIsrCallbackUART0 = callbackFunc;
1a004098:	490e      	ldr	r1, [pc, #56]	; (1a0040d4 <uartCallbackSet+0xa4>)
1a00409a:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART0Params = callbackParam;
1a00409c:	490e      	ldr	r1, [pc, #56]	; (1a0040d8 <uartCallbackSet+0xa8>)
1a00409e:	600b      	str	r3, [r1, #0]
1a0040a0:	e7cd      	b.n	1a00403e <uartCallbackSet+0xe>
               txIsrCallbackUART2 = callbackFunc;
1a0040a2:	490e      	ldr	r1, [pc, #56]	; (1a0040dc <uartCallbackSet+0xac>)
1a0040a4:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART2Params = callbackParam;
1a0040a6:	490e      	ldr	r1, [pc, #56]	; (1a0040e0 <uartCallbackSet+0xb0>)
1a0040a8:	600b      	str	r3, [r1, #0]
1a0040aa:	e7cc      	b.n	1a004046 <uartCallbackSet+0x16>
               txIsrCallbackUART3 = callbackFunc;
1a0040ac:	490d      	ldr	r1, [pc, #52]	; (1a0040e4 <uartCallbackSet+0xb4>)
1a0040ae:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART3Params = callbackParam;
1a0040b0:	4a0d      	ldr	r2, [pc, #52]	; (1a0040e8 <uartCallbackSet+0xb8>)
1a0040b2:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_THREINT;
1a0040b4:	2302      	movs	r3, #2
1a0040b6:	e7d4      	b.n	1a004062 <uartCallbackSet+0x32>
1a0040b8:	1a00a804 	.word	0x1a00a804
1a0040bc:	100078c8 	.word	0x100078c8
1a0040c0:	100078cc 	.word	0x100078cc
1a0040c4:	100078d0 	.word	0x100078d0
1a0040c8:	100078d4 	.word	0x100078d4
1a0040cc:	100078d8 	.word	0x100078d8
1a0040d0:	100078dc 	.word	0x100078dc
1a0040d4:	100078e0 	.word	0x100078e0
1a0040d8:	100078e4 	.word	0x100078e4
1a0040dc:	100078e8 	.word	0x100078e8
1a0040e0:	100078ec 	.word	0x100078ec
1a0040e4:	100078f0 	.word	0x100078f0
1a0040e8:	100078f4 	.word	0x100078f4

1a0040ec <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0040ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0040f0:	0083      	lsls	r3, r0, #2
1a0040f2:	4a03      	ldr	r2, [pc, #12]	; (1a004100 <uartTxReady+0x14>)
1a0040f4:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a0040f6:	6958      	ldr	r0, [r3, #20]
}
1a0040f8:	f000 0020 	and.w	r0, r0, #32
1a0040fc:	4770      	bx	lr
1a0040fe:	bf00      	nop
1a004100:	1a00a804 	.word	0x1a00a804

1a004104 <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a004104:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004108:	0083      	lsls	r3, r0, #2
1a00410a:	4a02      	ldr	r2, [pc, #8]	; (1a004114 <uartRxRead+0x10>)
1a00410c:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00410e:	6818      	ldr	r0, [r3, #0]
}
1a004110:	b2c0      	uxtb	r0, r0
1a004112:	4770      	bx	lr
1a004114:	1a00a804 	.word	0x1a00a804

1a004118 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a004118:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00411c:	0083      	lsls	r3, r0, #2
1a00411e:	4a02      	ldr	r2, [pc, #8]	; (1a004128 <uartTxWrite+0x10>)
1a004120:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a004122:	6019      	str	r1, [r3, #0]
}
1a004124:	4770      	bx	lr
1a004126:	bf00      	nop
1a004128:	1a00a804 	.word	0x1a00a804

1a00412c <uartInit>:
{
1a00412c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004130:	4680      	mov	r8, r0
1a004132:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a004134:	4c19      	ldr	r4, [pc, #100]	; (1a00419c <uartInit+0x70>)
1a004136:	0045      	lsls	r5, r0, #1
1a004138:	182a      	adds	r2, r5, r0
1a00413a:	0093      	lsls	r3, r2, #2
1a00413c:	18e6      	adds	r6, r4, r3
1a00413e:	58e7      	ldr	r7, [r4, r3]
1a004140:	4638      	mov	r0, r7
1a004142:	f7ff f90b 	bl	1a00335c <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a004146:	4649      	mov	r1, r9
1a004148:	4638      	mov	r0, r7
1a00414a:	f7ff f931 	bl	1a0033b0 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a00414e:	2307      	movs	r3, #7
1a004150:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a004152:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a004154:	2301      	movs	r3, #1
1a004156:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a004158:	7930      	ldrb	r0, [r6, #4]
1a00415a:	7973      	ldrb	r3, [r6, #5]
1a00415c:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00415e:	f042 0218 	orr.w	r2, r2, #24
1a004162:	490f      	ldr	r1, [pc, #60]	; (1a0041a0 <uartInit+0x74>)
1a004164:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a004168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a00416c:	79f0      	ldrb	r0, [r6, #7]
1a00416e:	7a33      	ldrb	r3, [r6, #8]
1a004170:	7a72      	ldrb	r2, [r6, #9]
1a004172:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a004176:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00417a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a00417e:	f1b8 0f01 	cmp.w	r8, #1
1a004182:	d001      	beq.n	1a004188 <uartInit+0x5c>
}
1a004184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a004188:	4a06      	ldr	r2, [pc, #24]	; (1a0041a4 <uartInit+0x78>)
1a00418a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a00418c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a004190:	64d3      	str	r3, [r2, #76]	; 0x4c
1a004192:	221a      	movs	r2, #26
1a004194:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a004198:	e7f4      	b.n	1a004184 <uartInit+0x58>
1a00419a:	bf00      	nop
1a00419c:	1a00a804 	.word	0x1a00a804
1a0041a0:	40086000 	.word	0x40086000
1a0041a4:	40081000 	.word	0x40081000

1a0041a8 <uartWriteByte>:
{
1a0041a8:	b538      	push	{r3, r4, r5, lr}
1a0041aa:	4604      	mov	r4, r0
1a0041ac:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a0041ae:	4620      	mov	r0, r4
1a0041b0:	f7ff ff9c 	bl	1a0040ec <uartTxReady>
1a0041b4:	2800      	cmp	r0, #0
1a0041b6:	d0fa      	beq.n	1a0041ae <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a0041b8:	4629      	mov	r1, r5
1a0041ba:	4620      	mov	r0, r4
1a0041bc:	f7ff ffac 	bl	1a004118 <uartTxWrite>
}
1a0041c0:	bd38      	pop	{r3, r4, r5, pc}

1a0041c2 <uartWriteString>:
{
1a0041c2:	b538      	push	{r3, r4, r5, lr}
1a0041c4:	4605      	mov	r5, r0
1a0041c6:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a0041c8:	e003      	b.n	1a0041d2 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a0041ca:	4628      	mov	r0, r5
1a0041cc:	f7ff ffec 	bl	1a0041a8 <uartWriteByte>
      str++;
1a0041d0:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a0041d2:	7821      	ldrb	r1, [r4, #0]
1a0041d4:	2900      	cmp	r1, #0
1a0041d6:	d1f8      	bne.n	1a0041ca <uartWriteString+0x8>
}
1a0041d8:	bd38      	pop	{r3, r4, r5, pc}

1a0041da <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a0041da:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a0041dc:	2003      	movs	r0, #3
1a0041de:	f7ff fe7b 	bl	1a003ed8 <uartProcessIRQ>
}
1a0041e2:	bd08      	pop	{r3, pc}

1a0041e4 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a0041e4:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a0041e6:	2005      	movs	r0, #5
1a0041e8:	f7ff fe76 	bl	1a003ed8 <uartProcessIRQ>
}
1a0041ec:	bd08      	pop	{r3, pc}

1a0041ee <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a0041ee:	e7fe      	b.n	1a0041ee <errorOcurred>

1a0041f0 <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a0041f0:	4770      	bx	lr
1a0041f2:	Address 0x000000001a0041f2 is out of bounds.


1a0041f4 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a0041f4:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0041f6:	2400      	movs	r4, #0
1a0041f8:	e001      	b.n	1a0041fe <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0041fa:	3401      	adds	r4, #1
1a0041fc:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0041fe:	2c03      	cmp	r4, #3
1a004200:	d812      	bhi.n	1a004228 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a004202:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a004204:	4b09      	ldr	r3, [pc, #36]	; (1a00422c <TIMER0_IRQHandler+0x38>)
1a004206:	681a      	ldr	r2, [r3, #0]
1a004208:	f004 010f 	and.w	r1, r4, #15
1a00420c:	2301      	movs	r3, #1
1a00420e:	408b      	lsls	r3, r1
1a004210:	421a      	tst	r2, r3
1a004212:	d0f2      	beq.n	1a0041fa <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a004214:	4b06      	ldr	r3, [pc, #24]	; (1a004230 <TIMER0_IRQHandler+0x3c>)
1a004216:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a00421a:	2000      	movs	r0, #0
1a00421c:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00421e:	2301      	movs	r3, #1
1a004220:	40ab      	lsls	r3, r5
1a004222:	4a02      	ldr	r2, [pc, #8]	; (1a00422c <TIMER0_IRQHandler+0x38>)
1a004224:	6013      	str	r3, [r2, #0]
1a004226:	e7e8      	b.n	1a0041fa <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a004228:	bd38      	pop	{r3, r4, r5, pc}
1a00422a:	bf00      	nop
1a00422c:	40084000 	.word	0x40084000
1a004230:	10000044 	.word	0x10000044

1a004234 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a004234:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004236:	2400      	movs	r4, #0
1a004238:	e001      	b.n	1a00423e <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00423a:	3401      	adds	r4, #1
1a00423c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00423e:	2c03      	cmp	r4, #3
1a004240:	d813      	bhi.n	1a00426a <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a004242:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a004244:	4b09      	ldr	r3, [pc, #36]	; (1a00426c <TIMER1_IRQHandler+0x38>)
1a004246:	681a      	ldr	r2, [r3, #0]
1a004248:	f004 010f 	and.w	r1, r4, #15
1a00424c:	2301      	movs	r3, #1
1a00424e:	408b      	lsls	r3, r1
1a004250:	421a      	tst	r2, r3
1a004252:	d0f2      	beq.n	1a00423a <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a004254:	1d23      	adds	r3, r4, #4
1a004256:	4a06      	ldr	r2, [pc, #24]	; (1a004270 <TIMER1_IRQHandler+0x3c>)
1a004258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00425c:	2000      	movs	r0, #0
1a00425e:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a004260:	2301      	movs	r3, #1
1a004262:	40ab      	lsls	r3, r5
1a004264:	4a01      	ldr	r2, [pc, #4]	; (1a00426c <TIMER1_IRQHandler+0x38>)
1a004266:	6013      	str	r3, [r2, #0]
1a004268:	e7e7      	b.n	1a00423a <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a00426a:	bd38      	pop	{r3, r4, r5, pc}
1a00426c:	40085000 	.word	0x40085000
1a004270:	10000044 	.word	0x10000044

1a004274 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a004274:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004276:	2400      	movs	r4, #0
1a004278:	e001      	b.n	1a00427e <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00427a:	3401      	adds	r4, #1
1a00427c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00427e:	2c03      	cmp	r4, #3
1a004280:	d814      	bhi.n	1a0042ac <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a004282:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a004284:	4b0a      	ldr	r3, [pc, #40]	; (1a0042b0 <TIMER2_IRQHandler+0x3c>)
1a004286:	681a      	ldr	r2, [r3, #0]
1a004288:	f004 010f 	and.w	r1, r4, #15
1a00428c:	2301      	movs	r3, #1
1a00428e:	408b      	lsls	r3, r1
1a004290:	421a      	tst	r2, r3
1a004292:	d0f2      	beq.n	1a00427a <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a004294:	f104 0308 	add.w	r3, r4, #8
1a004298:	4a06      	ldr	r2, [pc, #24]	; (1a0042b4 <TIMER2_IRQHandler+0x40>)
1a00429a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00429e:	2000      	movs	r0, #0
1a0042a0:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0042a2:	2301      	movs	r3, #1
1a0042a4:	40ab      	lsls	r3, r5
1a0042a6:	4a02      	ldr	r2, [pc, #8]	; (1a0042b0 <TIMER2_IRQHandler+0x3c>)
1a0042a8:	6013      	str	r3, [r2, #0]
1a0042aa:	e7e6      	b.n	1a00427a <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0042ac:	bd38      	pop	{r3, r4, r5, pc}
1a0042ae:	bf00      	nop
1a0042b0:	400c3000 	.word	0x400c3000
1a0042b4:	10000044 	.word	0x10000044

1a0042b8 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0042b8:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0042ba:	2400      	movs	r4, #0
1a0042bc:	e001      	b.n	1a0042c2 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0042be:	3401      	adds	r4, #1
1a0042c0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0042c2:	2c03      	cmp	r4, #3
1a0042c4:	d814      	bhi.n	1a0042f0 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0042c6:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0042c8:	4b0a      	ldr	r3, [pc, #40]	; (1a0042f4 <TIMER3_IRQHandler+0x3c>)
1a0042ca:	681a      	ldr	r2, [r3, #0]
1a0042cc:	f004 010f 	and.w	r1, r4, #15
1a0042d0:	2301      	movs	r3, #1
1a0042d2:	408b      	lsls	r3, r1
1a0042d4:	421a      	tst	r2, r3
1a0042d6:	d0f2      	beq.n	1a0042be <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0042d8:	f104 030c 	add.w	r3, r4, #12
1a0042dc:	4a06      	ldr	r2, [pc, #24]	; (1a0042f8 <TIMER3_IRQHandler+0x40>)
1a0042de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0042e2:	2000      	movs	r0, #0
1a0042e4:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0042e6:	2301      	movs	r3, #1
1a0042e8:	40ab      	lsls	r3, r5
1a0042ea:	4a02      	ldr	r2, [pc, #8]	; (1a0042f4 <TIMER3_IRQHandler+0x3c>)
1a0042ec:	6013      	str	r3, [r2, #0]
1a0042ee:	e7e6      	b.n	1a0042be <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0042f0:	bd38      	pop	{r3, r4, r5, pc}
1a0042f2:	bf00      	nop
1a0042f4:	400c4000 	.word	0x400c4000
1a0042f8:	10000044 	.word	0x10000044

1a0042fc <adcInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  ADC_ENABLE, ADC_DISABLE
 * @return: none
*/
void adcInit( adcInit_t config )
{
1a0042fc:	b530      	push	{r4, r5, lr}
1a0042fe:	b083      	sub	sp, #12
   T_FIL3  ---- 7   ADC0_0 (ANALOG_SEL)
   T_COL1  ---- 132 ADC0_4 (ANALOG_SEL)
   ENET_MDC --- 140 ADC1_6 (ANALOG_SEL)
   */
   
   switch(config) {
1a004300:	b118      	cbz	r0, 1a00430a <adcInit+0xe>
1a004302:	2801      	cmp	r0, #1
1a004304:	d04a      	beq.n	1a00439c <adcInit+0xa0>
         /* Disable ADC peripheral */
         Chip_ADC_DeInit( LPC_ADC0 );
         break;
      }

}
1a004306:	b003      	add	sp, #12
1a004308:	bd30      	pop	{r4, r5, pc}
         ADC_CLOCK_SETUP_T ADCSetup = {
1a00430a:	4b26      	ldr	r3, [pc, #152]	; (1a0043a4 <adcInit+0xa8>)
1a00430c:	466d      	mov	r5, sp
1a00430e:	e893 0003 	ldmia.w	r3, {r0, r1}
1a004312:	e885 0003 	stmia.w	r5, {r0, r1}
         Chip_ADC_Init( LPC_ADC0, &ADCSetup );
1a004316:	4c24      	ldr	r4, [pc, #144]	; (1a0043a8 <adcInit+0xac>)
1a004318:	4629      	mov	r1, r5
1a00431a:	4620      	mov	r0, r4
1a00431c:	f7ff f912 	bl	1a003544 <Chip_ADC_Init>
         Chip_ADC_SetBurstCmd( LPC_ADC0, DISABLE );
1a004320:	2100      	movs	r1, #0
1a004322:	4620      	mov	r0, r4
1a004324:	f7ff f9ab 	bl	1a00367e <Chip_ADC_SetBurstCmd>
         Chip_ADC_SetSampleRate( LPC_ADC0, &ADCSetup, ADC_MAX_SAMPLE_RATE/2 );
1a004328:	4a20      	ldr	r2, [pc, #128]	; (1a0043ac <adcInit+0xb0>)
1a00432a:	4629      	mov	r1, r5
1a00432c:	4620      	mov	r0, r4
1a00432e:	f7ff f973 	bl	1a003618 <Chip_ADC_SetSampleRate>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH1, DISABLE );
1a004332:	2200      	movs	r2, #0
1a004334:	2101      	movs	r1, #1
1a004336:	4620      	mov	r0, r4
1a004338:	f7ff f98d 	bl	1a003656 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH1, DISABLE );
1a00433c:	2200      	movs	r2, #0
1a00433e:	2101      	movs	r1, #1
1a004340:	4620      	mov	r0, r4
1a004342:	f7ff f949 	bl	1a0035d8 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH2, DISABLE );
1a004346:	2200      	movs	r2, #0
1a004348:	2102      	movs	r1, #2
1a00434a:	4620      	mov	r0, r4
1a00434c:	f7ff f983 	bl	1a003656 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH2, DISABLE );
1a004350:	2200      	movs	r2, #0
1a004352:	2102      	movs	r1, #2
1a004354:	4620      	mov	r0, r4
1a004356:	f7ff f93f 	bl	1a0035d8 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH3, DISABLE );
1a00435a:	2200      	movs	r2, #0
1a00435c:	2103      	movs	r1, #3
1a00435e:	4620      	mov	r0, r4
1a004360:	f7ff f979 	bl	1a003656 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH3, DISABLE );
1a004364:	2200      	movs	r2, #0
1a004366:	2103      	movs	r1, #3
1a004368:	4620      	mov	r0, r4
1a00436a:	f7ff f935 	bl	1a0035d8 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH4, DISABLE );
1a00436e:	2200      	movs	r2, #0
1a004370:	2104      	movs	r1, #4
1a004372:	4620      	mov	r0, r4
1a004374:	f7ff f96f 	bl	1a003656 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH4, DISABLE );
1a004378:	2200      	movs	r2, #0
1a00437a:	2104      	movs	r1, #4
1a00437c:	4620      	mov	r0, r4
1a00437e:	f7ff f92b 	bl	1a0035d8 <Chip_ADC_Int_SetChannelCmd>
	LPC_SCU->ENAIO[ADC_ID] |= 1UL << channel;
1a004382:	4a0b      	ldr	r2, [pc, #44]	; (1a0043b0 <adcInit+0xb4>)
1a004384:	f8d2 3c88 	ldr.w	r3, [r2, #3208]	; 0xc88
1a004388:	f043 0310 	orr.w	r3, r3, #16
1a00438c:	f8c2 3c88 	str.w	r3, [r2, #3208]	; 0xc88
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH5, DISABLE ); // Revisar codigo
1a004390:	2200      	movs	r2, #0
1a004392:	2105      	movs	r1, #5
1a004394:	4620      	mov	r0, r4
1a004396:	f7ff f91f 	bl	1a0035d8 <Chip_ADC_Int_SetChannelCmd>
      break;
1a00439a:	e7b4      	b.n	1a004306 <adcInit+0xa>
         Chip_ADC_DeInit( LPC_ADC0 );
1a00439c:	4802      	ldr	r0, [pc, #8]	; (1a0043a8 <adcInit+0xac>)
1a00439e:	f7ff f8f1 	bl	1a003584 <Chip_ADC_DeInit>
}
1a0043a2:	e7b0      	b.n	1a004306 <adcInit+0xa>
1a0043a4:	1a00a84c 	.word	0x1a00a84c
1a0043a8:	400e3000 	.word	0x400e3000
1a0043ac:	00030d40 	.word	0x00030d40
1a0043b0:	40086000 	.word	0x40086000

1a0043b4 <adcRead>:
 * @brief   Get the value of one ADC channel. Mode: BLOCKING
 * @param   AI0 ... AIn
 * @return  analog value
 */
uint16_t adcRead( adcMap_t analogInput )
{
1a0043b4:	b570      	push	{r4, r5, r6, lr}
1a0043b6:	b082      	sub	sp, #8
   uint8_t lpcAdcChannel = analogInput + 1;
1a0043b8:	3001      	adds	r0, #1
1a0043ba:	b2c4      	uxtb	r4, r0
   uint16_t analogValue = 0;
1a0043bc:	2600      	movs	r6, #0
1a0043be:	f8ad 6006 	strh.w	r6, [sp, #6]

   // Enable channel
   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
1a0043c2:	4d11      	ldr	r5, [pc, #68]	; (1a004408 <adcRead+0x54>)
1a0043c4:	2201      	movs	r2, #1
1a0043c6:	4621      	mov	r1, r4
1a0043c8:	4628      	mov	r0, r5
1a0043ca:	f7ff f944 	bl	1a003656 <Chip_ADC_EnableChannel>

   // Start conversion
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
1a0043ce:	4632      	mov	r2, r6
1a0043d0:	2101      	movs	r1, #1
1a0043d2:	4628      	mov	r0, r5
1a0043d4:	f7ff f910 	bl	1a0035f8 <Chip_ADC_SetStartMode>

   // Wait for conversion complete
   while(
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
1a0043d8:	2200      	movs	r2, #0
1a0043da:	4621      	mov	r1, r4
1a0043dc:	480a      	ldr	r0, [pc, #40]	; (1a004408 <adcRead+0x54>)
1a0043de:	f7ff f8e0 	bl	1a0035a2 <Chip_ADC_ReadStatus>
   while(
1a0043e2:	2801      	cmp	r0, #1
1a0043e4:	d1f8      	bne.n	1a0043d8 <adcRead+0x24>
   );

   // Enable Read value
   Chip_ADC_ReadValue( LPC_ADC0, lpcAdcChannel, &analogValue );
1a0043e6:	4d08      	ldr	r5, [pc, #32]	; (1a004408 <adcRead+0x54>)
1a0043e8:	f10d 0206 	add.w	r2, sp, #6
1a0043ec:	4621      	mov	r1, r4
1a0043ee:	4628      	mov	r0, r5
1a0043f0:	f7ff f8d3 	bl	1a00359a <Chip_ADC_ReadValue>

   // Disable channel
   Chip_ADC_EnableChannel( LPC_ADC0, lpcAdcChannel, DISABLE );
1a0043f4:	2200      	movs	r2, #0
1a0043f6:	4621      	mov	r1, r4
1a0043f8:	4628      	mov	r0, r5
1a0043fa:	f7ff f92c 	bl	1a003656 <Chip_ADC_EnableChannel>

   return analogValue;
}
1a0043fe:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a004402:	b002      	add	sp, #8
1a004404:	bd70      	pop	{r4, r5, r6, pc}
1a004406:	bf00      	nop
1a004408:	400e3000 	.word	0x400e3000

1a00440c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a00440c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00440e:	4d0b      	ldr	r5, [pc, #44]	; (1a00443c <gpioObtainPinInit+0x30>)
1a004410:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a004414:	182c      	adds	r4, r5, r0
1a004416:	5628      	ldrsb	r0, [r5, r0]
1a004418:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00441a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00441e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a004420:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a004424:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a004426:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00442a:	9b02      	ldr	r3, [sp, #8]
1a00442c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00442e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a004432:	9b03      	ldr	r3, [sp, #12]
1a004434:	701a      	strb	r2, [r3, #0]
}
1a004436:	bc30      	pop	{r4, r5}
1a004438:	4770      	bx	lr
1a00443a:	bf00      	nop
1a00443c:	1a00a854 	.word	0x1a00a854

1a004440 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a004440:	f110 0f02 	cmn.w	r0, #2
1a004444:	f000 80c7 	beq.w	1a0045d6 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a004448:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00444c:	f000 80c5 	beq.w	1a0045da <gpioInit+0x19a>
{
1a004450:	b570      	push	{r4, r5, r6, lr}
1a004452:	b084      	sub	sp, #16
1a004454:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a004456:	2300      	movs	r3, #0
1a004458:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00445c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004460:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a004464:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a004468:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00446c:	f10d 030b 	add.w	r3, sp, #11
1a004470:	9301      	str	r3, [sp, #4]
1a004472:	ab03      	add	r3, sp, #12
1a004474:	9300      	str	r3, [sp, #0]
1a004476:	f10d 030d 	add.w	r3, sp, #13
1a00447a:	f10d 020e 	add.w	r2, sp, #14
1a00447e:	f10d 010f 	add.w	r1, sp, #15
1a004482:	f7ff ffc3 	bl	1a00440c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a004486:	2c05      	cmp	r4, #5
1a004488:	f200 80a9 	bhi.w	1a0045de <gpioInit+0x19e>
1a00448c:	e8df f004 	tbb	[pc, r4]
1a004490:	45278109 	.word	0x45278109
1a004494:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a004496:	4853      	ldr	r0, [pc, #332]	; (1a0045e4 <gpioInit+0x1a4>)
1a004498:	f7ff fc98 	bl	1a003dcc <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a00449c:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00449e:	b004      	add	sp, #16
1a0044a0:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0044a2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0044a6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0044aa:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0044ae:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0044b2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0044b6:	494c      	ldr	r1, [pc, #304]	; (1a0045e8 <gpioInit+0x1a8>)
1a0044b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0044bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0044c0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0044c4:	2001      	movs	r0, #1
1a0044c6:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0044ca:	4c46      	ldr	r4, [pc, #280]	; (1a0045e4 <gpioInit+0x1a4>)
1a0044cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0044d0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0044d4:	ea22 0201 	bic.w	r2, r2, r1
1a0044d8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0044dc:	e7df      	b.n	1a00449e <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0044de:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0044e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0044e6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0044ea:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0044ee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0044f2:	493d      	ldr	r1, [pc, #244]	; (1a0045e8 <gpioInit+0x1a8>)
1a0044f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0044f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0044fc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004500:	2001      	movs	r0, #1
1a004502:	fa00 f102 	lsl.w	r1, r0, r2
1a004506:	4c37      	ldr	r4, [pc, #220]	; (1a0045e4 <gpioInit+0x1a4>)
1a004508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00450c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004510:	ea22 0201 	bic.w	r2, r2, r1
1a004514:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004518:	e7c1      	b.n	1a00449e <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00451a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00451e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004522:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004526:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00452a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00452e:	492e      	ldr	r1, [pc, #184]	; (1a0045e8 <gpioInit+0x1a8>)
1a004530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004534:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004538:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00453c:	2001      	movs	r0, #1
1a00453e:	fa00 f102 	lsl.w	r1, r0, r2
1a004542:	4c28      	ldr	r4, [pc, #160]	; (1a0045e4 <gpioInit+0x1a4>)
1a004544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004548:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00454c:	ea22 0201 	bic.w	r2, r2, r1
1a004550:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004554:	e7a3      	b.n	1a00449e <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a004556:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00455a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00455e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004562:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a004566:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00456a:	491f      	ldr	r1, [pc, #124]	; (1a0045e8 <gpioInit+0x1a8>)
1a00456c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004570:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004574:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004578:	2001      	movs	r0, #1
1a00457a:	fa00 f102 	lsl.w	r1, r0, r2
1a00457e:	4c19      	ldr	r4, [pc, #100]	; (1a0045e4 <gpioInit+0x1a4>)
1a004580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004584:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004588:	ea22 0201 	bic.w	r2, r2, r1
1a00458c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004590:	e785      	b.n	1a00449e <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a004592:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004596:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00459a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00459e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0045a2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0045a6:	4910      	ldr	r1, [pc, #64]	; (1a0045e8 <gpioInit+0x1a8>)
1a0045a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0045ac:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0045b0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0045b4:	2001      	movs	r0, #1
1a0045b6:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0045ba:	4b0a      	ldr	r3, [pc, #40]	; (1a0045e4 <gpioInit+0x1a4>)
1a0045bc:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0045c0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0045c4:	4331      	orrs	r1, r6
1a0045c6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0045ca:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0045cc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0045d0:	2100      	movs	r1, #0
1a0045d2:	5499      	strb	r1, [r3, r2]
1a0045d4:	e763      	b.n	1a00449e <gpioInit+0x5e>
	  return FALSE;
1a0045d6:	2000      	movs	r0, #0
1a0045d8:	4770      	bx	lr
	  return FALSE;
1a0045da:	2000      	movs	r0, #0
}
1a0045dc:	4770      	bx	lr
      ret_val = 0;
1a0045de:	2000      	movs	r0, #0
1a0045e0:	e75d      	b.n	1a00449e <gpioInit+0x5e>
1a0045e2:	bf00      	nop
1a0045e4:	400f4000 	.word	0x400f4000
1a0045e8:	40086000 	.word	0x40086000

1a0045ec <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0045ec:	f110 0f02 	cmn.w	r0, #2
1a0045f0:	d02d      	beq.n	1a00464e <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a0045f2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0045f6:	d02c      	beq.n	1a004652 <gpioWrite+0x66>
{
1a0045f8:	b510      	push	{r4, lr}
1a0045fa:	b084      	sub	sp, #16
1a0045fc:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0045fe:	2300      	movs	r3, #0
1a004600:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a004604:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004608:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00460c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a004610:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a004614:	f10d 030b 	add.w	r3, sp, #11
1a004618:	9301      	str	r3, [sp, #4]
1a00461a:	ab03      	add	r3, sp, #12
1a00461c:	9300      	str	r3, [sp, #0]
1a00461e:	f10d 030d 	add.w	r3, sp, #13
1a004622:	f10d 020e 	add.w	r2, sp, #14
1a004626:	f10d 010f 	add.w	r1, sp, #15
1a00462a:	f7ff feef 	bl	1a00440c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00462e:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004632:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a004636:	1c21      	adds	r1, r4, #0
1a004638:	bf18      	it	ne
1a00463a:	2101      	movne	r1, #1
1a00463c:	015b      	lsls	r3, r3, #5
1a00463e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a004642:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a004646:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a004648:	2001      	movs	r0, #1
}
1a00464a:	b004      	add	sp, #16
1a00464c:	bd10      	pop	{r4, pc}
	  return FALSE;
1a00464e:	2000      	movs	r0, #0
1a004650:	4770      	bx	lr
	  return FALSE;
1a004652:	2000      	movs	r0, #0
}
1a004654:	4770      	bx	lr

1a004656 <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a004656:	f110 0f02 	cmn.w	r0, #2
1a00465a:	d02c      	beq.n	1a0046b6 <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a00465c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004660:	d02b      	beq.n	1a0046ba <gpioRead+0x64>
{
1a004662:	b500      	push	{lr}
1a004664:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a004666:	2300      	movs	r3, #0
1a004668:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00466c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004670:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a004674:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a004678:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00467c:	f10d 030b 	add.w	r3, sp, #11
1a004680:	9301      	str	r3, [sp, #4]
1a004682:	ab03      	add	r3, sp, #12
1a004684:	9300      	str	r3, [sp, #0]
1a004686:	f10d 030d 	add.w	r3, sp, #13
1a00468a:	f10d 020e 	add.w	r2, sp, #14
1a00468e:	f10d 010f 	add.w	r1, sp, #15
1a004692:	f7ff febb 	bl	1a00440c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a004696:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a00469a:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a00469e:	015b      	lsls	r3, r3, #5
1a0046a0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0046a4:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0046a8:	5c98      	ldrb	r0, [r3, r2]
1a0046aa:	3000      	adds	r0, #0
1a0046ac:	bf18      	it	ne
1a0046ae:	2001      	movne	r0, #1

   return ret_val;
}
1a0046b0:	b005      	add	sp, #20
1a0046b2:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a0046b6:	2001      	movs	r0, #1
1a0046b8:	4770      	bx	lr
      return FALSE;
1a0046ba:	2000      	movs	r0, #0
}
1a0046bc:	4770      	bx	lr

1a0046be <gpioToggle>:
{
1a0046be:	b510      	push	{r4, lr}
1a0046c0:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a0046c2:	f7ff ffc8 	bl	1a004656 <gpioRead>
1a0046c6:	fab0 f180 	clz	r1, r0
1a0046ca:	0949      	lsrs	r1, r1, #5
1a0046cc:	4620      	mov	r0, r4
1a0046ce:	f7ff ff8d 	bl	1a0045ec <gpioWrite>
}
1a0046d2:	bd10      	pop	{r4, pc}

1a0046d4 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0046d4:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0046d6:	4b04      	ldr	r3, [pc, #16]	; (1a0046e8 <USB0_IRQHandler+0x14>)
1a0046d8:	681b      	ldr	r3, [r3, #0]
1a0046da:	681b      	ldr	r3, [r3, #0]
1a0046dc:	68db      	ldr	r3, [r3, #12]
1a0046de:	4a03      	ldr	r2, [pc, #12]	; (1a0046ec <USB0_IRQHandler+0x18>)
1a0046e0:	6810      	ldr	r0, [r2, #0]
1a0046e2:	4798      	blx	r3
}
1a0046e4:	bd08      	pop	{r3, pc}
1a0046e6:	bf00      	nop
1a0046e8:	10007a00 	.word	0x10007a00
1a0046ec:	100078f8 	.word	0x100078f8

1a0046f0 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0046f0:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0046f2:	f7ff fab7 	bl	1a003c64 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0046f6:	4b18      	ldr	r3, [pc, #96]	; (1a004758 <boardInit+0x68>)
1a0046f8:	6818      	ldr	r0, [r3, #0]
1a0046fa:	f7ff fbdf 	bl	1a003ebc <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0046fe:	2105      	movs	r1, #5
1a004700:	2000      	movs	r0, #0
1a004702:	f7ff fe9d 	bl	1a004440 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a004706:	2100      	movs	r1, #0
1a004708:	2024      	movs	r0, #36	; 0x24
1a00470a:	f7ff fe99 	bl	1a004440 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a00470e:	2100      	movs	r1, #0
1a004710:	2025      	movs	r0, #37	; 0x25
1a004712:	f7ff fe95 	bl	1a004440 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a004716:	2100      	movs	r1, #0
1a004718:	2026      	movs	r0, #38	; 0x26
1a00471a:	f7ff fe91 	bl	1a004440 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a00471e:	2100      	movs	r1, #0
1a004720:	2027      	movs	r0, #39	; 0x27
1a004722:	f7ff fe8d 	bl	1a004440 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a004726:	2101      	movs	r1, #1
1a004728:	2028      	movs	r0, #40	; 0x28
1a00472a:	f7ff fe89 	bl	1a004440 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a00472e:	2101      	movs	r1, #1
1a004730:	2029      	movs	r0, #41	; 0x29
1a004732:	f7ff fe85 	bl	1a004440 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a004736:	2101      	movs	r1, #1
1a004738:	202a      	movs	r0, #42	; 0x2a
1a00473a:	f7ff fe81 	bl	1a004440 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a00473e:	2101      	movs	r1, #1
1a004740:	202b      	movs	r0, #43	; 0x2b
1a004742:	f7ff fe7d 	bl	1a004440 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a004746:	2101      	movs	r1, #1
1a004748:	202c      	movs	r0, #44	; 0x2c
1a00474a:	f7ff fe79 	bl	1a004440 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a00474e:	2101      	movs	r1, #1
1a004750:	202d      	movs	r0, #45	; 0x2d
1a004752:	f7ff fe75 	bl	1a004440 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a004756:	bd08      	pop	{r3, pc}
1a004758:	100079fc 	.word	0x100079fc

1a00475c <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a00475c:	2301      	movs	r3, #1
1a00475e:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a004762:	4b01      	ldr	r3, [pc, #4]	; (1a004768 <clearInterrupt+0xc>)
1a004764:	6258      	str	r0, [r3, #36]	; 0x24
}
1a004766:	4770      	bx	lr
1a004768:	40087000 	.word	0x40087000

1a00476c <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a00476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a00476e:	4b12      	ldr	r3, [pc, #72]	; (1a0047b8 <serveInterrupt+0x4c>)
1a004770:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a004772:	4b12      	ldr	r3, [pc, #72]	; (1a0047bc <serveInterrupt+0x50>)
1a004774:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a004776:	2301      	movs	r3, #1
1a004778:	4083      	lsls	r3, r0
1a00477a:	420b      	tst	r3, r1
1a00477c:	d111      	bne.n	1a0047a2 <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a00477e:	4910      	ldr	r1, [pc, #64]	; (1a0047c0 <serveInterrupt+0x54>)
1a004780:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a004782:	4d10      	ldr	r5, [pc, #64]	; (1a0047c4 <serveInterrupt+0x58>)
1a004784:	0051      	lsls	r1, r2, #1
1a004786:	188f      	adds	r7, r1, r2
1a004788:	00fc      	lsls	r4, r7, #3
1a00478a:	4627      	mov	r7, r4
1a00478c:	442c      	add	r4, r5
1a00478e:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a004790:	6864      	ldr	r4, [r4, #4]
1a004792:	1b36      	subs	r6, r6, r4
1a004794:	443d      	add	r5, r7
1a004796:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a004798:	4a08      	ldr	r2, [pc, #32]	; (1a0047bc <serveInterrupt+0x50>)
1a00479a:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a00479c:	f7ff ffde 	bl	1a00475c <clearInterrupt>
}
1a0047a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0047a2:	4907      	ldr	r1, [pc, #28]	; (1a0047c0 <serveInterrupt+0x54>)
1a0047a4:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0047a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a0047aa:	00d1      	lsls	r1, r2, #3
1a0047ac:	4a05      	ldr	r2, [pc, #20]	; (1a0047c4 <serveInterrupt+0x58>)
1a0047ae:	440a      	add	r2, r1
1a0047b0:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a0047b2:	4a02      	ldr	r2, [pc, #8]	; (1a0047bc <serveInterrupt+0x50>)
1a0047b4:	61d3      	str	r3, [r2, #28]
1a0047b6:	e7f1      	b.n	1a00479c <serveInterrupt+0x30>
1a0047b8:	1a00a93c 	.word	0x1a00a93c
1a0047bc:	40087000 	.word	0x40087000
1a0047c0:	40084000 	.word	0x40084000
1a0047c4:	10000084 	.word	0x10000084

1a0047c8 <GPIO0_IRQHandler>:
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifdef SAPI_USE_INTERRUPTS
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a0047c8:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0047ca:	2000      	movs	r0, #0
1a0047cc:	f7ff ffce 	bl	1a00476c <serveInterrupt>
}
1a0047d0:	bd08      	pop	{r3, pc}

1a0047d2 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a0047d2:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0047d4:	2001      	movs	r0, #1
1a0047d6:	f7ff ffc9 	bl	1a00476c <serveInterrupt>
}
1a0047da:	bd08      	pop	{r3, pc}

1a0047dc <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a0047dc:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a0047de:	2002      	movs	r0, #2
1a0047e0:	f7ff ffc4 	bl	1a00476c <serveInterrupt>
}
1a0047e4:	bd08      	pop	{r3, pc}
1a0047e6:	Address 0x000000001a0047e6 is out of bounds.


1a0047e8 <__aeabi_drsub>:
1a0047e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a0047ec:	e002      	b.n	1a0047f4 <__adddf3>
1a0047ee:	bf00      	nop

1a0047f0 <__aeabi_dsub>:
1a0047f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a0047f4 <__adddf3>:
1a0047f4:	b530      	push	{r4, r5, lr}
1a0047f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a0047fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a0047fe:	ea94 0f05 	teq	r4, r5
1a004802:	bf08      	it	eq
1a004804:	ea90 0f02 	teqeq	r0, r2
1a004808:	bf1f      	itttt	ne
1a00480a:	ea54 0c00 	orrsne.w	ip, r4, r0
1a00480e:	ea55 0c02 	orrsne.w	ip, r5, r2
1a004812:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a004816:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00481a:	f000 80e2 	beq.w	1a0049e2 <__adddf3+0x1ee>
1a00481e:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a004822:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a004826:	bfb8      	it	lt
1a004828:	426d      	neglt	r5, r5
1a00482a:	dd0c      	ble.n	1a004846 <__adddf3+0x52>
1a00482c:	442c      	add	r4, r5
1a00482e:	ea80 0202 	eor.w	r2, r0, r2
1a004832:	ea81 0303 	eor.w	r3, r1, r3
1a004836:	ea82 0000 	eor.w	r0, r2, r0
1a00483a:	ea83 0101 	eor.w	r1, r3, r1
1a00483e:	ea80 0202 	eor.w	r2, r0, r2
1a004842:	ea81 0303 	eor.w	r3, r1, r3
1a004846:	2d36      	cmp	r5, #54	; 0x36
1a004848:	bf88      	it	hi
1a00484a:	bd30      	pophi	{r4, r5, pc}
1a00484c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a004850:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a004854:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a004858:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a00485c:	d002      	beq.n	1a004864 <__adddf3+0x70>
1a00485e:	4240      	negs	r0, r0
1a004860:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004864:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a004868:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a00486c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a004870:	d002      	beq.n	1a004878 <__adddf3+0x84>
1a004872:	4252      	negs	r2, r2
1a004874:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a004878:	ea94 0f05 	teq	r4, r5
1a00487c:	f000 80a7 	beq.w	1a0049ce <__adddf3+0x1da>
1a004880:	f1a4 0401 	sub.w	r4, r4, #1
1a004884:	f1d5 0e20 	rsbs	lr, r5, #32
1a004888:	db0d      	blt.n	1a0048a6 <__adddf3+0xb2>
1a00488a:	fa02 fc0e 	lsl.w	ip, r2, lr
1a00488e:	fa22 f205 	lsr.w	r2, r2, r5
1a004892:	1880      	adds	r0, r0, r2
1a004894:	f141 0100 	adc.w	r1, r1, #0
1a004898:	fa03 f20e 	lsl.w	r2, r3, lr
1a00489c:	1880      	adds	r0, r0, r2
1a00489e:	fa43 f305 	asr.w	r3, r3, r5
1a0048a2:	4159      	adcs	r1, r3
1a0048a4:	e00e      	b.n	1a0048c4 <__adddf3+0xd0>
1a0048a6:	f1a5 0520 	sub.w	r5, r5, #32
1a0048aa:	f10e 0e20 	add.w	lr, lr, #32
1a0048ae:	2a01      	cmp	r2, #1
1a0048b0:	fa03 fc0e 	lsl.w	ip, r3, lr
1a0048b4:	bf28      	it	cs
1a0048b6:	f04c 0c02 	orrcs.w	ip, ip, #2
1a0048ba:	fa43 f305 	asr.w	r3, r3, r5
1a0048be:	18c0      	adds	r0, r0, r3
1a0048c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a0048c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0048c8:	d507      	bpl.n	1a0048da <__adddf3+0xe6>
1a0048ca:	f04f 0e00 	mov.w	lr, #0
1a0048ce:	f1dc 0c00 	rsbs	ip, ip, #0
1a0048d2:	eb7e 0000 	sbcs.w	r0, lr, r0
1a0048d6:	eb6e 0101 	sbc.w	r1, lr, r1
1a0048da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a0048de:	d31b      	bcc.n	1a004918 <__adddf3+0x124>
1a0048e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a0048e4:	d30c      	bcc.n	1a004900 <__adddf3+0x10c>
1a0048e6:	0849      	lsrs	r1, r1, #1
1a0048e8:	ea5f 0030 	movs.w	r0, r0, rrx
1a0048ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a0048f0:	f104 0401 	add.w	r4, r4, #1
1a0048f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a0048f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a0048fc:	f080 809a 	bcs.w	1a004a34 <__adddf3+0x240>
1a004900:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a004904:	bf08      	it	eq
1a004906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00490a:	f150 0000 	adcs.w	r0, r0, #0
1a00490e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a004912:	ea41 0105 	orr.w	r1, r1, r5
1a004916:	bd30      	pop	{r4, r5, pc}
1a004918:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a00491c:	4140      	adcs	r0, r0
1a00491e:	eb41 0101 	adc.w	r1, r1, r1
1a004922:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004926:	f1a4 0401 	sub.w	r4, r4, #1
1a00492a:	d1e9      	bne.n	1a004900 <__adddf3+0x10c>
1a00492c:	f091 0f00 	teq	r1, #0
1a004930:	bf04      	itt	eq
1a004932:	4601      	moveq	r1, r0
1a004934:	2000      	moveq	r0, #0
1a004936:	fab1 f381 	clz	r3, r1
1a00493a:	bf08      	it	eq
1a00493c:	3320      	addeq	r3, #32
1a00493e:	f1a3 030b 	sub.w	r3, r3, #11
1a004942:	f1b3 0220 	subs.w	r2, r3, #32
1a004946:	da0c      	bge.n	1a004962 <__adddf3+0x16e>
1a004948:	320c      	adds	r2, #12
1a00494a:	dd08      	ble.n	1a00495e <__adddf3+0x16a>
1a00494c:	f102 0c14 	add.w	ip, r2, #20
1a004950:	f1c2 020c 	rsb	r2, r2, #12
1a004954:	fa01 f00c 	lsl.w	r0, r1, ip
1a004958:	fa21 f102 	lsr.w	r1, r1, r2
1a00495c:	e00c      	b.n	1a004978 <__adddf3+0x184>
1a00495e:	f102 0214 	add.w	r2, r2, #20
1a004962:	bfd8      	it	le
1a004964:	f1c2 0c20 	rsble	ip, r2, #32
1a004968:	fa01 f102 	lsl.w	r1, r1, r2
1a00496c:	fa20 fc0c 	lsr.w	ip, r0, ip
1a004970:	bfdc      	itt	le
1a004972:	ea41 010c 	orrle.w	r1, r1, ip
1a004976:	4090      	lslle	r0, r2
1a004978:	1ae4      	subs	r4, r4, r3
1a00497a:	bfa2      	ittt	ge
1a00497c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a004980:	4329      	orrge	r1, r5
1a004982:	bd30      	popge	{r4, r5, pc}
1a004984:	ea6f 0404 	mvn.w	r4, r4
1a004988:	3c1f      	subs	r4, #31
1a00498a:	da1c      	bge.n	1a0049c6 <__adddf3+0x1d2>
1a00498c:	340c      	adds	r4, #12
1a00498e:	dc0e      	bgt.n	1a0049ae <__adddf3+0x1ba>
1a004990:	f104 0414 	add.w	r4, r4, #20
1a004994:	f1c4 0220 	rsb	r2, r4, #32
1a004998:	fa20 f004 	lsr.w	r0, r0, r4
1a00499c:	fa01 f302 	lsl.w	r3, r1, r2
1a0049a0:	ea40 0003 	orr.w	r0, r0, r3
1a0049a4:	fa21 f304 	lsr.w	r3, r1, r4
1a0049a8:	ea45 0103 	orr.w	r1, r5, r3
1a0049ac:	bd30      	pop	{r4, r5, pc}
1a0049ae:	f1c4 040c 	rsb	r4, r4, #12
1a0049b2:	f1c4 0220 	rsb	r2, r4, #32
1a0049b6:	fa20 f002 	lsr.w	r0, r0, r2
1a0049ba:	fa01 f304 	lsl.w	r3, r1, r4
1a0049be:	ea40 0003 	orr.w	r0, r0, r3
1a0049c2:	4629      	mov	r1, r5
1a0049c4:	bd30      	pop	{r4, r5, pc}
1a0049c6:	fa21 f004 	lsr.w	r0, r1, r4
1a0049ca:	4629      	mov	r1, r5
1a0049cc:	bd30      	pop	{r4, r5, pc}
1a0049ce:	f094 0f00 	teq	r4, #0
1a0049d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a0049d6:	bf06      	itte	eq
1a0049d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a0049dc:	3401      	addeq	r4, #1
1a0049de:	3d01      	subne	r5, #1
1a0049e0:	e74e      	b.n	1a004880 <__adddf3+0x8c>
1a0049e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0049e6:	bf18      	it	ne
1a0049e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a0049ec:	d029      	beq.n	1a004a42 <__adddf3+0x24e>
1a0049ee:	ea94 0f05 	teq	r4, r5
1a0049f2:	bf08      	it	eq
1a0049f4:	ea90 0f02 	teqeq	r0, r2
1a0049f8:	d005      	beq.n	1a004a06 <__adddf3+0x212>
1a0049fa:	ea54 0c00 	orrs.w	ip, r4, r0
1a0049fe:	bf04      	itt	eq
1a004a00:	4619      	moveq	r1, r3
1a004a02:	4610      	moveq	r0, r2
1a004a04:	bd30      	pop	{r4, r5, pc}
1a004a06:	ea91 0f03 	teq	r1, r3
1a004a0a:	bf1e      	ittt	ne
1a004a0c:	2100      	movne	r1, #0
1a004a0e:	2000      	movne	r0, #0
1a004a10:	bd30      	popne	{r4, r5, pc}
1a004a12:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a004a16:	d105      	bne.n	1a004a24 <__adddf3+0x230>
1a004a18:	0040      	lsls	r0, r0, #1
1a004a1a:	4149      	adcs	r1, r1
1a004a1c:	bf28      	it	cs
1a004a1e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a004a22:	bd30      	pop	{r4, r5, pc}
1a004a24:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a004a28:	bf3c      	itt	cc
1a004a2a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a004a2e:	bd30      	popcc	{r4, r5, pc}
1a004a30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a004a34:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a004a38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a004a3c:	f04f 0000 	mov.w	r0, #0
1a004a40:	bd30      	pop	{r4, r5, pc}
1a004a42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a004a46:	bf1a      	itte	ne
1a004a48:	4619      	movne	r1, r3
1a004a4a:	4610      	movne	r0, r2
1a004a4c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a004a50:	bf1c      	itt	ne
1a004a52:	460b      	movne	r3, r1
1a004a54:	4602      	movne	r2, r0
1a004a56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a004a5a:	bf06      	itte	eq
1a004a5c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a004a60:	ea91 0f03 	teqeq	r1, r3
1a004a64:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a004a68:	bd30      	pop	{r4, r5, pc}
1a004a6a:	bf00      	nop

1a004a6c <__aeabi_ui2d>:
1a004a6c:	f090 0f00 	teq	r0, #0
1a004a70:	bf04      	itt	eq
1a004a72:	2100      	moveq	r1, #0
1a004a74:	4770      	bxeq	lr
1a004a76:	b530      	push	{r4, r5, lr}
1a004a78:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004a7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004a80:	f04f 0500 	mov.w	r5, #0
1a004a84:	f04f 0100 	mov.w	r1, #0
1a004a88:	e750      	b.n	1a00492c <__adddf3+0x138>
1a004a8a:	bf00      	nop

1a004a8c <__aeabi_i2d>:
1a004a8c:	f090 0f00 	teq	r0, #0
1a004a90:	bf04      	itt	eq
1a004a92:	2100      	moveq	r1, #0
1a004a94:	4770      	bxeq	lr
1a004a96:	b530      	push	{r4, r5, lr}
1a004a98:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004a9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004aa0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a004aa4:	bf48      	it	mi
1a004aa6:	4240      	negmi	r0, r0
1a004aa8:	f04f 0100 	mov.w	r1, #0
1a004aac:	e73e      	b.n	1a00492c <__adddf3+0x138>
1a004aae:	bf00      	nop

1a004ab0 <__aeabi_f2d>:
1a004ab0:	0042      	lsls	r2, r0, #1
1a004ab2:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a004ab6:	ea4f 0131 	mov.w	r1, r1, rrx
1a004aba:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a004abe:	bf1f      	itttt	ne
1a004ac0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a004ac4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a004ac8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a004acc:	4770      	bxne	lr
1a004ace:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a004ad2:	bf08      	it	eq
1a004ad4:	4770      	bxeq	lr
1a004ad6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a004ada:	bf04      	itt	eq
1a004adc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a004ae0:	4770      	bxeq	lr
1a004ae2:	b530      	push	{r4, r5, lr}
1a004ae4:	f44f 7460 	mov.w	r4, #896	; 0x380
1a004ae8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a004aec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a004af0:	e71c      	b.n	1a00492c <__adddf3+0x138>
1a004af2:	bf00      	nop

1a004af4 <__aeabi_ul2d>:
1a004af4:	ea50 0201 	orrs.w	r2, r0, r1
1a004af8:	bf08      	it	eq
1a004afa:	4770      	bxeq	lr
1a004afc:	b530      	push	{r4, r5, lr}
1a004afe:	f04f 0500 	mov.w	r5, #0
1a004b02:	e00a      	b.n	1a004b1a <__aeabi_l2d+0x16>

1a004b04 <__aeabi_l2d>:
1a004b04:	ea50 0201 	orrs.w	r2, r0, r1
1a004b08:	bf08      	it	eq
1a004b0a:	4770      	bxeq	lr
1a004b0c:	b530      	push	{r4, r5, lr}
1a004b0e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a004b12:	d502      	bpl.n	1a004b1a <__aeabi_l2d+0x16>
1a004b14:	4240      	negs	r0, r0
1a004b16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004b1a:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004b1e:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004b22:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a004b26:	f43f aed8 	beq.w	1a0048da <__adddf3+0xe6>
1a004b2a:	f04f 0203 	mov.w	r2, #3
1a004b2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a004b32:	bf18      	it	ne
1a004b34:	3203      	addne	r2, #3
1a004b36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a004b3a:	bf18      	it	ne
1a004b3c:	3203      	addne	r2, #3
1a004b3e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a004b42:	f1c2 0320 	rsb	r3, r2, #32
1a004b46:	fa00 fc03 	lsl.w	ip, r0, r3
1a004b4a:	fa20 f002 	lsr.w	r0, r0, r2
1a004b4e:	fa01 fe03 	lsl.w	lr, r1, r3
1a004b52:	ea40 000e 	orr.w	r0, r0, lr
1a004b56:	fa21 f102 	lsr.w	r1, r1, r2
1a004b5a:	4414      	add	r4, r2
1a004b5c:	e6bd      	b.n	1a0048da <__adddf3+0xe6>
1a004b5e:	bf00      	nop

1a004b60 <__aeabi_dmul>:
1a004b60:	b570      	push	{r4, r5, r6, lr}
1a004b62:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a004b66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a004b6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a004b6e:	bf1d      	ittte	ne
1a004b70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a004b74:	ea94 0f0c 	teqne	r4, ip
1a004b78:	ea95 0f0c 	teqne	r5, ip
1a004b7c:	f000 f8de 	bleq	1a004d3c <__aeabi_dmul+0x1dc>
1a004b80:	442c      	add	r4, r5
1a004b82:	ea81 0603 	eor.w	r6, r1, r3
1a004b86:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a004b8a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a004b8e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a004b92:	bf18      	it	ne
1a004b94:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a004b98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004b9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a004ba0:	d038      	beq.n	1a004c14 <__aeabi_dmul+0xb4>
1a004ba2:	fba0 ce02 	umull	ip, lr, r0, r2
1a004ba6:	f04f 0500 	mov.w	r5, #0
1a004baa:	fbe1 e502 	umlal	lr, r5, r1, r2
1a004bae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a004bb2:	fbe0 e503 	umlal	lr, r5, r0, r3
1a004bb6:	f04f 0600 	mov.w	r6, #0
1a004bba:	fbe1 5603 	umlal	r5, r6, r1, r3
1a004bbe:	f09c 0f00 	teq	ip, #0
1a004bc2:	bf18      	it	ne
1a004bc4:	f04e 0e01 	orrne.w	lr, lr, #1
1a004bc8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a004bcc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a004bd0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a004bd4:	d204      	bcs.n	1a004be0 <__aeabi_dmul+0x80>
1a004bd6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a004bda:	416d      	adcs	r5, r5
1a004bdc:	eb46 0606 	adc.w	r6, r6, r6
1a004be0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a004be4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a004be8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a004bec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a004bf0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a004bf4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a004bf8:	bf88      	it	hi
1a004bfa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a004bfe:	d81e      	bhi.n	1a004c3e <__aeabi_dmul+0xde>
1a004c00:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a004c04:	bf08      	it	eq
1a004c06:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a004c0a:	f150 0000 	adcs.w	r0, r0, #0
1a004c0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a004c12:	bd70      	pop	{r4, r5, r6, pc}
1a004c14:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a004c18:	ea46 0101 	orr.w	r1, r6, r1
1a004c1c:	ea40 0002 	orr.w	r0, r0, r2
1a004c20:	ea81 0103 	eor.w	r1, r1, r3
1a004c24:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a004c28:	bfc2      	ittt	gt
1a004c2a:	ebd4 050c 	rsbsgt	r5, r4, ip
1a004c2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a004c32:	bd70      	popgt	{r4, r5, r6, pc}
1a004c34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004c38:	f04f 0e00 	mov.w	lr, #0
1a004c3c:	3c01      	subs	r4, #1
1a004c3e:	f300 80ab 	bgt.w	1a004d98 <__aeabi_dmul+0x238>
1a004c42:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a004c46:	bfde      	ittt	le
1a004c48:	2000      	movle	r0, #0
1a004c4a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a004c4e:	bd70      	pople	{r4, r5, r6, pc}
1a004c50:	f1c4 0400 	rsb	r4, r4, #0
1a004c54:	3c20      	subs	r4, #32
1a004c56:	da35      	bge.n	1a004cc4 <__aeabi_dmul+0x164>
1a004c58:	340c      	adds	r4, #12
1a004c5a:	dc1b      	bgt.n	1a004c94 <__aeabi_dmul+0x134>
1a004c5c:	f104 0414 	add.w	r4, r4, #20
1a004c60:	f1c4 0520 	rsb	r5, r4, #32
1a004c64:	fa00 f305 	lsl.w	r3, r0, r5
1a004c68:	fa20 f004 	lsr.w	r0, r0, r4
1a004c6c:	fa01 f205 	lsl.w	r2, r1, r5
1a004c70:	ea40 0002 	orr.w	r0, r0, r2
1a004c74:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a004c78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a004c7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a004c80:	fa21 f604 	lsr.w	r6, r1, r4
1a004c84:	eb42 0106 	adc.w	r1, r2, r6
1a004c88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a004c8c:	bf08      	it	eq
1a004c8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a004c92:	bd70      	pop	{r4, r5, r6, pc}
1a004c94:	f1c4 040c 	rsb	r4, r4, #12
1a004c98:	f1c4 0520 	rsb	r5, r4, #32
1a004c9c:	fa00 f304 	lsl.w	r3, r0, r4
1a004ca0:	fa20 f005 	lsr.w	r0, r0, r5
1a004ca4:	fa01 f204 	lsl.w	r2, r1, r4
1a004ca8:	ea40 0002 	orr.w	r0, r0, r2
1a004cac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004cb0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a004cb4:	f141 0100 	adc.w	r1, r1, #0
1a004cb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a004cbc:	bf08      	it	eq
1a004cbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a004cc2:	bd70      	pop	{r4, r5, r6, pc}
1a004cc4:	f1c4 0520 	rsb	r5, r4, #32
1a004cc8:	fa00 f205 	lsl.w	r2, r0, r5
1a004ccc:	ea4e 0e02 	orr.w	lr, lr, r2
1a004cd0:	fa20 f304 	lsr.w	r3, r0, r4
1a004cd4:	fa01 f205 	lsl.w	r2, r1, r5
1a004cd8:	ea43 0302 	orr.w	r3, r3, r2
1a004cdc:	fa21 f004 	lsr.w	r0, r1, r4
1a004ce0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004ce4:	fa21 f204 	lsr.w	r2, r1, r4
1a004ce8:	ea20 0002 	bic.w	r0, r0, r2
1a004cec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a004cf0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a004cf4:	bf08      	it	eq
1a004cf6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a004cfa:	bd70      	pop	{r4, r5, r6, pc}
1a004cfc:	f094 0f00 	teq	r4, #0
1a004d00:	d10f      	bne.n	1a004d22 <__aeabi_dmul+0x1c2>
1a004d02:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a004d06:	0040      	lsls	r0, r0, #1
1a004d08:	eb41 0101 	adc.w	r1, r1, r1
1a004d0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004d10:	bf08      	it	eq
1a004d12:	3c01      	subeq	r4, #1
1a004d14:	d0f7      	beq.n	1a004d06 <__aeabi_dmul+0x1a6>
1a004d16:	ea41 0106 	orr.w	r1, r1, r6
1a004d1a:	f095 0f00 	teq	r5, #0
1a004d1e:	bf18      	it	ne
1a004d20:	4770      	bxne	lr
1a004d22:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a004d26:	0052      	lsls	r2, r2, #1
1a004d28:	eb43 0303 	adc.w	r3, r3, r3
1a004d2c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a004d30:	bf08      	it	eq
1a004d32:	3d01      	subeq	r5, #1
1a004d34:	d0f7      	beq.n	1a004d26 <__aeabi_dmul+0x1c6>
1a004d36:	ea43 0306 	orr.w	r3, r3, r6
1a004d3a:	4770      	bx	lr
1a004d3c:	ea94 0f0c 	teq	r4, ip
1a004d40:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a004d44:	bf18      	it	ne
1a004d46:	ea95 0f0c 	teqne	r5, ip
1a004d4a:	d00c      	beq.n	1a004d66 <__aeabi_dmul+0x206>
1a004d4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a004d50:	bf18      	it	ne
1a004d52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a004d56:	d1d1      	bne.n	1a004cfc <__aeabi_dmul+0x19c>
1a004d58:	ea81 0103 	eor.w	r1, r1, r3
1a004d5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004d60:	f04f 0000 	mov.w	r0, #0
1a004d64:	bd70      	pop	{r4, r5, r6, pc}
1a004d66:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a004d6a:	bf06      	itte	eq
1a004d6c:	4610      	moveq	r0, r2
1a004d6e:	4619      	moveq	r1, r3
1a004d70:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a004d74:	d019      	beq.n	1a004daa <__aeabi_dmul+0x24a>
1a004d76:	ea94 0f0c 	teq	r4, ip
1a004d7a:	d102      	bne.n	1a004d82 <__aeabi_dmul+0x222>
1a004d7c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a004d80:	d113      	bne.n	1a004daa <__aeabi_dmul+0x24a>
1a004d82:	ea95 0f0c 	teq	r5, ip
1a004d86:	d105      	bne.n	1a004d94 <__aeabi_dmul+0x234>
1a004d88:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a004d8c:	bf1c      	itt	ne
1a004d8e:	4610      	movne	r0, r2
1a004d90:	4619      	movne	r1, r3
1a004d92:	d10a      	bne.n	1a004daa <__aeabi_dmul+0x24a>
1a004d94:	ea81 0103 	eor.w	r1, r1, r3
1a004d98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004d9c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a004da0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a004da4:	f04f 0000 	mov.w	r0, #0
1a004da8:	bd70      	pop	{r4, r5, r6, pc}
1a004daa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a004dae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a004db2:	bd70      	pop	{r4, r5, r6, pc}

1a004db4 <__aeabi_ddiv>:
1a004db4:	b570      	push	{r4, r5, r6, lr}
1a004db6:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a004dba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a004dbe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a004dc2:	bf1d      	ittte	ne
1a004dc4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a004dc8:	ea94 0f0c 	teqne	r4, ip
1a004dcc:	ea95 0f0c 	teqne	r5, ip
1a004dd0:	f000 f8a7 	bleq	1a004f22 <__aeabi_ddiv+0x16e>
1a004dd4:	eba4 0405 	sub.w	r4, r4, r5
1a004dd8:	ea81 0e03 	eor.w	lr, r1, r3
1a004ddc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a004de0:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a004de4:	f000 8088 	beq.w	1a004ef8 <__aeabi_ddiv+0x144>
1a004de8:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a004dec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a004df0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a004df4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a004df8:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a004dfc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a004e00:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a004e04:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a004e08:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a004e0c:	429d      	cmp	r5, r3
1a004e0e:	bf08      	it	eq
1a004e10:	4296      	cmpeq	r6, r2
1a004e12:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a004e16:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a004e1a:	d202      	bcs.n	1a004e22 <__aeabi_ddiv+0x6e>
1a004e1c:	085b      	lsrs	r3, r3, #1
1a004e1e:	ea4f 0232 	mov.w	r2, r2, rrx
1a004e22:	1ab6      	subs	r6, r6, r2
1a004e24:	eb65 0503 	sbc.w	r5, r5, r3
1a004e28:	085b      	lsrs	r3, r3, #1
1a004e2a:	ea4f 0232 	mov.w	r2, r2, rrx
1a004e2e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a004e32:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a004e36:	ebb6 0e02 	subs.w	lr, r6, r2
1a004e3a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a004e3e:	bf22      	ittt	cs
1a004e40:	1ab6      	subcs	r6, r6, r2
1a004e42:	4675      	movcs	r5, lr
1a004e44:	ea40 000c 	orrcs.w	r0, r0, ip
1a004e48:	085b      	lsrs	r3, r3, #1
1a004e4a:	ea4f 0232 	mov.w	r2, r2, rrx
1a004e4e:	ebb6 0e02 	subs.w	lr, r6, r2
1a004e52:	eb75 0e03 	sbcs.w	lr, r5, r3
1a004e56:	bf22      	ittt	cs
1a004e58:	1ab6      	subcs	r6, r6, r2
1a004e5a:	4675      	movcs	r5, lr
1a004e5c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a004e60:	085b      	lsrs	r3, r3, #1
1a004e62:	ea4f 0232 	mov.w	r2, r2, rrx
1a004e66:	ebb6 0e02 	subs.w	lr, r6, r2
1a004e6a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a004e6e:	bf22      	ittt	cs
1a004e70:	1ab6      	subcs	r6, r6, r2
1a004e72:	4675      	movcs	r5, lr
1a004e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a004e78:	085b      	lsrs	r3, r3, #1
1a004e7a:	ea4f 0232 	mov.w	r2, r2, rrx
1a004e7e:	ebb6 0e02 	subs.w	lr, r6, r2
1a004e82:	eb75 0e03 	sbcs.w	lr, r5, r3
1a004e86:	bf22      	ittt	cs
1a004e88:	1ab6      	subcs	r6, r6, r2
1a004e8a:	4675      	movcs	r5, lr
1a004e8c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a004e90:	ea55 0e06 	orrs.w	lr, r5, r6
1a004e94:	d018      	beq.n	1a004ec8 <__aeabi_ddiv+0x114>
1a004e96:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a004e9a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a004e9e:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a004ea2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a004ea6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a004eaa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a004eae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a004eb2:	d1c0      	bne.n	1a004e36 <__aeabi_ddiv+0x82>
1a004eb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004eb8:	d10b      	bne.n	1a004ed2 <__aeabi_ddiv+0x11e>
1a004eba:	ea41 0100 	orr.w	r1, r1, r0
1a004ebe:	f04f 0000 	mov.w	r0, #0
1a004ec2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a004ec6:	e7b6      	b.n	1a004e36 <__aeabi_ddiv+0x82>
1a004ec8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004ecc:	bf04      	itt	eq
1a004ece:	4301      	orreq	r1, r0
1a004ed0:	2000      	moveq	r0, #0
1a004ed2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a004ed6:	bf88      	it	hi
1a004ed8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a004edc:	f63f aeaf 	bhi.w	1a004c3e <__aeabi_dmul+0xde>
1a004ee0:	ebb5 0c03 	subs.w	ip, r5, r3
1a004ee4:	bf04      	itt	eq
1a004ee6:	ebb6 0c02 	subseq.w	ip, r6, r2
1a004eea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a004eee:	f150 0000 	adcs.w	r0, r0, #0
1a004ef2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a004ef6:	bd70      	pop	{r4, r5, r6, pc}
1a004ef8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a004efc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a004f00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a004f04:	bfc2      	ittt	gt
1a004f06:	ebd4 050c 	rsbsgt	r5, r4, ip
1a004f0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a004f0e:	bd70      	popgt	{r4, r5, r6, pc}
1a004f10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004f14:	f04f 0e00 	mov.w	lr, #0
1a004f18:	3c01      	subs	r4, #1
1a004f1a:	e690      	b.n	1a004c3e <__aeabi_dmul+0xde>
1a004f1c:	ea45 0e06 	orr.w	lr, r5, r6
1a004f20:	e68d      	b.n	1a004c3e <__aeabi_dmul+0xde>
1a004f22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a004f26:	ea94 0f0c 	teq	r4, ip
1a004f2a:	bf08      	it	eq
1a004f2c:	ea95 0f0c 	teqeq	r5, ip
1a004f30:	f43f af3b 	beq.w	1a004daa <__aeabi_dmul+0x24a>
1a004f34:	ea94 0f0c 	teq	r4, ip
1a004f38:	d10a      	bne.n	1a004f50 <__aeabi_ddiv+0x19c>
1a004f3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a004f3e:	f47f af34 	bne.w	1a004daa <__aeabi_dmul+0x24a>
1a004f42:	ea95 0f0c 	teq	r5, ip
1a004f46:	f47f af25 	bne.w	1a004d94 <__aeabi_dmul+0x234>
1a004f4a:	4610      	mov	r0, r2
1a004f4c:	4619      	mov	r1, r3
1a004f4e:	e72c      	b.n	1a004daa <__aeabi_dmul+0x24a>
1a004f50:	ea95 0f0c 	teq	r5, ip
1a004f54:	d106      	bne.n	1a004f64 <__aeabi_ddiv+0x1b0>
1a004f56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a004f5a:	f43f aefd 	beq.w	1a004d58 <__aeabi_dmul+0x1f8>
1a004f5e:	4610      	mov	r0, r2
1a004f60:	4619      	mov	r1, r3
1a004f62:	e722      	b.n	1a004daa <__aeabi_dmul+0x24a>
1a004f64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a004f68:	bf18      	it	ne
1a004f6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a004f6e:	f47f aec5 	bne.w	1a004cfc <__aeabi_dmul+0x19c>
1a004f72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a004f76:	f47f af0d 	bne.w	1a004d94 <__aeabi_dmul+0x234>
1a004f7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a004f7e:	f47f aeeb 	bne.w	1a004d58 <__aeabi_dmul+0x1f8>
1a004f82:	e712      	b.n	1a004daa <__aeabi_dmul+0x24a>

1a004f84 <__gedf2>:
1a004f84:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a004f88:	e006      	b.n	1a004f98 <__cmpdf2+0x4>
1a004f8a:	bf00      	nop

1a004f8c <__ledf2>:
1a004f8c:	f04f 0c01 	mov.w	ip, #1
1a004f90:	e002      	b.n	1a004f98 <__cmpdf2+0x4>
1a004f92:	bf00      	nop

1a004f94 <__cmpdf2>:
1a004f94:	f04f 0c01 	mov.w	ip, #1
1a004f98:	f84d cd04 	str.w	ip, [sp, #-4]!
1a004f9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a004fa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a004fa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a004fa8:	bf18      	it	ne
1a004faa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a004fae:	d01b      	beq.n	1a004fe8 <__cmpdf2+0x54>
1a004fb0:	b001      	add	sp, #4
1a004fb2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a004fb6:	bf0c      	ite	eq
1a004fb8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a004fbc:	ea91 0f03 	teqne	r1, r3
1a004fc0:	bf02      	ittt	eq
1a004fc2:	ea90 0f02 	teqeq	r0, r2
1a004fc6:	2000      	moveq	r0, #0
1a004fc8:	4770      	bxeq	lr
1a004fca:	f110 0f00 	cmn.w	r0, #0
1a004fce:	ea91 0f03 	teq	r1, r3
1a004fd2:	bf58      	it	pl
1a004fd4:	4299      	cmppl	r1, r3
1a004fd6:	bf08      	it	eq
1a004fd8:	4290      	cmpeq	r0, r2
1a004fda:	bf2c      	ite	cs
1a004fdc:	17d8      	asrcs	r0, r3, #31
1a004fde:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a004fe2:	f040 0001 	orr.w	r0, r0, #1
1a004fe6:	4770      	bx	lr
1a004fe8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a004fec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a004ff0:	d102      	bne.n	1a004ff8 <__cmpdf2+0x64>
1a004ff2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a004ff6:	d107      	bne.n	1a005008 <__cmpdf2+0x74>
1a004ff8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a004ffc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a005000:	d1d6      	bne.n	1a004fb0 <__cmpdf2+0x1c>
1a005002:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a005006:	d0d3      	beq.n	1a004fb0 <__cmpdf2+0x1c>
1a005008:	f85d 0b04 	ldr.w	r0, [sp], #4
1a00500c:	4770      	bx	lr
1a00500e:	bf00      	nop

1a005010 <__aeabi_cdrcmple>:
1a005010:	4684      	mov	ip, r0
1a005012:	4610      	mov	r0, r2
1a005014:	4662      	mov	r2, ip
1a005016:	468c      	mov	ip, r1
1a005018:	4619      	mov	r1, r3
1a00501a:	4663      	mov	r3, ip
1a00501c:	e000      	b.n	1a005020 <__aeabi_cdcmpeq>
1a00501e:	bf00      	nop

1a005020 <__aeabi_cdcmpeq>:
1a005020:	b501      	push	{r0, lr}
1a005022:	f7ff ffb7 	bl	1a004f94 <__cmpdf2>
1a005026:	2800      	cmp	r0, #0
1a005028:	bf48      	it	mi
1a00502a:	f110 0f00 	cmnmi.w	r0, #0
1a00502e:	bd01      	pop	{r0, pc}

1a005030 <__aeabi_dcmpeq>:
1a005030:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005034:	f7ff fff4 	bl	1a005020 <__aeabi_cdcmpeq>
1a005038:	bf0c      	ite	eq
1a00503a:	2001      	moveq	r0, #1
1a00503c:	2000      	movne	r0, #0
1a00503e:	f85d fb08 	ldr.w	pc, [sp], #8
1a005042:	bf00      	nop

1a005044 <__aeabi_dcmplt>:
1a005044:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005048:	f7ff ffea 	bl	1a005020 <__aeabi_cdcmpeq>
1a00504c:	bf34      	ite	cc
1a00504e:	2001      	movcc	r0, #1
1a005050:	2000      	movcs	r0, #0
1a005052:	f85d fb08 	ldr.w	pc, [sp], #8
1a005056:	bf00      	nop

1a005058 <__aeabi_dcmple>:
1a005058:	f84d ed08 	str.w	lr, [sp, #-8]!
1a00505c:	f7ff ffe0 	bl	1a005020 <__aeabi_cdcmpeq>
1a005060:	bf94      	ite	ls
1a005062:	2001      	movls	r0, #1
1a005064:	2000      	movhi	r0, #0
1a005066:	f85d fb08 	ldr.w	pc, [sp], #8
1a00506a:	bf00      	nop

1a00506c <__aeabi_dcmpge>:
1a00506c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005070:	f7ff ffce 	bl	1a005010 <__aeabi_cdrcmple>
1a005074:	bf94      	ite	ls
1a005076:	2001      	movls	r0, #1
1a005078:	2000      	movhi	r0, #0
1a00507a:	f85d fb08 	ldr.w	pc, [sp], #8
1a00507e:	bf00      	nop

1a005080 <__aeabi_dcmpgt>:
1a005080:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005084:	f7ff ffc4 	bl	1a005010 <__aeabi_cdrcmple>
1a005088:	bf34      	ite	cc
1a00508a:	2001      	movcc	r0, #1
1a00508c:	2000      	movcs	r0, #0
1a00508e:	f85d fb08 	ldr.w	pc, [sp], #8
1a005092:	bf00      	nop

1a005094 <__aeabi_d2f>:
1a005094:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a005098:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a00509c:	bf24      	itt	cs
1a00509e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a0050a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a0050a6:	d90d      	bls.n	1a0050c4 <__aeabi_d2f+0x30>
1a0050a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a0050ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a0050b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a0050b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a0050b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a0050bc:	bf08      	it	eq
1a0050be:	f020 0001 	biceq.w	r0, r0, #1
1a0050c2:	4770      	bx	lr
1a0050c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a0050c8:	d121      	bne.n	1a00510e <__aeabi_d2f+0x7a>
1a0050ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a0050ce:	bfbc      	itt	lt
1a0050d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a0050d4:	4770      	bxlt	lr
1a0050d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0050da:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a0050de:	f1c2 0218 	rsb	r2, r2, #24
1a0050e2:	f1c2 0c20 	rsb	ip, r2, #32
1a0050e6:	fa10 f30c 	lsls.w	r3, r0, ip
1a0050ea:	fa20 f002 	lsr.w	r0, r0, r2
1a0050ee:	bf18      	it	ne
1a0050f0:	f040 0001 	orrne.w	r0, r0, #1
1a0050f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a0050f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a0050fc:	fa03 fc0c 	lsl.w	ip, r3, ip
1a005100:	ea40 000c 	orr.w	r0, r0, ip
1a005104:	fa23 f302 	lsr.w	r3, r3, r2
1a005108:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a00510c:	e7cc      	b.n	1a0050a8 <__aeabi_d2f+0x14>
1a00510e:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a005112:	d107      	bne.n	1a005124 <__aeabi_d2f+0x90>
1a005114:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a005118:	bf1e      	ittt	ne
1a00511a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a00511e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a005122:	4770      	bxne	lr
1a005124:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a005128:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a00512c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a005130:	4770      	bx	lr
1a005132:	bf00      	nop

1a005134 <__aeabi_uldivmod>:
1a005134:	b953      	cbnz	r3, 1a00514c <__aeabi_uldivmod+0x18>
1a005136:	b94a      	cbnz	r2, 1a00514c <__aeabi_uldivmod+0x18>
1a005138:	2900      	cmp	r1, #0
1a00513a:	bf08      	it	eq
1a00513c:	2800      	cmpeq	r0, #0
1a00513e:	bf1c      	itt	ne
1a005140:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a005144:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a005148:	f000 b972 	b.w	1a005430 <__aeabi_idiv0>
1a00514c:	f1ad 0c08 	sub.w	ip, sp, #8
1a005150:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a005154:	f000 f806 	bl	1a005164 <__udivmoddi4>
1a005158:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00515c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a005160:	b004      	add	sp, #16
1a005162:	4770      	bx	lr

1a005164 <__udivmoddi4>:
1a005164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a005168:	9e08      	ldr	r6, [sp, #32]
1a00516a:	4604      	mov	r4, r0
1a00516c:	4688      	mov	r8, r1
1a00516e:	2b00      	cmp	r3, #0
1a005170:	d14b      	bne.n	1a00520a <__udivmoddi4+0xa6>
1a005172:	428a      	cmp	r2, r1
1a005174:	4615      	mov	r5, r2
1a005176:	d967      	bls.n	1a005248 <__udivmoddi4+0xe4>
1a005178:	fab2 f282 	clz	r2, r2
1a00517c:	b14a      	cbz	r2, 1a005192 <__udivmoddi4+0x2e>
1a00517e:	f1c2 0720 	rsb	r7, r2, #32
1a005182:	fa01 f302 	lsl.w	r3, r1, r2
1a005186:	fa20 f707 	lsr.w	r7, r0, r7
1a00518a:	4095      	lsls	r5, r2
1a00518c:	ea47 0803 	orr.w	r8, r7, r3
1a005190:	4094      	lsls	r4, r2
1a005192:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a005196:	0c23      	lsrs	r3, r4, #16
1a005198:	fbb8 f7fe 	udiv	r7, r8, lr
1a00519c:	fa1f fc85 	uxth.w	ip, r5
1a0051a0:	fb0e 8817 	mls	r8, lr, r7, r8
1a0051a4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0051a8:	fb07 f10c 	mul.w	r1, r7, ip
1a0051ac:	4299      	cmp	r1, r3
1a0051ae:	d909      	bls.n	1a0051c4 <__udivmoddi4+0x60>
1a0051b0:	18eb      	adds	r3, r5, r3
1a0051b2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0051b6:	f080 811b 	bcs.w	1a0053f0 <__udivmoddi4+0x28c>
1a0051ba:	4299      	cmp	r1, r3
1a0051bc:	f240 8118 	bls.w	1a0053f0 <__udivmoddi4+0x28c>
1a0051c0:	3f02      	subs	r7, #2
1a0051c2:	442b      	add	r3, r5
1a0051c4:	1a5b      	subs	r3, r3, r1
1a0051c6:	b2a4      	uxth	r4, r4
1a0051c8:	fbb3 f0fe 	udiv	r0, r3, lr
1a0051cc:	fb0e 3310 	mls	r3, lr, r0, r3
1a0051d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0051d4:	fb00 fc0c 	mul.w	ip, r0, ip
1a0051d8:	45a4      	cmp	ip, r4
1a0051da:	d909      	bls.n	1a0051f0 <__udivmoddi4+0x8c>
1a0051dc:	192c      	adds	r4, r5, r4
1a0051de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0051e2:	f080 8107 	bcs.w	1a0053f4 <__udivmoddi4+0x290>
1a0051e6:	45a4      	cmp	ip, r4
1a0051e8:	f240 8104 	bls.w	1a0053f4 <__udivmoddi4+0x290>
1a0051ec:	3802      	subs	r0, #2
1a0051ee:	442c      	add	r4, r5
1a0051f0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0051f4:	eba4 040c 	sub.w	r4, r4, ip
1a0051f8:	2700      	movs	r7, #0
1a0051fa:	b11e      	cbz	r6, 1a005204 <__udivmoddi4+0xa0>
1a0051fc:	40d4      	lsrs	r4, r2
1a0051fe:	2300      	movs	r3, #0
1a005200:	e9c6 4300 	strd	r4, r3, [r6]
1a005204:	4639      	mov	r1, r7
1a005206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00520a:	428b      	cmp	r3, r1
1a00520c:	d909      	bls.n	1a005222 <__udivmoddi4+0xbe>
1a00520e:	2e00      	cmp	r6, #0
1a005210:	f000 80eb 	beq.w	1a0053ea <__udivmoddi4+0x286>
1a005214:	2700      	movs	r7, #0
1a005216:	e9c6 0100 	strd	r0, r1, [r6]
1a00521a:	4638      	mov	r0, r7
1a00521c:	4639      	mov	r1, r7
1a00521e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a005222:	fab3 f783 	clz	r7, r3
1a005226:	2f00      	cmp	r7, #0
1a005228:	d147      	bne.n	1a0052ba <__udivmoddi4+0x156>
1a00522a:	428b      	cmp	r3, r1
1a00522c:	d302      	bcc.n	1a005234 <__udivmoddi4+0xd0>
1a00522e:	4282      	cmp	r2, r0
1a005230:	f200 80fa 	bhi.w	1a005428 <__udivmoddi4+0x2c4>
1a005234:	1a84      	subs	r4, r0, r2
1a005236:	eb61 0303 	sbc.w	r3, r1, r3
1a00523a:	2001      	movs	r0, #1
1a00523c:	4698      	mov	r8, r3
1a00523e:	2e00      	cmp	r6, #0
1a005240:	d0e0      	beq.n	1a005204 <__udivmoddi4+0xa0>
1a005242:	e9c6 4800 	strd	r4, r8, [r6]
1a005246:	e7dd      	b.n	1a005204 <__udivmoddi4+0xa0>
1a005248:	b902      	cbnz	r2, 1a00524c <__udivmoddi4+0xe8>
1a00524a:	deff      	udf	#255	; 0xff
1a00524c:	fab2 f282 	clz	r2, r2
1a005250:	2a00      	cmp	r2, #0
1a005252:	f040 808f 	bne.w	1a005374 <__udivmoddi4+0x210>
1a005256:	1b49      	subs	r1, r1, r5
1a005258:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00525c:	fa1f f885 	uxth.w	r8, r5
1a005260:	2701      	movs	r7, #1
1a005262:	fbb1 fcfe 	udiv	ip, r1, lr
1a005266:	0c23      	lsrs	r3, r4, #16
1a005268:	fb0e 111c 	mls	r1, lr, ip, r1
1a00526c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a005270:	fb08 f10c 	mul.w	r1, r8, ip
1a005274:	4299      	cmp	r1, r3
1a005276:	d907      	bls.n	1a005288 <__udivmoddi4+0x124>
1a005278:	18eb      	adds	r3, r5, r3
1a00527a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a00527e:	d202      	bcs.n	1a005286 <__udivmoddi4+0x122>
1a005280:	4299      	cmp	r1, r3
1a005282:	f200 80cd 	bhi.w	1a005420 <__udivmoddi4+0x2bc>
1a005286:	4684      	mov	ip, r0
1a005288:	1a59      	subs	r1, r3, r1
1a00528a:	b2a3      	uxth	r3, r4
1a00528c:	fbb1 f0fe 	udiv	r0, r1, lr
1a005290:	fb0e 1410 	mls	r4, lr, r0, r1
1a005294:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a005298:	fb08 f800 	mul.w	r8, r8, r0
1a00529c:	45a0      	cmp	r8, r4
1a00529e:	d907      	bls.n	1a0052b0 <__udivmoddi4+0x14c>
1a0052a0:	192c      	adds	r4, r5, r4
1a0052a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0052a6:	d202      	bcs.n	1a0052ae <__udivmoddi4+0x14a>
1a0052a8:	45a0      	cmp	r8, r4
1a0052aa:	f200 80b6 	bhi.w	1a00541a <__udivmoddi4+0x2b6>
1a0052ae:	4618      	mov	r0, r3
1a0052b0:	eba4 0408 	sub.w	r4, r4, r8
1a0052b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0052b8:	e79f      	b.n	1a0051fa <__udivmoddi4+0x96>
1a0052ba:	f1c7 0c20 	rsb	ip, r7, #32
1a0052be:	40bb      	lsls	r3, r7
1a0052c0:	fa22 fe0c 	lsr.w	lr, r2, ip
1a0052c4:	ea4e 0e03 	orr.w	lr, lr, r3
1a0052c8:	fa01 f407 	lsl.w	r4, r1, r7
1a0052cc:	fa20 f50c 	lsr.w	r5, r0, ip
1a0052d0:	fa21 f30c 	lsr.w	r3, r1, ip
1a0052d4:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a0052d8:	4325      	orrs	r5, r4
1a0052da:	fbb3 f9f8 	udiv	r9, r3, r8
1a0052de:	0c2c      	lsrs	r4, r5, #16
1a0052e0:	fb08 3319 	mls	r3, r8, r9, r3
1a0052e4:	fa1f fa8e 	uxth.w	sl, lr
1a0052e8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a0052ec:	fb09 f40a 	mul.w	r4, r9, sl
1a0052f0:	429c      	cmp	r4, r3
1a0052f2:	fa02 f207 	lsl.w	r2, r2, r7
1a0052f6:	fa00 f107 	lsl.w	r1, r0, r7
1a0052fa:	d90b      	bls.n	1a005314 <__udivmoddi4+0x1b0>
1a0052fc:	eb1e 0303 	adds.w	r3, lr, r3
1a005300:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a005304:	f080 8087 	bcs.w	1a005416 <__udivmoddi4+0x2b2>
1a005308:	429c      	cmp	r4, r3
1a00530a:	f240 8084 	bls.w	1a005416 <__udivmoddi4+0x2b2>
1a00530e:	f1a9 0902 	sub.w	r9, r9, #2
1a005312:	4473      	add	r3, lr
1a005314:	1b1b      	subs	r3, r3, r4
1a005316:	b2ad      	uxth	r5, r5
1a005318:	fbb3 f0f8 	udiv	r0, r3, r8
1a00531c:	fb08 3310 	mls	r3, r8, r0, r3
1a005320:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a005324:	fb00 fa0a 	mul.w	sl, r0, sl
1a005328:	45a2      	cmp	sl, r4
1a00532a:	d908      	bls.n	1a00533e <__udivmoddi4+0x1da>
1a00532c:	eb1e 0404 	adds.w	r4, lr, r4
1a005330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005334:	d26b      	bcs.n	1a00540e <__udivmoddi4+0x2aa>
1a005336:	45a2      	cmp	sl, r4
1a005338:	d969      	bls.n	1a00540e <__udivmoddi4+0x2aa>
1a00533a:	3802      	subs	r0, #2
1a00533c:	4474      	add	r4, lr
1a00533e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a005342:	fba0 8902 	umull	r8, r9, r0, r2
1a005346:	eba4 040a 	sub.w	r4, r4, sl
1a00534a:	454c      	cmp	r4, r9
1a00534c:	46c2      	mov	sl, r8
1a00534e:	464b      	mov	r3, r9
1a005350:	d354      	bcc.n	1a0053fc <__udivmoddi4+0x298>
1a005352:	d051      	beq.n	1a0053f8 <__udivmoddi4+0x294>
1a005354:	2e00      	cmp	r6, #0
1a005356:	d069      	beq.n	1a00542c <__udivmoddi4+0x2c8>
1a005358:	ebb1 050a 	subs.w	r5, r1, sl
1a00535c:	eb64 0403 	sbc.w	r4, r4, r3
1a005360:	fa04 fc0c 	lsl.w	ip, r4, ip
1a005364:	40fd      	lsrs	r5, r7
1a005366:	40fc      	lsrs	r4, r7
1a005368:	ea4c 0505 	orr.w	r5, ip, r5
1a00536c:	e9c6 5400 	strd	r5, r4, [r6]
1a005370:	2700      	movs	r7, #0
1a005372:	e747      	b.n	1a005204 <__udivmoddi4+0xa0>
1a005374:	f1c2 0320 	rsb	r3, r2, #32
1a005378:	fa20 f703 	lsr.w	r7, r0, r3
1a00537c:	4095      	lsls	r5, r2
1a00537e:	fa01 f002 	lsl.w	r0, r1, r2
1a005382:	fa21 f303 	lsr.w	r3, r1, r3
1a005386:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00538a:	4338      	orrs	r0, r7
1a00538c:	0c01      	lsrs	r1, r0, #16
1a00538e:	fbb3 f7fe 	udiv	r7, r3, lr
1a005392:	fa1f f885 	uxth.w	r8, r5
1a005396:	fb0e 3317 	mls	r3, lr, r7, r3
1a00539a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00539e:	fb07 f308 	mul.w	r3, r7, r8
1a0053a2:	428b      	cmp	r3, r1
1a0053a4:	fa04 f402 	lsl.w	r4, r4, r2
1a0053a8:	d907      	bls.n	1a0053ba <__udivmoddi4+0x256>
1a0053aa:	1869      	adds	r1, r5, r1
1a0053ac:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0053b0:	d22f      	bcs.n	1a005412 <__udivmoddi4+0x2ae>
1a0053b2:	428b      	cmp	r3, r1
1a0053b4:	d92d      	bls.n	1a005412 <__udivmoddi4+0x2ae>
1a0053b6:	3f02      	subs	r7, #2
1a0053b8:	4429      	add	r1, r5
1a0053ba:	1acb      	subs	r3, r1, r3
1a0053bc:	b281      	uxth	r1, r0
1a0053be:	fbb3 f0fe 	udiv	r0, r3, lr
1a0053c2:	fb0e 3310 	mls	r3, lr, r0, r3
1a0053c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0053ca:	fb00 f308 	mul.w	r3, r0, r8
1a0053ce:	428b      	cmp	r3, r1
1a0053d0:	d907      	bls.n	1a0053e2 <__udivmoddi4+0x27e>
1a0053d2:	1869      	adds	r1, r5, r1
1a0053d4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0053d8:	d217      	bcs.n	1a00540a <__udivmoddi4+0x2a6>
1a0053da:	428b      	cmp	r3, r1
1a0053dc:	d915      	bls.n	1a00540a <__udivmoddi4+0x2a6>
1a0053de:	3802      	subs	r0, #2
1a0053e0:	4429      	add	r1, r5
1a0053e2:	1ac9      	subs	r1, r1, r3
1a0053e4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0053e8:	e73b      	b.n	1a005262 <__udivmoddi4+0xfe>
1a0053ea:	4637      	mov	r7, r6
1a0053ec:	4630      	mov	r0, r6
1a0053ee:	e709      	b.n	1a005204 <__udivmoddi4+0xa0>
1a0053f0:	4607      	mov	r7, r0
1a0053f2:	e6e7      	b.n	1a0051c4 <__udivmoddi4+0x60>
1a0053f4:	4618      	mov	r0, r3
1a0053f6:	e6fb      	b.n	1a0051f0 <__udivmoddi4+0x8c>
1a0053f8:	4541      	cmp	r1, r8
1a0053fa:	d2ab      	bcs.n	1a005354 <__udivmoddi4+0x1f0>
1a0053fc:	ebb8 0a02 	subs.w	sl, r8, r2
1a005400:	eb69 020e 	sbc.w	r2, r9, lr
1a005404:	3801      	subs	r0, #1
1a005406:	4613      	mov	r3, r2
1a005408:	e7a4      	b.n	1a005354 <__udivmoddi4+0x1f0>
1a00540a:	4660      	mov	r0, ip
1a00540c:	e7e9      	b.n	1a0053e2 <__udivmoddi4+0x27e>
1a00540e:	4618      	mov	r0, r3
1a005410:	e795      	b.n	1a00533e <__udivmoddi4+0x1da>
1a005412:	4667      	mov	r7, ip
1a005414:	e7d1      	b.n	1a0053ba <__udivmoddi4+0x256>
1a005416:	4681      	mov	r9, r0
1a005418:	e77c      	b.n	1a005314 <__udivmoddi4+0x1b0>
1a00541a:	3802      	subs	r0, #2
1a00541c:	442c      	add	r4, r5
1a00541e:	e747      	b.n	1a0052b0 <__udivmoddi4+0x14c>
1a005420:	f1ac 0c02 	sub.w	ip, ip, #2
1a005424:	442b      	add	r3, r5
1a005426:	e72f      	b.n	1a005288 <__udivmoddi4+0x124>
1a005428:	4638      	mov	r0, r7
1a00542a:	e708      	b.n	1a00523e <__udivmoddi4+0xda>
1a00542c:	4637      	mov	r7, r6
1a00542e:	e6e9      	b.n	1a005204 <__udivmoddi4+0xa0>

1a005430 <__aeabi_idiv0>:
1a005430:	4770      	bx	lr
1a005432:	bf00      	nop

1a005434 <_fclose_r>:
1a005434:	b570      	push	{r4, r5, r6, lr}
1a005436:	2900      	cmp	r1, #0
1a005438:	d048      	beq.n	1a0054cc <_fclose_r+0x98>
1a00543a:	4605      	mov	r5, r0
1a00543c:	460c      	mov	r4, r1
1a00543e:	b110      	cbz	r0, 1a005446 <_fclose_r+0x12>
1a005440:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a005442:	2b00      	cmp	r3, #0
1a005444:	d048      	beq.n	1a0054d8 <_fclose_r+0xa4>
1a005446:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a005448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00544c:	07d0      	lsls	r0, r2, #31
1a00544e:	d440      	bmi.n	1a0054d2 <_fclose_r+0x9e>
1a005450:	0599      	lsls	r1, r3, #22
1a005452:	d530      	bpl.n	1a0054b6 <_fclose_r+0x82>
1a005454:	4621      	mov	r1, r4
1a005456:	4628      	mov	r0, r5
1a005458:	f000 f854 	bl	1a005504 <__sflush_r>
1a00545c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00545e:	4606      	mov	r6, r0
1a005460:	b133      	cbz	r3, 1a005470 <_fclose_r+0x3c>
1a005462:	69e1      	ldr	r1, [r4, #28]
1a005464:	4628      	mov	r0, r5
1a005466:	4798      	blx	r3
1a005468:	2800      	cmp	r0, #0
1a00546a:	bfb8      	it	lt
1a00546c:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
1a005470:	89a3      	ldrh	r3, [r4, #12]
1a005472:	061a      	lsls	r2, r3, #24
1a005474:	d43c      	bmi.n	1a0054f0 <_fclose_r+0xbc>
1a005476:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a005478:	b141      	cbz	r1, 1a00548c <_fclose_r+0x58>
1a00547a:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a00547e:	4299      	cmp	r1, r3
1a005480:	d002      	beq.n	1a005488 <_fclose_r+0x54>
1a005482:	4628      	mov	r0, r5
1a005484:	f000 f9cc 	bl	1a005820 <_free_r>
1a005488:	2300      	movs	r3, #0
1a00548a:	6323      	str	r3, [r4, #48]	; 0x30
1a00548c:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a00548e:	b121      	cbz	r1, 1a00549a <_fclose_r+0x66>
1a005490:	4628      	mov	r0, r5
1a005492:	f000 f9c5 	bl	1a005820 <_free_r>
1a005496:	2300      	movs	r3, #0
1a005498:	6463      	str	r3, [r4, #68]	; 0x44
1a00549a:	f000 f965 	bl	1a005768 <__sfp_lock_acquire>
1a00549e:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0054a0:	2200      	movs	r2, #0
1a0054a2:	07db      	lsls	r3, r3, #31
1a0054a4:	81a2      	strh	r2, [r4, #12]
1a0054a6:	d51f      	bpl.n	1a0054e8 <_fclose_r+0xb4>
1a0054a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0054aa:	f000 fb0b 	bl	1a005ac4 <__retarget_lock_close_recursive>
1a0054ae:	f000 f961 	bl	1a005774 <__sfp_lock_release>
1a0054b2:	4630      	mov	r0, r6
1a0054b4:	bd70      	pop	{r4, r5, r6, pc}
1a0054b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0054b8:	f000 fb06 	bl	1a005ac8 <__retarget_lock_acquire_recursive>
1a0054bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0054c0:	2b00      	cmp	r3, #0
1a0054c2:	d1c7      	bne.n	1a005454 <_fclose_r+0x20>
1a0054c4:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a0054c6:	f016 0601 	ands.w	r6, r6, #1
1a0054ca:	d016      	beq.n	1a0054fa <_fclose_r+0xc6>
1a0054cc:	2600      	movs	r6, #0
1a0054ce:	4630      	mov	r0, r6
1a0054d0:	bd70      	pop	{r4, r5, r6, pc}
1a0054d2:	2b00      	cmp	r3, #0
1a0054d4:	d0fa      	beq.n	1a0054cc <_fclose_r+0x98>
1a0054d6:	e7bd      	b.n	1a005454 <_fclose_r+0x20>
1a0054d8:	f000 f91a 	bl	1a005710 <__sinit>
1a0054dc:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a0054de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0054e2:	07d0      	lsls	r0, r2, #31
1a0054e4:	d4f5      	bmi.n	1a0054d2 <_fclose_r+0x9e>
1a0054e6:	e7b3      	b.n	1a005450 <_fclose_r+0x1c>
1a0054e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0054ea:	f000 faef 	bl	1a005acc <__retarget_lock_release_recursive>
1a0054ee:	e7db      	b.n	1a0054a8 <_fclose_r+0x74>
1a0054f0:	6921      	ldr	r1, [r4, #16]
1a0054f2:	4628      	mov	r0, r5
1a0054f4:	f000 f994 	bl	1a005820 <_free_r>
1a0054f8:	e7bd      	b.n	1a005476 <_fclose_r+0x42>
1a0054fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0054fc:	f000 fae6 	bl	1a005acc <__retarget_lock_release_recursive>
1a005500:	4630      	mov	r0, r6
1a005502:	bd70      	pop	{r4, r5, r6, pc}

1a005504 <__sflush_r>:
1a005504:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a005508:	b29a      	uxth	r2, r3
1a00550a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00550e:	460c      	mov	r4, r1
1a005510:	0711      	lsls	r1, r2, #28
1a005512:	4680      	mov	r8, r0
1a005514:	d444      	bmi.n	1a0055a0 <__sflush_r+0x9c>
1a005516:	6862      	ldr	r2, [r4, #4]
1a005518:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00551c:	2a00      	cmp	r2, #0
1a00551e:	81a3      	strh	r3, [r4, #12]
1a005520:	dd59      	ble.n	1a0055d6 <__sflush_r+0xd2>
1a005522:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a005524:	2d00      	cmp	r5, #0
1a005526:	d053      	beq.n	1a0055d0 <__sflush_r+0xcc>
1a005528:	2200      	movs	r2, #0
1a00552a:	b29b      	uxth	r3, r3
1a00552c:	f8d8 6000 	ldr.w	r6, [r8]
1a005530:	69e1      	ldr	r1, [r4, #28]
1a005532:	f8c8 2000 	str.w	r2, [r8]
1a005536:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1a00553a:	f040 8083 	bne.w	1a005644 <__sflush_r+0x140>
1a00553e:	2301      	movs	r3, #1
1a005540:	4640      	mov	r0, r8
1a005542:	47a8      	blx	r5
1a005544:	1c42      	adds	r2, r0, #1
1a005546:	d04a      	beq.n	1a0055de <__sflush_r+0xda>
1a005548:	89a3      	ldrh	r3, [r4, #12]
1a00554a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a00554c:	69e1      	ldr	r1, [r4, #28]
1a00554e:	075b      	lsls	r3, r3, #29
1a005550:	d505      	bpl.n	1a00555e <__sflush_r+0x5a>
1a005552:	6862      	ldr	r2, [r4, #4]
1a005554:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a005556:	1a80      	subs	r0, r0, r2
1a005558:	b10b      	cbz	r3, 1a00555e <__sflush_r+0x5a>
1a00555a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00555c:	1ac0      	subs	r0, r0, r3
1a00555e:	4602      	mov	r2, r0
1a005560:	2300      	movs	r3, #0
1a005562:	4640      	mov	r0, r8
1a005564:	47a8      	blx	r5
1a005566:	1c47      	adds	r7, r0, #1
1a005568:	d045      	beq.n	1a0055f6 <__sflush_r+0xf2>
1a00556a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00556e:	6922      	ldr	r2, [r4, #16]
1a005570:	6022      	str	r2, [r4, #0]
1a005572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a005576:	2200      	movs	r2, #0
1a005578:	81a3      	strh	r3, [r4, #12]
1a00557a:	04db      	lsls	r3, r3, #19
1a00557c:	6062      	str	r2, [r4, #4]
1a00557e:	d500      	bpl.n	1a005582 <__sflush_r+0x7e>
1a005580:	6520      	str	r0, [r4, #80]	; 0x50
1a005582:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a005584:	f8c8 6000 	str.w	r6, [r8]
1a005588:	b311      	cbz	r1, 1a0055d0 <__sflush_r+0xcc>
1a00558a:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a00558e:	4299      	cmp	r1, r3
1a005590:	d002      	beq.n	1a005598 <__sflush_r+0x94>
1a005592:	4640      	mov	r0, r8
1a005594:	f000 f944 	bl	1a005820 <_free_r>
1a005598:	2000      	movs	r0, #0
1a00559a:	6320      	str	r0, [r4, #48]	; 0x30
1a00559c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0055a0:	6926      	ldr	r6, [r4, #16]
1a0055a2:	b1ae      	cbz	r6, 1a0055d0 <__sflush_r+0xcc>
1a0055a4:	6825      	ldr	r5, [r4, #0]
1a0055a6:	6026      	str	r6, [r4, #0]
1a0055a8:	0792      	lsls	r2, r2, #30
1a0055aa:	bf0c      	ite	eq
1a0055ac:	6963      	ldreq	r3, [r4, #20]
1a0055ae:	2300      	movne	r3, #0
1a0055b0:	1bad      	subs	r5, r5, r6
1a0055b2:	60a3      	str	r3, [r4, #8]
1a0055b4:	e00a      	b.n	1a0055cc <__sflush_r+0xc8>
1a0055b6:	462b      	mov	r3, r5
1a0055b8:	4632      	mov	r2, r6
1a0055ba:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a0055bc:	69e1      	ldr	r1, [r4, #28]
1a0055be:	4640      	mov	r0, r8
1a0055c0:	47b8      	blx	r7
1a0055c2:	2800      	cmp	r0, #0
1a0055c4:	eba5 0500 	sub.w	r5, r5, r0
1a0055c8:	4406      	add	r6, r0
1a0055ca:	dd2b      	ble.n	1a005624 <__sflush_r+0x120>
1a0055cc:	2d00      	cmp	r5, #0
1a0055ce:	dcf2      	bgt.n	1a0055b6 <__sflush_r+0xb2>
1a0055d0:	2000      	movs	r0, #0
1a0055d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0055d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0055d8:	2a00      	cmp	r2, #0
1a0055da:	dca2      	bgt.n	1a005522 <__sflush_r+0x1e>
1a0055dc:	e7f8      	b.n	1a0055d0 <__sflush_r+0xcc>
1a0055de:	f8d8 3000 	ldr.w	r3, [r8]
1a0055e2:	2b00      	cmp	r3, #0
1a0055e4:	d0b0      	beq.n	1a005548 <__sflush_r+0x44>
1a0055e6:	2b1d      	cmp	r3, #29
1a0055e8:	d001      	beq.n	1a0055ee <__sflush_r+0xea>
1a0055ea:	2b16      	cmp	r3, #22
1a0055ec:	d12c      	bne.n	1a005648 <__sflush_r+0x144>
1a0055ee:	f8c8 6000 	str.w	r6, [r8]
1a0055f2:	2000      	movs	r0, #0
1a0055f4:	e7ed      	b.n	1a0055d2 <__sflush_r+0xce>
1a0055f6:	f8d8 1000 	ldr.w	r1, [r8]
1a0055fa:	291d      	cmp	r1, #29
1a0055fc:	d81a      	bhi.n	1a005634 <__sflush_r+0x130>
1a0055fe:	4b15      	ldr	r3, [pc, #84]	; (1a005654 <__sflush_r+0x150>)
1a005600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a005604:	40cb      	lsrs	r3, r1
1a005606:	43db      	mvns	r3, r3
1a005608:	f013 0301 	ands.w	r3, r3, #1
1a00560c:	d114      	bne.n	1a005638 <__sflush_r+0x134>
1a00560e:	6925      	ldr	r5, [r4, #16]
1a005610:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
1a005614:	e9c4 5300 	strd	r5, r3, [r4]
1a005618:	04d5      	lsls	r5, r2, #19
1a00561a:	81a2      	strh	r2, [r4, #12]
1a00561c:	d5b1      	bpl.n	1a005582 <__sflush_r+0x7e>
1a00561e:	2900      	cmp	r1, #0
1a005620:	d1af      	bne.n	1a005582 <__sflush_r+0x7e>
1a005622:	e7ad      	b.n	1a005580 <__sflush_r+0x7c>
1a005624:	89a3      	ldrh	r3, [r4, #12]
1a005626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00562a:	81a3      	strh	r3, [r4, #12]
1a00562c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a005638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a00563c:	81a2      	strh	r2, [r4, #12]
1a00563e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005642:	e7c6      	b.n	1a0055d2 <__sflush_r+0xce>
1a005644:	6d20      	ldr	r0, [r4, #80]	; 0x50
1a005646:	e782      	b.n	1a00554e <__sflush_r+0x4a>
1a005648:	89a3      	ldrh	r3, [r4, #12]
1a00564a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00564e:	81a3      	strh	r3, [r4, #12]
1a005650:	e7bf      	b.n	1a0055d2 <__sflush_r+0xce>
1a005652:	bf00      	nop
1a005654:	20400001 	.word	0x20400001

1a005658 <_fflush_r>:
1a005658:	b538      	push	{r3, r4, r5, lr}
1a00565a:	460d      	mov	r5, r1
1a00565c:	4604      	mov	r4, r0
1a00565e:	b108      	cbz	r0, 1a005664 <_fflush_r+0xc>
1a005660:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a005662:	b1a3      	cbz	r3, 1a00568e <_fflush_r+0x36>
1a005664:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a005668:	b1b8      	cbz	r0, 1a00569a <_fflush_r+0x42>
1a00566a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a00566c:	07db      	lsls	r3, r3, #31
1a00566e:	d401      	bmi.n	1a005674 <_fflush_r+0x1c>
1a005670:	0581      	lsls	r1, r0, #22
1a005672:	d51a      	bpl.n	1a0056aa <_fflush_r+0x52>
1a005674:	4620      	mov	r0, r4
1a005676:	4629      	mov	r1, r5
1a005678:	f7ff ff44 	bl	1a005504 <__sflush_r>
1a00567c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a00567e:	07da      	lsls	r2, r3, #31
1a005680:	4604      	mov	r4, r0
1a005682:	d402      	bmi.n	1a00568a <_fflush_r+0x32>
1a005684:	89ab      	ldrh	r3, [r5, #12]
1a005686:	059b      	lsls	r3, r3, #22
1a005688:	d50a      	bpl.n	1a0056a0 <_fflush_r+0x48>
1a00568a:	4620      	mov	r0, r4
1a00568c:	bd38      	pop	{r3, r4, r5, pc}
1a00568e:	f000 f83f 	bl	1a005710 <__sinit>
1a005692:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a005696:	2800      	cmp	r0, #0
1a005698:	d1e7      	bne.n	1a00566a <_fflush_r+0x12>
1a00569a:	4604      	mov	r4, r0
1a00569c:	4620      	mov	r0, r4
1a00569e:	bd38      	pop	{r3, r4, r5, pc}
1a0056a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0056a2:	f000 fa13 	bl	1a005acc <__retarget_lock_release_recursive>
1a0056a6:	4620      	mov	r0, r4
1a0056a8:	bd38      	pop	{r3, r4, r5, pc}
1a0056aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0056ac:	f000 fa0c 	bl	1a005ac8 <__retarget_lock_acquire_recursive>
1a0056b0:	e7e0      	b.n	1a005674 <_fflush_r+0x1c>
1a0056b2:	bf00      	nop

1a0056b4 <std>:
1a0056b4:	b510      	push	{r4, lr}
1a0056b6:	2300      	movs	r3, #0
1a0056b8:	4604      	mov	r4, r0
1a0056ba:	8181      	strh	r1, [r0, #12]
1a0056bc:	81c2      	strh	r2, [r0, #14]
1a0056be:	e9c0 3300 	strd	r3, r3, [r0]
1a0056c2:	6083      	str	r3, [r0, #8]
1a0056c4:	6643      	str	r3, [r0, #100]	; 0x64
1a0056c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0056ca:	6183      	str	r3, [r0, #24]
1a0056cc:	4619      	mov	r1, r3
1a0056ce:	2208      	movs	r2, #8
1a0056d0:	305c      	adds	r0, #92	; 0x5c
1a0056d2:	f000 fd51 	bl	1a006178 <memset>
1a0056d6:	4807      	ldr	r0, [pc, #28]	; (1a0056f4 <std+0x40>)
1a0056d8:	4907      	ldr	r1, [pc, #28]	; (1a0056f8 <std+0x44>)
1a0056da:	4a08      	ldr	r2, [pc, #32]	; (1a0056fc <std+0x48>)
1a0056dc:	4b08      	ldr	r3, [pc, #32]	; (1a005700 <std+0x4c>)
1a0056de:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0056e0:	e9c4 4007 	strd	r4, r0, [r4, #28]
1a0056e4:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
1a0056e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a0056ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0056f0:	f000 b9e6 	b.w	1a005ac0 <__retarget_lock_init_recursive>
1a0056f4:	1a0062f9 	.word	0x1a0062f9
1a0056f8:	1a00631d 	.word	0x1a00631d
1a0056fc:	1a006359 	.word	0x1a006359
1a005700:	1a006379 	.word	0x1a006379

1a005704 <_cleanup_r>:
1a005704:	4901      	ldr	r1, [pc, #4]	; (1a00570c <_cleanup_r+0x8>)
1a005706:	f000 b97f 	b.w	1a005a08 <_fwalk_reent>
1a00570a:	bf00      	nop
1a00570c:	1a005435 	.word	0x1a005435

1a005710 <__sinit>:
1a005710:	b510      	push	{r4, lr}
1a005712:	4604      	mov	r4, r0
1a005714:	4812      	ldr	r0, [pc, #72]	; (1a005760 <__sinit+0x50>)
1a005716:	f000 f9d7 	bl	1a005ac8 <__retarget_lock_acquire_recursive>
1a00571a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00571c:	b9d2      	cbnz	r2, 1a005754 <__sinit+0x44>
1a00571e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
1a005722:	4810      	ldr	r0, [pc, #64]	; (1a005764 <__sinit+0x54>)
1a005724:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
1a005728:	2103      	movs	r1, #3
1a00572a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
1a00572e:	63e0      	str	r0, [r4, #60]	; 0x3c
1a005730:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
1a005734:	6860      	ldr	r0, [r4, #4]
1a005736:	2104      	movs	r1, #4
1a005738:	f7ff ffbc 	bl	1a0056b4 <std>
1a00573c:	2201      	movs	r2, #1
1a00573e:	2109      	movs	r1, #9
1a005740:	68a0      	ldr	r0, [r4, #8]
1a005742:	f7ff ffb7 	bl	1a0056b4 <std>
1a005746:	2202      	movs	r2, #2
1a005748:	2112      	movs	r1, #18
1a00574a:	68e0      	ldr	r0, [r4, #12]
1a00574c:	f7ff ffb2 	bl	1a0056b4 <std>
1a005750:	2301      	movs	r3, #1
1a005752:	63a3      	str	r3, [r4, #56]	; 0x38
1a005754:	4802      	ldr	r0, [pc, #8]	; (1a005760 <__sinit+0x50>)
1a005756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a00575a:	f000 b9b7 	b.w	1a005acc <__retarget_lock_release_recursive>
1a00575e:	bf00      	nop
1a005760:	10007a10 	.word	0x10007a10
1a005764:	1a005705 	.word	0x1a005705

1a005768 <__sfp_lock_acquire>:
1a005768:	4801      	ldr	r0, [pc, #4]	; (1a005770 <__sfp_lock_acquire+0x8>)
1a00576a:	f000 b9ad 	b.w	1a005ac8 <__retarget_lock_acquire_recursive>
1a00576e:	bf00      	nop
1a005770:	10007a24 	.word	0x10007a24

1a005774 <__sfp_lock_release>:
1a005774:	4801      	ldr	r0, [pc, #4]	; (1a00577c <__sfp_lock_release+0x8>)
1a005776:	f000 b9a9 	b.w	1a005acc <__retarget_lock_release_recursive>
1a00577a:	bf00      	nop
1a00577c:	10007a24 	.word	0x10007a24

1a005780 <_malloc_trim_r>:
1a005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005782:	4f24      	ldr	r7, [pc, #144]	; (1a005814 <_malloc_trim_r+0x94>)
1a005784:	460c      	mov	r4, r1
1a005786:	4606      	mov	r6, r0
1a005788:	f000 fd40 	bl	1a00620c <__malloc_lock>
1a00578c:	68bb      	ldr	r3, [r7, #8]
1a00578e:	685d      	ldr	r5, [r3, #4]
1a005790:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1a005794:	310f      	adds	r1, #15
1a005796:	f025 0503 	bic.w	r5, r5, #3
1a00579a:	4429      	add	r1, r5
1a00579c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a0057a0:	f021 010f 	bic.w	r1, r1, #15
1a0057a4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a0057a8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a0057ac:	db07      	blt.n	1a0057be <_malloc_trim_r+0x3e>
1a0057ae:	2100      	movs	r1, #0
1a0057b0:	4630      	mov	r0, r6
1a0057b2:	f7fb fd95 	bl	1a0012e0 <_sbrk_r>
1a0057b6:	68bb      	ldr	r3, [r7, #8]
1a0057b8:	442b      	add	r3, r5
1a0057ba:	4298      	cmp	r0, r3
1a0057bc:	d004      	beq.n	1a0057c8 <_malloc_trim_r+0x48>
1a0057be:	4630      	mov	r0, r6
1a0057c0:	f000 fd2a 	bl	1a006218 <__malloc_unlock>
1a0057c4:	2000      	movs	r0, #0
1a0057c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0057c8:	4261      	negs	r1, r4
1a0057ca:	4630      	mov	r0, r6
1a0057cc:	f7fb fd88 	bl	1a0012e0 <_sbrk_r>
1a0057d0:	3001      	adds	r0, #1
1a0057d2:	d00d      	beq.n	1a0057f0 <_malloc_trim_r+0x70>
1a0057d4:	4b10      	ldr	r3, [pc, #64]	; (1a005818 <_malloc_trim_r+0x98>)
1a0057d6:	68ba      	ldr	r2, [r7, #8]
1a0057d8:	6819      	ldr	r1, [r3, #0]
1a0057da:	1b2d      	subs	r5, r5, r4
1a0057dc:	f045 0501 	orr.w	r5, r5, #1
1a0057e0:	4630      	mov	r0, r6
1a0057e2:	1b09      	subs	r1, r1, r4
1a0057e4:	6055      	str	r5, [r2, #4]
1a0057e6:	6019      	str	r1, [r3, #0]
1a0057e8:	f000 fd16 	bl	1a006218 <__malloc_unlock>
1a0057ec:	2001      	movs	r0, #1
1a0057ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0057f0:	2100      	movs	r1, #0
1a0057f2:	4630      	mov	r0, r6
1a0057f4:	f7fb fd74 	bl	1a0012e0 <_sbrk_r>
1a0057f8:	68ba      	ldr	r2, [r7, #8]
1a0057fa:	1a83      	subs	r3, r0, r2
1a0057fc:	2b0f      	cmp	r3, #15
1a0057fe:	ddde      	ble.n	1a0057be <_malloc_trim_r+0x3e>
1a005800:	4c06      	ldr	r4, [pc, #24]	; (1a00581c <_malloc_trim_r+0x9c>)
1a005802:	4905      	ldr	r1, [pc, #20]	; (1a005818 <_malloc_trim_r+0x98>)
1a005804:	6824      	ldr	r4, [r4, #0]
1a005806:	f043 0301 	orr.w	r3, r3, #1
1a00580a:	1b00      	subs	r0, r0, r4
1a00580c:	6053      	str	r3, [r2, #4]
1a00580e:	6008      	str	r0, [r1, #0]
1a005810:	e7d5      	b.n	1a0057be <_malloc_trim_r+0x3e>
1a005812:	bf00      	nop
1a005814:	10000664 	.word	0x10000664
1a005818:	100078fc 	.word	0x100078fc
1a00581c:	10000a6c 	.word	0x10000a6c

1a005820 <_free_r>:
1a005820:	2900      	cmp	r1, #0
1a005822:	d053      	beq.n	1a0058cc <_free_r+0xac>
1a005824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005826:	460c      	mov	r4, r1
1a005828:	4606      	mov	r6, r0
1a00582a:	f000 fcef 	bl	1a00620c <__malloc_lock>
1a00582e:	f854 cc04 	ldr.w	ip, [r4, #-4]
1a005832:	4f71      	ldr	r7, [pc, #452]	; (1a0059f8 <_free_r+0x1d8>)
1a005834:	f02c 0101 	bic.w	r1, ip, #1
1a005838:	f1a4 0508 	sub.w	r5, r4, #8
1a00583c:	186b      	adds	r3, r5, r1
1a00583e:	68b8      	ldr	r0, [r7, #8]
1a005840:	685a      	ldr	r2, [r3, #4]
1a005842:	4298      	cmp	r0, r3
1a005844:	f022 0203 	bic.w	r2, r2, #3
1a005848:	d053      	beq.n	1a0058f2 <_free_r+0xd2>
1a00584a:	f01c 0f01 	tst.w	ip, #1
1a00584e:	605a      	str	r2, [r3, #4]
1a005850:	eb03 0002 	add.w	r0, r3, r2
1a005854:	d13b      	bne.n	1a0058ce <_free_r+0xae>
1a005856:	f854 cc08 	ldr.w	ip, [r4, #-8]
1a00585a:	6840      	ldr	r0, [r0, #4]
1a00585c:	eba5 050c 	sub.w	r5, r5, ip
1a005860:	f107 0e08 	add.w	lr, r7, #8
1a005864:	68ac      	ldr	r4, [r5, #8]
1a005866:	4574      	cmp	r4, lr
1a005868:	4461      	add	r1, ip
1a00586a:	f000 0001 	and.w	r0, r0, #1
1a00586e:	d075      	beq.n	1a00595c <_free_r+0x13c>
1a005870:	f8d5 c00c 	ldr.w	ip, [r5, #12]
1a005874:	f8c4 c00c 	str.w	ip, [r4, #12]
1a005878:	f8cc 4008 	str.w	r4, [ip, #8]
1a00587c:	b360      	cbz	r0, 1a0058d8 <_free_r+0xb8>
1a00587e:	f041 0301 	orr.w	r3, r1, #1
1a005882:	606b      	str	r3, [r5, #4]
1a005884:	5069      	str	r1, [r5, r1]
1a005886:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
1a00588a:	d350      	bcc.n	1a00592e <_free_r+0x10e>
1a00588c:	0a4b      	lsrs	r3, r1, #9
1a00588e:	2b04      	cmp	r3, #4
1a005890:	d870      	bhi.n	1a005974 <_free_r+0x154>
1a005892:	098b      	lsrs	r3, r1, #6
1a005894:	f103 0439 	add.w	r4, r3, #57	; 0x39
1a005898:	00e4      	lsls	r4, r4, #3
1a00589a:	f103 0238 	add.w	r2, r3, #56	; 0x38
1a00589e:	1938      	adds	r0, r7, r4
1a0058a0:	593b      	ldr	r3, [r7, r4]
1a0058a2:	3808      	subs	r0, #8
1a0058a4:	4298      	cmp	r0, r3
1a0058a6:	d078      	beq.n	1a00599a <_free_r+0x17a>
1a0058a8:	685a      	ldr	r2, [r3, #4]
1a0058aa:	f022 0203 	bic.w	r2, r2, #3
1a0058ae:	428a      	cmp	r2, r1
1a0058b0:	d971      	bls.n	1a005996 <_free_r+0x176>
1a0058b2:	689b      	ldr	r3, [r3, #8]
1a0058b4:	4298      	cmp	r0, r3
1a0058b6:	d1f7      	bne.n	1a0058a8 <_free_r+0x88>
1a0058b8:	68c3      	ldr	r3, [r0, #12]
1a0058ba:	e9c5 0302 	strd	r0, r3, [r5, #8]
1a0058be:	609d      	str	r5, [r3, #8]
1a0058c0:	60c5      	str	r5, [r0, #12]
1a0058c2:	4630      	mov	r0, r6
1a0058c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a0058c8:	f000 bca6 	b.w	1a006218 <__malloc_unlock>
1a0058cc:	4770      	bx	lr
1a0058ce:	6840      	ldr	r0, [r0, #4]
1a0058d0:	f000 0001 	and.w	r0, r0, #1
1a0058d4:	2800      	cmp	r0, #0
1a0058d6:	d1d2      	bne.n	1a00587e <_free_r+0x5e>
1a0058d8:	6898      	ldr	r0, [r3, #8]
1a0058da:	4c48      	ldr	r4, [pc, #288]	; (1a0059fc <_free_r+0x1dc>)
1a0058dc:	4411      	add	r1, r2
1a0058de:	42a0      	cmp	r0, r4
1a0058e0:	f041 0201 	orr.w	r2, r1, #1
1a0058e4:	d062      	beq.n	1a0059ac <_free_r+0x18c>
1a0058e6:	68db      	ldr	r3, [r3, #12]
1a0058e8:	60c3      	str	r3, [r0, #12]
1a0058ea:	6098      	str	r0, [r3, #8]
1a0058ec:	606a      	str	r2, [r5, #4]
1a0058ee:	5069      	str	r1, [r5, r1]
1a0058f0:	e7c9      	b.n	1a005886 <_free_r+0x66>
1a0058f2:	f01c 0f01 	tst.w	ip, #1
1a0058f6:	440a      	add	r2, r1
1a0058f8:	d107      	bne.n	1a00590a <_free_r+0xea>
1a0058fa:	f854 3c08 	ldr.w	r3, [r4, #-8]
1a0058fe:	1aed      	subs	r5, r5, r3
1a005900:	441a      	add	r2, r3
1a005902:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
1a005906:	60cb      	str	r3, [r1, #12]
1a005908:	6099      	str	r1, [r3, #8]
1a00590a:	4b3d      	ldr	r3, [pc, #244]	; (1a005a00 <_free_r+0x1e0>)
1a00590c:	681b      	ldr	r3, [r3, #0]
1a00590e:	f042 0101 	orr.w	r1, r2, #1
1a005912:	4293      	cmp	r3, r2
1a005914:	6069      	str	r1, [r5, #4]
1a005916:	60bd      	str	r5, [r7, #8]
1a005918:	d804      	bhi.n	1a005924 <_free_r+0x104>
1a00591a:	4b3a      	ldr	r3, [pc, #232]	; (1a005a04 <_free_r+0x1e4>)
1a00591c:	4630      	mov	r0, r6
1a00591e:	6819      	ldr	r1, [r3, #0]
1a005920:	f7ff ff2e 	bl	1a005780 <_malloc_trim_r>
1a005924:	4630      	mov	r0, r6
1a005926:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a00592a:	f000 bc75 	b.w	1a006218 <__malloc_unlock>
1a00592e:	08c9      	lsrs	r1, r1, #3
1a005930:	6878      	ldr	r0, [r7, #4]
1a005932:	1c4a      	adds	r2, r1, #1
1a005934:	2301      	movs	r3, #1
1a005936:	1089      	asrs	r1, r1, #2
1a005938:	408b      	lsls	r3, r1
1a00593a:	4303      	orrs	r3, r0
1a00593c:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
1a005940:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
1a005944:	607b      	str	r3, [r7, #4]
1a005946:	3908      	subs	r1, #8
1a005948:	e9c5 0102 	strd	r0, r1, [r5, #8]
1a00594c:	f847 5032 	str.w	r5, [r7, r2, lsl #3]
1a005950:	60c5      	str	r5, [r0, #12]
1a005952:	4630      	mov	r0, r6
1a005954:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a005958:	f000 bc5e 	b.w	1a006218 <__malloc_unlock>
1a00595c:	2800      	cmp	r0, #0
1a00595e:	d145      	bne.n	1a0059ec <_free_r+0x1cc>
1a005960:	440a      	add	r2, r1
1a005962:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
1a005966:	f042 0001 	orr.w	r0, r2, #1
1a00596a:	60cb      	str	r3, [r1, #12]
1a00596c:	6099      	str	r1, [r3, #8]
1a00596e:	6068      	str	r0, [r5, #4]
1a005970:	50aa      	str	r2, [r5, r2]
1a005972:	e7d7      	b.n	1a005924 <_free_r+0x104>
1a005974:	2b14      	cmp	r3, #20
1a005976:	d908      	bls.n	1a00598a <_free_r+0x16a>
1a005978:	2b54      	cmp	r3, #84	; 0x54
1a00597a:	d81e      	bhi.n	1a0059ba <_free_r+0x19a>
1a00597c:	0b0b      	lsrs	r3, r1, #12
1a00597e:	f103 046f 	add.w	r4, r3, #111	; 0x6f
1a005982:	00e4      	lsls	r4, r4, #3
1a005984:	f103 026e 	add.w	r2, r3, #110	; 0x6e
1a005988:	e789      	b.n	1a00589e <_free_r+0x7e>
1a00598a:	f103 045c 	add.w	r4, r3, #92	; 0x5c
1a00598e:	00e4      	lsls	r4, r4, #3
1a005990:	f103 025b 	add.w	r2, r3, #91	; 0x5b
1a005994:	e783      	b.n	1a00589e <_free_r+0x7e>
1a005996:	4618      	mov	r0, r3
1a005998:	e78e      	b.n	1a0058b8 <_free_r+0x98>
1a00599a:	1093      	asrs	r3, r2, #2
1a00599c:	6879      	ldr	r1, [r7, #4]
1a00599e:	2201      	movs	r2, #1
1a0059a0:	fa02 f303 	lsl.w	r3, r2, r3
1a0059a4:	430b      	orrs	r3, r1
1a0059a6:	607b      	str	r3, [r7, #4]
1a0059a8:	4603      	mov	r3, r0
1a0059aa:	e786      	b.n	1a0058ba <_free_r+0x9a>
1a0059ac:	e9c7 5504 	strd	r5, r5, [r7, #16]
1a0059b0:	e9c5 0002 	strd	r0, r0, [r5, #8]
1a0059b4:	606a      	str	r2, [r5, #4]
1a0059b6:	5069      	str	r1, [r5, r1]
1a0059b8:	e7b4      	b.n	1a005924 <_free_r+0x104>
1a0059ba:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a0059be:	d806      	bhi.n	1a0059ce <_free_r+0x1ae>
1a0059c0:	0bcb      	lsrs	r3, r1, #15
1a0059c2:	f103 0478 	add.w	r4, r3, #120	; 0x78
1a0059c6:	00e4      	lsls	r4, r4, #3
1a0059c8:	f103 0277 	add.w	r2, r3, #119	; 0x77
1a0059cc:	e767      	b.n	1a00589e <_free_r+0x7e>
1a0059ce:	f240 5254 	movw	r2, #1364	; 0x554
1a0059d2:	4293      	cmp	r3, r2
1a0059d4:	d806      	bhi.n	1a0059e4 <_free_r+0x1c4>
1a0059d6:	0c8b      	lsrs	r3, r1, #18
1a0059d8:	f103 047d 	add.w	r4, r3, #125	; 0x7d
1a0059dc:	00e4      	lsls	r4, r4, #3
1a0059de:	f103 027c 	add.w	r2, r3, #124	; 0x7c
1a0059e2:	e75c      	b.n	1a00589e <_free_r+0x7e>
1a0059e4:	f44f 747e 	mov.w	r4, #1016	; 0x3f8
1a0059e8:	227e      	movs	r2, #126	; 0x7e
1a0059ea:	e758      	b.n	1a00589e <_free_r+0x7e>
1a0059ec:	f041 0201 	orr.w	r2, r1, #1
1a0059f0:	606a      	str	r2, [r5, #4]
1a0059f2:	6019      	str	r1, [r3, #0]
1a0059f4:	e796      	b.n	1a005924 <_free_r+0x104>
1a0059f6:	bf00      	nop
1a0059f8:	10000664 	.word	0x10000664
1a0059fc:	1000066c 	.word	0x1000066c
1a005a00:	10000a70 	.word	0x10000a70
1a005a04:	1000792c 	.word	0x1000792c

1a005a08 <_fwalk_reent>:
1a005a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a005a0c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1a005a10:	d01f      	beq.n	1a005a52 <_fwalk_reent+0x4a>
1a005a12:	4688      	mov	r8, r1
1a005a14:	4606      	mov	r6, r0
1a005a16:	f04f 0900 	mov.w	r9, #0
1a005a1a:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
1a005a1e:	3d01      	subs	r5, #1
1a005a20:	d411      	bmi.n	1a005a46 <_fwalk_reent+0x3e>
1a005a22:	89a3      	ldrh	r3, [r4, #12]
1a005a24:	2b01      	cmp	r3, #1
1a005a26:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a005a2a:	4621      	mov	r1, r4
1a005a2c:	4630      	mov	r0, r6
1a005a2e:	d906      	bls.n	1a005a3e <_fwalk_reent+0x36>
1a005a30:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a005a34:	3301      	adds	r3, #1
1a005a36:	d002      	beq.n	1a005a3e <_fwalk_reent+0x36>
1a005a38:	47c0      	blx	r8
1a005a3a:	ea49 0900 	orr.w	r9, r9, r0
1a005a3e:	1c6b      	adds	r3, r5, #1
1a005a40:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a005a44:	d1ed      	bne.n	1a005a22 <_fwalk_reent+0x1a>
1a005a46:	683f      	ldr	r7, [r7, #0]
1a005a48:	2f00      	cmp	r7, #0
1a005a4a:	d1e6      	bne.n	1a005a1a <_fwalk_reent+0x12>
1a005a4c:	4648      	mov	r0, r9
1a005a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a005a52:	46b9      	mov	r9, r7
1a005a54:	4648      	mov	r0, r9
1a005a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a005a5a:	bf00      	nop

1a005a5c <__libc_init_array>:
1a005a5c:	b570      	push	{r4, r5, r6, lr}
1a005a5e:	4e0d      	ldr	r6, [pc, #52]	; (1a005a94 <__libc_init_array+0x38>)
1a005a60:	4d0d      	ldr	r5, [pc, #52]	; (1a005a98 <__libc_init_array+0x3c>)
1a005a62:	1b76      	subs	r6, r6, r5
1a005a64:	10b6      	asrs	r6, r6, #2
1a005a66:	d006      	beq.n	1a005a76 <__libc_init_array+0x1a>
1a005a68:	2400      	movs	r4, #0
1a005a6a:	3401      	adds	r4, #1
1a005a6c:	f855 3b04 	ldr.w	r3, [r5], #4
1a005a70:	4798      	blx	r3
1a005a72:	42a6      	cmp	r6, r4
1a005a74:	d1f9      	bne.n	1a005a6a <__libc_init_array+0xe>
1a005a76:	4e09      	ldr	r6, [pc, #36]	; (1a005a9c <__libc_init_array+0x40>)
1a005a78:	4d09      	ldr	r5, [pc, #36]	; (1a005aa0 <__libc_init_array+0x44>)
1a005a7a:	1b76      	subs	r6, r6, r5
1a005a7c:	f7fb fbdb 	bl	1a001236 <_init>
1a005a80:	10b6      	asrs	r6, r6, #2
1a005a82:	d006      	beq.n	1a005a92 <__libc_init_array+0x36>
1a005a84:	2400      	movs	r4, #0
1a005a86:	3401      	adds	r4, #1
1a005a88:	f855 3b04 	ldr.w	r3, [r5], #4
1a005a8c:	4798      	blx	r3
1a005a8e:	42a6      	cmp	r6, r4
1a005a90:	d1f9      	bne.n	1a005a86 <__libc_init_array+0x2a>
1a005a92:	bd70      	pop	{r4, r5, r6, pc}
1a005a94:	1a00abc4 	.word	0x1a00abc4
1a005a98:	1a00abc4 	.word	0x1a00abc4
1a005a9c:	1a00abc8 	.word	0x1a00abc8
1a005aa0:	1a00abc4 	.word	0x1a00abc4

1a005aa4 <__locale_mb_cur_max>:
1a005aa4:	4b04      	ldr	r3, [pc, #16]	; (1a005ab8 <__locale_mb_cur_max+0x14>)
1a005aa6:	4a05      	ldr	r2, [pc, #20]	; (1a005abc <__locale_mb_cur_max+0x18>)
1a005aa8:	681b      	ldr	r3, [r3, #0]
1a005aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a005aac:	2b00      	cmp	r3, #0
1a005aae:	bf08      	it	eq
1a005ab0:	4613      	moveq	r3, r2
1a005ab2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
1a005ab6:	4770      	bx	lr
1a005ab8:	100000cc 	.word	0x100000cc
1a005abc:	100004f8 	.word	0x100004f8

1a005ac0 <__retarget_lock_init_recursive>:
1a005ac0:	4770      	bx	lr
1a005ac2:	bf00      	nop

1a005ac4 <__retarget_lock_close_recursive>:
1a005ac4:	4770      	bx	lr
1a005ac6:	bf00      	nop

1a005ac8 <__retarget_lock_acquire_recursive>:
1a005ac8:	4770      	bx	lr
1a005aca:	bf00      	nop

1a005acc <__retarget_lock_release_recursive>:
1a005acc:	4770      	bx	lr
1a005ace:	bf00      	nop

1a005ad0 <_malloc_r>:
1a005ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005ad4:	f101 050b 	add.w	r5, r1, #11
1a005ad8:	2d16      	cmp	r5, #22
1a005ada:	b083      	sub	sp, #12
1a005adc:	4606      	mov	r6, r0
1a005ade:	d823      	bhi.n	1a005b28 <_malloc_r+0x58>
1a005ae0:	2910      	cmp	r1, #16
1a005ae2:	f200 80b9 	bhi.w	1a005c58 <_malloc_r+0x188>
1a005ae6:	f000 fb91 	bl	1a00620c <__malloc_lock>
1a005aea:	2510      	movs	r5, #16
1a005aec:	2318      	movs	r3, #24
1a005aee:	2002      	movs	r0, #2
1a005af0:	4fc5      	ldr	r7, [pc, #788]	; (1a005e08 <_malloc_r+0x338>)
1a005af2:	443b      	add	r3, r7
1a005af4:	f1a3 0208 	sub.w	r2, r3, #8
1a005af8:	685c      	ldr	r4, [r3, #4]
1a005afa:	4294      	cmp	r4, r2
1a005afc:	f000 8166 	beq.w	1a005dcc <_malloc_r+0x2fc>
1a005b00:	6863      	ldr	r3, [r4, #4]
1a005b02:	f023 0303 	bic.w	r3, r3, #3
1a005b06:	4423      	add	r3, r4
1a005b08:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
1a005b0c:	685a      	ldr	r2, [r3, #4]
1a005b0e:	60e9      	str	r1, [r5, #12]
1a005b10:	f042 0201 	orr.w	r2, r2, #1
1a005b14:	608d      	str	r5, [r1, #8]
1a005b16:	4630      	mov	r0, r6
1a005b18:	605a      	str	r2, [r3, #4]
1a005b1a:	f000 fb7d 	bl	1a006218 <__malloc_unlock>
1a005b1e:	3408      	adds	r4, #8
1a005b20:	4620      	mov	r0, r4
1a005b22:	b003      	add	sp, #12
1a005b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005b28:	f035 0507 	bics.w	r5, r5, #7
1a005b2c:	f100 8094 	bmi.w	1a005c58 <_malloc_r+0x188>
1a005b30:	42a9      	cmp	r1, r5
1a005b32:	f200 8091 	bhi.w	1a005c58 <_malloc_r+0x188>
1a005b36:	f000 fb69 	bl	1a00620c <__malloc_lock>
1a005b3a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a005b3e:	f0c0 8183 	bcc.w	1a005e48 <_malloc_r+0x378>
1a005b42:	0a6b      	lsrs	r3, r5, #9
1a005b44:	f000 808f 	beq.w	1a005c66 <_malloc_r+0x196>
1a005b48:	2b04      	cmp	r3, #4
1a005b4a:	f200 8146 	bhi.w	1a005dda <_malloc_r+0x30a>
1a005b4e:	09ab      	lsrs	r3, r5, #6
1a005b50:	f103 0039 	add.w	r0, r3, #57	; 0x39
1a005b54:	f103 0c38 	add.w	ip, r3, #56	; 0x38
1a005b58:	00c3      	lsls	r3, r0, #3
1a005b5a:	4fab      	ldr	r7, [pc, #684]	; (1a005e08 <_malloc_r+0x338>)
1a005b5c:	443b      	add	r3, r7
1a005b5e:	f1a3 0108 	sub.w	r1, r3, #8
1a005b62:	685c      	ldr	r4, [r3, #4]
1a005b64:	42a1      	cmp	r1, r4
1a005b66:	d106      	bne.n	1a005b76 <_malloc_r+0xa6>
1a005b68:	e00c      	b.n	1a005b84 <_malloc_r+0xb4>
1a005b6a:	2a00      	cmp	r2, #0
1a005b6c:	f280 811d 	bge.w	1a005daa <_malloc_r+0x2da>
1a005b70:	68e4      	ldr	r4, [r4, #12]
1a005b72:	42a1      	cmp	r1, r4
1a005b74:	d006      	beq.n	1a005b84 <_malloc_r+0xb4>
1a005b76:	6863      	ldr	r3, [r4, #4]
1a005b78:	f023 0303 	bic.w	r3, r3, #3
1a005b7c:	1b5a      	subs	r2, r3, r5
1a005b7e:	2a0f      	cmp	r2, #15
1a005b80:	ddf3      	ble.n	1a005b6a <_malloc_r+0x9a>
1a005b82:	4660      	mov	r0, ip
1a005b84:	693c      	ldr	r4, [r7, #16]
1a005b86:	f8df c294 	ldr.w	ip, [pc, #660]	; 1a005e1c <_malloc_r+0x34c>
1a005b8a:	4564      	cmp	r4, ip
1a005b8c:	d071      	beq.n	1a005c72 <_malloc_r+0x1a2>
1a005b8e:	6863      	ldr	r3, [r4, #4]
1a005b90:	f023 0303 	bic.w	r3, r3, #3
1a005b94:	1b5a      	subs	r2, r3, r5
1a005b96:	2a0f      	cmp	r2, #15
1a005b98:	f300 8144 	bgt.w	1a005e24 <_malloc_r+0x354>
1a005b9c:	2a00      	cmp	r2, #0
1a005b9e:	e9c7 cc04 	strd	ip, ip, [r7, #16]
1a005ba2:	f280 8126 	bge.w	1a005df2 <_malloc_r+0x322>
1a005ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a005baa:	f080 8169 	bcs.w	1a005e80 <_malloc_r+0x3b0>
1a005bae:	08db      	lsrs	r3, r3, #3
1a005bb0:	1c59      	adds	r1, r3, #1
1a005bb2:	687a      	ldr	r2, [r7, #4]
1a005bb4:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
1a005bb8:	f8c4 8008 	str.w	r8, [r4, #8]
1a005bbc:	f04f 0e01 	mov.w	lr, #1
1a005bc0:	109b      	asrs	r3, r3, #2
1a005bc2:	fa0e f303 	lsl.w	r3, lr, r3
1a005bc6:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
1a005bca:	4313      	orrs	r3, r2
1a005bcc:	f1ae 0208 	sub.w	r2, lr, #8
1a005bd0:	60e2      	str	r2, [r4, #12]
1a005bd2:	607b      	str	r3, [r7, #4]
1a005bd4:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1a005bd8:	f8c8 400c 	str.w	r4, [r8, #12]
1a005bdc:	1082      	asrs	r2, r0, #2
1a005bde:	2401      	movs	r4, #1
1a005be0:	4094      	lsls	r4, r2
1a005be2:	429c      	cmp	r4, r3
1a005be4:	d84b      	bhi.n	1a005c7e <_malloc_r+0x1ae>
1a005be6:	421c      	tst	r4, r3
1a005be8:	d106      	bne.n	1a005bf8 <_malloc_r+0x128>
1a005bea:	f020 0003 	bic.w	r0, r0, #3
1a005bee:	0064      	lsls	r4, r4, #1
1a005bf0:	421c      	tst	r4, r3
1a005bf2:	f100 0004 	add.w	r0, r0, #4
1a005bf6:	d0fa      	beq.n	1a005bee <_malloc_r+0x11e>
1a005bf8:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1a005bfc:	46ce      	mov	lr, r9
1a005bfe:	4680      	mov	r8, r0
1a005c00:	f8de 300c 	ldr.w	r3, [lr, #12]
1a005c04:	459e      	cmp	lr, r3
1a005c06:	d107      	bne.n	1a005c18 <_malloc_r+0x148>
1a005c08:	e122      	b.n	1a005e50 <_malloc_r+0x380>
1a005c0a:	2a00      	cmp	r2, #0
1a005c0c:	f280 8129 	bge.w	1a005e62 <_malloc_r+0x392>
1a005c10:	68db      	ldr	r3, [r3, #12]
1a005c12:	459e      	cmp	lr, r3
1a005c14:	f000 811c 	beq.w	1a005e50 <_malloc_r+0x380>
1a005c18:	6859      	ldr	r1, [r3, #4]
1a005c1a:	f021 0103 	bic.w	r1, r1, #3
1a005c1e:	1b4a      	subs	r2, r1, r5
1a005c20:	2a0f      	cmp	r2, #15
1a005c22:	ddf2      	ble.n	1a005c0a <_malloc_r+0x13a>
1a005c24:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
1a005c28:	195c      	adds	r4, r3, r5
1a005c2a:	f045 0501 	orr.w	r5, r5, #1
1a005c2e:	605d      	str	r5, [r3, #4]
1a005c30:	f042 0501 	orr.w	r5, r2, #1
1a005c34:	f8c8 e00c 	str.w	lr, [r8, #12]
1a005c38:	4630      	mov	r0, r6
1a005c3a:	f8ce 8008 	str.w	r8, [lr, #8]
1a005c3e:	e9c7 4404 	strd	r4, r4, [r7, #16]
1a005c42:	e9c4 cc02 	strd	ip, ip, [r4, #8]
1a005c46:	6065      	str	r5, [r4, #4]
1a005c48:	505a      	str	r2, [r3, r1]
1a005c4a:	9301      	str	r3, [sp, #4]
1a005c4c:	f000 fae4 	bl	1a006218 <__malloc_unlock>
1a005c50:	9b01      	ldr	r3, [sp, #4]
1a005c52:	f103 0408 	add.w	r4, r3, #8
1a005c56:	e763      	b.n	1a005b20 <_malloc_r+0x50>
1a005c58:	2400      	movs	r4, #0
1a005c5a:	230c      	movs	r3, #12
1a005c5c:	4620      	mov	r0, r4
1a005c5e:	6033      	str	r3, [r6, #0]
1a005c60:	b003      	add	sp, #12
1a005c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005c66:	f44f 7300 	mov.w	r3, #512	; 0x200
1a005c6a:	2040      	movs	r0, #64	; 0x40
1a005c6c:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
1a005c70:	e773      	b.n	1a005b5a <_malloc_r+0x8a>
1a005c72:	687b      	ldr	r3, [r7, #4]
1a005c74:	1082      	asrs	r2, r0, #2
1a005c76:	2401      	movs	r4, #1
1a005c78:	4094      	lsls	r4, r2
1a005c7a:	429c      	cmp	r4, r3
1a005c7c:	d9b3      	bls.n	1a005be6 <_malloc_r+0x116>
1a005c7e:	68bc      	ldr	r4, [r7, #8]
1a005c80:	6863      	ldr	r3, [r4, #4]
1a005c82:	f023 0903 	bic.w	r9, r3, #3
1a005c86:	45a9      	cmp	r9, r5
1a005c88:	d303      	bcc.n	1a005c92 <_malloc_r+0x1c2>
1a005c8a:	eba9 0305 	sub.w	r3, r9, r5
1a005c8e:	2b0f      	cmp	r3, #15
1a005c90:	dc7b      	bgt.n	1a005d8a <_malloc_r+0x2ba>
1a005c92:	4b5e      	ldr	r3, [pc, #376]	; (1a005e0c <_malloc_r+0x33c>)
1a005c94:	f8df a188 	ldr.w	sl, [pc, #392]	; 1a005e20 <_malloc_r+0x350>
1a005c98:	681a      	ldr	r2, [r3, #0]
1a005c9a:	f8da 3000 	ldr.w	r3, [sl]
1a005c9e:	3301      	adds	r3, #1
1a005ca0:	eb05 0802 	add.w	r8, r5, r2
1a005ca4:	f000 8148 	beq.w	1a005f38 <_malloc_r+0x468>
1a005ca8:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
1a005cac:	f108 080f 	add.w	r8, r8, #15
1a005cb0:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
1a005cb4:	f028 080f 	bic.w	r8, r8, #15
1a005cb8:	4641      	mov	r1, r8
1a005cba:	4630      	mov	r0, r6
1a005cbc:	f7fb fb10 	bl	1a0012e0 <_sbrk_r>
1a005cc0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a005cc4:	4683      	mov	fp, r0
1a005cc6:	f000 8104 	beq.w	1a005ed2 <_malloc_r+0x402>
1a005cca:	eb04 0009 	add.w	r0, r4, r9
1a005cce:	4558      	cmp	r0, fp
1a005cd0:	f200 80fd 	bhi.w	1a005ece <_malloc_r+0x3fe>
1a005cd4:	4a4e      	ldr	r2, [pc, #312]	; (1a005e10 <_malloc_r+0x340>)
1a005cd6:	6813      	ldr	r3, [r2, #0]
1a005cd8:	4443      	add	r3, r8
1a005cda:	6013      	str	r3, [r2, #0]
1a005cdc:	f000 814d 	beq.w	1a005f7a <_malloc_r+0x4aa>
1a005ce0:	f8da 1000 	ldr.w	r1, [sl]
1a005ce4:	3101      	adds	r1, #1
1a005ce6:	bf1b      	ittet	ne
1a005ce8:	ebab 0000 	subne.w	r0, fp, r0
1a005cec:	181b      	addne	r3, r3, r0
1a005cee:	f8ca b000 	streq.w	fp, [sl]
1a005cf2:	6013      	strne	r3, [r2, #0]
1a005cf4:	f01b 0307 	ands.w	r3, fp, #7
1a005cf8:	f000 8134 	beq.w	1a005f64 <_malloc_r+0x494>
1a005cfc:	f1c3 0108 	rsb	r1, r3, #8
1a005d00:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
1a005d04:	448b      	add	fp, r1
1a005d06:	3308      	adds	r3, #8
1a005d08:	44d8      	add	r8, fp
1a005d0a:	f3c8 080b 	ubfx	r8, r8, #0, #12
1a005d0e:	eba3 0808 	sub.w	r8, r3, r8
1a005d12:	4641      	mov	r1, r8
1a005d14:	4630      	mov	r0, r6
1a005d16:	9201      	str	r2, [sp, #4]
1a005d18:	f7fb fae2 	bl	1a0012e0 <_sbrk_r>
1a005d1c:	1c43      	adds	r3, r0, #1
1a005d1e:	9a01      	ldr	r2, [sp, #4]
1a005d20:	f000 8146 	beq.w	1a005fb0 <_malloc_r+0x4e0>
1a005d24:	eba0 010b 	sub.w	r1, r0, fp
1a005d28:	4441      	add	r1, r8
1a005d2a:	f041 0101 	orr.w	r1, r1, #1
1a005d2e:	6813      	ldr	r3, [r2, #0]
1a005d30:	f8c7 b008 	str.w	fp, [r7, #8]
1a005d34:	4443      	add	r3, r8
1a005d36:	42bc      	cmp	r4, r7
1a005d38:	f8cb 1004 	str.w	r1, [fp, #4]
1a005d3c:	6013      	str	r3, [r2, #0]
1a005d3e:	d015      	beq.n	1a005d6c <_malloc_r+0x29c>
1a005d40:	f1b9 0f0f 	cmp.w	r9, #15
1a005d44:	f240 8130 	bls.w	1a005fa8 <_malloc_r+0x4d8>
1a005d48:	6860      	ldr	r0, [r4, #4]
1a005d4a:	f1a9 010c 	sub.w	r1, r9, #12
1a005d4e:	f021 0107 	bic.w	r1, r1, #7
1a005d52:	f000 0001 	and.w	r0, r0, #1
1a005d56:	eb04 0c01 	add.w	ip, r4, r1
1a005d5a:	4308      	orrs	r0, r1
1a005d5c:	f04f 0e05 	mov.w	lr, #5
1a005d60:	290f      	cmp	r1, #15
1a005d62:	6060      	str	r0, [r4, #4]
1a005d64:	e9cc ee01 	strd	lr, lr, [ip, #4]
1a005d68:	f200 813a 	bhi.w	1a005fe0 <_malloc_r+0x510>
1a005d6c:	4a29      	ldr	r2, [pc, #164]	; (1a005e14 <_malloc_r+0x344>)
1a005d6e:	482a      	ldr	r0, [pc, #168]	; (1a005e18 <_malloc_r+0x348>)
1a005d70:	6811      	ldr	r1, [r2, #0]
1a005d72:	68bc      	ldr	r4, [r7, #8]
1a005d74:	428b      	cmp	r3, r1
1a005d76:	6801      	ldr	r1, [r0, #0]
1a005d78:	bf88      	it	hi
1a005d7a:	6013      	strhi	r3, [r2, #0]
1a005d7c:	6862      	ldr	r2, [r4, #4]
1a005d7e:	428b      	cmp	r3, r1
1a005d80:	f022 0203 	bic.w	r2, r2, #3
1a005d84:	bf88      	it	hi
1a005d86:	6003      	strhi	r3, [r0, #0]
1a005d88:	e0a7      	b.n	1a005eda <_malloc_r+0x40a>
1a005d8a:	1962      	adds	r2, r4, r5
1a005d8c:	f043 0301 	orr.w	r3, r3, #1
1a005d90:	f045 0501 	orr.w	r5, r5, #1
1a005d94:	6065      	str	r5, [r4, #4]
1a005d96:	4630      	mov	r0, r6
1a005d98:	60ba      	str	r2, [r7, #8]
1a005d9a:	6053      	str	r3, [r2, #4]
1a005d9c:	f000 fa3c 	bl	1a006218 <__malloc_unlock>
1a005da0:	3408      	adds	r4, #8
1a005da2:	4620      	mov	r0, r4
1a005da4:	b003      	add	sp, #12
1a005da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005daa:	4423      	add	r3, r4
1a005dac:	68e1      	ldr	r1, [r4, #12]
1a005dae:	685a      	ldr	r2, [r3, #4]
1a005db0:	68a5      	ldr	r5, [r4, #8]
1a005db2:	f042 0201 	orr.w	r2, r2, #1
1a005db6:	60e9      	str	r1, [r5, #12]
1a005db8:	4630      	mov	r0, r6
1a005dba:	608d      	str	r5, [r1, #8]
1a005dbc:	605a      	str	r2, [r3, #4]
1a005dbe:	f000 fa2b 	bl	1a006218 <__malloc_unlock>
1a005dc2:	3408      	adds	r4, #8
1a005dc4:	4620      	mov	r0, r4
1a005dc6:	b003      	add	sp, #12
1a005dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005dcc:	68dc      	ldr	r4, [r3, #12]
1a005dce:	42a3      	cmp	r3, r4
1a005dd0:	bf08      	it	eq
1a005dd2:	3002      	addeq	r0, #2
1a005dd4:	f43f aed6 	beq.w	1a005b84 <_malloc_r+0xb4>
1a005dd8:	e692      	b.n	1a005b00 <_malloc_r+0x30>
1a005dda:	2b14      	cmp	r3, #20
1a005ddc:	d971      	bls.n	1a005ec2 <_malloc_r+0x3f2>
1a005dde:	2b54      	cmp	r3, #84	; 0x54
1a005de0:	f200 80ad 	bhi.w	1a005f3e <_malloc_r+0x46e>
1a005de4:	0b2b      	lsrs	r3, r5, #12
1a005de6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1a005dea:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
1a005dee:	00c3      	lsls	r3, r0, #3
1a005df0:	e6b3      	b.n	1a005b5a <_malloc_r+0x8a>
1a005df2:	4423      	add	r3, r4
1a005df4:	4630      	mov	r0, r6
1a005df6:	685a      	ldr	r2, [r3, #4]
1a005df8:	f042 0201 	orr.w	r2, r2, #1
1a005dfc:	605a      	str	r2, [r3, #4]
1a005dfe:	3408      	adds	r4, #8
1a005e00:	f000 fa0a 	bl	1a006218 <__malloc_unlock>
1a005e04:	e68c      	b.n	1a005b20 <_malloc_r+0x50>
1a005e06:	bf00      	nop
1a005e08:	10000664 	.word	0x10000664
1a005e0c:	1000792c 	.word	0x1000792c
1a005e10:	100078fc 	.word	0x100078fc
1a005e14:	10007924 	.word	0x10007924
1a005e18:	10007928 	.word	0x10007928
1a005e1c:	1000066c 	.word	0x1000066c
1a005e20:	10000a6c 	.word	0x10000a6c
1a005e24:	1961      	adds	r1, r4, r5
1a005e26:	f045 0e01 	orr.w	lr, r5, #1
1a005e2a:	f042 0501 	orr.w	r5, r2, #1
1a005e2e:	f8c4 e004 	str.w	lr, [r4, #4]
1a005e32:	4630      	mov	r0, r6
1a005e34:	e9c7 1104 	strd	r1, r1, [r7, #16]
1a005e38:	e9c1 cc02 	strd	ip, ip, [r1, #8]
1a005e3c:	604d      	str	r5, [r1, #4]
1a005e3e:	50e2      	str	r2, [r4, r3]
1a005e40:	f000 f9ea 	bl	1a006218 <__malloc_unlock>
1a005e44:	3408      	adds	r4, #8
1a005e46:	e66b      	b.n	1a005b20 <_malloc_r+0x50>
1a005e48:	08e8      	lsrs	r0, r5, #3
1a005e4a:	f105 0308 	add.w	r3, r5, #8
1a005e4e:	e64f      	b.n	1a005af0 <_malloc_r+0x20>
1a005e50:	f108 0801 	add.w	r8, r8, #1
1a005e54:	f018 0f03 	tst.w	r8, #3
1a005e58:	f10e 0e08 	add.w	lr, lr, #8
1a005e5c:	f47f aed0 	bne.w	1a005c00 <_malloc_r+0x130>
1a005e60:	e052      	b.n	1a005f08 <_malloc_r+0x438>
1a005e62:	4419      	add	r1, r3
1a005e64:	461c      	mov	r4, r3
1a005e66:	684a      	ldr	r2, [r1, #4]
1a005e68:	68db      	ldr	r3, [r3, #12]
1a005e6a:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a005e6e:	f042 0201 	orr.w	r2, r2, #1
1a005e72:	604a      	str	r2, [r1, #4]
1a005e74:	4630      	mov	r0, r6
1a005e76:	60eb      	str	r3, [r5, #12]
1a005e78:	609d      	str	r5, [r3, #8]
1a005e7a:	f000 f9cd 	bl	1a006218 <__malloc_unlock>
1a005e7e:	e64f      	b.n	1a005b20 <_malloc_r+0x50>
1a005e80:	0a5a      	lsrs	r2, r3, #9
1a005e82:	2a04      	cmp	r2, #4
1a005e84:	d935      	bls.n	1a005ef2 <_malloc_r+0x422>
1a005e86:	2a14      	cmp	r2, #20
1a005e88:	d86f      	bhi.n	1a005f6a <_malloc_r+0x49a>
1a005e8a:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1a005e8e:	00c9      	lsls	r1, r1, #3
1a005e90:	325b      	adds	r2, #91	; 0x5b
1a005e92:	eb07 0e01 	add.w	lr, r7, r1
1a005e96:	5879      	ldr	r1, [r7, r1]
1a005e98:	f1ae 0e08 	sub.w	lr, lr, #8
1a005e9c:	458e      	cmp	lr, r1
1a005e9e:	d058      	beq.n	1a005f52 <_malloc_r+0x482>
1a005ea0:	684a      	ldr	r2, [r1, #4]
1a005ea2:	f022 0203 	bic.w	r2, r2, #3
1a005ea6:	429a      	cmp	r2, r3
1a005ea8:	d902      	bls.n	1a005eb0 <_malloc_r+0x3e0>
1a005eaa:	6889      	ldr	r1, [r1, #8]
1a005eac:	458e      	cmp	lr, r1
1a005eae:	d1f7      	bne.n	1a005ea0 <_malloc_r+0x3d0>
1a005eb0:	f8d1 e00c 	ldr.w	lr, [r1, #12]
1a005eb4:	687b      	ldr	r3, [r7, #4]
1a005eb6:	e9c4 1e02 	strd	r1, lr, [r4, #8]
1a005eba:	f8ce 4008 	str.w	r4, [lr, #8]
1a005ebe:	60cc      	str	r4, [r1, #12]
1a005ec0:	e68c      	b.n	1a005bdc <_malloc_r+0x10c>
1a005ec2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1a005ec6:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
1a005eca:	00c3      	lsls	r3, r0, #3
1a005ecc:	e645      	b.n	1a005b5a <_malloc_r+0x8a>
1a005ece:	42bc      	cmp	r4, r7
1a005ed0:	d072      	beq.n	1a005fb8 <_malloc_r+0x4e8>
1a005ed2:	68bc      	ldr	r4, [r7, #8]
1a005ed4:	6862      	ldr	r2, [r4, #4]
1a005ed6:	f022 0203 	bic.w	r2, r2, #3
1a005eda:	4295      	cmp	r5, r2
1a005edc:	eba2 0305 	sub.w	r3, r2, r5
1a005ee0:	d802      	bhi.n	1a005ee8 <_malloc_r+0x418>
1a005ee2:	2b0f      	cmp	r3, #15
1a005ee4:	f73f af51 	bgt.w	1a005d8a <_malloc_r+0x2ba>
1a005ee8:	4630      	mov	r0, r6
1a005eea:	f000 f995 	bl	1a006218 <__malloc_unlock>
1a005eee:	2400      	movs	r4, #0
1a005ef0:	e616      	b.n	1a005b20 <_malloc_r+0x50>
1a005ef2:	099a      	lsrs	r2, r3, #6
1a005ef4:	f102 0139 	add.w	r1, r2, #57	; 0x39
1a005ef8:	00c9      	lsls	r1, r1, #3
1a005efa:	3238      	adds	r2, #56	; 0x38
1a005efc:	e7c9      	b.n	1a005e92 <_malloc_r+0x3c2>
1a005efe:	f8d9 9000 	ldr.w	r9, [r9]
1a005f02:	4599      	cmp	r9, r3
1a005f04:	f040 8083 	bne.w	1a00600e <_malloc_r+0x53e>
1a005f08:	f010 0f03 	tst.w	r0, #3
1a005f0c:	f1a9 0308 	sub.w	r3, r9, #8
1a005f10:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
1a005f14:	d1f3      	bne.n	1a005efe <_malloc_r+0x42e>
1a005f16:	687b      	ldr	r3, [r7, #4]
1a005f18:	ea23 0304 	bic.w	r3, r3, r4
1a005f1c:	607b      	str	r3, [r7, #4]
1a005f1e:	0064      	lsls	r4, r4, #1
1a005f20:	429c      	cmp	r4, r3
1a005f22:	f63f aeac 	bhi.w	1a005c7e <_malloc_r+0x1ae>
1a005f26:	b91c      	cbnz	r4, 1a005f30 <_malloc_r+0x460>
1a005f28:	e6a9      	b.n	1a005c7e <_malloc_r+0x1ae>
1a005f2a:	0064      	lsls	r4, r4, #1
1a005f2c:	f108 0804 	add.w	r8, r8, #4
1a005f30:	421c      	tst	r4, r3
1a005f32:	d0fa      	beq.n	1a005f2a <_malloc_r+0x45a>
1a005f34:	4640      	mov	r0, r8
1a005f36:	e65f      	b.n	1a005bf8 <_malloc_r+0x128>
1a005f38:	f108 0810 	add.w	r8, r8, #16
1a005f3c:	e6bc      	b.n	1a005cb8 <_malloc_r+0x1e8>
1a005f3e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a005f42:	d826      	bhi.n	1a005f92 <_malloc_r+0x4c2>
1a005f44:	0beb      	lsrs	r3, r5, #15
1a005f46:	f103 0078 	add.w	r0, r3, #120	; 0x78
1a005f4a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
1a005f4e:	00c3      	lsls	r3, r0, #3
1a005f50:	e603      	b.n	1a005b5a <_malloc_r+0x8a>
1a005f52:	687b      	ldr	r3, [r7, #4]
1a005f54:	1092      	asrs	r2, r2, #2
1a005f56:	f04f 0801 	mov.w	r8, #1
1a005f5a:	fa08 f202 	lsl.w	r2, r8, r2
1a005f5e:	4313      	orrs	r3, r2
1a005f60:	607b      	str	r3, [r7, #4]
1a005f62:	e7a8      	b.n	1a005eb6 <_malloc_r+0x3e6>
1a005f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
1a005f68:	e6ce      	b.n	1a005d08 <_malloc_r+0x238>
1a005f6a:	2a54      	cmp	r2, #84	; 0x54
1a005f6c:	d829      	bhi.n	1a005fc2 <_malloc_r+0x4f2>
1a005f6e:	0b1a      	lsrs	r2, r3, #12
1a005f70:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1a005f74:	00c9      	lsls	r1, r1, #3
1a005f76:	326e      	adds	r2, #110	; 0x6e
1a005f78:	e78b      	b.n	1a005e92 <_malloc_r+0x3c2>
1a005f7a:	f3c0 010b 	ubfx	r1, r0, #0, #12
1a005f7e:	2900      	cmp	r1, #0
1a005f80:	f47f aeae 	bne.w	1a005ce0 <_malloc_r+0x210>
1a005f84:	eb09 0208 	add.w	r2, r9, r8
1a005f88:	68b9      	ldr	r1, [r7, #8]
1a005f8a:	f042 0201 	orr.w	r2, r2, #1
1a005f8e:	604a      	str	r2, [r1, #4]
1a005f90:	e6ec      	b.n	1a005d6c <_malloc_r+0x29c>
1a005f92:	f240 5254 	movw	r2, #1364	; 0x554
1a005f96:	4293      	cmp	r3, r2
1a005f98:	d81c      	bhi.n	1a005fd4 <_malloc_r+0x504>
1a005f9a:	0cab      	lsrs	r3, r5, #18
1a005f9c:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1a005fa0:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
1a005fa4:	00c3      	lsls	r3, r0, #3
1a005fa6:	e5d8      	b.n	1a005b5a <_malloc_r+0x8a>
1a005fa8:	2301      	movs	r3, #1
1a005faa:	f8cb 3004 	str.w	r3, [fp, #4]
1a005fae:	e79b      	b.n	1a005ee8 <_malloc_r+0x418>
1a005fb0:	2101      	movs	r1, #1
1a005fb2:	f04f 0800 	mov.w	r8, #0
1a005fb6:	e6ba      	b.n	1a005d2e <_malloc_r+0x25e>
1a005fb8:	4a16      	ldr	r2, [pc, #88]	; (1a006014 <_malloc_r+0x544>)
1a005fba:	6813      	ldr	r3, [r2, #0]
1a005fbc:	4443      	add	r3, r8
1a005fbe:	6013      	str	r3, [r2, #0]
1a005fc0:	e68e      	b.n	1a005ce0 <_malloc_r+0x210>
1a005fc2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a005fc6:	d814      	bhi.n	1a005ff2 <_malloc_r+0x522>
1a005fc8:	0bda      	lsrs	r2, r3, #15
1a005fca:	f102 0178 	add.w	r1, r2, #120	; 0x78
1a005fce:	00c9      	lsls	r1, r1, #3
1a005fd0:	3277      	adds	r2, #119	; 0x77
1a005fd2:	e75e      	b.n	1a005e92 <_malloc_r+0x3c2>
1a005fd4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1a005fd8:	207f      	movs	r0, #127	; 0x7f
1a005fda:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
1a005fde:	e5bc      	b.n	1a005b5a <_malloc_r+0x8a>
1a005fe0:	f104 0108 	add.w	r1, r4, #8
1a005fe4:	4630      	mov	r0, r6
1a005fe6:	9201      	str	r2, [sp, #4]
1a005fe8:	f7ff fc1a 	bl	1a005820 <_free_r>
1a005fec:	9a01      	ldr	r2, [sp, #4]
1a005fee:	6813      	ldr	r3, [r2, #0]
1a005ff0:	e6bc      	b.n	1a005d6c <_malloc_r+0x29c>
1a005ff2:	f240 5154 	movw	r1, #1364	; 0x554
1a005ff6:	428a      	cmp	r2, r1
1a005ff8:	d805      	bhi.n	1a006006 <_malloc_r+0x536>
1a005ffa:	0c9a      	lsrs	r2, r3, #18
1a005ffc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1a006000:	00c9      	lsls	r1, r1, #3
1a006002:	327c      	adds	r2, #124	; 0x7c
1a006004:	e745      	b.n	1a005e92 <_malloc_r+0x3c2>
1a006006:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1a00600a:	227e      	movs	r2, #126	; 0x7e
1a00600c:	e741      	b.n	1a005e92 <_malloc_r+0x3c2>
1a00600e:	687b      	ldr	r3, [r7, #4]
1a006010:	e785      	b.n	1a005f1e <_malloc_r+0x44e>
1a006012:	bf00      	nop
1a006014:	100078fc 	.word	0x100078fc

1a006018 <__ascii_mbtowc>:
1a006018:	b082      	sub	sp, #8
1a00601a:	b149      	cbz	r1, 1a006030 <__ascii_mbtowc+0x18>
1a00601c:	b15a      	cbz	r2, 1a006036 <__ascii_mbtowc+0x1e>
1a00601e:	b16b      	cbz	r3, 1a00603c <__ascii_mbtowc+0x24>
1a006020:	7813      	ldrb	r3, [r2, #0]
1a006022:	600b      	str	r3, [r1, #0]
1a006024:	7812      	ldrb	r2, [r2, #0]
1a006026:	1c10      	adds	r0, r2, #0
1a006028:	bf18      	it	ne
1a00602a:	2001      	movne	r0, #1
1a00602c:	b002      	add	sp, #8
1a00602e:	4770      	bx	lr
1a006030:	a901      	add	r1, sp, #4
1a006032:	2a00      	cmp	r2, #0
1a006034:	d1f3      	bne.n	1a00601e <__ascii_mbtowc+0x6>
1a006036:	4610      	mov	r0, r2
1a006038:	b002      	add	sp, #8
1a00603a:	4770      	bx	lr
1a00603c:	f06f 0001 	mvn.w	r0, #1
1a006040:	e7f4      	b.n	1a00602c <__ascii_mbtowc+0x14>
1a006042:	bf00      	nop

1a006044 <memcpy>:
1a006044:	4684      	mov	ip, r0
1a006046:	ea41 0300 	orr.w	r3, r1, r0
1a00604a:	f013 0303 	ands.w	r3, r3, #3
1a00604e:	d16d      	bne.n	1a00612c <memcpy+0xe8>
1a006050:	3a40      	subs	r2, #64	; 0x40
1a006052:	d341      	bcc.n	1a0060d8 <memcpy+0x94>
1a006054:	f851 3b04 	ldr.w	r3, [r1], #4
1a006058:	f840 3b04 	str.w	r3, [r0], #4
1a00605c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006060:	f840 3b04 	str.w	r3, [r0], #4
1a006064:	f851 3b04 	ldr.w	r3, [r1], #4
1a006068:	f840 3b04 	str.w	r3, [r0], #4
1a00606c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006070:	f840 3b04 	str.w	r3, [r0], #4
1a006074:	f851 3b04 	ldr.w	r3, [r1], #4
1a006078:	f840 3b04 	str.w	r3, [r0], #4
1a00607c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006080:	f840 3b04 	str.w	r3, [r0], #4
1a006084:	f851 3b04 	ldr.w	r3, [r1], #4
1a006088:	f840 3b04 	str.w	r3, [r0], #4
1a00608c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006090:	f840 3b04 	str.w	r3, [r0], #4
1a006094:	f851 3b04 	ldr.w	r3, [r1], #4
1a006098:	f840 3b04 	str.w	r3, [r0], #4
1a00609c:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060a0:	f840 3b04 	str.w	r3, [r0], #4
1a0060a4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060a8:	f840 3b04 	str.w	r3, [r0], #4
1a0060ac:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060b0:	f840 3b04 	str.w	r3, [r0], #4
1a0060b4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060b8:	f840 3b04 	str.w	r3, [r0], #4
1a0060bc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060c0:	f840 3b04 	str.w	r3, [r0], #4
1a0060c4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060c8:	f840 3b04 	str.w	r3, [r0], #4
1a0060cc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060d0:	f840 3b04 	str.w	r3, [r0], #4
1a0060d4:	3a40      	subs	r2, #64	; 0x40
1a0060d6:	d2bd      	bcs.n	1a006054 <memcpy+0x10>
1a0060d8:	3230      	adds	r2, #48	; 0x30
1a0060da:	d311      	bcc.n	1a006100 <memcpy+0xbc>
1a0060dc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060e0:	f840 3b04 	str.w	r3, [r0], #4
1a0060e4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060e8:	f840 3b04 	str.w	r3, [r0], #4
1a0060ec:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060f0:	f840 3b04 	str.w	r3, [r0], #4
1a0060f4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060f8:	f840 3b04 	str.w	r3, [r0], #4
1a0060fc:	3a10      	subs	r2, #16
1a0060fe:	d2ed      	bcs.n	1a0060dc <memcpy+0x98>
1a006100:	320c      	adds	r2, #12
1a006102:	d305      	bcc.n	1a006110 <memcpy+0xcc>
1a006104:	f851 3b04 	ldr.w	r3, [r1], #4
1a006108:	f840 3b04 	str.w	r3, [r0], #4
1a00610c:	3a04      	subs	r2, #4
1a00610e:	d2f9      	bcs.n	1a006104 <memcpy+0xc0>
1a006110:	3204      	adds	r2, #4
1a006112:	d008      	beq.n	1a006126 <memcpy+0xe2>
1a006114:	07d2      	lsls	r2, r2, #31
1a006116:	bf1c      	itt	ne
1a006118:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a00611c:	f800 3b01 	strbne.w	r3, [r0], #1
1a006120:	d301      	bcc.n	1a006126 <memcpy+0xe2>
1a006122:	880b      	ldrh	r3, [r1, #0]
1a006124:	8003      	strh	r3, [r0, #0]
1a006126:	4660      	mov	r0, ip
1a006128:	4770      	bx	lr
1a00612a:	bf00      	nop
1a00612c:	2a08      	cmp	r2, #8
1a00612e:	d313      	bcc.n	1a006158 <memcpy+0x114>
1a006130:	078b      	lsls	r3, r1, #30
1a006132:	d08d      	beq.n	1a006050 <memcpy+0xc>
1a006134:	f010 0303 	ands.w	r3, r0, #3
1a006138:	d08a      	beq.n	1a006050 <memcpy+0xc>
1a00613a:	f1c3 0304 	rsb	r3, r3, #4
1a00613e:	1ad2      	subs	r2, r2, r3
1a006140:	07db      	lsls	r3, r3, #31
1a006142:	bf1c      	itt	ne
1a006144:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a006148:	f800 3b01 	strbne.w	r3, [r0], #1
1a00614c:	d380      	bcc.n	1a006050 <memcpy+0xc>
1a00614e:	f831 3b02 	ldrh.w	r3, [r1], #2
1a006152:	f820 3b02 	strh.w	r3, [r0], #2
1a006156:	e77b      	b.n	1a006050 <memcpy+0xc>
1a006158:	3a04      	subs	r2, #4
1a00615a:	d3d9      	bcc.n	1a006110 <memcpy+0xcc>
1a00615c:	3a01      	subs	r2, #1
1a00615e:	f811 3b01 	ldrb.w	r3, [r1], #1
1a006162:	f800 3b01 	strb.w	r3, [r0], #1
1a006166:	d2f9      	bcs.n	1a00615c <memcpy+0x118>
1a006168:	780b      	ldrb	r3, [r1, #0]
1a00616a:	7003      	strb	r3, [r0, #0]
1a00616c:	784b      	ldrb	r3, [r1, #1]
1a00616e:	7043      	strb	r3, [r0, #1]
1a006170:	788b      	ldrb	r3, [r1, #2]
1a006172:	7083      	strb	r3, [r0, #2]
1a006174:	4660      	mov	r0, ip
1a006176:	4770      	bx	lr

1a006178 <memset>:
1a006178:	b4f0      	push	{r4, r5, r6, r7}
1a00617a:	0786      	lsls	r6, r0, #30
1a00617c:	d043      	beq.n	1a006206 <memset+0x8e>
1a00617e:	1e54      	subs	r4, r2, #1
1a006180:	2a00      	cmp	r2, #0
1a006182:	d03e      	beq.n	1a006202 <memset+0x8a>
1a006184:	b2ca      	uxtb	r2, r1
1a006186:	4603      	mov	r3, r0
1a006188:	e002      	b.n	1a006190 <memset+0x18>
1a00618a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a00618e:	d338      	bcc.n	1a006202 <memset+0x8a>
1a006190:	f803 2b01 	strb.w	r2, [r3], #1
1a006194:	079d      	lsls	r5, r3, #30
1a006196:	d1f8      	bne.n	1a00618a <memset+0x12>
1a006198:	2c03      	cmp	r4, #3
1a00619a:	d92b      	bls.n	1a0061f4 <memset+0x7c>
1a00619c:	b2cd      	uxtb	r5, r1
1a00619e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a0061a2:	2c0f      	cmp	r4, #15
1a0061a4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a0061a8:	d916      	bls.n	1a0061d8 <memset+0x60>
1a0061aa:	f1a4 0710 	sub.w	r7, r4, #16
1a0061ae:	093f      	lsrs	r7, r7, #4
1a0061b0:	f103 0620 	add.w	r6, r3, #32
1a0061b4:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a0061b8:	f103 0210 	add.w	r2, r3, #16
1a0061bc:	e942 5504 	strd	r5, r5, [r2, #-16]
1a0061c0:	e942 5502 	strd	r5, r5, [r2, #-8]
1a0061c4:	3210      	adds	r2, #16
1a0061c6:	42b2      	cmp	r2, r6
1a0061c8:	d1f8      	bne.n	1a0061bc <memset+0x44>
1a0061ca:	f004 040f 	and.w	r4, r4, #15
1a0061ce:	3701      	adds	r7, #1
1a0061d0:	2c03      	cmp	r4, #3
1a0061d2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
1a0061d6:	d90d      	bls.n	1a0061f4 <memset+0x7c>
1a0061d8:	461e      	mov	r6, r3
1a0061da:	4622      	mov	r2, r4
1a0061dc:	3a04      	subs	r2, #4
1a0061de:	2a03      	cmp	r2, #3
1a0061e0:	f846 5b04 	str.w	r5, [r6], #4
1a0061e4:	d8fa      	bhi.n	1a0061dc <memset+0x64>
1a0061e6:	1f22      	subs	r2, r4, #4
1a0061e8:	f022 0203 	bic.w	r2, r2, #3
1a0061ec:	3204      	adds	r2, #4
1a0061ee:	4413      	add	r3, r2
1a0061f0:	f004 0403 	and.w	r4, r4, #3
1a0061f4:	b12c      	cbz	r4, 1a006202 <memset+0x8a>
1a0061f6:	b2c9      	uxtb	r1, r1
1a0061f8:	441c      	add	r4, r3
1a0061fa:	f803 1b01 	strb.w	r1, [r3], #1
1a0061fe:	429c      	cmp	r4, r3
1a006200:	d1fb      	bne.n	1a0061fa <memset+0x82>
1a006202:	bcf0      	pop	{r4, r5, r6, r7}
1a006204:	4770      	bx	lr
1a006206:	4614      	mov	r4, r2
1a006208:	4603      	mov	r3, r0
1a00620a:	e7c5      	b.n	1a006198 <memset+0x20>

1a00620c <__malloc_lock>:
1a00620c:	4801      	ldr	r0, [pc, #4]	; (1a006214 <__malloc_lock+0x8>)
1a00620e:	f7ff bc5b 	b.w	1a005ac8 <__retarget_lock_acquire_recursive>
1a006212:	bf00      	nop
1a006214:	10007a14 	.word	0x10007a14

1a006218 <__malloc_unlock>:
1a006218:	4801      	ldr	r0, [pc, #4]	; (1a006220 <__malloc_unlock+0x8>)
1a00621a:	f7ff bc57 	b.w	1a005acc <__retarget_lock_release_recursive>
1a00621e:	bf00      	nop
1a006220:	10007a14 	.word	0x10007a14

1a006224 <printf>:
1a006224:	b40f      	push	{r0, r1, r2, r3}
1a006226:	b500      	push	{lr}
1a006228:	4907      	ldr	r1, [pc, #28]	; (1a006248 <printf+0x24>)
1a00622a:	b083      	sub	sp, #12
1a00622c:	ab04      	add	r3, sp, #16
1a00622e:	6808      	ldr	r0, [r1, #0]
1a006230:	f853 2b04 	ldr.w	r2, [r3], #4
1a006234:	6881      	ldr	r1, [r0, #8]
1a006236:	9301      	str	r3, [sp, #4]
1a006238:	f000 f912 	bl	1a006460 <_vfprintf_r>
1a00623c:	b003      	add	sp, #12
1a00623e:	f85d eb04 	ldr.w	lr, [sp], #4
1a006242:	b004      	add	sp, #16
1a006244:	4770      	bx	lr
1a006246:	bf00      	nop
1a006248:	100000cc 	.word	0x100000cc

1a00624c <_puts_r>:
1a00624c:	b570      	push	{r4, r5, r6, lr}
1a00624e:	4605      	mov	r5, r0
1a006250:	b088      	sub	sp, #32
1a006252:	4608      	mov	r0, r1
1a006254:	460c      	mov	r4, r1
1a006256:	f000 f893 	bl	1a006380 <strlen>
1a00625a:	4a22      	ldr	r2, [pc, #136]	; (1a0062e4 <_puts_r+0x98>)
1a00625c:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a00625e:	9404      	str	r4, [sp, #16]
1a006260:	2601      	movs	r6, #1
1a006262:	1c44      	adds	r4, r0, #1
1a006264:	a904      	add	r1, sp, #16
1a006266:	9206      	str	r2, [sp, #24]
1a006268:	2202      	movs	r2, #2
1a00626a:	9403      	str	r4, [sp, #12]
1a00626c:	9005      	str	r0, [sp, #20]
1a00626e:	68ac      	ldr	r4, [r5, #8]
1a006270:	9607      	str	r6, [sp, #28]
1a006272:	e9cd 1201 	strd	r1, r2, [sp, #4]
1a006276:	b31b      	cbz	r3, 1a0062c0 <_puts_r+0x74>
1a006278:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a00627a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00627e:	07ce      	lsls	r6, r1, #31
1a006280:	b29a      	uxth	r2, r3
1a006282:	d401      	bmi.n	1a006288 <_puts_r+0x3c>
1a006284:	0590      	lsls	r0, r2, #22
1a006286:	d525      	bpl.n	1a0062d4 <_puts_r+0x88>
1a006288:	0491      	lsls	r1, r2, #18
1a00628a:	d406      	bmi.n	1a00629a <_puts_r+0x4e>
1a00628c:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a00628e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a006292:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
1a006296:	81a3      	strh	r3, [r4, #12]
1a006298:	6662      	str	r2, [r4, #100]	; 0x64
1a00629a:	4628      	mov	r0, r5
1a00629c:	aa01      	add	r2, sp, #4
1a00629e:	4621      	mov	r1, r4
1a0062a0:	f002 fe76 	bl	1a008f90 <__sfvwrite_r>
1a0062a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0062a6:	2800      	cmp	r0, #0
1a0062a8:	bf0c      	ite	eq
1a0062aa:	250a      	moveq	r5, #10
1a0062ac:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a0062b0:	07da      	lsls	r2, r3, #31
1a0062b2:	d402      	bmi.n	1a0062ba <_puts_r+0x6e>
1a0062b4:	89a3      	ldrh	r3, [r4, #12]
1a0062b6:	059b      	lsls	r3, r3, #22
1a0062b8:	d506      	bpl.n	1a0062c8 <_puts_r+0x7c>
1a0062ba:	4628      	mov	r0, r5
1a0062bc:	b008      	add	sp, #32
1a0062be:	bd70      	pop	{r4, r5, r6, pc}
1a0062c0:	4628      	mov	r0, r5
1a0062c2:	f7ff fa25 	bl	1a005710 <__sinit>
1a0062c6:	e7d7      	b.n	1a006278 <_puts_r+0x2c>
1a0062c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0062ca:	f7ff fbff 	bl	1a005acc <__retarget_lock_release_recursive>
1a0062ce:	4628      	mov	r0, r5
1a0062d0:	b008      	add	sp, #32
1a0062d2:	bd70      	pop	{r4, r5, r6, pc}
1a0062d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0062d6:	f7ff fbf7 	bl	1a005ac8 <__retarget_lock_acquire_recursive>
1a0062da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0062de:	b29a      	uxth	r2, r3
1a0062e0:	e7d2      	b.n	1a006288 <_puts_r+0x3c>
1a0062e2:	bf00      	nop
1a0062e4:	1a00a2c8 	.word	0x1a00a2c8

1a0062e8 <puts>:
1a0062e8:	4b02      	ldr	r3, [pc, #8]	; (1a0062f4 <puts+0xc>)
1a0062ea:	4601      	mov	r1, r0
1a0062ec:	6818      	ldr	r0, [r3, #0]
1a0062ee:	f7ff bfad 	b.w	1a00624c <_puts_r>
1a0062f2:	bf00      	nop
1a0062f4:	100000cc 	.word	0x100000cc

1a0062f8 <__sread>:
1a0062f8:	b510      	push	{r4, lr}
1a0062fa:	460c      	mov	r4, r1
1a0062fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006300:	f7fa ffb2 	bl	1a001268 <_read_r>
1a006304:	2800      	cmp	r0, #0
1a006306:	db03      	blt.n	1a006310 <__sread+0x18>
1a006308:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a00630a:	4403      	add	r3, r0
1a00630c:	6523      	str	r3, [r4, #80]	; 0x50
1a00630e:	bd10      	pop	{r4, pc}
1a006310:	89a3      	ldrh	r3, [r4, #12]
1a006312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a006316:	81a3      	strh	r3, [r4, #12]
1a006318:	bd10      	pop	{r4, pc}
1a00631a:	bf00      	nop

1a00631c <__swrite>:
1a00631c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006320:	4616      	mov	r6, r2
1a006322:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1a006326:	461f      	mov	r7, r3
1a006328:	05d3      	lsls	r3, r2, #23
1a00632a:	460c      	mov	r4, r1
1a00632c:	4605      	mov	r5, r0
1a00632e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006332:	d507      	bpl.n	1a006344 <__swrite+0x28>
1a006334:	2200      	movs	r2, #0
1a006336:	2302      	movs	r3, #2
1a006338:	f7fa ff91 	bl	1a00125e <_lseek_r>
1a00633c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a006340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a006344:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a006348:	81a2      	strh	r2, [r4, #12]
1a00634a:	463b      	mov	r3, r7
1a00634c:	4632      	mov	r2, r6
1a00634e:	4628      	mov	r0, r5
1a006350:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a006354:	f7fa bfaf 	b.w	1a0012b6 <_write_r>

1a006358 <__sseek>:
1a006358:	b510      	push	{r4, lr}
1a00635a:	460c      	mov	r4, r1
1a00635c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006360:	f7fa ff7d 	bl	1a00125e <_lseek_r>
1a006364:	89a3      	ldrh	r3, [r4, #12]
1a006366:	1c42      	adds	r2, r0, #1
1a006368:	bf0e      	itee	eq
1a00636a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a00636e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a006372:	6520      	strne	r0, [r4, #80]	; 0x50
1a006374:	81a3      	strh	r3, [r4, #12]
1a006376:	bd10      	pop	{r4, pc}

1a006378 <__sclose>:
1a006378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00637c:	f7fa bf5c 	b.w	1a001238 <_close_r>

1a006380 <strlen>:
1a006380:	f890 f000 	pld	[r0]
1a006384:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a006388:	f020 0107 	bic.w	r1, r0, #7
1a00638c:	f06f 0c00 	mvn.w	ip, #0
1a006390:	f010 0407 	ands.w	r4, r0, #7
1a006394:	f891 f020 	pld	[r1, #32]
1a006398:	f040 8049 	bne.w	1a00642e <strlen+0xae>
1a00639c:	f04f 0400 	mov.w	r4, #0
1a0063a0:	f06f 0007 	mvn.w	r0, #7
1a0063a4:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0063a8:	f891 f040 	pld	[r1, #64]	; 0x40
1a0063ac:	f100 0008 	add.w	r0, r0, #8
1a0063b0:	fa82 f24c 	uadd8	r2, r2, ip
1a0063b4:	faa4 f28c 	sel	r2, r4, ip
1a0063b8:	fa83 f34c 	uadd8	r3, r3, ip
1a0063bc:	faa2 f38c 	sel	r3, r2, ip
1a0063c0:	bb4b      	cbnz	r3, 1a006416 <strlen+0x96>
1a0063c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a0063c6:	fa82 f24c 	uadd8	r2, r2, ip
1a0063ca:	f100 0008 	add.w	r0, r0, #8
1a0063ce:	faa4 f28c 	sel	r2, r4, ip
1a0063d2:	fa83 f34c 	uadd8	r3, r3, ip
1a0063d6:	faa2 f38c 	sel	r3, r2, ip
1a0063da:	b9e3      	cbnz	r3, 1a006416 <strlen+0x96>
1a0063dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a0063e0:	fa82 f24c 	uadd8	r2, r2, ip
1a0063e4:	f100 0008 	add.w	r0, r0, #8
1a0063e8:	faa4 f28c 	sel	r2, r4, ip
1a0063ec:	fa83 f34c 	uadd8	r3, r3, ip
1a0063f0:	faa2 f38c 	sel	r3, r2, ip
1a0063f4:	b97b      	cbnz	r3, 1a006416 <strlen+0x96>
1a0063f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a0063fa:	f101 0120 	add.w	r1, r1, #32
1a0063fe:	fa82 f24c 	uadd8	r2, r2, ip
1a006402:	f100 0008 	add.w	r0, r0, #8
1a006406:	faa4 f28c 	sel	r2, r4, ip
1a00640a:	fa83 f34c 	uadd8	r3, r3, ip
1a00640e:	faa2 f38c 	sel	r3, r2, ip
1a006412:	2b00      	cmp	r3, #0
1a006414:	d0c6      	beq.n	1a0063a4 <strlen+0x24>
1a006416:	2a00      	cmp	r2, #0
1a006418:	bf04      	itt	eq
1a00641a:	3004      	addeq	r0, #4
1a00641c:	461a      	moveq	r2, r3
1a00641e:	ba12      	rev	r2, r2
1a006420:	fab2 f282 	clz	r2, r2
1a006424:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a006428:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a00642c:	4770      	bx	lr
1a00642e:	e9d1 2300 	ldrd	r2, r3, [r1]
1a006432:	f004 0503 	and.w	r5, r4, #3
1a006436:	f1c4 0000 	rsb	r0, r4, #0
1a00643a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a00643e:	f014 0f04 	tst.w	r4, #4
1a006442:	f891 f040 	pld	[r1, #64]	; 0x40
1a006446:	fa0c f505 	lsl.w	r5, ip, r5
1a00644a:	ea62 0205 	orn	r2, r2, r5
1a00644e:	bf1c      	itt	ne
1a006450:	ea63 0305 	ornne	r3, r3, r5
1a006454:	4662      	movne	r2, ip
1a006456:	f04f 0400 	mov.w	r4, #0
1a00645a:	e7a9      	b.n	1a0063b0 <strlen+0x30>
1a00645c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a006460 <_vfprintf_r>:
1a006460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006464:	b0d7      	sub	sp, #348	; 0x15c
1a006466:	461c      	mov	r4, r3
1a006468:	4689      	mov	r9, r1
1a00646a:	4617      	mov	r7, r2
1a00646c:	4605      	mov	r5, r0
1a00646e:	9003      	str	r0, [sp, #12]
1a006470:	f002 ff0c 	bl	1a00928c <_localeconv_r>
1a006474:	6803      	ldr	r3, [r0, #0]
1a006476:	9316      	str	r3, [sp, #88]	; 0x58
1a006478:	4618      	mov	r0, r3
1a00647a:	f7ff ff81 	bl	1a006380 <strlen>
1a00647e:	9408      	str	r4, [sp, #32]
1a006480:	9015      	str	r0, [sp, #84]	; 0x54
1a006482:	b11d      	cbz	r5, 1a00648c <_vfprintf_r+0x2c>
1a006484:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a006486:	2b00      	cmp	r3, #0
1a006488:	f000 8107 	beq.w	1a00669a <_vfprintf_r+0x23a>
1a00648c:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a006490:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a006494:	07c8      	lsls	r0, r1, #31
1a006496:	b293      	uxth	r3, r2
1a006498:	d402      	bmi.n	1a0064a0 <_vfprintf_r+0x40>
1a00649a:	0599      	lsls	r1, r3, #22
1a00649c:	f140 811f 	bpl.w	1a0066de <_vfprintf_r+0x27e>
1a0064a0:	049e      	lsls	r6, r3, #18
1a0064a2:	d40a      	bmi.n	1a0064ba <_vfprintf_r+0x5a>
1a0064a4:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a0064a8:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
1a0064ac:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a0064b0:	f8a9 300c 	strh.w	r3, [r9, #12]
1a0064b4:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
1a0064b8:	b29b      	uxth	r3, r3
1a0064ba:	071d      	lsls	r5, r3, #28
1a0064bc:	f140 80b2 	bpl.w	1a006624 <_vfprintf_r+0x1c4>
1a0064c0:	f8d9 2010 	ldr.w	r2, [r9, #16]
1a0064c4:	2a00      	cmp	r2, #0
1a0064c6:	f000 80ad 	beq.w	1a006624 <_vfprintf_r+0x1c4>
1a0064ca:	f003 021a 	and.w	r2, r3, #26
1a0064ce:	2a0a      	cmp	r2, #10
1a0064d0:	f000 80c9 	beq.w	1a006666 <_vfprintf_r+0x206>
1a0064d4:	2300      	movs	r3, #0
1a0064d6:	ed9f 7b86 	vldr	d7, [pc, #536]	; 1a0066f0 <_vfprintf_r+0x290>
1a0064da:	9310      	str	r3, [sp, #64]	; 0x40
1a0064dc:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
1a0064e0:	9317      	str	r3, [sp, #92]	; 0x5c
1a0064e2:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
1a0064e6:	931b      	str	r3, [sp, #108]	; 0x6c
1a0064e8:	9318      	str	r3, [sp, #96]	; 0x60
1a0064ea:	9305      	str	r3, [sp, #20]
1a0064ec:	ab2d      	add	r3, sp, #180	; 0xb4
1a0064ee:	932a      	str	r3, [sp, #168]	; 0xa8
1a0064f0:	469b      	mov	fp, r3
1a0064f2:	783b      	ldrb	r3, [r7, #0]
1a0064f4:	f8cd 901c 	str.w	r9, [sp, #28]
1a0064f8:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
1a0064fc:	2b00      	cmp	r3, #0
1a0064fe:	f000 8259 	beq.w	1a0069b4 <_vfprintf_r+0x554>
1a006502:	2b25      	cmp	r3, #37	; 0x25
1a006504:	463c      	mov	r4, r7
1a006506:	d102      	bne.n	1a00650e <_vfprintf_r+0xae>
1a006508:	e01d      	b.n	1a006546 <_vfprintf_r+0xe6>
1a00650a:	2b25      	cmp	r3, #37	; 0x25
1a00650c:	d003      	beq.n	1a006516 <_vfprintf_r+0xb6>
1a00650e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
1a006512:	2b00      	cmp	r3, #0
1a006514:	d1f9      	bne.n	1a00650a <_vfprintf_r+0xaa>
1a006516:	1be5      	subs	r5, r4, r7
1a006518:	b18d      	cbz	r5, 1a00653e <_vfprintf_r+0xde>
1a00651a:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
1a00651e:	3301      	adds	r3, #1
1a006520:	442a      	add	r2, r5
1a006522:	2b07      	cmp	r3, #7
1a006524:	f8cb 7000 	str.w	r7, [fp]
1a006528:	f8cb 5004 	str.w	r5, [fp, #4]
1a00652c:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
1a006530:	f300 80ca 	bgt.w	1a0066c8 <_vfprintf_r+0x268>
1a006534:	f10b 0b08 	add.w	fp, fp, #8
1a006538:	9b05      	ldr	r3, [sp, #20]
1a00653a:	442b      	add	r3, r5
1a00653c:	9305      	str	r3, [sp, #20]
1a00653e:	7823      	ldrb	r3, [r4, #0]
1a006540:	2b00      	cmp	r3, #0
1a006542:	f000 8237 	beq.w	1a0069b4 <_vfprintf_r+0x554>
1a006546:	2300      	movs	r3, #0
1a006548:	7866      	ldrb	r6, [r4, #1]
1a00654a:	9306      	str	r3, [sp, #24]
1a00654c:	4698      	mov	r8, r3
1a00654e:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
1a006552:	f104 0a01 	add.w	sl, r4, #1
1a006556:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
1a00655a:	252b      	movs	r5, #43	; 0x2b
1a00655c:	f10a 0a01 	add.w	sl, sl, #1
1a006560:	f1a6 0320 	sub.w	r3, r6, #32
1a006564:	2b5a      	cmp	r3, #90	; 0x5a
1a006566:	f200 842a 	bhi.w	1a006dbe <_vfprintf_r+0x95e>
1a00656a:	e8df f013 	tbh	[pc, r3, lsl #1]
1a00656e:	03aa      	.short	0x03aa
1a006570:	04280428 	.word	0x04280428
1a006574:	0428029c 	.word	0x0428029c
1a006578:	04280428 	.word	0x04280428
1a00657c:	042802a7 	.word	0x042802a7
1a006580:	02c60428 	.word	0x02c60428
1a006584:	042802d2 	.word	0x042802d2
1a006588:	02dc02d7 	.word	0x02dc02d7
1a00658c:	02f60428 	.word	0x02f60428
1a006590:	026d026d 	.word	0x026d026d
1a006594:	026d026d 	.word	0x026d026d
1a006598:	026d026d 	.word	0x026d026d
1a00659c:	026d026d 	.word	0x026d026d
1a0065a0:	0428026d 	.word	0x0428026d
1a0065a4:	04280428 	.word	0x04280428
1a0065a8:	04280428 	.word	0x04280428
1a0065ac:	04280428 	.word	0x04280428
1a0065b0:	042802fb 	.word	0x042802fb
1a0065b4:	03f3033c 	.word	0x03f3033c
1a0065b8:	02fb02fb 	.word	0x02fb02fb
1a0065bc:	042802fb 	.word	0x042802fb
1a0065c0:	04280428 	.word	0x04280428
1a0065c4:	03ee0428 	.word	0x03ee0428
1a0065c8:	04280428 	.word	0x04280428
1a0065cc:	0428009a 	.word	0x0428009a
1a0065d0:	04280428 	.word	0x04280428
1a0065d4:	04280350 	.word	0x04280350
1a0065d8:	04280379 	.word	0x04280379
1a0065dc:	03900428 	.word	0x03900428
1a0065e0:	04280428 	.word	0x04280428
1a0065e4:	04280428 	.word	0x04280428
1a0065e8:	04280428 	.word	0x04280428
1a0065ec:	04280428 	.word	0x04280428
1a0065f0:	042802fb 	.word	0x042802fb
1a0065f4:	00c5033c 	.word	0x00c5033c
1a0065f8:	02fb02fb 	.word	0x02fb02fb
1a0065fc:	03d102fb 	.word	0x03d102fb
1a006600:	007000c5 	.word	0x007000c5
1a006604:	03b50428 	.word	0x03b50428
1a006608:	03c20428 	.word	0x03c20428
1a00660c:	03de009c 	.word	0x03de009c
1a006610:	04280070 	.word	0x04280070
1a006614:	00720350 	.word	0x00720350
1a006618:	0428022c 	.word	0x0428022c
1a00661c:	027c0428 	.word	0x027c0428
1a006620:	00720428 	.word	0x00720428
1a006624:	4649      	mov	r1, r9
1a006626:	9803      	ldr	r0, [sp, #12]
1a006628:	f001 fca8 	bl	1a007f7c <__swsetup_r>
1a00662c:	b1a0      	cbz	r0, 1a006658 <_vfprintf_r+0x1f8>
1a00662e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
1a006632:	07d8      	lsls	r0, r3, #31
1a006634:	d404      	bmi.n	1a006640 <_vfprintf_r+0x1e0>
1a006636:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00663a:	0599      	lsls	r1, r3, #22
1a00663c:	f140 83b7 	bpl.w	1a006dae <_vfprintf_r+0x94e>
1a006640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a006644:	9305      	str	r3, [sp, #20]
1a006646:	9805      	ldr	r0, [sp, #20]
1a006648:	b057      	add	sp, #348	; 0x15c
1a00664a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00664e:	f048 0820 	orr.w	r8, r8, #32
1a006652:	f89a 6000 	ldrb.w	r6, [sl]
1a006656:	e781      	b.n	1a00655c <_vfprintf_r+0xfc>
1a006658:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00665c:	f003 021a 	and.w	r2, r3, #26
1a006660:	2a0a      	cmp	r2, #10
1a006662:	f47f af37 	bne.w	1a0064d4 <_vfprintf_r+0x74>
1a006666:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
1a00666a:	2a00      	cmp	r2, #0
1a00666c:	f6ff af32 	blt.w	1a0064d4 <_vfprintf_r+0x74>
1a006670:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a006674:	07d2      	lsls	r2, r2, #31
1a006676:	d405      	bmi.n	1a006684 <_vfprintf_r+0x224>
1a006678:	059b      	lsls	r3, r3, #22
1a00667a:	d403      	bmi.n	1a006684 <_vfprintf_r+0x224>
1a00667c:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a006680:	f7ff fa24 	bl	1a005acc <__retarget_lock_release_recursive>
1a006684:	4623      	mov	r3, r4
1a006686:	463a      	mov	r2, r7
1a006688:	4649      	mov	r1, r9
1a00668a:	9803      	ldr	r0, [sp, #12]
1a00668c:	f001 fc26 	bl	1a007edc <__sbprintf>
1a006690:	9005      	str	r0, [sp, #20]
1a006692:	9805      	ldr	r0, [sp, #20]
1a006694:	b057      	add	sp, #348	; 0x15c
1a006696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00669a:	9803      	ldr	r0, [sp, #12]
1a00669c:	f7ff f838 	bl	1a005710 <__sinit>
1a0066a0:	e6f4      	b.n	1a00648c <_vfprintf_r+0x2c>
1a0066a2:	f048 0810 	orr.w	r8, r8, #16
1a0066a6:	f018 0f20 	tst.w	r8, #32
1a0066aa:	f000 836c 	beq.w	1a006d86 <_vfprintf_r+0x926>
1a0066ae:	9c08      	ldr	r4, [sp, #32]
1a0066b0:	3407      	adds	r4, #7
1a0066b2:	f024 0307 	bic.w	r3, r4, #7
1a0066b6:	e9d3 4500 	ldrd	r4, r5, [r3]
1a0066ba:	f103 0208 	add.w	r2, r3, #8
1a0066be:	9208      	str	r2, [sp, #32]
1a0066c0:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
1a0066c4:	2200      	movs	r2, #0
1a0066c6:	e18c      	b.n	1a0069e2 <_vfprintf_r+0x582>
1a0066c8:	aa2a      	add	r2, sp, #168	; 0xa8
1a0066ca:	9907      	ldr	r1, [sp, #28]
1a0066cc:	9803      	ldr	r0, [sp, #12]
1a0066ce:	f003 fc75 	bl	1a009fbc <__sprint_r>
1a0066d2:	2800      	cmp	r0, #0
1a0066d4:	f041 8376 	bne.w	1a007dc4 <_vfprintf_r+0x1964>
1a0066d8:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0066dc:	e72c      	b.n	1a006538 <_vfprintf_r+0xd8>
1a0066de:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a0066e2:	f7ff f9f1 	bl	1a005ac8 <__retarget_lock_acquire_recursive>
1a0066e6:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a0066ea:	b293      	uxth	r3, r2
1a0066ec:	e6d8      	b.n	1a0064a0 <_vfprintf_r+0x40>
1a0066ee:	bf00      	nop
	...
1a0066f8:	4643      	mov	r3, r8
1a0066fa:	069f      	lsls	r7, r3, #26
1a0066fc:	f140 832f 	bpl.w	1a006d5e <_vfprintf_r+0x8fe>
1a006700:	9c08      	ldr	r4, [sp, #32]
1a006702:	3407      	adds	r4, #7
1a006704:	f024 0407 	bic.w	r4, r4, #7
1a006708:	e9d4 0100 	ldrd	r0, r1, [r4]
1a00670c:	f104 0208 	add.w	r2, r4, #8
1a006710:	9208      	str	r2, [sp, #32]
1a006712:	4604      	mov	r4, r0
1a006714:	460d      	mov	r5, r1
1a006716:	2800      	cmp	r0, #0
1a006718:	f171 0200 	sbcs.w	r2, r1, #0
1a00671c:	da05      	bge.n	1a00672a <_vfprintf_r+0x2ca>
1a00671e:	222d      	movs	r2, #45	; 0x2d
1a006720:	4264      	negs	r4, r4
1a006722:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a006726:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
1a00672a:	aa56      	add	r2, sp, #344	; 0x158
1a00672c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a006730:	9204      	str	r2, [sp, #16]
1a006732:	f000 84b2 	beq.w	1a00709a <_vfprintf_r+0xc3a>
1a006736:	2201      	movs	r2, #1
1a006738:	ea54 0105 	orrs.w	r1, r4, r5
1a00673c:	f023 0880 	bic.w	r8, r3, #128	; 0x80
1a006740:	f040 8159 	bne.w	1a0069f6 <_vfprintf_r+0x596>
1a006744:	f1b9 0f00 	cmp.w	r9, #0
1a006748:	f040 8619 	bne.w	1a00737e <_vfprintf_r+0xf1e>
1a00674c:	2a00      	cmp	r2, #0
1a00674e:	f040 8508 	bne.w	1a007162 <_vfprintf_r+0xd02>
1a006752:	f013 0301 	ands.w	r3, r3, #1
1a006756:	af56      	add	r7, sp, #344	; 0x158
1a006758:	9309      	str	r3, [sp, #36]	; 0x24
1a00675a:	d002      	beq.n	1a006762 <_vfprintf_r+0x302>
1a00675c:	2330      	movs	r3, #48	; 0x30
1a00675e:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a006762:	2300      	movs	r3, #0
1a006764:	930a      	str	r3, [sp, #40]	; 0x28
1a006766:	930f      	str	r3, [sp, #60]	; 0x3c
1a006768:	9314      	str	r3, [sp, #80]	; 0x50
1a00676a:	9311      	str	r3, [sp, #68]	; 0x44
1a00676c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00676e:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a006772:	454b      	cmp	r3, r9
1a006774:	bfb8      	it	lt
1a006776:	464b      	movlt	r3, r9
1a006778:	9304      	str	r3, [sp, #16]
1a00677a:	b112      	cbz	r2, 1a006782 <_vfprintf_r+0x322>
1a00677c:	9b04      	ldr	r3, [sp, #16]
1a00677e:	3301      	adds	r3, #1
1a006780:	9304      	str	r3, [sp, #16]
1a006782:	f018 0302 	ands.w	r3, r8, #2
1a006786:	930b      	str	r3, [sp, #44]	; 0x2c
1a006788:	d002      	beq.n	1a006790 <_vfprintf_r+0x330>
1a00678a:	9b04      	ldr	r3, [sp, #16]
1a00678c:	3302      	adds	r3, #2
1a00678e:	9304      	str	r3, [sp, #16]
1a006790:	f018 0384 	ands.w	r3, r8, #132	; 0x84
1a006794:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a006796:	930e      	str	r3, [sp, #56]	; 0x38
1a006798:	d13f      	bne.n	1a00681a <_vfprintf_r+0x3ba>
1a00679a:	9b06      	ldr	r3, [sp, #24]
1a00679c:	9904      	ldr	r1, [sp, #16]
1a00679e:	1a5d      	subs	r5, r3, r1
1a0067a0:	2d00      	cmp	r5, #0
1a0067a2:	dd3a      	ble.n	1a00681a <_vfprintf_r+0x3ba>
1a0067a4:	2d10      	cmp	r5, #16
1a0067a6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a0067a8:	dd29      	ble.n	1a0067fe <_vfprintf_r+0x39e>
1a0067aa:	4659      	mov	r1, fp
1a0067ac:	4620      	mov	r0, r4
1a0067ae:	9620      	str	r6, [sp, #128]	; 0x80
1a0067b0:	2310      	movs	r3, #16
1a0067b2:	9c03      	ldr	r4, [sp, #12]
1a0067b4:	9e07      	ldr	r6, [sp, #28]
1a0067b6:	46bb      	mov	fp, r7
1a0067b8:	e004      	b.n	1a0067c4 <_vfprintf_r+0x364>
1a0067ba:	3d10      	subs	r5, #16
1a0067bc:	2d10      	cmp	r5, #16
1a0067be:	f101 0108 	add.w	r1, r1, #8
1a0067c2:	dd18      	ble.n	1a0067f6 <_vfprintf_r+0x396>
1a0067c4:	3201      	adds	r2, #1
1a0067c6:	4fba      	ldr	r7, [pc, #744]	; (1a006ab0 <_vfprintf_r+0x650>)
1a0067c8:	3010      	adds	r0, #16
1a0067ca:	2a07      	cmp	r2, #7
1a0067cc:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
1a0067d0:	e9c1 7300 	strd	r7, r3, [r1]
1a0067d4:	ddf1      	ble.n	1a0067ba <_vfprintf_r+0x35a>
1a0067d6:	aa2a      	add	r2, sp, #168	; 0xa8
1a0067d8:	4631      	mov	r1, r6
1a0067da:	4620      	mov	r0, r4
1a0067dc:	930c      	str	r3, [sp, #48]	; 0x30
1a0067de:	f003 fbed 	bl	1a009fbc <__sprint_r>
1a0067e2:	2800      	cmp	r0, #0
1a0067e4:	f040 843d 	bne.w	1a007062 <_vfprintf_r+0xc02>
1a0067e8:	3d10      	subs	r5, #16
1a0067ea:	2d10      	cmp	r5, #16
1a0067ec:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
1a0067f0:	a92d      	add	r1, sp, #180	; 0xb4
1a0067f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0067f4:	dce6      	bgt.n	1a0067c4 <_vfprintf_r+0x364>
1a0067f6:	9e20      	ldr	r6, [sp, #128]	; 0x80
1a0067f8:	465f      	mov	r7, fp
1a0067fa:	4604      	mov	r4, r0
1a0067fc:	468b      	mov	fp, r1
1a0067fe:	3201      	adds	r2, #1
1a006800:	4bab      	ldr	r3, [pc, #684]	; (1a006ab0 <_vfprintf_r+0x650>)
1a006802:	442c      	add	r4, r5
1a006804:	2a07      	cmp	r2, #7
1a006806:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a00680a:	e9cb 3500 	strd	r3, r5, [fp]
1a00680e:	f300 84ff 	bgt.w	1a007210 <_vfprintf_r+0xdb0>
1a006812:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a006816:	f10b 0b08 	add.w	fp, fp, #8
1a00681a:	b172      	cbz	r2, 1a00683a <_vfprintf_r+0x3da>
1a00681c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a00681e:	3201      	adds	r2, #1
1a006820:	3401      	adds	r4, #1
1a006822:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
1a006826:	2101      	movs	r1, #1
1a006828:	2a07      	cmp	r2, #7
1a00682a:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a00682e:	e9cb 0100 	strd	r0, r1, [fp]
1a006832:	f300 8418 	bgt.w	1a007066 <_vfprintf_r+0xc06>
1a006836:	f10b 0b08 	add.w	fp, fp, #8
1a00683a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00683c:	b16b      	cbz	r3, 1a00685a <_vfprintf_r+0x3fa>
1a00683e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a006840:	3301      	adds	r3, #1
1a006842:	3402      	adds	r4, #2
1a006844:	a923      	add	r1, sp, #140	; 0x8c
1a006846:	2202      	movs	r2, #2
1a006848:	2b07      	cmp	r3, #7
1a00684a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a00684e:	e9cb 1200 	strd	r1, r2, [fp]
1a006852:	f300 8415 	bgt.w	1a007080 <_vfprintf_r+0xc20>
1a006856:	f10b 0b08 	add.w	fp, fp, #8
1a00685a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00685c:	2b80      	cmp	r3, #128	; 0x80
1a00685e:	f000 8331 	beq.w	1a006ec4 <_vfprintf_r+0xa64>
1a006862:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006864:	eba9 0503 	sub.w	r5, r9, r3
1a006868:	2d00      	cmp	r5, #0
1a00686a:	dd37      	ble.n	1a0068dc <_vfprintf_r+0x47c>
1a00686c:	2d10      	cmp	r5, #16
1a00686e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a006870:	4b90      	ldr	r3, [pc, #576]	; (1a006ab4 <_vfprintf_r+0x654>)
1a006872:	dd28      	ble.n	1a0068c6 <_vfprintf_r+0x466>
1a006874:	4659      	mov	r1, fp
1a006876:	4620      	mov	r0, r4
1a006878:	46bb      	mov	fp, r7
1a00687a:	f04f 0910 	mov.w	r9, #16
1a00687e:	4637      	mov	r7, r6
1a006880:	461c      	mov	r4, r3
1a006882:	9e07      	ldr	r6, [sp, #28]
1a006884:	e004      	b.n	1a006890 <_vfprintf_r+0x430>
1a006886:	3d10      	subs	r5, #16
1a006888:	2d10      	cmp	r5, #16
1a00688a:	f101 0108 	add.w	r1, r1, #8
1a00688e:	dd15      	ble.n	1a0068bc <_vfprintf_r+0x45c>
1a006890:	3201      	adds	r2, #1
1a006892:	3010      	adds	r0, #16
1a006894:	2a07      	cmp	r2, #7
1a006896:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
1a00689a:	e9c1 4900 	strd	r4, r9, [r1]
1a00689e:	ddf2      	ble.n	1a006886 <_vfprintf_r+0x426>
1a0068a0:	aa2a      	add	r2, sp, #168	; 0xa8
1a0068a2:	4631      	mov	r1, r6
1a0068a4:	9803      	ldr	r0, [sp, #12]
1a0068a6:	f003 fb89 	bl	1a009fbc <__sprint_r>
1a0068aa:	2800      	cmp	r0, #0
1a0068ac:	f040 83d9 	bne.w	1a007062 <_vfprintf_r+0xc02>
1a0068b0:	3d10      	subs	r5, #16
1a0068b2:	2d10      	cmp	r5, #16
1a0068b4:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
1a0068b8:	a92d      	add	r1, sp, #180	; 0xb4
1a0068ba:	dce9      	bgt.n	1a006890 <_vfprintf_r+0x430>
1a0068bc:	463e      	mov	r6, r7
1a0068be:	4623      	mov	r3, r4
1a0068c0:	465f      	mov	r7, fp
1a0068c2:	4604      	mov	r4, r0
1a0068c4:	468b      	mov	fp, r1
1a0068c6:	3201      	adds	r2, #1
1a0068c8:	442c      	add	r4, r5
1a0068ca:	2a07      	cmp	r2, #7
1a0068cc:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a0068d0:	e9cb 3500 	strd	r3, r5, [fp]
1a0068d4:	f300 83ef 	bgt.w	1a0070b6 <_vfprintf_r+0xc56>
1a0068d8:	f10b 0b08 	add.w	fp, fp, #8
1a0068dc:	f418 7f80 	tst.w	r8, #256	; 0x100
1a0068e0:	f040 8280 	bne.w	1a006de4 <_vfprintf_r+0x984>
1a0068e4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a0068e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0068e8:	f8cb 7000 	str.w	r7, [fp]
1a0068ec:	3301      	adds	r3, #1
1a0068ee:	4414      	add	r4, r2
1a0068f0:	2b07      	cmp	r3, #7
1a0068f2:	942c      	str	r4, [sp, #176]	; 0xb0
1a0068f4:	f8cb 2004 	str.w	r2, [fp, #4]
1a0068f8:	932b      	str	r3, [sp, #172]	; 0xac
1a0068fa:	f300 8392 	bgt.w	1a007022 <_vfprintf_r+0xbc2>
1a0068fe:	f10b 0b08 	add.w	fp, fp, #8
1a006902:	f018 0f04 	tst.w	r8, #4
1a006906:	d03b      	beq.n	1a006980 <_vfprintf_r+0x520>
1a006908:	9b06      	ldr	r3, [sp, #24]
1a00690a:	9a04      	ldr	r2, [sp, #16]
1a00690c:	1a9d      	subs	r5, r3, r2
1a00690e:	2d00      	cmp	r5, #0
1a006910:	dd36      	ble.n	1a006980 <_vfprintf_r+0x520>
1a006912:	2d10      	cmp	r5, #16
1a006914:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a006916:	dd21      	ble.n	1a00695c <_vfprintf_r+0x4fc>
1a006918:	2610      	movs	r6, #16
1a00691a:	9f03      	ldr	r7, [sp, #12]
1a00691c:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a006920:	e004      	b.n	1a00692c <_vfprintf_r+0x4cc>
1a006922:	3d10      	subs	r5, #16
1a006924:	2d10      	cmp	r5, #16
1a006926:	f10b 0b08 	add.w	fp, fp, #8
1a00692a:	dd17      	ble.n	1a00695c <_vfprintf_r+0x4fc>
1a00692c:	3301      	adds	r3, #1
1a00692e:	4a60      	ldr	r2, [pc, #384]	; (1a006ab0 <_vfprintf_r+0x650>)
1a006930:	3410      	adds	r4, #16
1a006932:	2b07      	cmp	r3, #7
1a006934:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a006938:	e9cb 2600 	strd	r2, r6, [fp]
1a00693c:	ddf1      	ble.n	1a006922 <_vfprintf_r+0x4c2>
1a00693e:	aa2a      	add	r2, sp, #168	; 0xa8
1a006940:	4641      	mov	r1, r8
1a006942:	4638      	mov	r0, r7
1a006944:	f003 fb3a 	bl	1a009fbc <__sprint_r>
1a006948:	2800      	cmp	r0, #0
1a00694a:	f040 856c 	bne.w	1a007426 <_vfprintf_r+0xfc6>
1a00694e:	3d10      	subs	r5, #16
1a006950:	2d10      	cmp	r5, #16
1a006952:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
1a006956:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00695a:	dce7      	bgt.n	1a00692c <_vfprintf_r+0x4cc>
1a00695c:	3301      	adds	r3, #1
1a00695e:	4a54      	ldr	r2, [pc, #336]	; (1a006ab0 <_vfprintf_r+0x650>)
1a006960:	442c      	add	r4, r5
1a006962:	2b07      	cmp	r3, #7
1a006964:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a006968:	e9cb 2500 	strd	r2, r5, [fp]
1a00696c:	dd08      	ble.n	1a006980 <_vfprintf_r+0x520>
1a00696e:	aa2a      	add	r2, sp, #168	; 0xa8
1a006970:	9907      	ldr	r1, [sp, #28]
1a006972:	9803      	ldr	r0, [sp, #12]
1a006974:	f003 fb22 	bl	1a009fbc <__sprint_r>
1a006978:	2800      	cmp	r0, #0
1a00697a:	f040 82e9 	bne.w	1a006f50 <_vfprintf_r+0xaf0>
1a00697e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a006980:	9904      	ldr	r1, [sp, #16]
1a006982:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
1a006986:	428a      	cmp	r2, r1
1a006988:	bfac      	ite	ge
1a00698a:	189b      	addge	r3, r3, r2
1a00698c:	185b      	addlt	r3, r3, r1
1a00698e:	9305      	str	r3, [sp, #20]
1a006990:	2c00      	cmp	r4, #0
1a006992:	f040 82d5 	bne.w	1a006f40 <_vfprintf_r+0xae0>
1a006996:	2300      	movs	r3, #0
1a006998:	932b      	str	r3, [sp, #172]	; 0xac
1a00699a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00699c:	b11b      	cbz	r3, 1a0069a6 <_vfprintf_r+0x546>
1a00699e:	990a      	ldr	r1, [sp, #40]	; 0x28
1a0069a0:	9803      	ldr	r0, [sp, #12]
1a0069a2:	f7fe ff3d 	bl	1a005820 <_free_r>
1a0069a6:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0069aa:	4657      	mov	r7, sl
1a0069ac:	783b      	ldrb	r3, [r7, #0]
1a0069ae:	2b00      	cmp	r3, #0
1a0069b0:	f47f ada7 	bne.w	1a006502 <_vfprintf_r+0xa2>
1a0069b4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
1a0069b6:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0069ba:	2b00      	cmp	r3, #0
1a0069bc:	f041 80e7 	bne.w	1a007b8e <_vfprintf_r+0x172e>
1a0069c0:	2300      	movs	r3, #0
1a0069c2:	932b      	str	r3, [sp, #172]	; 0xac
1a0069c4:	e2cb      	b.n	1a006f5e <_vfprintf_r+0xafe>
1a0069c6:	4643      	mov	r3, r8
1a0069c8:	069a      	lsls	r2, r3, #26
1a0069ca:	f140 814e 	bpl.w	1a006c6a <_vfprintf_r+0x80a>
1a0069ce:	9c08      	ldr	r4, [sp, #32]
1a0069d0:	3407      	adds	r4, #7
1a0069d2:	f024 0207 	bic.w	r2, r4, #7
1a0069d6:	f102 0108 	add.w	r1, r2, #8
1a0069da:	e9d2 4500 	ldrd	r4, r5, [r2]
1a0069de:	9108      	str	r1, [sp, #32]
1a0069e0:	2201      	movs	r2, #1
1a0069e2:	2100      	movs	r1, #0
1a0069e4:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
1a0069e8:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a0069ec:	a956      	add	r1, sp, #344	; 0x158
1a0069ee:	9104      	str	r1, [sp, #16]
1a0069f0:	f47f aea2 	bne.w	1a006738 <_vfprintf_r+0x2d8>
1a0069f4:	4698      	mov	r8, r3
1a0069f6:	2a01      	cmp	r2, #1
1a0069f8:	f000 8350 	beq.w	1a00709c <_vfprintf_r+0xc3c>
1a0069fc:	2a02      	cmp	r2, #2
1a0069fe:	f000 831b 	beq.w	1a007038 <_vfprintf_r+0xbd8>
1a006a02:	a956      	add	r1, sp, #344	; 0x158
1a006a04:	e000      	b.n	1a006a08 <_vfprintf_r+0x5a8>
1a006a06:	4639      	mov	r1, r7
1a006a08:	08e2      	lsrs	r2, r4, #3
1a006a0a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a006a0e:	08e8      	lsrs	r0, r5, #3
1a006a10:	f004 0307 	and.w	r3, r4, #7
1a006a14:	4605      	mov	r5, r0
1a006a16:	4614      	mov	r4, r2
1a006a18:	3330      	adds	r3, #48	; 0x30
1a006a1a:	ea54 0205 	orrs.w	r2, r4, r5
1a006a1e:	f801 3c01 	strb.w	r3, [r1, #-1]
1a006a22:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
1a006a26:	d1ee      	bne.n	1a006a06 <_vfprintf_r+0x5a6>
1a006a28:	f018 0f01 	tst.w	r8, #1
1a006a2c:	f000 8314 	beq.w	1a007058 <_vfprintf_r+0xbf8>
1a006a30:	2b30      	cmp	r3, #48	; 0x30
1a006a32:	f000 8311 	beq.w	1a007058 <_vfprintf_r+0xbf8>
1a006a36:	9a04      	ldr	r2, [sp, #16]
1a006a38:	3902      	subs	r1, #2
1a006a3a:	2330      	movs	r3, #48	; 0x30
1a006a3c:	1a52      	subs	r2, r2, r1
1a006a3e:	f807 3c01 	strb.w	r3, [r7, #-1]
1a006a42:	9209      	str	r2, [sp, #36]	; 0x24
1a006a44:	460f      	mov	r7, r1
1a006a46:	e68c      	b.n	1a006762 <_vfprintf_r+0x302>
1a006a48:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a006a4c:	2200      	movs	r2, #0
1a006a4e:	f81a 6b01 	ldrb.w	r6, [sl], #1
1a006a52:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a006a56:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a006a5a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a006a5e:	2b09      	cmp	r3, #9
1a006a60:	d9f5      	bls.n	1a006a4e <_vfprintf_r+0x5ee>
1a006a62:	9206      	str	r2, [sp, #24]
1a006a64:	e57c      	b.n	1a006560 <_vfprintf_r+0x100>
1a006a66:	4b14      	ldr	r3, [pc, #80]	; (1a006ab8 <_vfprintf_r+0x658>)
1a006a68:	9317      	str	r3, [sp, #92]	; 0x5c
1a006a6a:	f018 0f20 	tst.w	r8, #32
1a006a6e:	f000 8114 	beq.w	1a006c9a <_vfprintf_r+0x83a>
1a006a72:	9c08      	ldr	r4, [sp, #32]
1a006a74:	3407      	adds	r4, #7
1a006a76:	f024 0307 	bic.w	r3, r4, #7
1a006a7a:	e9d3 4500 	ldrd	r4, r5, [r3]
1a006a7e:	f103 0208 	add.w	r2, r3, #8
1a006a82:	9208      	str	r2, [sp, #32]
1a006a84:	f018 0f01 	tst.w	r8, #1
1a006a88:	d009      	beq.n	1a006a9e <_vfprintf_r+0x63e>
1a006a8a:	ea54 0305 	orrs.w	r3, r4, r5
1a006a8e:	d006      	beq.n	1a006a9e <_vfprintf_r+0x63e>
1a006a90:	2330      	movs	r3, #48	; 0x30
1a006a92:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
1a006a96:	f048 0802 	orr.w	r8, r8, #2
1a006a9a:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
1a006a9e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
1a006aa2:	2202      	movs	r2, #2
1a006aa4:	e79d      	b.n	1a0069e2 <_vfprintf_r+0x582>
1a006aa6:	f048 0801 	orr.w	r8, r8, #1
1a006aaa:	f89a 6000 	ldrb.w	r6, [sl]
1a006aae:	e555      	b.n	1a00655c <_vfprintf_r+0xfc>
1a006ab0:	1a00a990 	.word	0x1a00a990
1a006ab4:	1a00a9a0 	.word	0x1a00a9a0
1a006ab8:	1a00a95c 	.word	0x1a00a95c
1a006abc:	9e03      	ldr	r6, [sp, #12]
1a006abe:	4630      	mov	r0, r6
1a006ac0:	f002 fbe4 	bl	1a00928c <_localeconv_r>
1a006ac4:	6843      	ldr	r3, [r0, #4]
1a006ac6:	9318      	str	r3, [sp, #96]	; 0x60
1a006ac8:	4618      	mov	r0, r3
1a006aca:	f7ff fc59 	bl	1a006380 <strlen>
1a006ace:	901b      	str	r0, [sp, #108]	; 0x6c
1a006ad0:	4604      	mov	r4, r0
1a006ad2:	4630      	mov	r0, r6
1a006ad4:	f002 fbda 	bl	1a00928c <_localeconv_r>
1a006ad8:	6883      	ldr	r3, [r0, #8]
1a006ada:	931a      	str	r3, [sp, #104]	; 0x68
1a006adc:	2c00      	cmp	r4, #0
1a006ade:	f43f adb8 	beq.w	1a006652 <_vfprintf_r+0x1f2>
1a006ae2:	f89a 6000 	ldrb.w	r6, [sl]
1a006ae6:	2b00      	cmp	r3, #0
1a006ae8:	f43f ad38 	beq.w	1a00655c <_vfprintf_r+0xfc>
1a006aec:	781b      	ldrb	r3, [r3, #0]
1a006aee:	2b00      	cmp	r3, #0
1a006af0:	f43f ad34 	beq.w	1a00655c <_vfprintf_r+0xfc>
1a006af4:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
1a006af8:	e530      	b.n	1a00655c <_vfprintf_r+0xfc>
1a006afa:	9b08      	ldr	r3, [sp, #32]
1a006afc:	f89a 6000 	ldrb.w	r6, [sl]
1a006b00:	681a      	ldr	r2, [r3, #0]
1a006b02:	9206      	str	r2, [sp, #24]
1a006b04:	2a00      	cmp	r2, #0
1a006b06:	f103 0304 	add.w	r3, r3, #4
1a006b0a:	f2c0 8697 	blt.w	1a00783c <_vfprintf_r+0x13dc>
1a006b0e:	9308      	str	r3, [sp, #32]
1a006b10:	e524      	b.n	1a00655c <_vfprintf_r+0xfc>
1a006b12:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
1a006b16:	f89a 6000 	ldrb.w	r6, [sl]
1a006b1a:	e51f      	b.n	1a00655c <_vfprintf_r+0xfc>
1a006b1c:	f89a 6000 	ldrb.w	r6, [sl]
1a006b20:	f048 0804 	orr.w	r8, r8, #4
1a006b24:	e51a      	b.n	1a00655c <_vfprintf_r+0xfc>
1a006b26:	f89a 6000 	ldrb.w	r6, [sl]
1a006b2a:	2e2a      	cmp	r6, #42	; 0x2a
1a006b2c:	f10a 0201 	add.w	r2, sl, #1
1a006b30:	f001 81b0 	beq.w	1a007e94 <_vfprintf_r+0x1a34>
1a006b34:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a006b38:	2b09      	cmp	r3, #9
1a006b3a:	4692      	mov	sl, r2
1a006b3c:	f04f 0900 	mov.w	r9, #0
1a006b40:	f63f ad0e 	bhi.w	1a006560 <_vfprintf_r+0x100>
1a006b44:	f81a 6b01 	ldrb.w	r6, [sl], #1
1a006b48:	eb09 0989 	add.w	r9, r9, r9, lsl #2
1a006b4c:	eb03 0949 	add.w	r9, r3, r9, lsl #1
1a006b50:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a006b54:	2b09      	cmp	r3, #9
1a006b56:	d9f5      	bls.n	1a006b44 <_vfprintf_r+0x6e4>
1a006b58:	e502      	b.n	1a006560 <_vfprintf_r+0x100>
1a006b5a:	f048 0880 	orr.w	r8, r8, #128	; 0x80
1a006b5e:	f89a 6000 	ldrb.w	r6, [sl]
1a006b62:	e4fb      	b.n	1a00655c <_vfprintf_r+0xfc>
1a006b64:	9c08      	ldr	r4, [sp, #32]
1a006b66:	3407      	adds	r4, #7
1a006b68:	f024 0407 	bic.w	r4, r4, #7
1a006b6c:	ed94 7b00 	vldr	d7, [r4]
1a006b70:	ec52 1b17 	vmov	r1, r2, d7
1a006b74:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
1a006b78:	931d      	str	r3, [sp, #116]	; 0x74
1a006b7a:	ed8d 7a1c 	vstr	s14, [sp, #112]	; 0x70
1a006b7e:	3408      	adds	r4, #8
1a006b80:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a006b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a006b88:	4bba      	ldr	r3, [pc, #744]	; (1a006e74 <_vfprintf_r+0xa14>)
1a006b8a:	9408      	str	r4, [sp, #32]
1a006b8c:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
1a006b90:	f003 fb54 	bl	1a00a23c <__aeabi_dcmpun>
1a006b94:	2800      	cmp	r0, #0
1a006b96:	f040 846f 	bne.w	1a007478 <_vfprintf_r+0x1018>
1a006b9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a006b9e:	4bb5      	ldr	r3, [pc, #724]	; (1a006e74 <_vfprintf_r+0xa14>)
1a006ba0:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a006ba4:	f7fe fa58 	bl	1a005058 <__aeabi_dcmple>
1a006ba8:	2800      	cmp	r0, #0
1a006baa:	f040 8465 	bne.w	1a007478 <_vfprintf_r+0x1018>
1a006bae:	2200      	movs	r2, #0
1a006bb0:	2300      	movs	r3, #0
1a006bb2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a006bb6:	f7fe fa45 	bl	1a005044 <__aeabi_dcmplt>
1a006bba:	2800      	cmp	r0, #0
1a006bbc:	f040 855b 	bne.w	1a007676 <_vfprintf_r+0x1216>
1a006bc0:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a006bc4:	4fac      	ldr	r7, [pc, #688]	; (1a006e78 <_vfprintf_r+0xa18>)
1a006bc6:	4bad      	ldr	r3, [pc, #692]	; (1a006e7c <_vfprintf_r+0xa1c>)
1a006bc8:	2000      	movs	r0, #0
1a006bca:	2103      	movs	r1, #3
1a006bcc:	9104      	str	r1, [sp, #16]
1a006bce:	900a      	str	r0, [sp, #40]	; 0x28
1a006bd0:	f028 0880 	bic.w	r8, r8, #128	; 0x80
1a006bd4:	2e47      	cmp	r6, #71	; 0x47
1a006bd6:	bfd8      	it	le
1a006bd8:	461f      	movle	r7, r3
1a006bda:	9109      	str	r1, [sp, #36]	; 0x24
1a006bdc:	4681      	mov	r9, r0
1a006bde:	900f      	str	r0, [sp, #60]	; 0x3c
1a006be0:	9014      	str	r0, [sp, #80]	; 0x50
1a006be2:	9011      	str	r0, [sp, #68]	; 0x44
1a006be4:	e5c9      	b.n	1a00677a <_vfprintf_r+0x31a>
1a006be6:	9808      	ldr	r0, [sp, #32]
1a006be8:	2300      	movs	r3, #0
1a006bea:	6801      	ldr	r1, [r0, #0]
1a006bec:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
1a006bf0:	461a      	mov	r2, r3
1a006bf2:	f88d 10f4 	strb.w	r1, [sp, #244]	; 0xf4
1a006bf6:	2301      	movs	r3, #1
1a006bf8:	1d01      	adds	r1, r0, #4
1a006bfa:	9304      	str	r3, [sp, #16]
1a006bfc:	920a      	str	r2, [sp, #40]	; 0x28
1a006bfe:	4691      	mov	r9, r2
1a006c00:	920f      	str	r2, [sp, #60]	; 0x3c
1a006c02:	9214      	str	r2, [sp, #80]	; 0x50
1a006c04:	9211      	str	r2, [sp, #68]	; 0x44
1a006c06:	e9cd 1308 	strd	r1, r3, [sp, #32]
1a006c0a:	af3d      	add	r7, sp, #244	; 0xf4
1a006c0c:	e5b9      	b.n	1a006782 <_vfprintf_r+0x322>
1a006c0e:	9b08      	ldr	r3, [sp, #32]
1a006c10:	681f      	ldr	r7, [r3, #0]
1a006c12:	2500      	movs	r5, #0
1a006c14:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
1a006c18:	1d1c      	adds	r4, r3, #4
1a006c1a:	2f00      	cmp	r7, #0
1a006c1c:	f000 8639 	beq.w	1a007892 <_vfprintf_r+0x1432>
1a006c20:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a006c24:	f000 8711 	beq.w	1a007a4a <_vfprintf_r+0x15ea>
1a006c28:	464a      	mov	r2, r9
1a006c2a:	4629      	mov	r1, r5
1a006c2c:	4638      	mov	r0, r7
1a006c2e:	f002 fbb7 	bl	1a0093a0 <memchr>
1a006c32:	900a      	str	r0, [sp, #40]	; 0x28
1a006c34:	2800      	cmp	r0, #0
1a006c36:	f000 85e7 	beq.w	1a007808 <_vfprintf_r+0x13a8>
1a006c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006c3c:	1bdb      	subs	r3, r3, r7
1a006c3e:	9309      	str	r3, [sp, #36]	; 0x24
1a006c40:	46a9      	mov	r9, r5
1a006c42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a006c46:	9408      	str	r4, [sp, #32]
1a006c48:	9304      	str	r3, [sp, #16]
1a006c4a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a006c4e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
1a006c52:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
1a006c56:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
1a006c5a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a006c5e:	e58c      	b.n	1a00677a <_vfprintf_r+0x31a>
1a006c60:	f048 0310 	orr.w	r3, r8, #16
1a006c64:	069a      	lsls	r2, r3, #26
1a006c66:	f53f aeb2 	bmi.w	1a0069ce <_vfprintf_r+0x56e>
1a006c6a:	9a08      	ldr	r2, [sp, #32]
1a006c6c:	06df      	lsls	r7, r3, #27
1a006c6e:	f102 0104 	add.w	r1, r2, #4
1a006c72:	f100 837e 	bmi.w	1a007372 <_vfprintf_r+0xf12>
1a006c76:	065d      	lsls	r5, r3, #25
1a006c78:	9a08      	ldr	r2, [sp, #32]
1a006c7a:	f100 84e4 	bmi.w	1a007646 <_vfprintf_r+0x11e6>
1a006c7e:	059c      	lsls	r4, r3, #22
1a006c80:	f140 8377 	bpl.w	1a007372 <_vfprintf_r+0xf12>
1a006c84:	7814      	ldrb	r4, [r2, #0]
1a006c86:	9108      	str	r1, [sp, #32]
1a006c88:	2500      	movs	r5, #0
1a006c8a:	2201      	movs	r2, #1
1a006c8c:	e6a9      	b.n	1a0069e2 <_vfprintf_r+0x582>
1a006c8e:	4b7c      	ldr	r3, [pc, #496]	; (1a006e80 <_vfprintf_r+0xa20>)
1a006c90:	9317      	str	r3, [sp, #92]	; 0x5c
1a006c92:	f018 0f20 	tst.w	r8, #32
1a006c96:	f47f aeec 	bne.w	1a006a72 <_vfprintf_r+0x612>
1a006c9a:	9a08      	ldr	r2, [sp, #32]
1a006c9c:	f018 0f10 	tst.w	r8, #16
1a006ca0:	f102 0304 	add.w	r3, r2, #4
1a006ca4:	f040 8354 	bne.w	1a007350 <_vfprintf_r+0xef0>
1a006ca8:	f018 0f40 	tst.w	r8, #64	; 0x40
1a006cac:	9a08      	ldr	r2, [sp, #32]
1a006cae:	f040 84d0 	bne.w	1a007652 <_vfprintf_r+0x11f2>
1a006cb2:	f418 7f00 	tst.w	r8, #512	; 0x200
1a006cb6:	f000 834b 	beq.w	1a007350 <_vfprintf_r+0xef0>
1a006cba:	7814      	ldrb	r4, [r2, #0]
1a006cbc:	9308      	str	r3, [sp, #32]
1a006cbe:	2500      	movs	r5, #0
1a006cc0:	e6e0      	b.n	1a006a84 <_vfprintf_r+0x624>
1a006cc2:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
1a006cc6:	f89a 6000 	ldrb.w	r6, [sl]
1a006cca:	2b00      	cmp	r3, #0
1a006ccc:	f47f ac46 	bne.w	1a00655c <_vfprintf_r+0xfc>
1a006cd0:	2320      	movs	r3, #32
1a006cd2:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
1a006cd6:	e441      	b.n	1a00655c <_vfprintf_r+0xfc>
1a006cd8:	f89a 6000 	ldrb.w	r6, [sl]
1a006cdc:	2e6c      	cmp	r6, #108	; 0x6c
1a006cde:	bf03      	ittte	eq
1a006ce0:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
1a006ce4:	f048 0820 	orreq.w	r8, r8, #32
1a006ce8:	f10a 0a01 	addeq.w	sl, sl, #1
1a006cec:	f048 0810 	orrne.w	r8, r8, #16
1a006cf0:	e434      	b.n	1a00655c <_vfprintf_r+0xfc>
1a006cf2:	9a08      	ldr	r2, [sp, #32]
1a006cf4:	f018 0f20 	tst.w	r8, #32
1a006cf8:	f852 3b04 	ldr.w	r3, [r2], #4
1a006cfc:	9208      	str	r2, [sp, #32]
1a006cfe:	f000 83a1 	beq.w	1a007444 <_vfprintf_r+0xfe4>
1a006d02:	9a05      	ldr	r2, [sp, #20]
1a006d04:	4610      	mov	r0, r2
1a006d06:	17d1      	asrs	r1, r2, #31
1a006d08:	e9c3 0100 	strd	r0, r1, [r3]
1a006d0c:	4657      	mov	r7, sl
1a006d0e:	e64d      	b.n	1a0069ac <_vfprintf_r+0x54c>
1a006d10:	f89a 6000 	ldrb.w	r6, [sl]
1a006d14:	2e68      	cmp	r6, #104	; 0x68
1a006d16:	bf03      	ittte	eq
1a006d18:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
1a006d1c:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
1a006d20:	f10a 0a01 	addeq.w	sl, sl, #1
1a006d24:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
1a006d28:	e418      	b.n	1a00655c <_vfprintf_r+0xfc>
1a006d2a:	9908      	ldr	r1, [sp, #32]
1a006d2c:	4b55      	ldr	r3, [pc, #340]	; (1a006e84 <_vfprintf_r+0xa24>)
1a006d2e:	680c      	ldr	r4, [r1, #0]
1a006d30:	9317      	str	r3, [sp, #92]	; 0x5c
1a006d32:	f647 0230 	movw	r2, #30768	; 0x7830
1a006d36:	3104      	adds	r1, #4
1a006d38:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
1a006d3c:	f048 0302 	orr.w	r3, r8, #2
1a006d40:	9108      	str	r1, [sp, #32]
1a006d42:	2500      	movs	r5, #0
1a006d44:	2202      	movs	r2, #2
1a006d46:	2678      	movs	r6, #120	; 0x78
1a006d48:	e64b      	b.n	1a0069e2 <_vfprintf_r+0x582>
1a006d4a:	f048 0808 	orr.w	r8, r8, #8
1a006d4e:	f89a 6000 	ldrb.w	r6, [sl]
1a006d52:	e403      	b.n	1a00655c <_vfprintf_r+0xfc>
1a006d54:	f048 0310 	orr.w	r3, r8, #16
1a006d58:	069f      	lsls	r7, r3, #26
1a006d5a:	f53f acd1 	bmi.w	1a006700 <_vfprintf_r+0x2a0>
1a006d5e:	9908      	ldr	r1, [sp, #32]
1a006d60:	06dd      	lsls	r5, r3, #27
1a006d62:	f101 0204 	add.w	r2, r1, #4
1a006d66:	f100 82fd 	bmi.w	1a007364 <_vfprintf_r+0xf04>
1a006d6a:	065c      	lsls	r4, r3, #25
1a006d6c:	9908      	ldr	r1, [sp, #32]
1a006d6e:	f100 8475 	bmi.w	1a00765c <_vfprintf_r+0x11fc>
1a006d72:	0598      	lsls	r0, r3, #22
1a006d74:	f140 82f6 	bpl.w	1a007364 <_vfprintf_r+0xf04>
1a006d78:	f991 4000 	ldrsb.w	r4, [r1]
1a006d7c:	9208      	str	r2, [sp, #32]
1a006d7e:	17e5      	asrs	r5, r4, #31
1a006d80:	4620      	mov	r0, r4
1a006d82:	4629      	mov	r1, r5
1a006d84:	e4c7      	b.n	1a006716 <_vfprintf_r+0x2b6>
1a006d86:	9a08      	ldr	r2, [sp, #32]
1a006d88:	f018 0f10 	tst.w	r8, #16
1a006d8c:	f102 0304 	add.w	r3, r2, #4
1a006d90:	f040 82e3 	bne.w	1a00735a <_vfprintf_r+0xefa>
1a006d94:	f018 0f40 	tst.w	r8, #64	; 0x40
1a006d98:	9a08      	ldr	r2, [sp, #32]
1a006d9a:	f040 8467 	bne.w	1a00766c <_vfprintf_r+0x120c>
1a006d9e:	f418 7f00 	tst.w	r8, #512	; 0x200
1a006da2:	f000 82da 	beq.w	1a00735a <_vfprintf_r+0xefa>
1a006da6:	7814      	ldrb	r4, [r2, #0]
1a006da8:	9308      	str	r3, [sp, #32]
1a006daa:	2500      	movs	r5, #0
1a006dac:	e488      	b.n	1a0066c0 <_vfprintf_r+0x260>
1a006dae:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a006db2:	f7fe fe8b 	bl	1a005acc <__retarget_lock_release_recursive>
1a006db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a006dba:	9305      	str	r3, [sp, #20]
1a006dbc:	e443      	b.n	1a006646 <_vfprintf_r+0x1e6>
1a006dbe:	2e00      	cmp	r6, #0
1a006dc0:	f43f adf8 	beq.w	1a0069b4 <_vfprintf_r+0x554>
1a006dc4:	2300      	movs	r3, #0
1a006dc6:	2101      	movs	r1, #1
1a006dc8:	461a      	mov	r2, r3
1a006dca:	9104      	str	r1, [sp, #16]
1a006dcc:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
1a006dd0:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
1a006dd4:	930a      	str	r3, [sp, #40]	; 0x28
1a006dd6:	4699      	mov	r9, r3
1a006dd8:	930f      	str	r3, [sp, #60]	; 0x3c
1a006dda:	9314      	str	r3, [sp, #80]	; 0x50
1a006ddc:	9311      	str	r3, [sp, #68]	; 0x44
1a006dde:	9109      	str	r1, [sp, #36]	; 0x24
1a006de0:	af3d      	add	r7, sp, #244	; 0xf4
1a006de2:	e4ce      	b.n	1a006782 <_vfprintf_r+0x322>
1a006de4:	2e65      	cmp	r6, #101	; 0x65
1a006de6:	f340 80ca 	ble.w	1a006f7e <_vfprintf_r+0xb1e>
1a006dea:	2200      	movs	r2, #0
1a006dec:	2300      	movs	r3, #0
1a006dee:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a006df2:	f7fe f91d 	bl	1a005030 <__aeabi_dcmpeq>
1a006df6:	2800      	cmp	r0, #0
1a006df8:	f000 8169 	beq.w	1a0070ce <_vfprintf_r+0xc6e>
1a006dfc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a006dfe:	4a22      	ldr	r2, [pc, #136]	; (1a006e88 <_vfprintf_r+0xa28>)
1a006e00:	f8cb 2000 	str.w	r2, [fp]
1a006e04:	3301      	adds	r3, #1
1a006e06:	3401      	adds	r4, #1
1a006e08:	2201      	movs	r2, #1
1a006e0a:	2b07      	cmp	r3, #7
1a006e0c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a006e10:	f8cb 2004 	str.w	r2, [fp, #4]
1a006e14:	f300 8406 	bgt.w	1a007624 <_vfprintf_r+0x11c4>
1a006e18:	f10b 0b08 	add.w	fp, fp, #8
1a006e1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a006e1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a006e20:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a006e22:	4293      	cmp	r3, r2
1a006e24:	db03      	blt.n	1a006e2e <_vfprintf_r+0x9ce>
1a006e26:	f018 0f01 	tst.w	r8, #1
1a006e2a:	f43f ad6a 	beq.w	1a006902 <_vfprintf_r+0x4a2>
1a006e2e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a006e30:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a006e32:	f8cb 2000 	str.w	r2, [fp]
1a006e36:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a006e38:	f8cb 2004 	str.w	r2, [fp, #4]
1a006e3c:	3301      	adds	r3, #1
1a006e3e:	4414      	add	r4, r2
1a006e40:	2b07      	cmp	r3, #7
1a006e42:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a006e46:	f300 8517 	bgt.w	1a007878 <_vfprintf_r+0x1418>
1a006e4a:	f10b 0b08 	add.w	fp, fp, #8
1a006e4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a006e50:	1e5d      	subs	r5, r3, #1
1a006e52:	2d00      	cmp	r5, #0
1a006e54:	f77f ad55 	ble.w	1a006902 <_vfprintf_r+0x4a2>
1a006e58:	2d10      	cmp	r5, #16
1a006e5a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a006e5c:	4b0b      	ldr	r3, [pc, #44]	; (1a006e8c <_vfprintf_r+0xa2c>)
1a006e5e:	f340 82e7 	ble.w	1a007430 <_vfprintf_r+0xfd0>
1a006e62:	4619      	mov	r1, r3
1a006e64:	2610      	movs	r6, #16
1a006e66:	4623      	mov	r3, r4
1a006e68:	9f03      	ldr	r7, [sp, #12]
1a006e6a:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a006e6e:	460c      	mov	r4, r1
1a006e70:	e014      	b.n	1a006e9c <_vfprintf_r+0xa3c>
1a006e72:	bf00      	nop
1a006e74:	7fefffff 	.word	0x7fefffff
1a006e78:	1a00a950 	.word	0x1a00a950
1a006e7c:	1a00a94c 	.word	0x1a00a94c
1a006e80:	1a00a970 	.word	0x1a00a970
1a006e84:	1a00a95c 	.word	0x1a00a95c
1a006e88:	1a00a98c 	.word	0x1a00a98c
1a006e8c:	1a00a9a0 	.word	0x1a00a9a0
1a006e90:	f10b 0b08 	add.w	fp, fp, #8
1a006e94:	3d10      	subs	r5, #16
1a006e96:	2d10      	cmp	r5, #16
1a006e98:	f340 82c7 	ble.w	1a00742a <_vfprintf_r+0xfca>
1a006e9c:	3201      	adds	r2, #1
1a006e9e:	3310      	adds	r3, #16
1a006ea0:	2a07      	cmp	r2, #7
1a006ea2:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
1a006ea6:	e9cb 4600 	strd	r4, r6, [fp]
1a006eaa:	ddf1      	ble.n	1a006e90 <_vfprintf_r+0xa30>
1a006eac:	aa2a      	add	r2, sp, #168	; 0xa8
1a006eae:	4649      	mov	r1, r9
1a006eb0:	4638      	mov	r0, r7
1a006eb2:	f003 f883 	bl	1a009fbc <__sprint_r>
1a006eb6:	2800      	cmp	r0, #0
1a006eb8:	d14c      	bne.n	1a006f54 <_vfprintf_r+0xaf4>
1a006eba:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
1a006ebe:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a006ec2:	e7e7      	b.n	1a006e94 <_vfprintf_r+0xa34>
1a006ec4:	9b06      	ldr	r3, [sp, #24]
1a006ec6:	9a04      	ldr	r2, [sp, #16]
1a006ec8:	1a9d      	subs	r5, r3, r2
1a006eca:	2d00      	cmp	r5, #0
1a006ecc:	f77f acc9 	ble.w	1a006862 <_vfprintf_r+0x402>
1a006ed0:	2d10      	cmp	r5, #16
1a006ed2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a006ed4:	4bbc      	ldr	r3, [pc, #752]	; (1a0071c8 <_vfprintf_r+0xd68>)
1a006ed6:	dd27      	ble.n	1a006f28 <_vfprintf_r+0xac8>
1a006ed8:	4659      	mov	r1, fp
1a006eda:	4620      	mov	r0, r4
1a006edc:	46bb      	mov	fp, r7
1a006ede:	461c      	mov	r4, r3
1a006ee0:	4637      	mov	r7, r6
1a006ee2:	9e07      	ldr	r6, [sp, #28]
1a006ee4:	e004      	b.n	1a006ef0 <_vfprintf_r+0xa90>
1a006ee6:	3d10      	subs	r5, #16
1a006ee8:	2d10      	cmp	r5, #16
1a006eea:	f101 0108 	add.w	r1, r1, #8
1a006eee:	dd16      	ble.n	1a006f1e <_vfprintf_r+0xabe>
1a006ef0:	3201      	adds	r2, #1
1a006ef2:	3010      	adds	r0, #16
1a006ef4:	2310      	movs	r3, #16
1a006ef6:	2a07      	cmp	r2, #7
1a006ef8:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
1a006efc:	600c      	str	r4, [r1, #0]
1a006efe:	604b      	str	r3, [r1, #4]
1a006f00:	ddf1      	ble.n	1a006ee6 <_vfprintf_r+0xa86>
1a006f02:	aa2a      	add	r2, sp, #168	; 0xa8
1a006f04:	4631      	mov	r1, r6
1a006f06:	9803      	ldr	r0, [sp, #12]
1a006f08:	f003 f858 	bl	1a009fbc <__sprint_r>
1a006f0c:	2800      	cmp	r0, #0
1a006f0e:	f040 80a8 	bne.w	1a007062 <_vfprintf_r+0xc02>
1a006f12:	3d10      	subs	r5, #16
1a006f14:	2d10      	cmp	r5, #16
1a006f16:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
1a006f1a:	a92d      	add	r1, sp, #180	; 0xb4
1a006f1c:	dce8      	bgt.n	1a006ef0 <_vfprintf_r+0xa90>
1a006f1e:	463e      	mov	r6, r7
1a006f20:	4623      	mov	r3, r4
1a006f22:	465f      	mov	r7, fp
1a006f24:	4604      	mov	r4, r0
1a006f26:	468b      	mov	fp, r1
1a006f28:	3201      	adds	r2, #1
1a006f2a:	442c      	add	r4, r5
1a006f2c:	2a07      	cmp	r2, #7
1a006f2e:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a006f32:	e9cb 3500 	strd	r3, r5, [fp]
1a006f36:	f300 8292 	bgt.w	1a00745e <_vfprintf_r+0xffe>
1a006f3a:	f10b 0b08 	add.w	fp, fp, #8
1a006f3e:	e490      	b.n	1a006862 <_vfprintf_r+0x402>
1a006f40:	aa2a      	add	r2, sp, #168	; 0xa8
1a006f42:	9907      	ldr	r1, [sp, #28]
1a006f44:	9803      	ldr	r0, [sp, #12]
1a006f46:	f003 f839 	bl	1a009fbc <__sprint_r>
1a006f4a:	2800      	cmp	r0, #0
1a006f4c:	f43f ad23 	beq.w	1a006996 <_vfprintf_r+0x536>
1a006f50:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a006f54:	990a      	ldr	r1, [sp, #40]	; 0x28
1a006f56:	b111      	cbz	r1, 1a006f5e <_vfprintf_r+0xafe>
1a006f58:	9803      	ldr	r0, [sp, #12]
1a006f5a:	f7fe fc61 	bl	1a005820 <_free_r>
1a006f5e:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a006f62:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a006f66:	07d0      	lsls	r0, r2, #31
1a006f68:	d402      	bmi.n	1a006f70 <_vfprintf_r+0xb10>
1a006f6a:	0599      	lsls	r1, r3, #22
1a006f6c:	f140 81d0 	bpl.w	1a007310 <_vfprintf_r+0xeb0>
1a006f70:	065a      	lsls	r2, r3, #25
1a006f72:	f53f ab65 	bmi.w	1a006640 <_vfprintf_r+0x1e0>
1a006f76:	9805      	ldr	r0, [sp, #20]
1a006f78:	b057      	add	sp, #348	; 0x15c
1a006f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006f7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a006f80:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a006f82:	2a01      	cmp	r2, #1
1a006f84:	f104 0401 	add.w	r4, r4, #1
1a006f88:	f103 0501 	add.w	r5, r3, #1
1a006f8c:	f10b 0608 	add.w	r6, fp, #8
1a006f90:	f340 811c 	ble.w	1a0071cc <_vfprintf_r+0xd6c>
1a006f94:	2301      	movs	r3, #1
1a006f96:	2d07      	cmp	r5, #7
1a006f98:	f8cb 7000 	str.w	r7, [fp]
1a006f9c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
1a006fa0:	f8cb 3004 	str.w	r3, [fp, #4]
1a006fa4:	f300 81bb 	bgt.w	1a00731e <_vfprintf_r+0xebe>
1a006fa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a006faa:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a006fac:	1c69      	adds	r1, r5, #1
1a006fae:	441c      	add	r4, r3
1a006fb0:	2907      	cmp	r1, #7
1a006fb2:	910b      	str	r1, [sp, #44]	; 0x2c
1a006fb4:	e9cd 142b 	strd	r1, r4, [sp, #172]	; 0xac
1a006fb8:	e9c6 2300 	strd	r2, r3, [r6]
1a006fbc:	f300 81bb 	bgt.w	1a007336 <_vfprintf_r+0xed6>
1a006fc0:	3608      	adds	r6, #8
1a006fc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a006fc4:	1c53      	adds	r3, r2, #1
1a006fc6:	461d      	mov	r5, r3
1a006fc8:	9509      	str	r5, [sp, #36]	; 0x24
1a006fca:	9d10      	ldr	r5, [sp, #64]	; 0x40
1a006fcc:	930e      	str	r3, [sp, #56]	; 0x38
1a006fce:	2200      	movs	r2, #0
1a006fd0:	2300      	movs	r3, #0
1a006fd2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a006fd6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
1a006fda:	f106 0b08 	add.w	fp, r6, #8
1a006fde:	f7fe f827 	bl	1a005030 <__aeabi_dcmpeq>
1a006fe2:	2800      	cmp	r0, #0
1a006fe4:	f040 80c2 	bne.w	1a00716c <_vfprintf_r+0xd0c>
1a006fe8:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a006fea:	f8c6 9004 	str.w	r9, [r6, #4]
1a006fee:	3701      	adds	r7, #1
1a006ff0:	444c      	add	r4, r9
1a006ff2:	2d07      	cmp	r5, #7
1a006ff4:	6037      	str	r7, [r6, #0]
1a006ff6:	942c      	str	r4, [sp, #176]	; 0xb0
1a006ff8:	952b      	str	r5, [sp, #172]	; 0xac
1a006ffa:	f300 80f9 	bgt.w	1a0071f0 <_vfprintf_r+0xd90>
1a006ffe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a007000:	f106 0310 	add.w	r3, r6, #16
1a007004:	3202      	adds	r2, #2
1a007006:	465e      	mov	r6, fp
1a007008:	9209      	str	r2, [sp, #36]	; 0x24
1a00700a:	469b      	mov	fp, r3
1a00700c:	9a19      	ldr	r2, [sp, #100]	; 0x64
1a00700e:	6072      	str	r2, [r6, #4]
1a007010:	4414      	add	r4, r2
1a007012:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a007014:	942c      	str	r4, [sp, #176]	; 0xb0
1a007016:	ab26      	add	r3, sp, #152	; 0x98
1a007018:	2a07      	cmp	r2, #7
1a00701a:	922b      	str	r2, [sp, #172]	; 0xac
1a00701c:	6033      	str	r3, [r6, #0]
1a00701e:	f77f ac70 	ble.w	1a006902 <_vfprintf_r+0x4a2>
1a007022:	aa2a      	add	r2, sp, #168	; 0xa8
1a007024:	9907      	ldr	r1, [sp, #28]
1a007026:	9803      	ldr	r0, [sp, #12]
1a007028:	f002 ffc8 	bl	1a009fbc <__sprint_r>
1a00702c:	2800      	cmp	r0, #0
1a00702e:	d18f      	bne.n	1a006f50 <_vfprintf_r+0xaf0>
1a007030:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a007032:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a007036:	e464      	b.n	1a006902 <_vfprintf_r+0x4a2>
1a007038:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a00703a:	af56      	add	r7, sp, #344	; 0x158
1a00703c:	0923      	lsrs	r3, r4, #4
1a00703e:	f004 010f 	and.w	r1, r4, #15
1a007042:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a007046:	092a      	lsrs	r2, r5, #4
1a007048:	461c      	mov	r4, r3
1a00704a:	4615      	mov	r5, r2
1a00704c:	5c43      	ldrb	r3, [r0, r1]
1a00704e:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a007052:	ea54 0305 	orrs.w	r3, r4, r5
1a007056:	d1f1      	bne.n	1a00703c <_vfprintf_r+0xbdc>
1a007058:	9b04      	ldr	r3, [sp, #16]
1a00705a:	1bdb      	subs	r3, r3, r7
1a00705c:	9309      	str	r3, [sp, #36]	; 0x24
1a00705e:	f7ff bb80 	b.w	1a006762 <_vfprintf_r+0x302>
1a007062:	46b1      	mov	r9, r6
1a007064:	e776      	b.n	1a006f54 <_vfprintf_r+0xaf4>
1a007066:	aa2a      	add	r2, sp, #168	; 0xa8
1a007068:	9907      	ldr	r1, [sp, #28]
1a00706a:	9803      	ldr	r0, [sp, #12]
1a00706c:	f002 ffa6 	bl	1a009fbc <__sprint_r>
1a007070:	2800      	cmp	r0, #0
1a007072:	f47f af6d 	bne.w	1a006f50 <_vfprintf_r+0xaf0>
1a007076:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a007078:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00707c:	f7ff bbdd 	b.w	1a00683a <_vfprintf_r+0x3da>
1a007080:	aa2a      	add	r2, sp, #168	; 0xa8
1a007082:	9907      	ldr	r1, [sp, #28]
1a007084:	9803      	ldr	r0, [sp, #12]
1a007086:	f002 ff99 	bl	1a009fbc <__sprint_r>
1a00708a:	2800      	cmp	r0, #0
1a00708c:	f47f af60 	bne.w	1a006f50 <_vfprintf_r+0xaf0>
1a007090:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a007092:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a007096:	f7ff bbe0 	b.w	1a00685a <_vfprintf_r+0x3fa>
1a00709a:	4698      	mov	r8, r3
1a00709c:	2d00      	cmp	r5, #0
1a00709e:	bf08      	it	eq
1a0070a0:	2c0a      	cmpeq	r4, #10
1a0070a2:	f080 8170 	bcs.w	1a007386 <_vfprintf_r+0xf26>
1a0070a6:	af56      	add	r7, sp, #344	; 0x158
1a0070a8:	3430      	adds	r4, #48	; 0x30
1a0070aa:	2301      	movs	r3, #1
1a0070ac:	f807 4d01 	strb.w	r4, [r7, #-1]!
1a0070b0:	9309      	str	r3, [sp, #36]	; 0x24
1a0070b2:	f7ff bb56 	b.w	1a006762 <_vfprintf_r+0x302>
1a0070b6:	aa2a      	add	r2, sp, #168	; 0xa8
1a0070b8:	9907      	ldr	r1, [sp, #28]
1a0070ba:	9803      	ldr	r0, [sp, #12]
1a0070bc:	f002 ff7e 	bl	1a009fbc <__sprint_r>
1a0070c0:	2800      	cmp	r0, #0
1a0070c2:	f47f af45 	bne.w	1a006f50 <_vfprintf_r+0xaf0>
1a0070c6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0070c8:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0070cc:	e406      	b.n	1a0068dc <_vfprintf_r+0x47c>
1a0070ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a0070d0:	2b00      	cmp	r3, #0
1a0070d2:	f340 8273 	ble.w	1a0075bc <_vfprintf_r+0x115c>
1a0070d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a0070da:	4293      	cmp	r3, r2
1a0070dc:	bfa8      	it	ge
1a0070de:	4613      	movge	r3, r2
1a0070e0:	2b00      	cmp	r3, #0
1a0070e2:	461d      	mov	r5, r3
1a0070e4:	dd0d      	ble.n	1a007102 <_vfprintf_r+0xca2>
1a0070e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a0070e8:	f8cb 7000 	str.w	r7, [fp]
1a0070ec:	3301      	adds	r3, #1
1a0070ee:	442c      	add	r4, r5
1a0070f0:	2b07      	cmp	r3, #7
1a0070f2:	942c      	str	r4, [sp, #176]	; 0xb0
1a0070f4:	f8cb 5004 	str.w	r5, [fp, #4]
1a0070f8:	932b      	str	r3, [sp, #172]	; 0xac
1a0070fa:	f300 82c1 	bgt.w	1a007680 <_vfprintf_r+0x1220>
1a0070fe:	f10b 0b08 	add.w	fp, fp, #8
1a007102:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a007104:	2d00      	cmp	r5, #0
1a007106:	bfa8      	it	ge
1a007108:	1b5b      	subge	r3, r3, r5
1a00710a:	2b00      	cmp	r3, #0
1a00710c:	461d      	mov	r5, r3
1a00710e:	f340 8099 	ble.w	1a007244 <_vfprintf_r+0xde4>
1a007112:	2d10      	cmp	r5, #16
1a007114:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a007116:	4b2c      	ldr	r3, [pc, #176]	; (1a0071c8 <_vfprintf_r+0xd68>)
1a007118:	f340 83db 	ble.w	1a0078d2 <_vfprintf_r+0x1472>
1a00711c:	4618      	mov	r0, r3
1a00711e:	4621      	mov	r1, r4
1a007120:	465b      	mov	r3, fp
1a007122:	2610      	movs	r6, #16
1a007124:	46bb      	mov	fp, r7
1a007126:	f8dd 900c 	ldr.w	r9, [sp, #12]
1a00712a:	9c07      	ldr	r4, [sp, #28]
1a00712c:	4607      	mov	r7, r0
1a00712e:	e004      	b.n	1a00713a <_vfprintf_r+0xcda>
1a007130:	3308      	adds	r3, #8
1a007132:	3d10      	subs	r5, #16
1a007134:	2d10      	cmp	r5, #16
1a007136:	f340 83c7 	ble.w	1a0078c8 <_vfprintf_r+0x1468>
1a00713a:	3201      	adds	r2, #1
1a00713c:	3110      	adds	r1, #16
1a00713e:	2a07      	cmp	r2, #7
1a007140:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
1a007144:	e9c3 7600 	strd	r7, r6, [r3]
1a007148:	ddf2      	ble.n	1a007130 <_vfprintf_r+0xcd0>
1a00714a:	aa2a      	add	r2, sp, #168	; 0xa8
1a00714c:	4621      	mov	r1, r4
1a00714e:	4648      	mov	r0, r9
1a007150:	f002 ff34 	bl	1a009fbc <__sprint_r>
1a007154:	2800      	cmp	r0, #0
1a007156:	f040 84a5 	bne.w	1a007aa4 <_vfprintf_r+0x1644>
1a00715a:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
1a00715e:	ab2d      	add	r3, sp, #180	; 0xb4
1a007160:	e7e7      	b.n	1a007132 <_vfprintf_r+0xcd2>
1a007162:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a007166:	af56      	add	r7, sp, #344	; 0x158
1a007168:	f7ff bafb 	b.w	1a006762 <_vfprintf_r+0x302>
1a00716c:	f1b9 0f00 	cmp.w	r9, #0
1a007170:	f77f af4c 	ble.w	1a00700c <_vfprintf_r+0xbac>
1a007174:	f1b9 0f10 	cmp.w	r9, #16
1a007178:	4b13      	ldr	r3, [pc, #76]	; (1a0071c8 <_vfprintf_r+0xd68>)
1a00717a:	f340 8659 	ble.w	1a007e30 <_vfprintf_r+0x19d0>
1a00717e:	4619      	mov	r1, r3
1a007180:	4622      	mov	r2, r4
1a007182:	4633      	mov	r3, r6
1a007184:	2710      	movs	r7, #16
1a007186:	f8dd b00c 	ldr.w	fp, [sp, #12]
1a00718a:	9c07      	ldr	r4, [sp, #28]
1a00718c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
1a00718e:	460e      	mov	r6, r1
1a007190:	e007      	b.n	1a0071a2 <_vfprintf_r+0xd42>
1a007192:	3308      	adds	r3, #8
1a007194:	f1a9 0910 	sub.w	r9, r9, #16
1a007198:	f1b9 0f10 	cmp.w	r9, #16
1a00719c:	f340 8353 	ble.w	1a007846 <_vfprintf_r+0x13e6>
1a0071a0:	3501      	adds	r5, #1
1a0071a2:	3210      	adds	r2, #16
1a0071a4:	2d07      	cmp	r5, #7
1a0071a6:	e9cd 522b 	strd	r5, r2, [sp, #172]	; 0xac
1a0071aa:	e9c3 6700 	strd	r6, r7, [r3]
1a0071ae:	ddf0      	ble.n	1a007192 <_vfprintf_r+0xd32>
1a0071b0:	aa2a      	add	r2, sp, #168	; 0xa8
1a0071b2:	4621      	mov	r1, r4
1a0071b4:	4658      	mov	r0, fp
1a0071b6:	f002 ff01 	bl	1a009fbc <__sprint_r>
1a0071ba:	2800      	cmp	r0, #0
1a0071bc:	f040 8472 	bne.w	1a007aa4 <_vfprintf_r+0x1644>
1a0071c0:	e9dd 522b 	ldrd	r5, r2, [sp, #172]	; 0xac
1a0071c4:	ab2d      	add	r3, sp, #180	; 0xb4
1a0071c6:	e7e5      	b.n	1a007194 <_vfprintf_r+0xd34>
1a0071c8:	1a00a9a0 	.word	0x1a00a9a0
1a0071cc:	f018 0f01 	tst.w	r8, #1
1a0071d0:	f47f aee0 	bne.w	1a006f94 <_vfprintf_r+0xb34>
1a0071d4:	2201      	movs	r2, #1
1a0071d6:	2d07      	cmp	r5, #7
1a0071d8:	f8cb 7000 	str.w	r7, [fp]
1a0071dc:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
1a0071e0:	f8cb 2004 	str.w	r2, [fp, #4]
1a0071e4:	dc04      	bgt.n	1a0071f0 <_vfprintf_r+0xd90>
1a0071e6:	3302      	adds	r3, #2
1a0071e8:	9309      	str	r3, [sp, #36]	; 0x24
1a0071ea:	f10b 0b10 	add.w	fp, fp, #16
1a0071ee:	e70d      	b.n	1a00700c <_vfprintf_r+0xbac>
1a0071f0:	aa2a      	add	r2, sp, #168	; 0xa8
1a0071f2:	9907      	ldr	r1, [sp, #28]
1a0071f4:	9803      	ldr	r0, [sp, #12]
1a0071f6:	f002 fee1 	bl	1a009fbc <__sprint_r>
1a0071fa:	2800      	cmp	r0, #0
1a0071fc:	f47f aea8 	bne.w	1a006f50 <_vfprintf_r+0xaf0>
1a007200:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
1a007204:	3301      	adds	r3, #1
1a007206:	9309      	str	r3, [sp, #36]	; 0x24
1a007208:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
1a00720c:	ae2d      	add	r6, sp, #180	; 0xb4
1a00720e:	e6fd      	b.n	1a00700c <_vfprintf_r+0xbac>
1a007210:	aa2a      	add	r2, sp, #168	; 0xa8
1a007212:	9907      	ldr	r1, [sp, #28]
1a007214:	9803      	ldr	r0, [sp, #12]
1a007216:	f002 fed1 	bl	1a009fbc <__sprint_r>
1a00721a:	2800      	cmp	r0, #0
1a00721c:	f47f ae98 	bne.w	1a006f50 <_vfprintf_r+0xaf0>
1a007220:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a007224:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a007226:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00722a:	f7ff baf6 	b.w	1a00681a <_vfprintf_r+0x3ba>
1a00722e:	aa2a      	add	r2, sp, #168	; 0xa8
1a007230:	9907      	ldr	r1, [sp, #28]
1a007232:	9803      	ldr	r0, [sp, #12]
1a007234:	f002 fec2 	bl	1a009fbc <__sprint_r>
1a007238:	2800      	cmp	r0, #0
1a00723a:	f47f ae89 	bne.w	1a006f50 <_vfprintf_r+0xaf0>
1a00723e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a007240:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a007244:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a007246:	f418 6f80 	tst.w	r8, #1024	; 0x400
1a00724a:	443b      	add	r3, r7
1a00724c:	4699      	mov	r9, r3
1a00724e:	f040 8357 	bne.w	1a007900 <_vfprintf_r+0x14a0>
1a007252:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a007254:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a007256:	4293      	cmp	r3, r2
1a007258:	db49      	blt.n	1a0072ee <_vfprintf_r+0xe8e>
1a00725a:	f018 0f01 	tst.w	r8, #1
1a00725e:	d146      	bne.n	1a0072ee <_vfprintf_r+0xe8e>
1a007260:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a007262:	18bd      	adds	r5, r7, r2
1a007264:	eba5 0509 	sub.w	r5, r5, r9
1a007268:	1ad3      	subs	r3, r2, r3
1a00726a:	429d      	cmp	r5, r3
1a00726c:	bfa8      	it	ge
1a00726e:	461d      	movge	r5, r3
1a007270:	2d00      	cmp	r5, #0
1a007272:	dd0d      	ble.n	1a007290 <_vfprintf_r+0xe30>
1a007274:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a007276:	f8cb 9000 	str.w	r9, [fp]
1a00727a:	3201      	adds	r2, #1
1a00727c:	442c      	add	r4, r5
1a00727e:	2a07      	cmp	r2, #7
1a007280:	942c      	str	r4, [sp, #176]	; 0xb0
1a007282:	f8cb 5004 	str.w	r5, [fp, #4]
1a007286:	922b      	str	r2, [sp, #172]	; 0xac
1a007288:	f300 8462 	bgt.w	1a007b50 <_vfprintf_r+0x16f0>
1a00728c:	f10b 0b08 	add.w	fp, fp, #8
1a007290:	2d00      	cmp	r5, #0
1a007292:	bfac      	ite	ge
1a007294:	1b5d      	subge	r5, r3, r5
1a007296:	461d      	movlt	r5, r3
1a007298:	2d00      	cmp	r5, #0
1a00729a:	f77f ab32 	ble.w	1a006902 <_vfprintf_r+0x4a2>
1a00729e:	2d10      	cmp	r5, #16
1a0072a0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a0072a2:	4bc5      	ldr	r3, [pc, #788]	; (1a0075b8 <_vfprintf_r+0x1158>)
1a0072a4:	f340 80c4 	ble.w	1a007430 <_vfprintf_r+0xfd0>
1a0072a8:	4619      	mov	r1, r3
1a0072aa:	2610      	movs	r6, #16
1a0072ac:	4623      	mov	r3, r4
1a0072ae:	9f03      	ldr	r7, [sp, #12]
1a0072b0:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0072b4:	460c      	mov	r4, r1
1a0072b6:	e005      	b.n	1a0072c4 <_vfprintf_r+0xe64>
1a0072b8:	f10b 0b08 	add.w	fp, fp, #8
1a0072bc:	3d10      	subs	r5, #16
1a0072be:	2d10      	cmp	r5, #16
1a0072c0:	f340 80b3 	ble.w	1a00742a <_vfprintf_r+0xfca>
1a0072c4:	3201      	adds	r2, #1
1a0072c6:	3310      	adds	r3, #16
1a0072c8:	2a07      	cmp	r2, #7
1a0072ca:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
1a0072ce:	e9cb 4600 	strd	r4, r6, [fp]
1a0072d2:	ddf1      	ble.n	1a0072b8 <_vfprintf_r+0xe58>
1a0072d4:	aa2a      	add	r2, sp, #168	; 0xa8
1a0072d6:	4649      	mov	r1, r9
1a0072d8:	4638      	mov	r0, r7
1a0072da:	f002 fe6f 	bl	1a009fbc <__sprint_r>
1a0072de:	2800      	cmp	r0, #0
1a0072e0:	f47f ae38 	bne.w	1a006f54 <_vfprintf_r+0xaf4>
1a0072e4:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
1a0072e8:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0072ec:	e7e6      	b.n	1a0072bc <_vfprintf_r+0xe5c>
1a0072ee:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a0072f0:	9916      	ldr	r1, [sp, #88]	; 0x58
1a0072f2:	f8cb 1000 	str.w	r1, [fp]
1a0072f6:	9915      	ldr	r1, [sp, #84]	; 0x54
1a0072f8:	f8cb 1004 	str.w	r1, [fp, #4]
1a0072fc:	3201      	adds	r2, #1
1a0072fe:	440c      	add	r4, r1
1a007300:	2a07      	cmp	r2, #7
1a007302:	942c      	str	r4, [sp, #176]	; 0xb0
1a007304:	922b      	str	r2, [sp, #172]	; 0xac
1a007306:	f300 828c 	bgt.w	1a007822 <_vfprintf_r+0x13c2>
1a00730a:	f10b 0b08 	add.w	fp, fp, #8
1a00730e:	e7a7      	b.n	1a007260 <_vfprintf_r+0xe00>
1a007310:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a007314:	f7fe fbda 	bl	1a005acc <__retarget_lock_release_recursive>
1a007318:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00731c:	e628      	b.n	1a006f70 <_vfprintf_r+0xb10>
1a00731e:	aa2a      	add	r2, sp, #168	; 0xa8
1a007320:	9907      	ldr	r1, [sp, #28]
1a007322:	9803      	ldr	r0, [sp, #12]
1a007324:	f002 fe4a 	bl	1a009fbc <__sprint_r>
1a007328:	2800      	cmp	r0, #0
1a00732a:	f47f ae11 	bne.w	1a006f50 <_vfprintf_r+0xaf0>
1a00732e:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
1a007332:	ae2d      	add	r6, sp, #180	; 0xb4
1a007334:	e638      	b.n	1a006fa8 <_vfprintf_r+0xb48>
1a007336:	aa2a      	add	r2, sp, #168	; 0xa8
1a007338:	9907      	ldr	r1, [sp, #28]
1a00733a:	9803      	ldr	r0, [sp, #12]
1a00733c:	f002 fe3e 	bl	1a009fbc <__sprint_r>
1a007340:	2800      	cmp	r0, #0
1a007342:	f47f ae05 	bne.w	1a006f50 <_vfprintf_r+0xaf0>
1a007346:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
1a00734a:	ae2d      	add	r6, sp, #180	; 0xb4
1a00734c:	930b      	str	r3, [sp, #44]	; 0x2c
1a00734e:	e638      	b.n	1a006fc2 <_vfprintf_r+0xb62>
1a007350:	6814      	ldr	r4, [r2, #0]
1a007352:	9308      	str	r3, [sp, #32]
1a007354:	2500      	movs	r5, #0
1a007356:	f7ff bb95 	b.w	1a006a84 <_vfprintf_r+0x624>
1a00735a:	6814      	ldr	r4, [r2, #0]
1a00735c:	9308      	str	r3, [sp, #32]
1a00735e:	2500      	movs	r5, #0
1a007360:	f7ff b9ae 	b.w	1a0066c0 <_vfprintf_r+0x260>
1a007364:	680c      	ldr	r4, [r1, #0]
1a007366:	9208      	str	r2, [sp, #32]
1a007368:	17e5      	asrs	r5, r4, #31
1a00736a:	4620      	mov	r0, r4
1a00736c:	4629      	mov	r1, r5
1a00736e:	f7ff b9d2 	b.w	1a006716 <_vfprintf_r+0x2b6>
1a007372:	6814      	ldr	r4, [r2, #0]
1a007374:	9108      	str	r1, [sp, #32]
1a007376:	2201      	movs	r2, #1
1a007378:	2500      	movs	r5, #0
1a00737a:	f7ff bb32 	b.w	1a0069e2 <_vfprintf_r+0x582>
1a00737e:	2a01      	cmp	r2, #1
1a007380:	f47f ab3c 	bne.w	1a0069fc <_vfprintf_r+0x59c>
1a007384:	e68f      	b.n	1a0070a6 <_vfprintf_r+0xc46>
1a007386:	f408 6380 	and.w	r3, r8, #1024	; 0x400
1a00738a:	2200      	movs	r2, #0
1a00738c:	e9cd a609 	strd	sl, r6, [sp, #36]	; 0x24
1a007390:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
1a007394:	af56      	add	r7, sp, #344	; 0x158
1a007396:	4692      	mov	sl, r2
1a007398:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
1a00739c:	461e      	mov	r6, r3
1a00739e:	e00a      	b.n	1a0073b6 <_vfprintf_r+0xf56>
1a0073a0:	2300      	movs	r3, #0
1a0073a2:	4620      	mov	r0, r4
1a0073a4:	4629      	mov	r1, r5
1a0073a6:	220a      	movs	r2, #10
1a0073a8:	f7fd fec4 	bl	1a005134 <__aeabi_uldivmod>
1a0073ac:	4604      	mov	r4, r0
1a0073ae:	460d      	mov	r5, r1
1a0073b0:	ea54 0305 	orrs.w	r3, r4, r5
1a0073b4:	d029      	beq.n	1a00740a <_vfprintf_r+0xfaa>
1a0073b6:	220a      	movs	r2, #10
1a0073b8:	2300      	movs	r3, #0
1a0073ba:	4620      	mov	r0, r4
1a0073bc:	4629      	mov	r1, r5
1a0073be:	f7fd feb9 	bl	1a005134 <__aeabi_uldivmod>
1a0073c2:	3230      	adds	r2, #48	; 0x30
1a0073c4:	f807 2c01 	strb.w	r2, [r7, #-1]
1a0073c8:	f10a 0a01 	add.w	sl, sl, #1
1a0073cc:	3f01      	subs	r7, #1
1a0073ce:	2e00      	cmp	r6, #0
1a0073d0:	d0e6      	beq.n	1a0073a0 <_vfprintf_r+0xf40>
1a0073d2:	f898 3000 	ldrb.w	r3, [r8]
1a0073d6:	459a      	cmp	sl, r3
1a0073d8:	d1e2      	bne.n	1a0073a0 <_vfprintf_r+0xf40>
1a0073da:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
1a0073de:	d0df      	beq.n	1a0073a0 <_vfprintf_r+0xf40>
1a0073e0:	2d00      	cmp	r5, #0
1a0073e2:	bf08      	it	eq
1a0073e4:	2c0a      	cmpeq	r4, #10
1a0073e6:	d3db      	bcc.n	1a0073a0 <_vfprintf_r+0xf40>
1a0073e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a0073ea:	9918      	ldr	r1, [sp, #96]	; 0x60
1a0073ec:	1aff      	subs	r7, r7, r3
1a0073ee:	461a      	mov	r2, r3
1a0073f0:	4638      	mov	r0, r7
1a0073f2:	f002 fd75 	bl	1a009ee0 <strncpy>
1a0073f6:	f898 3001 	ldrb.w	r3, [r8, #1]
1a0073fa:	2b00      	cmp	r3, #0
1a0073fc:	f000 8496 	beq.w	1a007d2c <_vfprintf_r+0x18cc>
1a007400:	f108 0801 	add.w	r8, r8, #1
1a007404:	f04f 0a00 	mov.w	sl, #0
1a007408:	e7ca      	b.n	1a0073a0 <_vfprintf_r+0xf40>
1a00740a:	9b04      	ldr	r3, [sp, #16]
1a00740c:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
1a007410:	1bdb      	subs	r3, r3, r7
1a007412:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
1a007416:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a007418:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
1a00741c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
1a007420:	9309      	str	r3, [sp, #36]	; 0x24
1a007422:	f7ff b99e 	b.w	1a006762 <_vfprintf_r+0x302>
1a007426:	46c1      	mov	r9, r8
1a007428:	e594      	b.n	1a006f54 <_vfprintf_r+0xaf4>
1a00742a:	4621      	mov	r1, r4
1a00742c:	461c      	mov	r4, r3
1a00742e:	460b      	mov	r3, r1
1a007430:	3201      	adds	r2, #1
1a007432:	442c      	add	r4, r5
1a007434:	2a07      	cmp	r2, #7
1a007436:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a00743a:	e9cb 3500 	strd	r3, r5, [fp]
1a00743e:	f77f aa5e 	ble.w	1a0068fe <_vfprintf_r+0x49e>
1a007442:	e5ee      	b.n	1a007022 <_vfprintf_r+0xbc2>
1a007444:	f018 0f10 	tst.w	r8, #16
1a007448:	f040 80f8 	bne.w	1a00763c <_vfprintf_r+0x11dc>
1a00744c:	f018 0f40 	tst.w	r8, #64	; 0x40
1a007450:	f000 8351 	beq.w	1a007af6 <_vfprintf_r+0x1696>
1a007454:	9a05      	ldr	r2, [sp, #20]
1a007456:	801a      	strh	r2, [r3, #0]
1a007458:	4657      	mov	r7, sl
1a00745a:	f7ff baa7 	b.w	1a0069ac <_vfprintf_r+0x54c>
1a00745e:	aa2a      	add	r2, sp, #168	; 0xa8
1a007460:	9907      	ldr	r1, [sp, #28]
1a007462:	9803      	ldr	r0, [sp, #12]
1a007464:	f002 fdaa 	bl	1a009fbc <__sprint_r>
1a007468:	2800      	cmp	r0, #0
1a00746a:	f47f ad71 	bne.w	1a006f50 <_vfprintf_r+0xaf0>
1a00746e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a007470:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a007474:	f7ff b9f5 	b.w	1a006862 <_vfprintf_r+0x402>
1a007478:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a00747c:	4602      	mov	r2, r0
1a00747e:	460b      	mov	r3, r1
1a007480:	f002 fedc 	bl	1a00a23c <__aeabi_dcmpun>
1a007484:	2800      	cmp	r0, #0
1a007486:	f040 8491 	bne.w	1a007dac <_vfprintf_r+0x194c>
1a00748a:	2e61      	cmp	r6, #97	; 0x61
1a00748c:	f000 8111 	beq.w	1a0076b2 <_vfprintf_r+0x1252>
1a007490:	2e41      	cmp	r6, #65	; 0x41
1a007492:	f000 8377 	beq.w	1a007b84 <_vfprintf_r+0x1724>
1a007496:	f448 7380 	orr.w	r3, r8, #256	; 0x100
1a00749a:	f026 0220 	bic.w	r2, r6, #32
1a00749e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a0074a2:	930e      	str	r3, [sp, #56]	; 0x38
1a0074a4:	9204      	str	r2, [sp, #16]
1a0074a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0074a8:	f000 842d 	beq.w	1a007d06 <_vfprintf_r+0x18a6>
1a0074ac:	2a47      	cmp	r2, #71	; 0x47
1a0074ae:	f000 8424 	beq.w	1a007cfa <_vfprintf_r+0x189a>
1a0074b2:	2b00      	cmp	r3, #0
1a0074b4:	f2c0 82f9 	blt.w	1a007aaa <_vfprintf_r+0x164a>
1a0074b8:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
1a0074bc:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
1a0074c0:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
1a0074c4:	2e66      	cmp	r6, #102	; 0x66
1a0074c6:	f000 83eb 	beq.w	1a007ca0 <_vfprintf_r+0x1840>
1a0074ca:	2e46      	cmp	r6, #70	; 0x46
1a0074cc:	f000 847e 	beq.w	1a007dcc <_vfprintf_r+0x196c>
1a0074d0:	9b04      	ldr	r3, [sp, #16]
1a0074d2:	9803      	ldr	r0, [sp, #12]
1a0074d4:	2b45      	cmp	r3, #69	; 0x45
1a0074d6:	bf0c      	ite	eq
1a0074d8:	f109 0501 	addeq.w	r5, r9, #1
1a0074dc:	464d      	movne	r5, r9
1a0074de:	aa28      	add	r2, sp, #160	; 0xa0
1a0074e0:	ab25      	add	r3, sp, #148	; 0x94
1a0074e2:	e9cd 3200 	strd	r3, r2, [sp]
1a0074e6:	2102      	movs	r1, #2
1a0074e8:	ab24      	add	r3, sp, #144	; 0x90
1a0074ea:	462a      	mov	r2, r5
1a0074ec:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a0074f0:	f000 fe3e 	bl	1a008170 <_dtoa_r>
1a0074f4:	2e67      	cmp	r6, #103	; 0x67
1a0074f6:	4607      	mov	r7, r0
1a0074f8:	f040 849c 	bne.w	1a007e34 <_vfprintf_r+0x19d4>
1a0074fc:	f018 0f01 	tst.w	r8, #1
1a007500:	f040 83f9 	bne.w	1a007cf6 <_vfprintf_r+0x1896>
1a007504:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1a007506:	4640      	mov	r0, r8
1a007508:	1bdb      	subs	r3, r3, r7
1a00750a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a00750e:	9310      	str	r3, [sp, #64]	; 0x40
1a007510:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a007512:	9311      	str	r3, [sp, #68]	; 0x44
1a007514:	9b04      	ldr	r3, [sp, #16]
1a007516:	2b47      	cmp	r3, #71	; 0x47
1a007518:	f000 81e7 	beq.w	1a0078ea <_vfprintf_r+0x148a>
1a00751c:	9b04      	ldr	r3, [sp, #16]
1a00751e:	2b46      	cmp	r3, #70	; 0x46
1a007520:	f000 8300 	beq.w	1a007b24 <_vfprintf_r+0x16c4>
1a007524:	9904      	ldr	r1, [sp, #16]
1a007526:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a007528:	b2f2      	uxtb	r2, r6
1a00752a:	2941      	cmp	r1, #65	; 0x41
1a00752c:	bf08      	it	eq
1a00752e:	320f      	addeq	r2, #15
1a007530:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
1a007534:	bf06      	itte	eq
1a007536:	b2d2      	uxtbeq	r2, r2
1a007538:	2101      	moveq	r1, #1
1a00753a:	2100      	movne	r1, #0
1a00753c:	2b00      	cmp	r3, #0
1a00753e:	9324      	str	r3, [sp, #144]	; 0x90
1a007540:	bfb8      	it	lt
1a007542:	9b11      	ldrlt	r3, [sp, #68]	; 0x44
1a007544:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
1a007548:	bfba      	itte	lt
1a00754a:	f1c3 0301 	rsblt	r3, r3, #1
1a00754e:	222d      	movlt	r2, #45	; 0x2d
1a007550:	222b      	movge	r2, #43	; 0x2b
1a007552:	2b09      	cmp	r3, #9
1a007554:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
1a007558:	f300 83f9 	bgt.w	1a007d4e <_vfprintf_r+0x18ee>
1a00755c:	2900      	cmp	r1, #0
1a00755e:	f040 8487 	bne.w	1a007e70 <_vfprintf_r+0x1a10>
1a007562:	2230      	movs	r2, #48	; 0x30
1a007564:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
1a007568:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
1a00756c:	3330      	adds	r3, #48	; 0x30
1a00756e:	7013      	strb	r3, [r2, #0]
1a007570:	1c53      	adds	r3, r2, #1
1a007572:	aa26      	add	r2, sp, #152	; 0x98
1a007574:	1a9b      	subs	r3, r3, r2
1a007576:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a007578:	9319      	str	r3, [sp, #100]	; 0x64
1a00757a:	2a01      	cmp	r2, #1
1a00757c:	4413      	add	r3, r2
1a00757e:	9309      	str	r3, [sp, #36]	; 0x24
1a007580:	f340 8442 	ble.w	1a007e08 <_vfprintf_r+0x19a8>
1a007584:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a007586:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a007588:	4413      	add	r3, r2
1a00758a:	9309      	str	r3, [sp, #36]	; 0x24
1a00758c:	2300      	movs	r3, #0
1a00758e:	930f      	str	r3, [sp, #60]	; 0x3c
1a007590:	9314      	str	r3, [sp, #80]	; 0x50
1a007592:	9311      	str	r3, [sp, #68]	; 0x44
1a007594:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a007596:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
1a00759a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a00759e:	f440 7880 	orr.w	r8, r0, #256	; 0x100
1a0075a2:	9304      	str	r3, [sp, #16]
1a0075a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0075a6:	2b00      	cmp	r3, #0
1a0075a8:	f040 8275 	bne.w	1a007a96 <_vfprintf_r+0x1636>
1a0075ac:	4699      	mov	r9, r3
1a0075ae:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a0075b2:	f7ff b8e2 	b.w	1a00677a <_vfprintf_r+0x31a>
1a0075b6:	bf00      	nop
1a0075b8:	1a00a9a0 	.word	0x1a00a9a0
1a0075bc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a0075be:	49bd      	ldr	r1, [pc, #756]	; (1a0078b4 <_vfprintf_r+0x1454>)
1a0075c0:	f8cb 1000 	str.w	r1, [fp]
1a0075c4:	3201      	adds	r2, #1
1a0075c6:	3401      	adds	r4, #1
1a0075c8:	2101      	movs	r1, #1
1a0075ca:	2a07      	cmp	r2, #7
1a0075cc:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a0075d0:	f8cb 1004 	str.w	r1, [fp, #4]
1a0075d4:	dc60      	bgt.n	1a007698 <_vfprintf_r+0x1238>
1a0075d6:	f10b 0b08 	add.w	fp, fp, #8
1a0075da:	b92b      	cbnz	r3, 1a0075e8 <_vfprintf_r+0x1188>
1a0075dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a0075de:	b91a      	cbnz	r2, 1a0075e8 <_vfprintf_r+0x1188>
1a0075e0:	f018 0f01 	tst.w	r8, #1
1a0075e4:	f43f a98d 	beq.w	1a006902 <_vfprintf_r+0x4a2>
1a0075e8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a0075ea:	9916      	ldr	r1, [sp, #88]	; 0x58
1a0075ec:	f8cb 1000 	str.w	r1, [fp]
1a0075f0:	9915      	ldr	r1, [sp, #84]	; 0x54
1a0075f2:	f8cb 1004 	str.w	r1, [fp, #4]
1a0075f6:	3201      	adds	r2, #1
1a0075f8:	440c      	add	r4, r1
1a0075fa:	2a07      	cmp	r2, #7
1a0075fc:	942c      	str	r4, [sp, #176]	; 0xb0
1a0075fe:	922b      	str	r2, [sp, #172]	; 0xac
1a007600:	f300 8282 	bgt.w	1a007b08 <_vfprintf_r+0x16a8>
1a007604:	f10b 0b08 	add.w	fp, fp, #8
1a007608:	2b00      	cmp	r3, #0
1a00760a:	f2c0 82e7 	blt.w	1a007bdc <_vfprintf_r+0x177c>
1a00760e:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a007610:	3201      	adds	r2, #1
1a007612:	441c      	add	r4, r3
1a007614:	2a07      	cmp	r2, #7
1a007616:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a00761a:	e9cb 7300 	strd	r7, r3, [fp]
1a00761e:	f77f a96e 	ble.w	1a0068fe <_vfprintf_r+0x49e>
1a007622:	e4fe      	b.n	1a007022 <_vfprintf_r+0xbc2>
1a007624:	aa2a      	add	r2, sp, #168	; 0xa8
1a007626:	9907      	ldr	r1, [sp, #28]
1a007628:	9803      	ldr	r0, [sp, #12]
1a00762a:	f002 fcc7 	bl	1a009fbc <__sprint_r>
1a00762e:	2800      	cmp	r0, #0
1a007630:	f47f ac8e 	bne.w	1a006f50 <_vfprintf_r+0xaf0>
1a007634:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a007638:	f7ff bbf0 	b.w	1a006e1c <_vfprintf_r+0x9bc>
1a00763c:	9a05      	ldr	r2, [sp, #20]
1a00763e:	601a      	str	r2, [r3, #0]
1a007640:	4657      	mov	r7, sl
1a007642:	f7ff b9b3 	b.w	1a0069ac <_vfprintf_r+0x54c>
1a007646:	8814      	ldrh	r4, [r2, #0]
1a007648:	9108      	str	r1, [sp, #32]
1a00764a:	2500      	movs	r5, #0
1a00764c:	2201      	movs	r2, #1
1a00764e:	f7ff b9c8 	b.w	1a0069e2 <_vfprintf_r+0x582>
1a007652:	8814      	ldrh	r4, [r2, #0]
1a007654:	9308      	str	r3, [sp, #32]
1a007656:	2500      	movs	r5, #0
1a007658:	f7ff ba14 	b.w	1a006a84 <_vfprintf_r+0x624>
1a00765c:	f9b1 4000 	ldrsh.w	r4, [r1]
1a007660:	9208      	str	r2, [sp, #32]
1a007662:	17e5      	asrs	r5, r4, #31
1a007664:	4620      	mov	r0, r4
1a007666:	4629      	mov	r1, r5
1a007668:	f7ff b855 	b.w	1a006716 <_vfprintf_r+0x2b6>
1a00766c:	8814      	ldrh	r4, [r2, #0]
1a00766e:	9308      	str	r3, [sp, #32]
1a007670:	2500      	movs	r5, #0
1a007672:	f7ff b825 	b.w	1a0066c0 <_vfprintf_r+0x260>
1a007676:	222d      	movs	r2, #45	; 0x2d
1a007678:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
1a00767c:	f7ff baa2 	b.w	1a006bc4 <_vfprintf_r+0x764>
1a007680:	aa2a      	add	r2, sp, #168	; 0xa8
1a007682:	9907      	ldr	r1, [sp, #28]
1a007684:	9803      	ldr	r0, [sp, #12]
1a007686:	f002 fc99 	bl	1a009fbc <__sprint_r>
1a00768a:	2800      	cmp	r0, #0
1a00768c:	f47f ac60 	bne.w	1a006f50 <_vfprintf_r+0xaf0>
1a007690:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a007692:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a007696:	e534      	b.n	1a007102 <_vfprintf_r+0xca2>
1a007698:	aa2a      	add	r2, sp, #168	; 0xa8
1a00769a:	9907      	ldr	r1, [sp, #28]
1a00769c:	9803      	ldr	r0, [sp, #12]
1a00769e:	f002 fc8d 	bl	1a009fbc <__sprint_r>
1a0076a2:	2800      	cmp	r0, #0
1a0076a4:	f47f ac54 	bne.w	1a006f50 <_vfprintf_r+0xaf0>
1a0076a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a0076aa:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0076ac:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0076b0:	e793      	b.n	1a0075da <_vfprintf_r+0x117a>
1a0076b2:	2330      	movs	r3, #48	; 0x30
1a0076b4:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
1a0076b8:	2378      	movs	r3, #120	; 0x78
1a0076ba:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
1a0076be:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
1a0076c2:	f048 0402 	orr.w	r4, r8, #2
1a0076c6:	f300 82b0 	bgt.w	1a007c2a <_vfprintf_r+0x17ca>
1a0076ca:	f448 7381 	orr.w	r3, r8, #258	; 0x102
1a0076ce:	930e      	str	r3, [sp, #56]	; 0x38
1a0076d0:	f026 0320 	bic.w	r3, r6, #32
1a0076d4:	9304      	str	r3, [sp, #16]
1a0076d6:	2200      	movs	r2, #0
1a0076d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0076da:	920a      	str	r2, [sp, #40]	; 0x28
1a0076dc:	46a0      	mov	r8, r4
1a0076de:	af3d      	add	r7, sp, #244	; 0xf4
1a0076e0:	2b00      	cmp	r3, #0
1a0076e2:	f2c0 81e3 	blt.w	1a007aac <_vfprintf_r+0x164c>
1a0076e6:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
1a0076ea:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
1a0076ee:	2300      	movs	r3, #0
1a0076f0:	930b      	str	r3, [sp, #44]	; 0x2c
1a0076f2:	2e61      	cmp	r6, #97	; 0x61
1a0076f4:	f000 8255 	beq.w	1a007ba2 <_vfprintf_r+0x1742>
1a0076f8:	2e41      	cmp	r6, #65	; 0x41
1a0076fa:	f47f aee3 	bne.w	1a0074c4 <_vfprintf_r+0x1064>
1a0076fe:	a824      	add	r0, sp, #144	; 0x90
1a007700:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a007704:	f002 fbb8 	bl	1a009e78 <frexp>
1a007708:	2200      	movs	r2, #0
1a00770a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a00770e:	ec51 0b10 	vmov	r0, r1, d0
1a007712:	f7fd fa25 	bl	1a004b60 <__aeabi_dmul>
1a007716:	2200      	movs	r2, #0
1a007718:	2300      	movs	r3, #0
1a00771a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00771e:	f7fd fc87 	bl	1a005030 <__aeabi_dcmpeq>
1a007722:	2800      	cmp	r0, #0
1a007724:	f040 8305 	bne.w	1a007d32 <_vfprintf_r+0x18d2>
1a007728:	4b63      	ldr	r3, [pc, #396]	; (1a0078b8 <_vfprintf_r+0x1458>)
1a00772a:	9309      	str	r3, [sp, #36]	; 0x24
1a00772c:	e9cd a60f 	strd	sl, r6, [sp, #60]	; 0x3c
1a007730:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
1a007734:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
1a007738:	9721      	str	r7, [sp, #132]	; 0x84
1a00773a:	46b9      	mov	r9, r7
1a00773c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
1a007740:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
1a007744:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
1a007748:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
1a00774c:	e003      	b.n	1a007756 <_vfprintf_r+0x12f6>
1a00774e:	f7fd fc6f 	bl	1a005030 <__aeabi_dcmpeq>
1a007752:	bb20      	cbnz	r0, 1a00779e <_vfprintf_r+0x133e>
1a007754:	46a9      	mov	r9, r5
1a007756:	2200      	movs	r2, #0
1a007758:	4b58      	ldr	r3, [pc, #352]	; (1a0078bc <_vfprintf_r+0x145c>)
1a00775a:	4630      	mov	r0, r6
1a00775c:	4639      	mov	r1, r7
1a00775e:	f7fd f9ff 	bl	1a004b60 <__aeabi_dmul>
1a007762:	460f      	mov	r7, r1
1a007764:	4606      	mov	r6, r0
1a007766:	f002 fd7f 	bl	1a00a268 <__aeabi_d2iz>
1a00776a:	4680      	mov	r8, r0
1a00776c:	f7fd f98e 	bl	1a004a8c <__aeabi_i2d>
1a007770:	4602      	mov	r2, r0
1a007772:	460b      	mov	r3, r1
1a007774:	4630      	mov	r0, r6
1a007776:	4639      	mov	r1, r7
1a007778:	f7fd f83a 	bl	1a0047f0 <__aeabi_dsub>
1a00777c:	464d      	mov	r5, r9
1a00777e:	f81a c008 	ldrb.w	ip, [sl, r8]
1a007782:	f805 cb01 	strb.w	ip, [r5], #1
1a007786:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a00778a:	46a3      	mov	fp, r4
1a00778c:	4606      	mov	r6, r0
1a00778e:	460f      	mov	r7, r1
1a007790:	f04f 0200 	mov.w	r2, #0
1a007794:	f04f 0300 	mov.w	r3, #0
1a007798:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
1a00779c:	d1d7      	bne.n	1a00774e <_vfprintf_r+0x12ee>
1a00779e:	4630      	mov	r0, r6
1a0077a0:	4639      	mov	r1, r7
1a0077a2:	2200      	movs	r2, #0
1a0077a4:	4b46      	ldr	r3, [pc, #280]	; (1a0078c0 <_vfprintf_r+0x1460>)
1a0077a6:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
1a0077aa:	9e10      	ldr	r6, [sp, #64]	; 0x40
1a0077ac:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
1a0077b0:	4644      	mov	r4, r8
1a0077b2:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a0077b6:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
1a0077ba:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
1a0077be:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
1a0077c2:	9f21      	ldr	r7, [sp, #132]	; 0x84
1a0077c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a0077c8:	f7fd fc5a 	bl	1a005080 <__aeabi_dcmpgt>
1a0077cc:	2800      	cmp	r0, #0
1a0077ce:	f040 8176 	bne.w	1a007abe <_vfprintf_r+0x165e>
1a0077d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a0077d6:	2200      	movs	r2, #0
1a0077d8:	4b39      	ldr	r3, [pc, #228]	; (1a0078c0 <_vfprintf_r+0x1460>)
1a0077da:	f7fd fc29 	bl	1a005030 <__aeabi_dcmpeq>
1a0077de:	b110      	cbz	r0, 1a0077e6 <_vfprintf_r+0x1386>
1a0077e0:	07e2      	lsls	r2, r4, #31
1a0077e2:	f100 816c 	bmi.w	1a007abe <_vfprintf_r+0x165e>
1a0077e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0077e8:	2b00      	cmp	r3, #0
1a0077ea:	db07      	blt.n	1a0077fc <_vfprintf_r+0x139c>
1a0077ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0077ee:	3301      	adds	r3, #1
1a0077f0:	442b      	add	r3, r5
1a0077f2:	2230      	movs	r2, #48	; 0x30
1a0077f4:	f805 2b01 	strb.w	r2, [r5], #1
1a0077f8:	42ab      	cmp	r3, r5
1a0077fa:	d1fb      	bne.n	1a0077f4 <_vfprintf_r+0x1394>
1a0077fc:	1beb      	subs	r3, r5, r7
1a0077fe:	4640      	mov	r0, r8
1a007800:	9310      	str	r3, [sp, #64]	; 0x40
1a007802:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a007806:	e683      	b.n	1a007510 <_vfprintf_r+0x10b0>
1a007808:	f8cd 9010 	str.w	r9, [sp, #16]
1a00780c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a007810:	9408      	str	r4, [sp, #32]
1a007812:	4681      	mov	r9, r0
1a007814:	900f      	str	r0, [sp, #60]	; 0x3c
1a007816:	9014      	str	r0, [sp, #80]	; 0x50
1a007818:	9011      	str	r0, [sp, #68]	; 0x44
1a00781a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a00781e:	f7fe bfac 	b.w	1a00677a <_vfprintf_r+0x31a>
1a007822:	aa2a      	add	r2, sp, #168	; 0xa8
1a007824:	9907      	ldr	r1, [sp, #28]
1a007826:	9803      	ldr	r0, [sp, #12]
1a007828:	f002 fbc8 	bl	1a009fbc <__sprint_r>
1a00782c:	2800      	cmp	r0, #0
1a00782e:	f47f ab8f 	bne.w	1a006f50 <_vfprintf_r+0xaf0>
1a007832:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a007834:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a007836:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00783a:	e511      	b.n	1a007260 <_vfprintf_r+0xe00>
1a00783c:	4252      	negs	r2, r2
1a00783e:	9206      	str	r2, [sp, #24]
1a007840:	9308      	str	r3, [sp, #32]
1a007842:	f7ff b96d 	b.w	1a006b20 <_vfprintf_r+0x6c0>
1a007846:	4614      	mov	r4, r2
1a007848:	4632      	mov	r2, r6
1a00784a:	461e      	mov	r6, r3
1a00784c:	4613      	mov	r3, r2
1a00784e:	462a      	mov	r2, r5
1a007850:	3201      	adds	r2, #1
1a007852:	9209      	str	r2, [sp, #36]	; 0x24
1a007854:	f106 0208 	add.w	r2, r6, #8
1a007858:	e9c6 3900 	strd	r3, r9, [r6]
1a00785c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00785e:	932b      	str	r3, [sp, #172]	; 0xac
1a007860:	444c      	add	r4, r9
1a007862:	2b07      	cmp	r3, #7
1a007864:	942c      	str	r4, [sp, #176]	; 0xb0
1a007866:	f73f acc3 	bgt.w	1a0071f0 <_vfprintf_r+0xd90>
1a00786a:	3301      	adds	r3, #1
1a00786c:	9309      	str	r3, [sp, #36]	; 0x24
1a00786e:	f102 0b08 	add.w	fp, r2, #8
1a007872:	4616      	mov	r6, r2
1a007874:	f7ff bbca 	b.w	1a00700c <_vfprintf_r+0xbac>
1a007878:	aa2a      	add	r2, sp, #168	; 0xa8
1a00787a:	9907      	ldr	r1, [sp, #28]
1a00787c:	9803      	ldr	r0, [sp, #12]
1a00787e:	f002 fb9d 	bl	1a009fbc <__sprint_r>
1a007882:	2800      	cmp	r0, #0
1a007884:	f47f ab64 	bne.w	1a006f50 <_vfprintf_r+0xaf0>
1a007888:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a00788a:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00788e:	f7ff bade 	b.w	1a006e4e <_vfprintf_r+0x9ee>
1a007892:	464b      	mov	r3, r9
1a007894:	2b06      	cmp	r3, #6
1a007896:	bf28      	it	cs
1a007898:	2306      	movcs	r3, #6
1a00789a:	46b9      	mov	r9, r7
1a00789c:	970f      	str	r7, [sp, #60]	; 0x3c
1a00789e:	9714      	str	r7, [sp, #80]	; 0x50
1a0078a0:	9711      	str	r7, [sp, #68]	; 0x44
1a0078a2:	970a      	str	r7, [sp, #40]	; 0x28
1a0078a4:	463a      	mov	r2, r7
1a0078a6:	9304      	str	r3, [sp, #16]
1a0078a8:	e9cd 4308 	strd	r4, r3, [sp, #32]
1a0078ac:	4f05      	ldr	r7, [pc, #20]	; (1a0078c4 <_vfprintf_r+0x1464>)
1a0078ae:	f7fe bf64 	b.w	1a00677a <_vfprintf_r+0x31a>
1a0078b2:	bf00      	nop
1a0078b4:	1a00a98c 	.word	0x1a00a98c
1a0078b8:	1a00a970 	.word	0x1a00a970
1a0078bc:	40300000 	.word	0x40300000
1a0078c0:	3fe00000 	.word	0x3fe00000
1a0078c4:	1a00a984 	.word	0x1a00a984
1a0078c8:	460c      	mov	r4, r1
1a0078ca:	4639      	mov	r1, r7
1a0078cc:	465f      	mov	r7, fp
1a0078ce:	469b      	mov	fp, r3
1a0078d0:	460b      	mov	r3, r1
1a0078d2:	3201      	adds	r2, #1
1a0078d4:	442c      	add	r4, r5
1a0078d6:	2a07      	cmp	r2, #7
1a0078d8:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a0078dc:	e9cb 3500 	strd	r3, r5, [fp]
1a0078e0:	f73f aca5 	bgt.w	1a00722e <_vfprintf_r+0xdce>
1a0078e4:	f10b 0b08 	add.w	fp, fp, #8
1a0078e8:	e4ac      	b.n	1a007244 <_vfprintf_r+0xde4>
1a0078ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0078ec:	1cda      	adds	r2, r3, #3
1a0078ee:	db02      	blt.n	1a0078f6 <_vfprintf_r+0x1496>
1a0078f0:	4599      	cmp	r9, r3
1a0078f2:	f280 80b5 	bge.w	1a007a60 <_vfprintf_r+0x1600>
1a0078f6:	3e02      	subs	r6, #2
1a0078f8:	f026 0320 	bic.w	r3, r6, #32
1a0078fc:	9304      	str	r3, [sp, #16]
1a0078fe:	e611      	b.n	1a007524 <_vfprintf_r+0x10c4>
1a007900:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a007902:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
1a007906:	465a      	mov	r2, fp
1a007908:	e9dd 8b1a 	ldrd	r8, fp, [sp, #104]	; 0x68
1a00790c:	18fb      	adds	r3, r7, r3
1a00790e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a007912:	970c      	str	r7, [sp, #48]	; 0x30
1a007914:	4eaf      	ldr	r6, [pc, #700]	; (1a007bd4 <_vfprintf_r+0x1774>)
1a007916:	f8dd a01c 	ldr.w	sl, [sp, #28]
1a00791a:	9309      	str	r3, [sp, #36]	; 0x24
1a00791c:	464f      	mov	r7, r9
1a00791e:	f8dd 900c 	ldr.w	r9, [sp, #12]
1a007922:	4621      	mov	r1, r4
1a007924:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a007926:	2b00      	cmp	r3, #0
1a007928:	d05b      	beq.n	1a0079e2 <_vfprintf_r+0x1582>
1a00792a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00792c:	2b00      	cmp	r3, #0
1a00792e:	d154      	bne.n	1a0079da <_vfprintf_r+0x157a>
1a007930:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a007932:	3b01      	subs	r3, #1
1a007934:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a007938:	9314      	str	r3, [sp, #80]	; 0x50
1a00793a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a00793c:	9818      	ldr	r0, [sp, #96]	; 0x60
1a00793e:	6010      	str	r0, [r2, #0]
1a007940:	3301      	adds	r3, #1
1a007942:	4459      	add	r1, fp
1a007944:	2b07      	cmp	r3, #7
1a007946:	912c      	str	r1, [sp, #176]	; 0xb0
1a007948:	f8c2 b004 	str.w	fp, [r2, #4]
1a00794c:	932b      	str	r3, [sp, #172]	; 0xac
1a00794e:	dc68      	bgt.n	1a007a22 <_vfprintf_r+0x15c2>
1a007950:	3208      	adds	r2, #8
1a007952:	9809      	ldr	r0, [sp, #36]	; 0x24
1a007954:	f898 3000 	ldrb.w	r3, [r8]
1a007958:	1bc5      	subs	r5, r0, r7
1a00795a:	429d      	cmp	r5, r3
1a00795c:	bfa8      	it	ge
1a00795e:	461d      	movge	r5, r3
1a007960:	2d00      	cmp	r5, #0
1a007962:	dd0b      	ble.n	1a00797c <_vfprintf_r+0x151c>
1a007964:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a007966:	6017      	str	r7, [r2, #0]
1a007968:	3301      	adds	r3, #1
1a00796a:	4429      	add	r1, r5
1a00796c:	2b07      	cmp	r3, #7
1a00796e:	912c      	str	r1, [sp, #176]	; 0xb0
1a007970:	6055      	str	r5, [r2, #4]
1a007972:	932b      	str	r3, [sp, #172]	; 0xac
1a007974:	dc5e      	bgt.n	1a007a34 <_vfprintf_r+0x15d4>
1a007976:	f898 3000 	ldrb.w	r3, [r8]
1a00797a:	3208      	adds	r2, #8
1a00797c:	2d00      	cmp	r5, #0
1a00797e:	bfac      	ite	ge
1a007980:	1b5d      	subge	r5, r3, r5
1a007982:	461d      	movlt	r5, r3
1a007984:	2d00      	cmp	r5, #0
1a007986:	dd26      	ble.n	1a0079d6 <_vfprintf_r+0x1576>
1a007988:	2d10      	cmp	r5, #16
1a00798a:	982b      	ldr	r0, [sp, #172]	; 0xac
1a00798c:	dd3c      	ble.n	1a007a08 <_vfprintf_r+0x15a8>
1a00798e:	2410      	movs	r4, #16
1a007990:	e003      	b.n	1a00799a <_vfprintf_r+0x153a>
1a007992:	3208      	adds	r2, #8
1a007994:	3d10      	subs	r5, #16
1a007996:	2d10      	cmp	r5, #16
1a007998:	dd36      	ble.n	1a007a08 <_vfprintf_r+0x15a8>
1a00799a:	3001      	adds	r0, #1
1a00799c:	3110      	adds	r1, #16
1a00799e:	2807      	cmp	r0, #7
1a0079a0:	e9cd 012b 	strd	r0, r1, [sp, #172]	; 0xac
1a0079a4:	e9c2 6400 	strd	r6, r4, [r2]
1a0079a8:	ddf3      	ble.n	1a007992 <_vfprintf_r+0x1532>
1a0079aa:	aa2a      	add	r2, sp, #168	; 0xa8
1a0079ac:	4651      	mov	r1, sl
1a0079ae:	4648      	mov	r0, r9
1a0079b0:	f002 fb04 	bl	1a009fbc <__sprint_r>
1a0079b4:	2800      	cmp	r0, #0
1a0079b6:	d150      	bne.n	1a007a5a <_vfprintf_r+0x15fa>
1a0079b8:	e9dd 012b 	ldrd	r0, r1, [sp, #172]	; 0xac
1a0079bc:	aa2d      	add	r2, sp, #180	; 0xb4
1a0079be:	e7e9      	b.n	1a007994 <_vfprintf_r+0x1534>
1a0079c0:	aa2a      	add	r2, sp, #168	; 0xa8
1a0079c2:	4651      	mov	r1, sl
1a0079c4:	4648      	mov	r0, r9
1a0079c6:	f002 faf9 	bl	1a009fbc <__sprint_r>
1a0079ca:	2800      	cmp	r0, #0
1a0079cc:	d145      	bne.n	1a007a5a <_vfprintf_r+0x15fa>
1a0079ce:	f898 3000 	ldrb.w	r3, [r8]
1a0079d2:	992c      	ldr	r1, [sp, #176]	; 0xb0
1a0079d4:	aa2d      	add	r2, sp, #180	; 0xb4
1a0079d6:	441f      	add	r7, r3
1a0079d8:	e7a4      	b.n	1a007924 <_vfprintf_r+0x14c4>
1a0079da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0079dc:	3b01      	subs	r3, #1
1a0079de:	930f      	str	r3, [sp, #60]	; 0x3c
1a0079e0:	e7ab      	b.n	1a00793a <_vfprintf_r+0x14da>
1a0079e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0079e4:	2b00      	cmp	r3, #0
1a0079e6:	d1f8      	bne.n	1a0079da <_vfprintf_r+0x157a>
1a0079e8:	46b9      	mov	r9, r7
1a0079ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0079ec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
1a0079ee:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
1a0079f2:	18fb      	adds	r3, r7, r3
1a0079f4:	4599      	cmp	r9, r3
1a0079f6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
1a0079fa:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a0079fe:	4693      	mov	fp, r2
1a007a00:	460c      	mov	r4, r1
1a007a02:	bf28      	it	cs
1a007a04:	4699      	movcs	r9, r3
1a007a06:	e424      	b.n	1a007252 <_vfprintf_r+0xdf2>
1a007a08:	3001      	adds	r0, #1
1a007a0a:	4429      	add	r1, r5
1a007a0c:	2807      	cmp	r0, #7
1a007a0e:	e9cd 012b 	strd	r0, r1, [sp, #172]	; 0xac
1a007a12:	e9c2 6500 	strd	r6, r5, [r2]
1a007a16:	dcd3      	bgt.n	1a0079c0 <_vfprintf_r+0x1560>
1a007a18:	f898 3000 	ldrb.w	r3, [r8]
1a007a1c:	3208      	adds	r2, #8
1a007a1e:	441f      	add	r7, r3
1a007a20:	e780      	b.n	1a007924 <_vfprintf_r+0x14c4>
1a007a22:	aa2a      	add	r2, sp, #168	; 0xa8
1a007a24:	4651      	mov	r1, sl
1a007a26:	4648      	mov	r0, r9
1a007a28:	f002 fac8 	bl	1a009fbc <__sprint_r>
1a007a2c:	b9a8      	cbnz	r0, 1a007a5a <_vfprintf_r+0x15fa>
1a007a2e:	992c      	ldr	r1, [sp, #176]	; 0xb0
1a007a30:	aa2d      	add	r2, sp, #180	; 0xb4
1a007a32:	e78e      	b.n	1a007952 <_vfprintf_r+0x14f2>
1a007a34:	aa2a      	add	r2, sp, #168	; 0xa8
1a007a36:	4651      	mov	r1, sl
1a007a38:	4648      	mov	r0, r9
1a007a3a:	f002 fabf 	bl	1a009fbc <__sprint_r>
1a007a3e:	b960      	cbnz	r0, 1a007a5a <_vfprintf_r+0x15fa>
1a007a40:	f898 3000 	ldrb.w	r3, [r8]
1a007a44:	992c      	ldr	r1, [sp, #176]	; 0xb0
1a007a46:	aa2d      	add	r2, sp, #180	; 0xb4
1a007a48:	e798      	b.n	1a00797c <_vfprintf_r+0x151c>
1a007a4a:	4638      	mov	r0, r7
1a007a4c:	f7fe fc98 	bl	1a006380 <strlen>
1a007a50:	46a9      	mov	r9, r5
1a007a52:	4603      	mov	r3, r0
1a007a54:	9009      	str	r0, [sp, #36]	; 0x24
1a007a56:	f7ff b8f4 	b.w	1a006c42 <_vfprintf_r+0x7e2>
1a007a5a:	46d1      	mov	r9, sl
1a007a5c:	f7ff ba7a 	b.w	1a006f54 <_vfprintf_r+0xaf4>
1a007a60:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a007a62:	4619      	mov	r1, r3
1a007a64:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a007a66:	4299      	cmp	r1, r3
1a007a68:	f300 8082 	bgt.w	1a007b70 <_vfprintf_r+0x1710>
1a007a6c:	07c4      	lsls	r4, r0, #31
1a007a6e:	f140 816b 	bpl.w	1a007d48 <_vfprintf_r+0x18e8>
1a007a72:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a007a74:	4413      	add	r3, r2
1a007a76:	9309      	str	r3, [sp, #36]	; 0x24
1a007a78:	0541      	lsls	r1, r0, #21
1a007a7a:	d503      	bpl.n	1a007a84 <_vfprintf_r+0x1624>
1a007a7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a007a7e:	2b00      	cmp	r3, #0
1a007a80:	f300 80e6 	bgt.w	1a007c50 <_vfprintf_r+0x17f0>
1a007a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a007a86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a007a8a:	9304      	str	r3, [sp, #16]
1a007a8c:	2667      	movs	r6, #103	; 0x67
1a007a8e:	2300      	movs	r3, #0
1a007a90:	930f      	str	r3, [sp, #60]	; 0x3c
1a007a92:	9314      	str	r3, [sp, #80]	; 0x50
1a007a94:	e586      	b.n	1a0075a4 <_vfprintf_r+0x1144>
1a007a96:	222d      	movs	r2, #45	; 0x2d
1a007a98:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
1a007a9c:	f04f 0900 	mov.w	r9, #0
1a007aa0:	f7fe be6c 	b.w	1a00677c <_vfprintf_r+0x31c>
1a007aa4:	46a1      	mov	r9, r4
1a007aa6:	f7ff ba55 	b.w	1a006f54 <_vfprintf_r+0xaf4>
1a007aaa:	900a      	str	r0, [sp, #40]	; 0x28
1a007aac:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
1a007ab0:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a007ab4:	931f      	str	r3, [sp, #124]	; 0x7c
1a007ab6:	232d      	movs	r3, #45	; 0x2d
1a007ab8:	911e      	str	r1, [sp, #120]	; 0x78
1a007aba:	930b      	str	r3, [sp, #44]	; 0x2c
1a007abc:	e619      	b.n	1a0076f2 <_vfprintf_r+0x1292>
1a007abe:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a007ac0:	9328      	str	r3, [sp, #160]	; 0xa0
1a007ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a007ac4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
1a007ac8:	7bd9      	ldrb	r1, [r3, #15]
1a007aca:	4291      	cmp	r1, r2
1a007acc:	462b      	mov	r3, r5
1a007ace:	d109      	bne.n	1a007ae4 <_vfprintf_r+0x1684>
1a007ad0:	2030      	movs	r0, #48	; 0x30
1a007ad2:	f803 0c01 	strb.w	r0, [r3, #-1]
1a007ad6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1a007ad8:	1e5a      	subs	r2, r3, #1
1a007ada:	9228      	str	r2, [sp, #160]	; 0xa0
1a007adc:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a007ae0:	4291      	cmp	r1, r2
1a007ae2:	d0f6      	beq.n	1a007ad2 <_vfprintf_r+0x1672>
1a007ae4:	2a39      	cmp	r2, #57	; 0x39
1a007ae6:	bf0b      	itete	eq
1a007ae8:	9a09      	ldreq	r2, [sp, #36]	; 0x24
1a007aea:	3201      	addne	r2, #1
1a007aec:	7a92      	ldrbeq	r2, [r2, #10]
1a007aee:	b2d2      	uxtbne	r2, r2
1a007af0:	f803 2c01 	strb.w	r2, [r3, #-1]
1a007af4:	e682      	b.n	1a0077fc <_vfprintf_r+0x139c>
1a007af6:	f418 7f00 	tst.w	r8, #512	; 0x200
1a007afa:	f43f ad9f 	beq.w	1a00763c <_vfprintf_r+0x11dc>
1a007afe:	9a05      	ldr	r2, [sp, #20]
1a007b00:	701a      	strb	r2, [r3, #0]
1a007b02:	4657      	mov	r7, sl
1a007b04:	f7fe bf52 	b.w	1a0069ac <_vfprintf_r+0x54c>
1a007b08:	aa2a      	add	r2, sp, #168	; 0xa8
1a007b0a:	9907      	ldr	r1, [sp, #28]
1a007b0c:	9803      	ldr	r0, [sp, #12]
1a007b0e:	f002 fa55 	bl	1a009fbc <__sprint_r>
1a007b12:	2800      	cmp	r0, #0
1a007b14:	f47f aa1c 	bne.w	1a006f50 <_vfprintf_r+0xaf0>
1a007b18:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a007b1a:	e9dd 242b 	ldrd	r2, r4, [sp, #172]	; 0xac
1a007b1e:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a007b22:	e571      	b.n	1a007608 <_vfprintf_r+0x11a8>
1a007b24:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a007b26:	2b00      	cmp	r3, #0
1a007b28:	f340 8164 	ble.w	1a007df4 <_vfprintf_r+0x1994>
1a007b2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a007b2e:	f1b9 0f00 	cmp.w	r9, #0
1a007b32:	f040 8103 	bne.w	1a007d3c <_vfprintf_r+0x18dc>
1a007b36:	07c6      	lsls	r6, r0, #31
1a007b38:	f100 8100 	bmi.w	1a007d3c <_vfprintf_r+0x18dc>
1a007b3c:	9309      	str	r3, [sp, #36]	; 0x24
1a007b3e:	2666      	movs	r6, #102	; 0x66
1a007b40:	0543      	lsls	r3, r0, #21
1a007b42:	f100 8086 	bmi.w	1a007c52 <_vfprintf_r+0x17f2>
1a007b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a007b48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a007b4c:	9304      	str	r3, [sp, #16]
1a007b4e:	e79e      	b.n	1a007a8e <_vfprintf_r+0x162e>
1a007b50:	aa2a      	add	r2, sp, #168	; 0xa8
1a007b52:	9907      	ldr	r1, [sp, #28]
1a007b54:	9803      	ldr	r0, [sp, #12]
1a007b56:	f002 fa31 	bl	1a009fbc <__sprint_r>
1a007b5a:	2800      	cmp	r0, #0
1a007b5c:	f47f a9f8 	bne.w	1a006f50 <_vfprintf_r+0xaf0>
1a007b60:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a007b62:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a007b64:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a007b66:	1ad3      	subs	r3, r2, r3
1a007b68:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a007b6c:	f7ff bb90 	b.w	1a007290 <_vfprintf_r+0xe30>
1a007b70:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a007b72:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a007b74:	4413      	add	r3, r2
1a007b76:	9309      	str	r3, [sp, #36]	; 0x24
1a007b78:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a007b7a:	2b00      	cmp	r3, #0
1a007b7c:	f340 8149 	ble.w	1a007e12 <_vfprintf_r+0x19b2>
1a007b80:	2667      	movs	r6, #103	; 0x67
1a007b82:	e7dd      	b.n	1a007b40 <_vfprintf_r+0x16e0>
1a007b84:	2330      	movs	r3, #48	; 0x30
1a007b86:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
1a007b8a:	2358      	movs	r3, #88	; 0x58
1a007b8c:	e595      	b.n	1a0076ba <_vfprintf_r+0x125a>
1a007b8e:	9803      	ldr	r0, [sp, #12]
1a007b90:	aa2a      	add	r2, sp, #168	; 0xa8
1a007b92:	4649      	mov	r1, r9
1a007b94:	f002 fa12 	bl	1a009fbc <__sprint_r>
1a007b98:	2800      	cmp	r0, #0
1a007b9a:	f47f a9e0 	bne.w	1a006f5e <_vfprintf_r+0xafe>
1a007b9e:	f7fe bf0f 	b.w	1a0069c0 <_vfprintf_r+0x560>
1a007ba2:	a824      	add	r0, sp, #144	; 0x90
1a007ba4:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a007ba8:	f002 f966 	bl	1a009e78 <frexp>
1a007bac:	2200      	movs	r2, #0
1a007bae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a007bb2:	ec51 0b10 	vmov	r0, r1, d0
1a007bb6:	f7fc ffd3 	bl	1a004b60 <__aeabi_dmul>
1a007bba:	2200      	movs	r2, #0
1a007bbc:	2300      	movs	r3, #0
1a007bbe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a007bc2:	f7fd fa35 	bl	1a005030 <__aeabi_dcmpeq>
1a007bc6:	b108      	cbz	r0, 1a007bcc <_vfprintf_r+0x176c>
1a007bc8:	2301      	movs	r3, #1
1a007bca:	9324      	str	r3, [sp, #144]	; 0x90
1a007bcc:	4b02      	ldr	r3, [pc, #8]	; (1a007bd8 <_vfprintf_r+0x1778>)
1a007bce:	9309      	str	r3, [sp, #36]	; 0x24
1a007bd0:	e5ac      	b.n	1a00772c <_vfprintf_r+0x12cc>
1a007bd2:	bf00      	nop
1a007bd4:	1a00a9a0 	.word	0x1a00a9a0
1a007bd8:	1a00a95c 	.word	0x1a00a95c
1a007bdc:	425d      	negs	r5, r3
1a007bde:	3310      	adds	r3, #16
1a007be0:	4bb9      	ldr	r3, [pc, #740]	; (1a007ec8 <_vfprintf_r+0x1a68>)
1a007be2:	f280 8097 	bge.w	1a007d14 <_vfprintf_r+0x18b4>
1a007be6:	4619      	mov	r1, r3
1a007be8:	2610      	movs	r6, #16
1a007bea:	4623      	mov	r3, r4
1a007bec:	f8dd 900c 	ldr.w	r9, [sp, #12]
1a007bf0:	460c      	mov	r4, r1
1a007bf2:	e005      	b.n	1a007c00 <_vfprintf_r+0x17a0>
1a007bf4:	f10b 0b08 	add.w	fp, fp, #8
1a007bf8:	3d10      	subs	r5, #16
1a007bfa:	2d10      	cmp	r5, #16
1a007bfc:	f340 8087 	ble.w	1a007d0e <_vfprintf_r+0x18ae>
1a007c00:	3201      	adds	r2, #1
1a007c02:	3310      	adds	r3, #16
1a007c04:	2a07      	cmp	r2, #7
1a007c06:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
1a007c0a:	e9cb 4600 	strd	r4, r6, [fp]
1a007c0e:	ddf1      	ble.n	1a007bf4 <_vfprintf_r+0x1794>
1a007c10:	aa2a      	add	r2, sp, #168	; 0xa8
1a007c12:	9907      	ldr	r1, [sp, #28]
1a007c14:	4648      	mov	r0, r9
1a007c16:	f002 f9d1 	bl	1a009fbc <__sprint_r>
1a007c1a:	2800      	cmp	r0, #0
1a007c1c:	f47f a998 	bne.w	1a006f50 <_vfprintf_r+0xaf0>
1a007c20:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
1a007c24:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a007c28:	e7e6      	b.n	1a007bf8 <_vfprintf_r+0x1798>
1a007c2a:	f109 0101 	add.w	r1, r9, #1
1a007c2e:	9803      	ldr	r0, [sp, #12]
1a007c30:	f7fd ff4e 	bl	1a005ad0 <_malloc_r>
1a007c34:	4607      	mov	r7, r0
1a007c36:	2800      	cmp	r0, #0
1a007c38:	f000 813b 	beq.w	1a007eb2 <_vfprintf_r+0x1a52>
1a007c3c:	f448 7381 	orr.w	r3, r8, #258	; 0x102
1a007c40:	930e      	str	r3, [sp, #56]	; 0x38
1a007c42:	f026 0320 	bic.w	r3, r6, #32
1a007c46:	9304      	str	r3, [sp, #16]
1a007c48:	46a0      	mov	r8, r4
1a007c4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a007c4c:	900a      	str	r0, [sp, #40]	; 0x28
1a007c4e:	e547      	b.n	1a0076e0 <_vfprintf_r+0x1280>
1a007c50:	2667      	movs	r6, #103	; 0x67
1a007c52:	981a      	ldr	r0, [sp, #104]	; 0x68
1a007c54:	2200      	movs	r2, #0
1a007c56:	920f      	str	r2, [sp, #60]	; 0x3c
1a007c58:	9214      	str	r2, [sp, #80]	; 0x50
1a007c5a:	7803      	ldrb	r3, [r0, #0]
1a007c5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a007c5e:	2bff      	cmp	r3, #255	; 0xff
1a007c60:	d00c      	beq.n	1a007c7c <_vfprintf_r+0x181c>
1a007c62:	4293      	cmp	r3, r2
1a007c64:	da0a      	bge.n	1a007c7c <_vfprintf_r+0x181c>
1a007c66:	7841      	ldrb	r1, [r0, #1]
1a007c68:	1ad2      	subs	r2, r2, r3
1a007c6a:	b1a9      	cbz	r1, 1a007c98 <_vfprintf_r+0x1838>
1a007c6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a007c6e:	3301      	adds	r3, #1
1a007c70:	9314      	str	r3, [sp, #80]	; 0x50
1a007c72:	460b      	mov	r3, r1
1a007c74:	2bff      	cmp	r3, #255	; 0xff
1a007c76:	f100 0001 	add.w	r0, r0, #1
1a007c7a:	d1f2      	bne.n	1a007c62 <_vfprintf_r+0x1802>
1a007c7c:	9211      	str	r2, [sp, #68]	; 0x44
1a007c7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a007c80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a007c82:	9909      	ldr	r1, [sp, #36]	; 0x24
1a007c84:	901a      	str	r0, [sp, #104]	; 0x68
1a007c86:	4413      	add	r3, r2
1a007c88:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
1a007c8a:	fb02 1303 	mla	r3, r2, r3, r1
1a007c8e:	9309      	str	r3, [sp, #36]	; 0x24
1a007c90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a007c94:	9304      	str	r3, [sp, #16]
1a007c96:	e485      	b.n	1a0075a4 <_vfprintf_r+0x1144>
1a007c98:	990f      	ldr	r1, [sp, #60]	; 0x3c
1a007c9a:	3101      	adds	r1, #1
1a007c9c:	910f      	str	r1, [sp, #60]	; 0x3c
1a007c9e:	e7de      	b.n	1a007c5e <_vfprintf_r+0x17fe>
1a007ca0:	aa28      	add	r2, sp, #160	; 0xa0
1a007ca2:	ab25      	add	r3, sp, #148	; 0x94
1a007ca4:	e9cd 3200 	strd	r3, r2, [sp]
1a007ca8:	2103      	movs	r1, #3
1a007caa:	ab24      	add	r3, sp, #144	; 0x90
1a007cac:	464a      	mov	r2, r9
1a007cae:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a007cb2:	9803      	ldr	r0, [sp, #12]
1a007cb4:	f000 fa5c 	bl	1a008170 <_dtoa_r>
1a007cb8:	464d      	mov	r5, r9
1a007cba:	4607      	mov	r7, r0
1a007cbc:	eb00 0409 	add.w	r4, r0, r9
1a007cc0:	783b      	ldrb	r3, [r7, #0]
1a007cc2:	2b30      	cmp	r3, #48	; 0x30
1a007cc4:	f000 80be 	beq.w	1a007e44 <_vfprintf_r+0x19e4>
1a007cc8:	9d24      	ldr	r5, [sp, #144]	; 0x90
1a007cca:	442c      	add	r4, r5
1a007ccc:	2200      	movs	r2, #0
1a007cce:	2300      	movs	r3, #0
1a007cd0:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
1a007cd4:	f7fd f9ac 	bl	1a005030 <__aeabi_dcmpeq>
1a007cd8:	b108      	cbz	r0, 1a007cde <_vfprintf_r+0x187e>
1a007cda:	4623      	mov	r3, r4
1a007cdc:	e413      	b.n	1a007506 <_vfprintf_r+0x10a6>
1a007cde:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1a007ce0:	42a3      	cmp	r3, r4
1a007ce2:	f4bf ac10 	bcs.w	1a007506 <_vfprintf_r+0x10a6>
1a007ce6:	2130      	movs	r1, #48	; 0x30
1a007ce8:	1c5a      	adds	r2, r3, #1
1a007cea:	9228      	str	r2, [sp, #160]	; 0xa0
1a007cec:	7019      	strb	r1, [r3, #0]
1a007cee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1a007cf0:	429c      	cmp	r4, r3
1a007cf2:	d8f9      	bhi.n	1a007ce8 <_vfprintf_r+0x1888>
1a007cf4:	e407      	b.n	1a007506 <_vfprintf_r+0x10a6>
1a007cf6:	197c      	adds	r4, r7, r5
1a007cf8:	e7e8      	b.n	1a007ccc <_vfprintf_r+0x186c>
1a007cfa:	f1b9 0f00 	cmp.w	r9, #0
1a007cfe:	f000 8092 	beq.w	1a007e26 <_vfprintf_r+0x19c6>
1a007d02:	900a      	str	r0, [sp, #40]	; 0x28
1a007d04:	e4ec      	b.n	1a0076e0 <_vfprintf_r+0x1280>
1a007d06:	900a      	str	r0, [sp, #40]	; 0x28
1a007d08:	f04f 0906 	mov.w	r9, #6
1a007d0c:	e4e8      	b.n	1a0076e0 <_vfprintf_r+0x1280>
1a007d0e:	4621      	mov	r1, r4
1a007d10:	461c      	mov	r4, r3
1a007d12:	460b      	mov	r3, r1
1a007d14:	3201      	adds	r2, #1
1a007d16:	442c      	add	r4, r5
1a007d18:	2a07      	cmp	r2, #7
1a007d1a:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a007d1e:	e9cb 3500 	strd	r3, r5, [fp]
1a007d22:	f300 80a9 	bgt.w	1a007e78 <_vfprintf_r+0x1a18>
1a007d26:	f10b 0b08 	add.w	fp, fp, #8
1a007d2a:	e470      	b.n	1a00760e <_vfprintf_r+0x11ae>
1a007d2c:	469a      	mov	sl, r3
1a007d2e:	f7ff bb37 	b.w	1a0073a0 <_vfprintf_r+0xf40>
1a007d32:	2301      	movs	r3, #1
1a007d34:	9324      	str	r3, [sp, #144]	; 0x90
1a007d36:	4b65      	ldr	r3, [pc, #404]	; (1a007ecc <_vfprintf_r+0x1a6c>)
1a007d38:	9309      	str	r3, [sp, #36]	; 0x24
1a007d3a:	e4f7      	b.n	1a00772c <_vfprintf_r+0x12cc>
1a007d3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a007d3e:	4413      	add	r3, r2
1a007d40:	444b      	add	r3, r9
1a007d42:	9309      	str	r3, [sp, #36]	; 0x24
1a007d44:	2666      	movs	r6, #102	; 0x66
1a007d46:	e6fb      	b.n	1a007b40 <_vfprintf_r+0x16e0>
1a007d48:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a007d4a:	9309      	str	r3, [sp, #36]	; 0x24
1a007d4c:	e694      	b.n	1a007a78 <_vfprintf_r+0x1618>
1a007d4e:	f10d 0ca7 	add.w	ip, sp, #167	; 0xa7
1a007d52:	4664      	mov	r4, ip
1a007d54:	4d5e      	ldr	r5, [pc, #376]	; (1a007ed0 <_vfprintf_r+0x1a70>)
1a007d56:	e000      	b.n	1a007d5a <_vfprintf_r+0x18fa>
1a007d58:	4614      	mov	r4, r2
1a007d5a:	fba5 1203 	umull	r1, r2, r5, r3
1a007d5e:	08d2      	lsrs	r2, r2, #3
1a007d60:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a007d64:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
1a007d68:	f103 0130 	add.w	r1, r3, #48	; 0x30
1a007d6c:	4613      	mov	r3, r2
1a007d6e:	2b09      	cmp	r3, #9
1a007d70:	f804 1c01 	strb.w	r1, [r4, #-1]
1a007d74:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a007d78:	dcee      	bgt.n	1a007d58 <_vfprintf_r+0x18f8>
1a007d7a:	3330      	adds	r3, #48	; 0x30
1a007d7c:	3c02      	subs	r4, #2
1a007d7e:	b2db      	uxtb	r3, r3
1a007d80:	45a4      	cmp	ip, r4
1a007d82:	f802 3c01 	strb.w	r3, [r2, #-1]
1a007d86:	f240 8090 	bls.w	1a007eaa <_vfprintf_r+0x1a4a>
1a007d8a:	f10d 049a 	add.w	r4, sp, #154	; 0x9a
1a007d8e:	4611      	mov	r1, r2
1a007d90:	e001      	b.n	1a007d96 <_vfprintf_r+0x1936>
1a007d92:	f811 3b01 	ldrb.w	r3, [r1], #1
1a007d96:	f804 3b01 	strb.w	r3, [r4], #1
1a007d9a:	458c      	cmp	ip, r1
1a007d9c:	d1f9      	bne.n	1a007d92 <_vfprintf_r+0x1932>
1a007d9e:	ab2a      	add	r3, sp, #168	; 0xa8
1a007da0:	1a9b      	subs	r3, r3, r2
1a007da2:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
1a007da6:	4413      	add	r3, r2
1a007da8:	f7ff bbe3 	b.w	1a007572 <_vfprintf_r+0x1112>
1a007dac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a007dae:	4f49      	ldr	r7, [pc, #292]	; (1a007ed4 <_vfprintf_r+0x1a74>)
1a007db0:	2b00      	cmp	r3, #0
1a007db2:	bfb6      	itet	lt
1a007db4:	222d      	movlt	r2, #45	; 0x2d
1a007db6:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
1a007dba:	f88d 208b 	strblt.w	r2, [sp, #139]	; 0x8b
1a007dbe:	4b46      	ldr	r3, [pc, #280]	; (1a007ed8 <_vfprintf_r+0x1a78>)
1a007dc0:	f7fe bf02 	b.w	1a006bc8 <_vfprintf_r+0x768>
1a007dc4:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a007dc8:	f7ff b8c9 	b.w	1a006f5e <_vfprintf_r+0xafe>
1a007dcc:	aa28      	add	r2, sp, #160	; 0xa0
1a007dce:	ab25      	add	r3, sp, #148	; 0x94
1a007dd0:	e9cd 3200 	strd	r3, r2, [sp]
1a007dd4:	2103      	movs	r1, #3
1a007dd6:	ab24      	add	r3, sp, #144	; 0x90
1a007dd8:	464a      	mov	r2, r9
1a007dda:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a007dde:	9803      	ldr	r0, [sp, #12]
1a007de0:	f000 f9c6 	bl	1a008170 <_dtoa_r>
1a007de4:	464d      	mov	r5, r9
1a007de6:	4607      	mov	r7, r0
1a007de8:	2e46      	cmp	r6, #70	; 0x46
1a007dea:	eb07 0405 	add.w	r4, r7, r5
1a007dee:	f43f af67 	beq.w	1a007cc0 <_vfprintf_r+0x1860>
1a007df2:	e76b      	b.n	1a007ccc <_vfprintf_r+0x186c>
1a007df4:	f1b9 0f00 	cmp.w	r9, #0
1a007df8:	d131      	bne.n	1a007e5e <_vfprintf_r+0x19fe>
1a007dfa:	07c5      	lsls	r5, r0, #31
1a007dfc:	d42f      	bmi.n	1a007e5e <_vfprintf_r+0x19fe>
1a007dfe:	2301      	movs	r3, #1
1a007e00:	9304      	str	r3, [sp, #16]
1a007e02:	9309      	str	r3, [sp, #36]	; 0x24
1a007e04:	2666      	movs	r6, #102	; 0x66
1a007e06:	e642      	b.n	1a007a8e <_vfprintf_r+0x162e>
1a007e08:	07c3      	lsls	r3, r0, #31
1a007e0a:	f57f abbf 	bpl.w	1a00758c <_vfprintf_r+0x112c>
1a007e0e:	f7ff bbb9 	b.w	1a007584 <_vfprintf_r+0x1124>
1a007e12:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a007e14:	f1c3 0301 	rsb	r3, r3, #1
1a007e18:	441a      	add	r2, r3
1a007e1a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
1a007e1e:	9209      	str	r2, [sp, #36]	; 0x24
1a007e20:	9304      	str	r3, [sp, #16]
1a007e22:	2667      	movs	r6, #103	; 0x67
1a007e24:	e633      	b.n	1a007a8e <_vfprintf_r+0x162e>
1a007e26:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a007e2a:	f04f 0901 	mov.w	r9, #1
1a007e2e:	e457      	b.n	1a0076e0 <_vfprintf_r+0x1280>
1a007e30:	465a      	mov	r2, fp
1a007e32:	e511      	b.n	1a007858 <_vfprintf_r+0x13f8>
1a007e34:	2e47      	cmp	r6, #71	; 0x47
1a007e36:	f47f af5e 	bne.w	1a007cf6 <_vfprintf_r+0x1896>
1a007e3a:	f018 0f01 	tst.w	r8, #1
1a007e3e:	f43f ab61 	beq.w	1a007504 <_vfprintf_r+0x10a4>
1a007e42:	e7d1      	b.n	1a007de8 <_vfprintf_r+0x1988>
1a007e44:	2200      	movs	r2, #0
1a007e46:	2300      	movs	r3, #0
1a007e48:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
1a007e4c:	f7fd f8f0 	bl	1a005030 <__aeabi_dcmpeq>
1a007e50:	2800      	cmp	r0, #0
1a007e52:	f47f af39 	bne.w	1a007cc8 <_vfprintf_r+0x1868>
1a007e56:	f1c5 0501 	rsb	r5, r5, #1
1a007e5a:	9524      	str	r5, [sp, #144]	; 0x90
1a007e5c:	e735      	b.n	1a007cca <_vfprintf_r+0x186a>
1a007e5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a007e60:	3301      	adds	r3, #1
1a007e62:	444b      	add	r3, r9
1a007e64:	9309      	str	r3, [sp, #36]	; 0x24
1a007e66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a007e6a:	9304      	str	r3, [sp, #16]
1a007e6c:	2666      	movs	r6, #102	; 0x66
1a007e6e:	e60e      	b.n	1a007a8e <_vfprintf_r+0x162e>
1a007e70:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
1a007e74:	f7ff bb7a 	b.w	1a00756c <_vfprintf_r+0x110c>
1a007e78:	aa2a      	add	r2, sp, #168	; 0xa8
1a007e7a:	9907      	ldr	r1, [sp, #28]
1a007e7c:	9803      	ldr	r0, [sp, #12]
1a007e7e:	f002 f89d 	bl	1a009fbc <__sprint_r>
1a007e82:	2800      	cmp	r0, #0
1a007e84:	f47f a864 	bne.w	1a006f50 <_vfprintf_r+0xaf0>
1a007e88:	e9dd 242b 	ldrd	r2, r4, [sp, #172]	; 0xac
1a007e8c:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a007e90:	f7ff bbbd 	b.w	1a00760e <_vfprintf_r+0x11ae>
1a007e94:	9908      	ldr	r1, [sp, #32]
1a007e96:	f89a 6001 	ldrb.w	r6, [sl, #1]
1a007e9a:	680b      	ldr	r3, [r1, #0]
1a007e9c:	ea43 79e3 	orr.w	r9, r3, r3, asr #31
1a007ea0:	1d0b      	adds	r3, r1, #4
1a007ea2:	4692      	mov	sl, r2
1a007ea4:	9308      	str	r3, [sp, #32]
1a007ea6:	f7fe bb59 	b.w	1a00655c <_vfprintf_r+0xfc>
1a007eaa:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
1a007eae:	f7ff bb60 	b.w	1a007572 <_vfprintf_r+0x1112>
1a007eb2:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a007eb6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a007eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a007ebe:	f8a9 300c 	strh.w	r3, [r9, #12]
1a007ec2:	f7ff b84c 	b.w	1a006f5e <_vfprintf_r+0xafe>
1a007ec6:	bf00      	nop
1a007ec8:	1a00a9a0 	.word	0x1a00a9a0
1a007ecc:	1a00a970 	.word	0x1a00a970
1a007ed0:	cccccccd 	.word	0xcccccccd
1a007ed4:	1a00a958 	.word	0x1a00a958
1a007ed8:	1a00a954 	.word	0x1a00a954

1a007edc <__sbprintf>:
1a007edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a007ee0:	460c      	mov	r4, r1
1a007ee2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
1a007ee6:	8989      	ldrh	r1, [r1, #12]
1a007ee8:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a007eea:	89e5      	ldrh	r5, [r4, #14]
1a007eec:	9619      	str	r6, [sp, #100]	; 0x64
1a007eee:	f021 0102 	bic.w	r1, r1, #2
1a007ef2:	4606      	mov	r6, r0
1a007ef4:	69e0      	ldr	r0, [r4, #28]
1a007ef6:	f8ad 100c 	strh.w	r1, [sp, #12]
1a007efa:	4617      	mov	r7, r2
1a007efc:	f44f 6180 	mov.w	r1, #1024	; 0x400
1a007f00:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a007f02:	f8ad 500e 	strh.w	r5, [sp, #14]
1a007f06:	4698      	mov	r8, r3
1a007f08:	ad1a      	add	r5, sp, #104	; 0x68
1a007f0a:	2300      	movs	r3, #0
1a007f0c:	9007      	str	r0, [sp, #28]
1a007f0e:	a816      	add	r0, sp, #88	; 0x58
1a007f10:	9209      	str	r2, [sp, #36]	; 0x24
1a007f12:	9306      	str	r3, [sp, #24]
1a007f14:	9500      	str	r5, [sp, #0]
1a007f16:	9504      	str	r5, [sp, #16]
1a007f18:	9102      	str	r1, [sp, #8]
1a007f1a:	9105      	str	r1, [sp, #20]
1a007f1c:	f7fd fdd0 	bl	1a005ac0 <__retarget_lock_init_recursive>
1a007f20:	4643      	mov	r3, r8
1a007f22:	463a      	mov	r2, r7
1a007f24:	4669      	mov	r1, sp
1a007f26:	4630      	mov	r0, r6
1a007f28:	f7fe fa9a 	bl	1a006460 <_vfprintf_r>
1a007f2c:	1e05      	subs	r5, r0, #0
1a007f2e:	db07      	blt.n	1a007f40 <__sbprintf+0x64>
1a007f30:	4630      	mov	r0, r6
1a007f32:	4669      	mov	r1, sp
1a007f34:	f7fd fb90 	bl	1a005658 <_fflush_r>
1a007f38:	2800      	cmp	r0, #0
1a007f3a:	bf18      	it	ne
1a007f3c:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a007f40:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a007f44:	065b      	lsls	r3, r3, #25
1a007f46:	d503      	bpl.n	1a007f50 <__sbprintf+0x74>
1a007f48:	89a3      	ldrh	r3, [r4, #12]
1a007f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a007f4e:	81a3      	strh	r3, [r4, #12]
1a007f50:	9816      	ldr	r0, [sp, #88]	; 0x58
1a007f52:	f7fd fdb7 	bl	1a005ac4 <__retarget_lock_close_recursive>
1a007f56:	4628      	mov	r0, r5
1a007f58:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
1a007f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a007f60 <__ascii_wctomb>:
1a007f60:	b121      	cbz	r1, 1a007f6c <__ascii_wctomb+0xc>
1a007f62:	2aff      	cmp	r2, #255	; 0xff
1a007f64:	d804      	bhi.n	1a007f70 <__ascii_wctomb+0x10>
1a007f66:	700a      	strb	r2, [r1, #0]
1a007f68:	2001      	movs	r0, #1
1a007f6a:	4770      	bx	lr
1a007f6c:	4608      	mov	r0, r1
1a007f6e:	4770      	bx	lr
1a007f70:	238a      	movs	r3, #138	; 0x8a
1a007f72:	6003      	str	r3, [r0, #0]
1a007f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007f78:	4770      	bx	lr
1a007f7a:	bf00      	nop

1a007f7c <__swsetup_r>:
1a007f7c:	b538      	push	{r3, r4, r5, lr}
1a007f7e:	4b31      	ldr	r3, [pc, #196]	; (1a008044 <__swsetup_r+0xc8>)
1a007f80:	681b      	ldr	r3, [r3, #0]
1a007f82:	4605      	mov	r5, r0
1a007f84:	460c      	mov	r4, r1
1a007f86:	b113      	cbz	r3, 1a007f8e <__swsetup_r+0x12>
1a007f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a007f8a:	2a00      	cmp	r2, #0
1a007f8c:	d03a      	beq.n	1a008004 <__swsetup_r+0x88>
1a007f8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a007f92:	b293      	uxth	r3, r2
1a007f94:	0718      	lsls	r0, r3, #28
1a007f96:	d50c      	bpl.n	1a007fb2 <__swsetup_r+0x36>
1a007f98:	6920      	ldr	r0, [r4, #16]
1a007f9a:	b1a8      	cbz	r0, 1a007fc8 <__swsetup_r+0x4c>
1a007f9c:	f013 0201 	ands.w	r2, r3, #1
1a007fa0:	d020      	beq.n	1a007fe4 <__swsetup_r+0x68>
1a007fa2:	6963      	ldr	r3, [r4, #20]
1a007fa4:	2200      	movs	r2, #0
1a007fa6:	425b      	negs	r3, r3
1a007fa8:	61a3      	str	r3, [r4, #24]
1a007faa:	60a2      	str	r2, [r4, #8]
1a007fac:	b300      	cbz	r0, 1a007ff0 <__swsetup_r+0x74>
1a007fae:	2000      	movs	r0, #0
1a007fb0:	bd38      	pop	{r3, r4, r5, pc}
1a007fb2:	06d9      	lsls	r1, r3, #27
1a007fb4:	d53e      	bpl.n	1a008034 <__swsetup_r+0xb8>
1a007fb6:	0758      	lsls	r0, r3, #29
1a007fb8:	d428      	bmi.n	1a00800c <__swsetup_r+0x90>
1a007fba:	6920      	ldr	r0, [r4, #16]
1a007fbc:	f042 0308 	orr.w	r3, r2, #8
1a007fc0:	81a3      	strh	r3, [r4, #12]
1a007fc2:	b29b      	uxth	r3, r3
1a007fc4:	2800      	cmp	r0, #0
1a007fc6:	d1e9      	bne.n	1a007f9c <__swsetup_r+0x20>
1a007fc8:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a007fcc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a007fd0:	d0e4      	beq.n	1a007f9c <__swsetup_r+0x20>
1a007fd2:	4628      	mov	r0, r5
1a007fd4:	4621      	mov	r1, r4
1a007fd6:	f001 f995 	bl	1a009304 <__smakebuf_r>
1a007fda:	89a3      	ldrh	r3, [r4, #12]
1a007fdc:	6920      	ldr	r0, [r4, #16]
1a007fde:	f013 0201 	ands.w	r2, r3, #1
1a007fe2:	d1de      	bne.n	1a007fa2 <__swsetup_r+0x26>
1a007fe4:	0799      	lsls	r1, r3, #30
1a007fe6:	bf58      	it	pl
1a007fe8:	6962      	ldrpl	r2, [r4, #20]
1a007fea:	60a2      	str	r2, [r4, #8]
1a007fec:	2800      	cmp	r0, #0
1a007fee:	d1de      	bne.n	1a007fae <__swsetup_r+0x32>
1a007ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007ff4:	061a      	lsls	r2, r3, #24
1a007ff6:	d5db      	bpl.n	1a007fb0 <__swsetup_r+0x34>
1a007ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a007ffc:	81a3      	strh	r3, [r4, #12]
1a007ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a008002:	bd38      	pop	{r3, r4, r5, pc}
1a008004:	4618      	mov	r0, r3
1a008006:	f7fd fb83 	bl	1a005710 <__sinit>
1a00800a:	e7c0      	b.n	1a007f8e <__swsetup_r+0x12>
1a00800c:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a00800e:	b151      	cbz	r1, 1a008026 <__swsetup_r+0xaa>
1a008010:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a008014:	4299      	cmp	r1, r3
1a008016:	d004      	beq.n	1a008022 <__swsetup_r+0xa6>
1a008018:	4628      	mov	r0, r5
1a00801a:	f7fd fc01 	bl	1a005820 <_free_r>
1a00801e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a008022:	2300      	movs	r3, #0
1a008024:	6323      	str	r3, [r4, #48]	; 0x30
1a008026:	2300      	movs	r3, #0
1a008028:	6920      	ldr	r0, [r4, #16]
1a00802a:	6063      	str	r3, [r4, #4]
1a00802c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a008030:	6020      	str	r0, [r4, #0]
1a008032:	e7c3      	b.n	1a007fbc <__swsetup_r+0x40>
1a008034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a008038:	2309      	movs	r3, #9
1a00803a:	602b      	str	r3, [r5, #0]
1a00803c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a008040:	81a2      	strh	r2, [r4, #12]
1a008042:	bd38      	pop	{r3, r4, r5, pc}
1a008044:	100000cc 	.word	0x100000cc

1a008048 <quorem>:
1a008048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00804c:	6903      	ldr	r3, [r0, #16]
1a00804e:	690f      	ldr	r7, [r1, #16]
1a008050:	42bb      	cmp	r3, r7
1a008052:	b083      	sub	sp, #12
1a008054:	f2c0 8086 	blt.w	1a008164 <quorem+0x11c>
1a008058:	3f01      	subs	r7, #1
1a00805a:	f101 0914 	add.w	r9, r1, #20
1a00805e:	f100 0a14 	add.w	sl, r0, #20
1a008062:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
1a008066:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
1a00806a:	00bc      	lsls	r4, r7, #2
1a00806c:	3201      	adds	r2, #1
1a00806e:	fbb3 f8f2 	udiv	r8, r3, r2
1a008072:	eb0a 0304 	add.w	r3, sl, r4
1a008076:	9400      	str	r4, [sp, #0]
1a008078:	eb09 0b04 	add.w	fp, r9, r4
1a00807c:	9301      	str	r3, [sp, #4]
1a00807e:	f1b8 0f00 	cmp.w	r8, #0
1a008082:	d038      	beq.n	1a0080f6 <quorem+0xae>
1a008084:	2500      	movs	r5, #0
1a008086:	462e      	mov	r6, r5
1a008088:	46ce      	mov	lr, r9
1a00808a:	46d4      	mov	ip, sl
1a00808c:	f85e 4b04 	ldr.w	r4, [lr], #4
1a008090:	f8dc 3000 	ldr.w	r3, [ip]
1a008094:	b2a2      	uxth	r2, r4
1a008096:	fb08 5502 	mla	r5, r8, r2, r5
1a00809a:	0c22      	lsrs	r2, r4, #16
1a00809c:	0c2c      	lsrs	r4, r5, #16
1a00809e:	fb08 4202 	mla	r2, r8, r2, r4
1a0080a2:	b2ad      	uxth	r5, r5
1a0080a4:	1b75      	subs	r5, r6, r5
1a0080a6:	b296      	uxth	r6, r2
1a0080a8:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
1a0080ac:	fa15 f383 	uxtah	r3, r5, r3
1a0080b0:	eb06 4623 	add.w	r6, r6, r3, asr #16
1a0080b4:	b29b      	uxth	r3, r3
1a0080b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
1a0080ba:	45f3      	cmp	fp, lr
1a0080bc:	ea4f 4512 	mov.w	r5, r2, lsr #16
1a0080c0:	f84c 3b04 	str.w	r3, [ip], #4
1a0080c4:	ea4f 4626 	mov.w	r6, r6, asr #16
1a0080c8:	d2e0      	bcs.n	1a00808c <quorem+0x44>
1a0080ca:	9b00      	ldr	r3, [sp, #0]
1a0080cc:	f85a 3003 	ldr.w	r3, [sl, r3]
1a0080d0:	b98b      	cbnz	r3, 1a0080f6 <quorem+0xae>
1a0080d2:	9a01      	ldr	r2, [sp, #4]
1a0080d4:	1f13      	subs	r3, r2, #4
1a0080d6:	459a      	cmp	sl, r3
1a0080d8:	d20c      	bcs.n	1a0080f4 <quorem+0xac>
1a0080da:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a0080de:	b94b      	cbnz	r3, 1a0080f4 <quorem+0xac>
1a0080e0:	f1a2 0308 	sub.w	r3, r2, #8
1a0080e4:	e002      	b.n	1a0080ec <quorem+0xa4>
1a0080e6:	681a      	ldr	r2, [r3, #0]
1a0080e8:	3b04      	subs	r3, #4
1a0080ea:	b91a      	cbnz	r2, 1a0080f4 <quorem+0xac>
1a0080ec:	459a      	cmp	sl, r3
1a0080ee:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a0080f2:	d3f8      	bcc.n	1a0080e6 <quorem+0x9e>
1a0080f4:	6107      	str	r7, [r0, #16]
1a0080f6:	4604      	mov	r4, r0
1a0080f8:	f001 fc1c 	bl	1a009934 <__mcmp>
1a0080fc:	2800      	cmp	r0, #0
1a0080fe:	db2d      	blt.n	1a00815c <quorem+0x114>
1a008100:	f108 0801 	add.w	r8, r8, #1
1a008104:	4655      	mov	r5, sl
1a008106:	2300      	movs	r3, #0
1a008108:	f859 1b04 	ldr.w	r1, [r9], #4
1a00810c:	6828      	ldr	r0, [r5, #0]
1a00810e:	b28a      	uxth	r2, r1
1a008110:	1a9a      	subs	r2, r3, r2
1a008112:	0c0b      	lsrs	r3, r1, #16
1a008114:	fa12 f280 	uxtah	r2, r2, r0
1a008118:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
1a00811c:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a008120:	b292      	uxth	r2, r2
1a008122:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a008126:	45cb      	cmp	fp, r9
1a008128:	f845 2b04 	str.w	r2, [r5], #4
1a00812c:	ea4f 4323 	mov.w	r3, r3, asr #16
1a008130:	d2ea      	bcs.n	1a008108 <quorem+0xc0>
1a008132:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a008136:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
1a00813a:	b97a      	cbnz	r2, 1a00815c <quorem+0x114>
1a00813c:	1f1a      	subs	r2, r3, #4
1a00813e:	4592      	cmp	sl, r2
1a008140:	d20b      	bcs.n	1a00815a <quorem+0x112>
1a008142:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a008146:	b942      	cbnz	r2, 1a00815a <quorem+0x112>
1a008148:	3b08      	subs	r3, #8
1a00814a:	e002      	b.n	1a008152 <quorem+0x10a>
1a00814c:	681a      	ldr	r2, [r3, #0]
1a00814e:	3b04      	subs	r3, #4
1a008150:	b91a      	cbnz	r2, 1a00815a <quorem+0x112>
1a008152:	459a      	cmp	sl, r3
1a008154:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a008158:	d3f8      	bcc.n	1a00814c <quorem+0x104>
1a00815a:	6127      	str	r7, [r4, #16]
1a00815c:	4640      	mov	r0, r8
1a00815e:	b003      	add	sp, #12
1a008160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008164:	2000      	movs	r0, #0
1a008166:	b003      	add	sp, #12
1a008168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00816c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a008170 <_dtoa_r>:
1a008170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a008174:	ec55 4b10 	vmov	r4, r5, d0
1a008178:	b09b      	sub	sp, #108	; 0x6c
1a00817a:	6c06      	ldr	r6, [r0, #64]	; 0x40
1a00817c:	9102      	str	r1, [sp, #8]
1a00817e:	4681      	mov	r9, r0
1a008180:	9207      	str	r2, [sp, #28]
1a008182:	9305      	str	r3, [sp, #20]
1a008184:	e9cd 4500 	strd	r4, r5, [sp]
1a008188:	b156      	cbz	r6, 1a0081a0 <_dtoa_r+0x30>
1a00818a:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a00818c:	6072      	str	r2, [r6, #4]
1a00818e:	2301      	movs	r3, #1
1a008190:	4093      	lsls	r3, r2
1a008192:	60b3      	str	r3, [r6, #8]
1a008194:	4631      	mov	r1, r6
1a008196:	f001 f9dd 	bl	1a009554 <_Bfree>
1a00819a:	2300      	movs	r3, #0
1a00819c:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
1a0081a0:	f1b5 0800 	subs.w	r8, r5, #0
1a0081a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
1a0081a6:	bfb4      	ite	lt
1a0081a8:	2301      	movlt	r3, #1
1a0081aa:	2300      	movge	r3, #0
1a0081ac:	6013      	str	r3, [r2, #0]
1a0081ae:	4b76      	ldr	r3, [pc, #472]	; (1a008388 <_dtoa_r+0x218>)
1a0081b0:	bfbc      	itt	lt
1a0081b2:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
1a0081b6:	f8cd 8004 	strlt.w	r8, [sp, #4]
1a0081ba:	ea33 0308 	bics.w	r3, r3, r8
1a0081be:	f000 80a6 	beq.w	1a00830e <_dtoa_r+0x19e>
1a0081c2:	e9dd 6700 	ldrd	r6, r7, [sp]
1a0081c6:	2200      	movs	r2, #0
1a0081c8:	2300      	movs	r3, #0
1a0081ca:	4630      	mov	r0, r6
1a0081cc:	4639      	mov	r1, r7
1a0081ce:	f7fc ff2f 	bl	1a005030 <__aeabi_dcmpeq>
1a0081d2:	4605      	mov	r5, r0
1a0081d4:	b178      	cbz	r0, 1a0081f6 <_dtoa_r+0x86>
1a0081d6:	9a05      	ldr	r2, [sp, #20]
1a0081d8:	2301      	movs	r3, #1
1a0081da:	6013      	str	r3, [r2, #0]
1a0081dc:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a0081de:	2b00      	cmp	r3, #0
1a0081e0:	f000 80c0 	beq.w	1a008364 <_dtoa_r+0x1f4>
1a0081e4:	4b69      	ldr	r3, [pc, #420]	; (1a00838c <_dtoa_r+0x21c>)
1a0081e6:	9a25      	ldr	r2, [sp, #148]	; 0x94
1a0081e8:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
1a0081ec:	6013      	str	r3, [r2, #0]
1a0081ee:	4658      	mov	r0, fp
1a0081f0:	b01b      	add	sp, #108	; 0x6c
1a0081f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0081f6:	aa18      	add	r2, sp, #96	; 0x60
1a0081f8:	a919      	add	r1, sp, #100	; 0x64
1a0081fa:	ec47 6b10 	vmov	d0, r6, r7
1a0081fe:	4648      	mov	r0, r9
1a008200:	f001 fc2a 	bl	1a009a58 <__d2b>
1a008204:	ea5f 5418 	movs.w	r4, r8, lsr #20
1a008208:	4682      	mov	sl, r0
1a00820a:	f040 80a0 	bne.w	1a00834e <_dtoa_r+0x1de>
1a00820e:	e9dd 5418 	ldrd	r5, r4, [sp, #96]	; 0x60
1a008212:	442c      	add	r4, r5
1a008214:	f204 4332 	addw	r3, r4, #1074	; 0x432
1a008218:	2b20      	cmp	r3, #32
1a00821a:	f340 842c 	ble.w	1a008a76 <_dtoa_r+0x906>
1a00821e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1a008222:	fa08 f803 	lsl.w	r8, r8, r3
1a008226:	9b00      	ldr	r3, [sp, #0]
1a008228:	f204 4012 	addw	r0, r4, #1042	; 0x412
1a00822c:	fa23 f000 	lsr.w	r0, r3, r0
1a008230:	ea48 0000 	orr.w	r0, r8, r0
1a008234:	f7fc fc1a 	bl	1a004a6c <__aeabi_ui2d>
1a008238:	2301      	movs	r3, #1
1a00823a:	4606      	mov	r6, r0
1a00823c:	3c01      	subs	r4, #1
1a00823e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
1a008242:	930f      	str	r3, [sp, #60]	; 0x3c
1a008244:	4630      	mov	r0, r6
1a008246:	4639      	mov	r1, r7
1a008248:	2200      	movs	r2, #0
1a00824a:	4b51      	ldr	r3, [pc, #324]	; (1a008390 <_dtoa_r+0x220>)
1a00824c:	f7fc fad0 	bl	1a0047f0 <__aeabi_dsub>
1a008250:	a347      	add	r3, pc, #284	; (adr r3, 1a008370 <_dtoa_r+0x200>)
1a008252:	e9d3 2300 	ldrd	r2, r3, [r3]
1a008256:	f7fc fc83 	bl	1a004b60 <__aeabi_dmul>
1a00825a:	a347      	add	r3, pc, #284	; (adr r3, 1a008378 <_dtoa_r+0x208>)
1a00825c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a008260:	f7fc fac8 	bl	1a0047f4 <__adddf3>
1a008264:	4606      	mov	r6, r0
1a008266:	4620      	mov	r0, r4
1a008268:	460f      	mov	r7, r1
1a00826a:	f7fc fc0f 	bl	1a004a8c <__aeabi_i2d>
1a00826e:	a344      	add	r3, pc, #272	; (adr r3, 1a008380 <_dtoa_r+0x210>)
1a008270:	e9d3 2300 	ldrd	r2, r3, [r3]
1a008274:	f7fc fc74 	bl	1a004b60 <__aeabi_dmul>
1a008278:	4602      	mov	r2, r0
1a00827a:	460b      	mov	r3, r1
1a00827c:	4630      	mov	r0, r6
1a00827e:	4639      	mov	r1, r7
1a008280:	f7fc fab8 	bl	1a0047f4 <__adddf3>
1a008284:	4606      	mov	r6, r0
1a008286:	460f      	mov	r7, r1
1a008288:	f001 ffee 	bl	1a00a268 <__aeabi_d2iz>
1a00828c:	2200      	movs	r2, #0
1a00828e:	9006      	str	r0, [sp, #24]
1a008290:	2300      	movs	r3, #0
1a008292:	4630      	mov	r0, r6
1a008294:	4639      	mov	r1, r7
1a008296:	f7fc fed5 	bl	1a005044 <__aeabi_dcmplt>
1a00829a:	2800      	cmp	r0, #0
1a00829c:	f040 8273 	bne.w	1a008786 <_dtoa_r+0x616>
1a0082a0:	9e06      	ldr	r6, [sp, #24]
1a0082a2:	2e16      	cmp	r6, #22
1a0082a4:	f200 825d 	bhi.w	1a008762 <_dtoa_r+0x5f2>
1a0082a8:	4b3a      	ldr	r3, [pc, #232]	; (1a008394 <_dtoa_r+0x224>)
1a0082aa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
1a0082ae:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0082b2:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0082b6:	f7fc fee3 	bl	1a005080 <__aeabi_dcmpgt>
1a0082ba:	2800      	cmp	r0, #0
1a0082bc:	f000 83d7 	beq.w	1a008a6e <_dtoa_r+0x8fe>
1a0082c0:	1e73      	subs	r3, r6, #1
1a0082c2:	9306      	str	r3, [sp, #24]
1a0082c4:	2300      	movs	r3, #0
1a0082c6:	930d      	str	r3, [sp, #52]	; 0x34
1a0082c8:	1b2c      	subs	r4, r5, r4
1a0082ca:	f1b4 0801 	subs.w	r8, r4, #1
1a0082ce:	f100 8254 	bmi.w	1a00877a <_dtoa_r+0x60a>
1a0082d2:	2300      	movs	r3, #0
1a0082d4:	9308      	str	r3, [sp, #32]
1a0082d6:	9b06      	ldr	r3, [sp, #24]
1a0082d8:	2b00      	cmp	r3, #0
1a0082da:	f2c0 8245 	blt.w	1a008768 <_dtoa_r+0x5f8>
1a0082de:	4498      	add	r8, r3
1a0082e0:	930c      	str	r3, [sp, #48]	; 0x30
1a0082e2:	2300      	movs	r3, #0
1a0082e4:	930b      	str	r3, [sp, #44]	; 0x2c
1a0082e6:	9b02      	ldr	r3, [sp, #8]
1a0082e8:	2b09      	cmp	r3, #9
1a0082ea:	d85b      	bhi.n	1a0083a4 <_dtoa_r+0x234>
1a0082ec:	2b05      	cmp	r3, #5
1a0082ee:	f340 83c0 	ble.w	1a008a72 <_dtoa_r+0x902>
1a0082f2:	3b04      	subs	r3, #4
1a0082f4:	9302      	str	r3, [sp, #8]
1a0082f6:	2500      	movs	r5, #0
1a0082f8:	9b02      	ldr	r3, [sp, #8]
1a0082fa:	3b02      	subs	r3, #2
1a0082fc:	2b03      	cmp	r3, #3
1a0082fe:	f200 8498 	bhi.w	1a008c32 <_dtoa_r+0xac2>
1a008302:	e8df f013 	tbh	[pc, r3, lsl #1]
1a008306:	03df      	.short	0x03df
1a008308:	03e803bf 	.word	0x03e803bf
1a00830c:	04f5      	.short	0x04f5
1a00830e:	9a05      	ldr	r2, [sp, #20]
1a008310:	f242 730f 	movw	r3, #9999	; 0x270f
1a008314:	6013      	str	r3, [r2, #0]
1a008316:	9b00      	ldr	r3, [sp, #0]
1a008318:	b983      	cbnz	r3, 1a00833c <_dtoa_r+0x1cc>
1a00831a:	f3c8 0313 	ubfx	r3, r8, #0, #20
1a00831e:	b96b      	cbnz	r3, 1a00833c <_dtoa_r+0x1cc>
1a008320:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a008322:	f8df b074 	ldr.w	fp, [pc, #116]	; 1a008398 <_dtoa_r+0x228>
1a008326:	2b00      	cmp	r3, #0
1a008328:	f43f af61 	beq.w	1a0081ee <_dtoa_r+0x7e>
1a00832c:	f10b 0308 	add.w	r3, fp, #8
1a008330:	9a25      	ldr	r2, [sp, #148]	; 0x94
1a008332:	4658      	mov	r0, fp
1a008334:	6013      	str	r3, [r2, #0]
1a008336:	b01b      	add	sp, #108	; 0x6c
1a008338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00833c:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a00833e:	f8df b05c 	ldr.w	fp, [pc, #92]	; 1a00839c <_dtoa_r+0x22c>
1a008342:	2b00      	cmp	r3, #0
1a008344:	f43f af53 	beq.w	1a0081ee <_dtoa_r+0x7e>
1a008348:	f10b 0303 	add.w	r3, fp, #3
1a00834c:	e7f0      	b.n	1a008330 <_dtoa_r+0x1c0>
1a00834e:	f3c7 0313 	ubfx	r3, r7, #0, #20
1a008352:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
1a008356:	950f      	str	r5, [sp, #60]	; 0x3c
1a008358:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
1a00835c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
1a008360:	9d18      	ldr	r5, [sp, #96]	; 0x60
1a008362:	e76f      	b.n	1a008244 <_dtoa_r+0xd4>
1a008364:	f8df b038 	ldr.w	fp, [pc, #56]	; 1a0083a0 <_dtoa_r+0x230>
1a008368:	4658      	mov	r0, fp
1a00836a:	b01b      	add	sp, #108	; 0x6c
1a00836c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008370:	636f4361 	.word	0x636f4361
1a008374:	3fd287a7 	.word	0x3fd287a7
1a008378:	8b60c8b3 	.word	0x8b60c8b3
1a00837c:	3fc68a28 	.word	0x3fc68a28
1a008380:	509f79fb 	.word	0x509f79fb
1a008384:	3fd34413 	.word	0x3fd34413
1a008388:	7ff00000 	.word	0x7ff00000
1a00838c:	1a00a98d 	.word	0x1a00a98d
1a008390:	3ff80000 	.word	0x3ff80000
1a008394:	1a00aaf0 	.word	0x1a00aaf0
1a008398:	1a00aab4 	.word	0x1a00aab4
1a00839c:	1a00aac0 	.word	0x1a00aac0
1a0083a0:	1a00a98c 	.word	0x1a00a98c
1a0083a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
1a0083a8:	2501      	movs	r5, #1
1a0083aa:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
1a0083ae:	2300      	movs	r3, #0
1a0083b0:	9302      	str	r3, [sp, #8]
1a0083b2:	9307      	str	r3, [sp, #28]
1a0083b4:	2100      	movs	r1, #0
1a0083b6:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
1a0083ba:	940e      	str	r4, [sp, #56]	; 0x38
1a0083bc:	4648      	mov	r0, r9
1a0083be:	f001 f8a3 	bl	1a009508 <_Balloc>
1a0083c2:	2c0e      	cmp	r4, #14
1a0083c4:	4683      	mov	fp, r0
1a0083c6:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
1a0083ca:	f200 80fb 	bhi.w	1a0085c4 <_dtoa_r+0x454>
1a0083ce:	2d00      	cmp	r5, #0
1a0083d0:	f000 80f8 	beq.w	1a0085c4 <_dtoa_r+0x454>
1a0083d4:	ed9d 7b00 	vldr	d7, [sp]
1a0083d8:	9906      	ldr	r1, [sp, #24]
1a0083da:	2900      	cmp	r1, #0
1a0083dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a0083e0:	f340 83e5 	ble.w	1a008bae <_dtoa_r+0xa3e>
1a0083e4:	4b9d      	ldr	r3, [pc, #628]	; (1a00865c <_dtoa_r+0x4ec>)
1a0083e6:	f001 020f 	and.w	r2, r1, #15
1a0083ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a0083ee:	ed93 7b00 	vldr	d7, [r3]
1a0083f2:	110c      	asrs	r4, r1, #4
1a0083f4:	06e2      	lsls	r2, r4, #27
1a0083f6:	ed8d 7b00 	vstr	d7, [sp]
1a0083fa:	f140 849e 	bpl.w	1a008d3a <_dtoa_r+0xbca>
1a0083fe:	4b98      	ldr	r3, [pc, #608]	; (1a008660 <_dtoa_r+0x4f0>)
1a008400:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a008404:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a008408:	f7fc fcd4 	bl	1a004db4 <__aeabi_ddiv>
1a00840c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
1a008410:	f004 040f 	and.w	r4, r4, #15
1a008414:	2603      	movs	r6, #3
1a008416:	b17c      	cbz	r4, 1a008438 <_dtoa_r+0x2c8>
1a008418:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00841c:	4d90      	ldr	r5, [pc, #576]	; (1a008660 <_dtoa_r+0x4f0>)
1a00841e:	07e3      	lsls	r3, r4, #31
1a008420:	d504      	bpl.n	1a00842c <_dtoa_r+0x2bc>
1a008422:	e9d5 2300 	ldrd	r2, r3, [r5]
1a008426:	f7fc fb9b 	bl	1a004b60 <__aeabi_dmul>
1a00842a:	3601      	adds	r6, #1
1a00842c:	1064      	asrs	r4, r4, #1
1a00842e:	f105 0508 	add.w	r5, r5, #8
1a008432:	d1f4      	bne.n	1a00841e <_dtoa_r+0x2ae>
1a008434:	e9cd 0100 	strd	r0, r1, [sp]
1a008438:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00843c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a008440:	f7fc fcb8 	bl	1a004db4 <__aeabi_ddiv>
1a008444:	e9cd 0100 	strd	r0, r1, [sp]
1a008448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00844a:	b143      	cbz	r3, 1a00845e <_dtoa_r+0x2ee>
1a00844c:	2200      	movs	r2, #0
1a00844e:	4b85      	ldr	r3, [pc, #532]	; (1a008664 <_dtoa_r+0x4f4>)
1a008450:	e9dd 0100 	ldrd	r0, r1, [sp]
1a008454:	f7fc fdf6 	bl	1a005044 <__aeabi_dcmplt>
1a008458:	2800      	cmp	r0, #0
1a00845a:	f040 84ff 	bne.w	1a008e5c <_dtoa_r+0xcec>
1a00845e:	4630      	mov	r0, r6
1a008460:	f7fc fb14 	bl	1a004a8c <__aeabi_i2d>
1a008464:	e9dd 2300 	ldrd	r2, r3, [sp]
1a008468:	f7fc fb7a 	bl	1a004b60 <__aeabi_dmul>
1a00846c:	4b7e      	ldr	r3, [pc, #504]	; (1a008668 <_dtoa_r+0x4f8>)
1a00846e:	2200      	movs	r2, #0
1a008470:	f7fc f9c0 	bl	1a0047f4 <__adddf3>
1a008474:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008476:	4606      	mov	r6, r0
1a008478:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a00847c:	2b00      	cmp	r3, #0
1a00847e:	f000 841c 	beq.w	1a008cba <_dtoa_r+0xb4a>
1a008482:	9b06      	ldr	r3, [sp, #24]
1a008484:	9316      	str	r3, [sp, #88]	; 0x58
1a008486:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008488:	9312      	str	r3, [sp, #72]	; 0x48
1a00848a:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00848e:	f001 feeb 	bl	1a00a268 <__aeabi_d2iz>
1a008492:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a008494:	4b71      	ldr	r3, [pc, #452]	; (1a00865c <_dtoa_r+0x4ec>)
1a008496:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a00849a:	ed13 7b02 	vldr	d7, [r3, #-8]
1a00849e:	f100 0530 	add.w	r5, r0, #48	; 0x30
1a0084a2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
1a0084a6:	f7fc faf1 	bl	1a004a8c <__aeabi_i2d>
1a0084aa:	460b      	mov	r3, r1
1a0084ac:	4602      	mov	r2, r0
1a0084ae:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0084b2:	e9cd 6700 	strd	r6, r7, [sp]
1a0084b6:	f7fc f99b 	bl	1a0047f0 <__aeabi_dsub>
1a0084ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0084bc:	b2ed      	uxtb	r5, r5
1a0084be:	4606      	mov	r6, r0
1a0084c0:	460f      	mov	r7, r1
1a0084c2:	f10b 0401 	add.w	r4, fp, #1
1a0084c6:	2b00      	cmp	r3, #0
1a0084c8:	f000 8458 	beq.w	1a008d7c <_dtoa_r+0xc0c>
1a0084cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
1a0084d0:	2000      	movs	r0, #0
1a0084d2:	4966      	ldr	r1, [pc, #408]	; (1a00866c <_dtoa_r+0x4fc>)
1a0084d4:	f7fc fc6e 	bl	1a004db4 <__aeabi_ddiv>
1a0084d8:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0084dc:	f7fc f988 	bl	1a0047f0 <__aeabi_dsub>
1a0084e0:	f88b 5000 	strb.w	r5, [fp]
1a0084e4:	4632      	mov	r2, r6
1a0084e6:	463b      	mov	r3, r7
1a0084e8:	e9cd 0100 	strd	r0, r1, [sp]
1a0084ec:	f7fc fdc8 	bl	1a005080 <__aeabi_dcmpgt>
1a0084f0:	2800      	cmp	r0, #0
1a0084f2:	f040 8502 	bne.w	1a008efa <_dtoa_r+0xd8a>
1a0084f6:	4632      	mov	r2, r6
1a0084f8:	463b      	mov	r3, r7
1a0084fa:	2000      	movs	r0, #0
1a0084fc:	4959      	ldr	r1, [pc, #356]	; (1a008664 <_dtoa_r+0x4f4>)
1a0084fe:	f7fc f977 	bl	1a0047f0 <__aeabi_dsub>
1a008502:	4602      	mov	r2, r0
1a008504:	460b      	mov	r3, r1
1a008506:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00850a:	f7fc fdb9 	bl	1a005080 <__aeabi_dcmpgt>
1a00850e:	2800      	cmp	r0, #0
1a008510:	f040 84fb 	bne.w	1a008f0a <_dtoa_r+0xd9a>
1a008514:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a008516:	2a01      	cmp	r2, #1
1a008518:	d050      	beq.n	1a0085bc <_dtoa_r+0x44c>
1a00851a:	445a      	add	r2, fp
1a00851c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
1a008520:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a008524:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
1a008528:	4692      	mov	sl, r2
1a00852a:	46cb      	mov	fp, r9
1a00852c:	e9dd 8900 	ldrd	r8, r9, [sp]
1a008530:	e00c      	b.n	1a00854c <_dtoa_r+0x3dc>
1a008532:	2000      	movs	r0, #0
1a008534:	494b      	ldr	r1, [pc, #300]	; (1a008664 <_dtoa_r+0x4f4>)
1a008536:	f7fc f95b 	bl	1a0047f0 <__aeabi_dsub>
1a00853a:	4642      	mov	r2, r8
1a00853c:	464b      	mov	r3, r9
1a00853e:	f7fc fd81 	bl	1a005044 <__aeabi_dcmplt>
1a008542:	2800      	cmp	r0, #0
1a008544:	f040 84dc 	bne.w	1a008f00 <_dtoa_r+0xd90>
1a008548:	4554      	cmp	r4, sl
1a00854a:	d030      	beq.n	1a0085ae <_dtoa_r+0x43e>
1a00854c:	4640      	mov	r0, r8
1a00854e:	4649      	mov	r1, r9
1a008550:	2200      	movs	r2, #0
1a008552:	4b47      	ldr	r3, [pc, #284]	; (1a008670 <_dtoa_r+0x500>)
1a008554:	f7fc fb04 	bl	1a004b60 <__aeabi_dmul>
1a008558:	2200      	movs	r2, #0
1a00855a:	4b45      	ldr	r3, [pc, #276]	; (1a008670 <_dtoa_r+0x500>)
1a00855c:	4680      	mov	r8, r0
1a00855e:	4689      	mov	r9, r1
1a008560:	4630      	mov	r0, r6
1a008562:	4639      	mov	r1, r7
1a008564:	f7fc fafc 	bl	1a004b60 <__aeabi_dmul>
1a008568:	460f      	mov	r7, r1
1a00856a:	4606      	mov	r6, r0
1a00856c:	f001 fe7c 	bl	1a00a268 <__aeabi_d2iz>
1a008570:	4605      	mov	r5, r0
1a008572:	f7fc fa8b 	bl	1a004a8c <__aeabi_i2d>
1a008576:	4602      	mov	r2, r0
1a008578:	460b      	mov	r3, r1
1a00857a:	4630      	mov	r0, r6
1a00857c:	4639      	mov	r1, r7
1a00857e:	f7fc f937 	bl	1a0047f0 <__aeabi_dsub>
1a008582:	3530      	adds	r5, #48	; 0x30
1a008584:	b2ed      	uxtb	r5, r5
1a008586:	4642      	mov	r2, r8
1a008588:	464b      	mov	r3, r9
1a00858a:	f804 5b01 	strb.w	r5, [r4], #1
1a00858e:	4606      	mov	r6, r0
1a008590:	460f      	mov	r7, r1
1a008592:	f7fc fd57 	bl	1a005044 <__aeabi_dcmplt>
1a008596:	4632      	mov	r2, r6
1a008598:	463b      	mov	r3, r7
1a00859a:	2800      	cmp	r0, #0
1a00859c:	d0c9      	beq.n	1a008532 <_dtoa_r+0x3c2>
1a00859e:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0085a0:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a0085a4:	9306      	str	r3, [sp, #24]
1a0085a6:	46d9      	mov	r9, fp
1a0085a8:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
1a0085ac:	e236      	b.n	1a008a1c <_dtoa_r+0x8ac>
1a0085ae:	46d9      	mov	r9, fp
1a0085b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
1a0085b4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a0085b8:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
1a0085bc:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
1a0085c0:	e9cd 3400 	strd	r3, r4, [sp]
1a0085c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a0085c6:	2b00      	cmp	r3, #0
1a0085c8:	f2c0 80ae 	blt.w	1a008728 <_dtoa_r+0x5b8>
1a0085cc:	9a06      	ldr	r2, [sp, #24]
1a0085ce:	2a0e      	cmp	r2, #14
1a0085d0:	f300 80aa 	bgt.w	1a008728 <_dtoa_r+0x5b8>
1a0085d4:	4b21      	ldr	r3, [pc, #132]	; (1a00865c <_dtoa_r+0x4ec>)
1a0085d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a0085da:	ed93 7b00 	vldr	d7, [r3]
1a0085de:	9b07      	ldr	r3, [sp, #28]
1a0085e0:	2b00      	cmp	r3, #0
1a0085e2:	ed8d 7b02 	vstr	d7, [sp, #8]
1a0085e6:	f2c0 82be 	blt.w	1a008b66 <_dtoa_r+0x9f6>
1a0085ea:	e9dd 6700 	ldrd	r6, r7, [sp]
1a0085ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0085f2:	4630      	mov	r0, r6
1a0085f4:	4639      	mov	r1, r7
1a0085f6:	f7fc fbdd 	bl	1a004db4 <__aeabi_ddiv>
1a0085fa:	f001 fe35 	bl	1a00a268 <__aeabi_d2iz>
1a0085fe:	4605      	mov	r5, r0
1a008600:	f7fc fa44 	bl	1a004a8c <__aeabi_i2d>
1a008604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a008608:	f7fc faaa 	bl	1a004b60 <__aeabi_dmul>
1a00860c:	460b      	mov	r3, r1
1a00860e:	4602      	mov	r2, r0
1a008610:	4639      	mov	r1, r7
1a008612:	4630      	mov	r0, r6
1a008614:	f7fc f8ec 	bl	1a0047f0 <__aeabi_dsub>
1a008618:	f105 0330 	add.w	r3, r5, #48	; 0x30
1a00861c:	f88b 3000 	strb.w	r3, [fp]
1a008620:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008622:	2b01      	cmp	r3, #1
1a008624:	4606      	mov	r6, r0
1a008626:	460f      	mov	r7, r1
1a008628:	f10b 0401 	add.w	r4, fp, #1
1a00862c:	d053      	beq.n	1a0086d6 <_dtoa_r+0x566>
1a00862e:	2200      	movs	r2, #0
1a008630:	4b0f      	ldr	r3, [pc, #60]	; (1a008670 <_dtoa_r+0x500>)
1a008632:	f7fc fa95 	bl	1a004b60 <__aeabi_dmul>
1a008636:	2200      	movs	r2, #0
1a008638:	2300      	movs	r3, #0
1a00863a:	4606      	mov	r6, r0
1a00863c:	460f      	mov	r7, r1
1a00863e:	f7fc fcf7 	bl	1a005030 <__aeabi_dcmpeq>
1a008642:	2800      	cmp	r0, #0
1a008644:	f040 81ea 	bne.w	1a008a1c <_dtoa_r+0x8ac>
1a008648:	f8cd a000 	str.w	sl, [sp]
1a00864c:	f8cd 901c 	str.w	r9, [sp, #28]
1a008650:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a008654:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
1a008658:	e017      	b.n	1a00868a <_dtoa_r+0x51a>
1a00865a:	bf00      	nop
1a00865c:	1a00aaf0 	.word	0x1a00aaf0
1a008660:	1a00aac8 	.word	0x1a00aac8
1a008664:	3ff00000 	.word	0x3ff00000
1a008668:	401c0000 	.word	0x401c0000
1a00866c:	3fe00000 	.word	0x3fe00000
1a008670:	40240000 	.word	0x40240000
1a008674:	f7fc fa74 	bl	1a004b60 <__aeabi_dmul>
1a008678:	2200      	movs	r2, #0
1a00867a:	2300      	movs	r3, #0
1a00867c:	4606      	mov	r6, r0
1a00867e:	460f      	mov	r7, r1
1a008680:	f7fc fcd6 	bl	1a005030 <__aeabi_dcmpeq>
1a008684:	2800      	cmp	r0, #0
1a008686:	f040 833d 	bne.w	1a008d04 <_dtoa_r+0xb94>
1a00868a:	464a      	mov	r2, r9
1a00868c:	4653      	mov	r3, sl
1a00868e:	4630      	mov	r0, r6
1a008690:	4639      	mov	r1, r7
1a008692:	f7fc fb8f 	bl	1a004db4 <__aeabi_ddiv>
1a008696:	f001 fde7 	bl	1a00a268 <__aeabi_d2iz>
1a00869a:	4605      	mov	r5, r0
1a00869c:	f7fc f9f6 	bl	1a004a8c <__aeabi_i2d>
1a0086a0:	464a      	mov	r2, r9
1a0086a2:	4653      	mov	r3, sl
1a0086a4:	f7fc fa5c 	bl	1a004b60 <__aeabi_dmul>
1a0086a8:	4602      	mov	r2, r0
1a0086aa:	460b      	mov	r3, r1
1a0086ac:	4630      	mov	r0, r6
1a0086ae:	4639      	mov	r1, r7
1a0086b0:	f7fc f89e 	bl	1a0047f0 <__aeabi_dsub>
1a0086b4:	f105 0c30 	add.w	ip, r5, #48	; 0x30
1a0086b8:	f804 cb01 	strb.w	ip, [r4], #1
1a0086bc:	eba4 0c0b 	sub.w	ip, r4, fp
1a0086c0:	45e0      	cmp	r8, ip
1a0086c2:	4606      	mov	r6, r0
1a0086c4:	460f      	mov	r7, r1
1a0086c6:	f04f 0200 	mov.w	r2, #0
1a0086ca:	4bc1      	ldr	r3, [pc, #772]	; (1a0089d0 <_dtoa_r+0x860>)
1a0086cc:	d1d2      	bne.n	1a008674 <_dtoa_r+0x504>
1a0086ce:	f8dd a000 	ldr.w	sl, [sp]
1a0086d2:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0086d6:	4632      	mov	r2, r6
1a0086d8:	463b      	mov	r3, r7
1a0086da:	4630      	mov	r0, r6
1a0086dc:	4639      	mov	r1, r7
1a0086de:	f7fc f889 	bl	1a0047f4 <__adddf3>
1a0086e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0086e6:	4606      	mov	r6, r0
1a0086e8:	460f      	mov	r7, r1
1a0086ea:	f7fc fcc9 	bl	1a005080 <__aeabi_dcmpgt>
1a0086ee:	b958      	cbnz	r0, 1a008708 <_dtoa_r+0x598>
1a0086f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0086f4:	4630      	mov	r0, r6
1a0086f6:	4639      	mov	r1, r7
1a0086f8:	f7fc fc9a 	bl	1a005030 <__aeabi_dcmpeq>
1a0086fc:	2800      	cmp	r0, #0
1a0086fe:	f000 818d 	beq.w	1a008a1c <_dtoa_r+0x8ac>
1a008702:	07e9      	lsls	r1, r5, #31
1a008704:	f140 818a 	bpl.w	1a008a1c <_dtoa_r+0x8ac>
1a008708:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a00870c:	e005      	b.n	1a00871a <_dtoa_r+0x5aa>
1a00870e:	459b      	cmp	fp, r3
1a008710:	f000 8373 	beq.w	1a008dfa <_dtoa_r+0xc8a>
1a008714:	f813 5c01 	ldrb.w	r5, [r3, #-1]
1a008718:	461c      	mov	r4, r3
1a00871a:	2d39      	cmp	r5, #57	; 0x39
1a00871c:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
1a008720:	d0f5      	beq.n	1a00870e <_dtoa_r+0x59e>
1a008722:	3501      	adds	r5, #1
1a008724:	701d      	strb	r5, [r3, #0]
1a008726:	e179      	b.n	1a008a1c <_dtoa_r+0x8ac>
1a008728:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00872a:	2a00      	cmp	r2, #0
1a00872c:	d03b      	beq.n	1a0087a6 <_dtoa_r+0x636>
1a00872e:	9a02      	ldr	r2, [sp, #8]
1a008730:	2a01      	cmp	r2, #1
1a008732:	f340 820b 	ble.w	1a008b4c <_dtoa_r+0x9dc>
1a008736:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008738:	1e5f      	subs	r7, r3, #1
1a00873a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00873c:	42bb      	cmp	r3, r7
1a00873e:	f2c0 82e6 	blt.w	1a008d0e <_dtoa_r+0xb9e>
1a008742:	1bdf      	subs	r7, r3, r7
1a008744:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008746:	2b00      	cmp	r3, #0
1a008748:	f2c0 830b 	blt.w	1a008d62 <_dtoa_r+0xbf2>
1a00874c:	9a08      	ldr	r2, [sp, #32]
1a00874e:	4614      	mov	r4, r2
1a008750:	441a      	add	r2, r3
1a008752:	4498      	add	r8, r3
1a008754:	9208      	str	r2, [sp, #32]
1a008756:	2101      	movs	r1, #1
1a008758:	4648      	mov	r0, r9
1a00875a:	f000 ff95 	bl	1a009688 <__i2b>
1a00875e:	4605      	mov	r5, r0
1a008760:	e024      	b.n	1a0087ac <_dtoa_r+0x63c>
1a008762:	2301      	movs	r3, #1
1a008764:	930d      	str	r3, [sp, #52]	; 0x34
1a008766:	e5af      	b.n	1a0082c8 <_dtoa_r+0x158>
1a008768:	9a08      	ldr	r2, [sp, #32]
1a00876a:	9b06      	ldr	r3, [sp, #24]
1a00876c:	1ad2      	subs	r2, r2, r3
1a00876e:	425b      	negs	r3, r3
1a008770:	930b      	str	r3, [sp, #44]	; 0x2c
1a008772:	2300      	movs	r3, #0
1a008774:	9208      	str	r2, [sp, #32]
1a008776:	930c      	str	r3, [sp, #48]	; 0x30
1a008778:	e5b5      	b.n	1a0082e6 <_dtoa_r+0x176>
1a00877a:	f1c4 0301 	rsb	r3, r4, #1
1a00877e:	9308      	str	r3, [sp, #32]
1a008780:	f04f 0800 	mov.w	r8, #0
1a008784:	e5a7      	b.n	1a0082d6 <_dtoa_r+0x166>
1a008786:	f8dd 8018 	ldr.w	r8, [sp, #24]
1a00878a:	4640      	mov	r0, r8
1a00878c:	f7fc f97e 	bl	1a004a8c <__aeabi_i2d>
1a008790:	4632      	mov	r2, r6
1a008792:	463b      	mov	r3, r7
1a008794:	f7fc fc4c 	bl	1a005030 <__aeabi_dcmpeq>
1a008798:	2800      	cmp	r0, #0
1a00879a:	f47f ad81 	bne.w	1a0082a0 <_dtoa_r+0x130>
1a00879e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a0087a2:	9306      	str	r3, [sp, #24]
1a0087a4:	e57c      	b.n	1a0082a0 <_dtoa_r+0x130>
1a0087a6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1a0087a8:	9c08      	ldr	r4, [sp, #32]
1a0087aa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0087ac:	2c00      	cmp	r4, #0
1a0087ae:	dd0c      	ble.n	1a0087ca <_dtoa_r+0x65a>
1a0087b0:	f1b8 0f00 	cmp.w	r8, #0
1a0087b4:	dd09      	ble.n	1a0087ca <_dtoa_r+0x65a>
1a0087b6:	4544      	cmp	r4, r8
1a0087b8:	9a08      	ldr	r2, [sp, #32]
1a0087ba:	4623      	mov	r3, r4
1a0087bc:	bfa8      	it	ge
1a0087be:	4643      	movge	r3, r8
1a0087c0:	1ad2      	subs	r2, r2, r3
1a0087c2:	9208      	str	r2, [sp, #32]
1a0087c4:	1ae4      	subs	r4, r4, r3
1a0087c6:	eba8 0803 	sub.w	r8, r8, r3
1a0087ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0087cc:	b16b      	cbz	r3, 1a0087ea <_dtoa_r+0x67a>
1a0087ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a0087d0:	2a00      	cmp	r2, #0
1a0087d2:	f000 8290 	beq.w	1a008cf6 <_dtoa_r+0xb86>
1a0087d6:	1bde      	subs	r6, r3, r7
1a0087d8:	2f00      	cmp	r7, #0
1a0087da:	f040 819b 	bne.w	1a008b14 <_dtoa_r+0x9a4>
1a0087de:	4651      	mov	r1, sl
1a0087e0:	4632      	mov	r2, r6
1a0087e2:	4648      	mov	r0, r9
1a0087e4:	f001 f800 	bl	1a0097e8 <__pow5mult>
1a0087e8:	4682      	mov	sl, r0
1a0087ea:	2101      	movs	r1, #1
1a0087ec:	4648      	mov	r0, r9
1a0087ee:	f000 ff4b 	bl	1a009688 <__i2b>
1a0087f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0087f4:	4606      	mov	r6, r0
1a0087f6:	2a00      	cmp	r2, #0
1a0087f8:	f040 8125 	bne.w	1a008a46 <_dtoa_r+0x8d6>
1a0087fc:	9b02      	ldr	r3, [sp, #8]
1a0087fe:	2b01      	cmp	r3, #1
1a008800:	f340 816c 	ble.w	1a008adc <_dtoa_r+0x96c>
1a008804:	2001      	movs	r0, #1
1a008806:	4440      	add	r0, r8
1a008808:	f010 001f 	ands.w	r0, r0, #31
1a00880c:	f000 8119 	beq.w	1a008a42 <_dtoa_r+0x8d2>
1a008810:	f1c0 0320 	rsb	r3, r0, #32
1a008814:	2b04      	cmp	r3, #4
1a008816:	f340 83ac 	ble.w	1a008f72 <_dtoa_r+0xe02>
1a00881a:	f1c0 001c 	rsb	r0, r0, #28
1a00881e:	9b08      	ldr	r3, [sp, #32]
1a008820:	4403      	add	r3, r0
1a008822:	9308      	str	r3, [sp, #32]
1a008824:	4404      	add	r4, r0
1a008826:	4480      	add	r8, r0
1a008828:	9b08      	ldr	r3, [sp, #32]
1a00882a:	2b00      	cmp	r3, #0
1a00882c:	dd05      	ble.n	1a00883a <_dtoa_r+0x6ca>
1a00882e:	4651      	mov	r1, sl
1a008830:	461a      	mov	r2, r3
1a008832:	4648      	mov	r0, r9
1a008834:	f001 f828 	bl	1a009888 <__lshift>
1a008838:	4682      	mov	sl, r0
1a00883a:	f1b8 0f00 	cmp.w	r8, #0
1a00883e:	dd05      	ble.n	1a00884c <_dtoa_r+0x6dc>
1a008840:	4631      	mov	r1, r6
1a008842:	4642      	mov	r2, r8
1a008844:	4648      	mov	r0, r9
1a008846:	f001 f81f 	bl	1a009888 <__lshift>
1a00884a:	4606      	mov	r6, r0
1a00884c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00884e:	2b00      	cmp	r3, #0
1a008850:	d177      	bne.n	1a008942 <_dtoa_r+0x7d2>
1a008852:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008854:	2b00      	cmp	r3, #0
1a008856:	f340 8209 	ble.w	1a008c6c <_dtoa_r+0xafc>
1a00885a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00885c:	2b00      	cmp	r3, #0
1a00885e:	f000 8089 	beq.w	1a008974 <_dtoa_r+0x804>
1a008862:	2c00      	cmp	r4, #0
1a008864:	f300 816b 	bgt.w	1a008b3e <_dtoa_r+0x9ce>
1a008868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00886a:	2b00      	cmp	r3, #0
1a00886c:	f040 81cd 	bne.w	1a008c0a <_dtoa_r+0xa9a>
1a008870:	46a8      	mov	r8, r5
1a008872:	9a00      	ldr	r2, [sp, #0]
1a008874:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
1a008878:	f002 0201 	and.w	r2, r2, #1
1a00887c:	920a      	str	r2, [sp, #40]	; 0x28
1a00887e:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a008880:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
1a008884:	441a      	add	r2, r3
1a008886:	465f      	mov	r7, fp
1a008888:	9209      	str	r2, [sp, #36]	; 0x24
1a00888a:	46b3      	mov	fp, r6
1a00888c:	4659      	mov	r1, fp
1a00888e:	4650      	mov	r0, sl
1a008890:	f7ff fbda 	bl	1a008048 <quorem>
1a008894:	4629      	mov	r1, r5
1a008896:	4604      	mov	r4, r0
1a008898:	4650      	mov	r0, sl
1a00889a:	f001 f84b 	bl	1a009934 <__mcmp>
1a00889e:	4659      	mov	r1, fp
1a0088a0:	4606      	mov	r6, r0
1a0088a2:	4642      	mov	r2, r8
1a0088a4:	4648      	mov	r0, r9
1a0088a6:	f001 f861 	bl	1a00996c <__mdiff>
1a0088aa:	f104 0330 	add.w	r3, r4, #48	; 0x30
1a0088ae:	9300      	str	r3, [sp, #0]
1a0088b0:	68c3      	ldr	r3, [r0, #12]
1a0088b2:	4601      	mov	r1, r0
1a0088b4:	2b00      	cmp	r3, #0
1a0088b6:	f040 81d4 	bne.w	1a008c62 <_dtoa_r+0xaf2>
1a0088ba:	9008      	str	r0, [sp, #32]
1a0088bc:	4650      	mov	r0, sl
1a0088be:	f001 f839 	bl	1a009934 <__mcmp>
1a0088c2:	9a08      	ldr	r2, [sp, #32]
1a0088c4:	9007      	str	r0, [sp, #28]
1a0088c6:	4611      	mov	r1, r2
1a0088c8:	4648      	mov	r0, r9
1a0088ca:	f000 fe43 	bl	1a009554 <_Bfree>
1a0088ce:	9b07      	ldr	r3, [sp, #28]
1a0088d0:	b933      	cbnz	r3, 1a0088e0 <_dtoa_r+0x770>
1a0088d2:	9a02      	ldr	r2, [sp, #8]
1a0088d4:	b922      	cbnz	r2, 1a0088e0 <_dtoa_r+0x770>
1a0088d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0088d8:	2b00      	cmp	r3, #0
1a0088da:	f000 8319 	beq.w	1a008f10 <_dtoa_r+0xda0>
1a0088de:	9b02      	ldr	r3, [sp, #8]
1a0088e0:	2e00      	cmp	r6, #0
1a0088e2:	f2c0 821c 	blt.w	1a008d1e <_dtoa_r+0xbae>
1a0088e6:	d105      	bne.n	1a0088f4 <_dtoa_r+0x784>
1a0088e8:	9a02      	ldr	r2, [sp, #8]
1a0088ea:	b91a      	cbnz	r2, 1a0088f4 <_dtoa_r+0x784>
1a0088ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a0088ee:	2a00      	cmp	r2, #0
1a0088f0:	f000 8215 	beq.w	1a008d1e <_dtoa_r+0xbae>
1a0088f4:	2b00      	cmp	r3, #0
1a0088f6:	f107 0401 	add.w	r4, r7, #1
1a0088fa:	f300 8225 	bgt.w	1a008d48 <_dtoa_r+0xbd8>
1a0088fe:	9b00      	ldr	r3, [sp, #0]
1a008900:	703b      	strb	r3, [r7, #0]
1a008902:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008904:	42bb      	cmp	r3, r7
1a008906:	f000 8230 	beq.w	1a008d6a <_dtoa_r+0xbfa>
1a00890a:	4651      	mov	r1, sl
1a00890c:	2300      	movs	r3, #0
1a00890e:	220a      	movs	r2, #10
1a008910:	4648      	mov	r0, r9
1a008912:	f000 fe29 	bl	1a009568 <__multadd>
1a008916:	4545      	cmp	r5, r8
1a008918:	4682      	mov	sl, r0
1a00891a:	4629      	mov	r1, r5
1a00891c:	f04f 0300 	mov.w	r3, #0
1a008920:	f04f 020a 	mov.w	r2, #10
1a008924:	4648      	mov	r0, r9
1a008926:	f000 8196 	beq.w	1a008c56 <_dtoa_r+0xae6>
1a00892a:	f000 fe1d 	bl	1a009568 <__multadd>
1a00892e:	4641      	mov	r1, r8
1a008930:	4605      	mov	r5, r0
1a008932:	2300      	movs	r3, #0
1a008934:	220a      	movs	r2, #10
1a008936:	4648      	mov	r0, r9
1a008938:	f000 fe16 	bl	1a009568 <__multadd>
1a00893c:	4627      	mov	r7, r4
1a00893e:	4680      	mov	r8, r0
1a008940:	e7a4      	b.n	1a00888c <_dtoa_r+0x71c>
1a008942:	4631      	mov	r1, r6
1a008944:	4650      	mov	r0, sl
1a008946:	f000 fff5 	bl	1a009934 <__mcmp>
1a00894a:	2800      	cmp	r0, #0
1a00894c:	da81      	bge.n	1a008852 <_dtoa_r+0x6e2>
1a00894e:	9f06      	ldr	r7, [sp, #24]
1a008950:	4651      	mov	r1, sl
1a008952:	2300      	movs	r3, #0
1a008954:	220a      	movs	r2, #10
1a008956:	4648      	mov	r0, r9
1a008958:	3f01      	subs	r7, #1
1a00895a:	9706      	str	r7, [sp, #24]
1a00895c:	f000 fe04 	bl	1a009568 <__multadd>
1a008960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a008962:	4682      	mov	sl, r0
1a008964:	2b00      	cmp	r3, #0
1a008966:	f040 82eb 	bne.w	1a008f40 <_dtoa_r+0xdd0>
1a00896a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00896c:	2b00      	cmp	r3, #0
1a00896e:	f340 82f3 	ble.w	1a008f58 <_dtoa_r+0xde8>
1a008972:	9309      	str	r3, [sp, #36]	; 0x24
1a008974:	465c      	mov	r4, fp
1a008976:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a00897a:	e002      	b.n	1a008982 <_dtoa_r+0x812>
1a00897c:	f000 fdf4 	bl	1a009568 <__multadd>
1a008980:	4682      	mov	sl, r0
1a008982:	4631      	mov	r1, r6
1a008984:	4650      	mov	r0, sl
1a008986:	f7ff fb5f 	bl	1a008048 <quorem>
1a00898a:	f100 0730 	add.w	r7, r0, #48	; 0x30
1a00898e:	f804 7b01 	strb.w	r7, [r4], #1
1a008992:	eba4 030b 	sub.w	r3, r4, fp
1a008996:	4598      	cmp	r8, r3
1a008998:	f04f 020a 	mov.w	r2, #10
1a00899c:	f04f 0300 	mov.w	r3, #0
1a0089a0:	4651      	mov	r1, sl
1a0089a2:	4648      	mov	r0, r9
1a0089a4:	dcea      	bgt.n	1a00897c <_dtoa_r+0x80c>
1a0089a6:	2300      	movs	r3, #0
1a0089a8:	9700      	str	r7, [sp, #0]
1a0089aa:	9302      	str	r3, [sp, #8]
1a0089ac:	4651      	mov	r1, sl
1a0089ae:	2201      	movs	r2, #1
1a0089b0:	4648      	mov	r0, r9
1a0089b2:	f000 ff69 	bl	1a009888 <__lshift>
1a0089b6:	4631      	mov	r1, r6
1a0089b8:	4682      	mov	sl, r0
1a0089ba:	f000 ffbb 	bl	1a009934 <__mcmp>
1a0089be:	2800      	cmp	r0, #0
1a0089c0:	f814 2c01 	ldrb.w	r2, [r4, #-1]
1a0089c4:	dc14      	bgt.n	1a0089f0 <_dtoa_r+0x880>
1a0089c6:	d108      	bne.n	1a0089da <_dtoa_r+0x86a>
1a0089c8:	9b00      	ldr	r3, [sp, #0]
1a0089ca:	07db      	lsls	r3, r3, #31
1a0089cc:	d410      	bmi.n	1a0089f0 <_dtoa_r+0x880>
1a0089ce:	e004      	b.n	1a0089da <_dtoa_r+0x86a>
1a0089d0:	40240000 	.word	0x40240000
1a0089d4:	f814 2c02 	ldrb.w	r2, [r4, #-2]
1a0089d8:	461c      	mov	r4, r3
1a0089da:	2a30      	cmp	r2, #48	; 0x30
1a0089dc:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
1a0089e0:	d0f8      	beq.n	1a0089d4 <_dtoa_r+0x864>
1a0089e2:	e00b      	b.n	1a0089fc <_dtoa_r+0x88c>
1a0089e4:	459b      	cmp	fp, r3
1a0089e6:	f000 814e 	beq.w	1a008c86 <_dtoa_r+0xb16>
1a0089ea:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a0089ee:	461c      	mov	r4, r3
1a0089f0:	2a39      	cmp	r2, #57	; 0x39
1a0089f2:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
1a0089f6:	d0f5      	beq.n	1a0089e4 <_dtoa_r+0x874>
1a0089f8:	3201      	adds	r2, #1
1a0089fa:	701a      	strb	r2, [r3, #0]
1a0089fc:	4631      	mov	r1, r6
1a0089fe:	4648      	mov	r0, r9
1a008a00:	f000 fda8 	bl	1a009554 <_Bfree>
1a008a04:	b155      	cbz	r5, 1a008a1c <_dtoa_r+0x8ac>
1a008a06:	9902      	ldr	r1, [sp, #8]
1a008a08:	b121      	cbz	r1, 1a008a14 <_dtoa_r+0x8a4>
1a008a0a:	42a9      	cmp	r1, r5
1a008a0c:	d002      	beq.n	1a008a14 <_dtoa_r+0x8a4>
1a008a0e:	4648      	mov	r0, r9
1a008a10:	f000 fda0 	bl	1a009554 <_Bfree>
1a008a14:	4629      	mov	r1, r5
1a008a16:	4648      	mov	r0, r9
1a008a18:	f000 fd9c 	bl	1a009554 <_Bfree>
1a008a1c:	4651      	mov	r1, sl
1a008a1e:	4648      	mov	r0, r9
1a008a20:	f000 fd98 	bl	1a009554 <_Bfree>
1a008a24:	2200      	movs	r2, #0
1a008a26:	9b06      	ldr	r3, [sp, #24]
1a008a28:	7022      	strb	r2, [r4, #0]
1a008a2a:	9a05      	ldr	r2, [sp, #20]
1a008a2c:	3301      	adds	r3, #1
1a008a2e:	6013      	str	r3, [r2, #0]
1a008a30:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a008a32:	2b00      	cmp	r3, #0
1a008a34:	f43f abdb 	beq.w	1a0081ee <_dtoa_r+0x7e>
1a008a38:	4658      	mov	r0, fp
1a008a3a:	601c      	str	r4, [r3, #0]
1a008a3c:	b01b      	add	sp, #108	; 0x6c
1a008a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008a42:	201c      	movs	r0, #28
1a008a44:	e6eb      	b.n	1a00881e <_dtoa_r+0x6ae>
1a008a46:	4601      	mov	r1, r0
1a008a48:	4648      	mov	r0, r9
1a008a4a:	f000 fecd 	bl	1a0097e8 <__pow5mult>
1a008a4e:	9b02      	ldr	r3, [sp, #8]
1a008a50:	2b01      	cmp	r3, #1
1a008a52:	4606      	mov	r6, r0
1a008a54:	f340 80d4 	ble.w	1a008c00 <_dtoa_r+0xa90>
1a008a58:	2300      	movs	r3, #0
1a008a5a:	930c      	str	r3, [sp, #48]	; 0x30
1a008a5c:	6933      	ldr	r3, [r6, #16]
1a008a5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
1a008a62:	6918      	ldr	r0, [r3, #16]
1a008a64:	f000 fdc0 	bl	1a0095e8 <__hi0bits>
1a008a68:	f1c0 0020 	rsb	r0, r0, #32
1a008a6c:	e6cb      	b.n	1a008806 <_dtoa_r+0x696>
1a008a6e:	900d      	str	r0, [sp, #52]	; 0x34
1a008a70:	e42a      	b.n	1a0082c8 <_dtoa_r+0x158>
1a008a72:	2501      	movs	r5, #1
1a008a74:	e440      	b.n	1a0082f8 <_dtoa_r+0x188>
1a008a76:	f1c3 0820 	rsb	r8, r3, #32
1a008a7a:	9b00      	ldr	r3, [sp, #0]
1a008a7c:	fa03 f008 	lsl.w	r0, r3, r8
1a008a80:	f7ff bbd8 	b.w	1a008234 <_dtoa_r+0xc4>
1a008a84:	2300      	movs	r3, #0
1a008a86:	930a      	str	r3, [sp, #40]	; 0x28
1a008a88:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
1a008a8c:	4413      	add	r3, r2
1a008a8e:	930e      	str	r3, [sp, #56]	; 0x38
1a008a90:	3301      	adds	r3, #1
1a008a92:	2b01      	cmp	r3, #1
1a008a94:	461e      	mov	r6, r3
1a008a96:	9309      	str	r3, [sp, #36]	; 0x24
1a008a98:	bfb8      	it	lt
1a008a9a:	2601      	movlt	r6, #1
1a008a9c:	2100      	movs	r1, #0
1a008a9e:	2e17      	cmp	r6, #23
1a008aa0:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
1a008aa4:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a008aa6:	f77f ac89 	ble.w	1a0083bc <_dtoa_r+0x24c>
1a008aaa:	2201      	movs	r2, #1
1a008aac:	2304      	movs	r3, #4
1a008aae:	005b      	lsls	r3, r3, #1
1a008ab0:	f103 0014 	add.w	r0, r3, #20
1a008ab4:	42b0      	cmp	r0, r6
1a008ab6:	4611      	mov	r1, r2
1a008ab8:	f102 0201 	add.w	r2, r2, #1
1a008abc:	d9f7      	bls.n	1a008aae <_dtoa_r+0x93e>
1a008abe:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
1a008ac2:	e47b      	b.n	1a0083bc <_dtoa_r+0x24c>
1a008ac4:	2300      	movs	r3, #0
1a008ac6:	930a      	str	r3, [sp, #40]	; 0x28
1a008ac8:	9e07      	ldr	r6, [sp, #28]
1a008aca:	2e00      	cmp	r6, #0
1a008acc:	f340 80e2 	ble.w	1a008c94 <_dtoa_r+0xb24>
1a008ad0:	960e      	str	r6, [sp, #56]	; 0x38
1a008ad2:	9609      	str	r6, [sp, #36]	; 0x24
1a008ad4:	e7e2      	b.n	1a008a9c <_dtoa_r+0x92c>
1a008ad6:	2301      	movs	r3, #1
1a008ad8:	930a      	str	r3, [sp, #40]	; 0x28
1a008ada:	e7f5      	b.n	1a008ac8 <_dtoa_r+0x958>
1a008adc:	9b00      	ldr	r3, [sp, #0]
1a008ade:	2b00      	cmp	r3, #0
1a008ae0:	f47f ae90 	bne.w	1a008804 <_dtoa_r+0x694>
1a008ae4:	e9dd 1200 	ldrd	r1, r2, [sp]
1a008ae8:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a008aec:	2b00      	cmp	r3, #0
1a008aee:	f040 8192 	bne.w	1a008e16 <_dtoa_r+0xca6>
1a008af2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
1a008af6:	0d1b      	lsrs	r3, r3, #20
1a008af8:	051b      	lsls	r3, r3, #20
1a008afa:	b12b      	cbz	r3, 1a008b08 <_dtoa_r+0x998>
1a008afc:	9b08      	ldr	r3, [sp, #32]
1a008afe:	3301      	adds	r3, #1
1a008b00:	9308      	str	r3, [sp, #32]
1a008b02:	f108 0801 	add.w	r8, r8, #1
1a008b06:	2301      	movs	r3, #1
1a008b08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a008b0a:	930c      	str	r3, [sp, #48]	; 0x30
1a008b0c:	2a00      	cmp	r2, #0
1a008b0e:	f43f ae79 	beq.w	1a008804 <_dtoa_r+0x694>
1a008b12:	e7a3      	b.n	1a008a5c <_dtoa_r+0x8ec>
1a008b14:	463a      	mov	r2, r7
1a008b16:	4629      	mov	r1, r5
1a008b18:	4648      	mov	r0, r9
1a008b1a:	f000 fe65 	bl	1a0097e8 <__pow5mult>
1a008b1e:	4652      	mov	r2, sl
1a008b20:	4601      	mov	r1, r0
1a008b22:	4605      	mov	r5, r0
1a008b24:	4648      	mov	r0, r9
1a008b26:	f000 fdb9 	bl	1a00969c <__multiply>
1a008b2a:	4651      	mov	r1, sl
1a008b2c:	4607      	mov	r7, r0
1a008b2e:	4648      	mov	r0, r9
1a008b30:	f000 fd10 	bl	1a009554 <_Bfree>
1a008b34:	46ba      	mov	sl, r7
1a008b36:	2e00      	cmp	r6, #0
1a008b38:	f43f ae57 	beq.w	1a0087ea <_dtoa_r+0x67a>
1a008b3c:	e64f      	b.n	1a0087de <_dtoa_r+0x66e>
1a008b3e:	4629      	mov	r1, r5
1a008b40:	4622      	mov	r2, r4
1a008b42:	4648      	mov	r0, r9
1a008b44:	f000 fea0 	bl	1a009888 <__lshift>
1a008b48:	4605      	mov	r5, r0
1a008b4a:	e68d      	b.n	1a008868 <_dtoa_r+0x6f8>
1a008b4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a008b4e:	2a00      	cmp	r2, #0
1a008b50:	f000 815d 	beq.w	1a008e0e <_dtoa_r+0xc9e>
1a008b54:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a008b58:	9a08      	ldr	r2, [sp, #32]
1a008b5a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1a008b5c:	4614      	mov	r4, r2
1a008b5e:	441a      	add	r2, r3
1a008b60:	4498      	add	r8, r3
1a008b62:	9208      	str	r2, [sp, #32]
1a008b64:	e5f7      	b.n	1a008756 <_dtoa_r+0x5e6>
1a008b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008b68:	2b00      	cmp	r3, #0
1a008b6a:	f73f ad3e 	bgt.w	1a0085ea <_dtoa_r+0x47a>
1a008b6e:	f040 80bc 	bne.w	1a008cea <_dtoa_r+0xb7a>
1a008b72:	ec51 0b17 	vmov	r0, r1, d7
1a008b76:	2200      	movs	r2, #0
1a008b78:	4bb2      	ldr	r3, [pc, #712]	; (1a008e44 <_dtoa_r+0xcd4>)
1a008b7a:	f7fb fff1 	bl	1a004b60 <__aeabi_dmul>
1a008b7e:	e9dd 2300 	ldrd	r2, r3, [sp]
1a008b82:	f7fc fa73 	bl	1a00506c <__aeabi_dcmpge>
1a008b86:	9e09      	ldr	r6, [sp, #36]	; 0x24
1a008b88:	4635      	mov	r5, r6
1a008b8a:	2800      	cmp	r0, #0
1a008b8c:	d176      	bne.n	1a008c7c <_dtoa_r+0xb0c>
1a008b8e:	9a06      	ldr	r2, [sp, #24]
1a008b90:	2331      	movs	r3, #49	; 0x31
1a008b92:	3201      	adds	r2, #1
1a008b94:	9206      	str	r2, [sp, #24]
1a008b96:	f88b 3000 	strb.w	r3, [fp]
1a008b9a:	f10b 0401 	add.w	r4, fp, #1
1a008b9e:	4631      	mov	r1, r6
1a008ba0:	4648      	mov	r0, r9
1a008ba2:	f000 fcd7 	bl	1a009554 <_Bfree>
1a008ba6:	2d00      	cmp	r5, #0
1a008ba8:	f47f af34 	bne.w	1a008a14 <_dtoa_r+0x8a4>
1a008bac:	e736      	b.n	1a008a1c <_dtoa_r+0x8ac>
1a008bae:	f000 8142 	beq.w	1a008e36 <_dtoa_r+0xcc6>
1a008bb2:	9b06      	ldr	r3, [sp, #24]
1a008bb4:	425c      	negs	r4, r3
1a008bb6:	4ba4      	ldr	r3, [pc, #656]	; (1a008e48 <_dtoa_r+0xcd8>)
1a008bb8:	f004 020f 	and.w	r2, r4, #15
1a008bbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a008bc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a008bc8:	f7fb ffca 	bl	1a004b60 <__aeabi_dmul>
1a008bcc:	1124      	asrs	r4, r4, #4
1a008bce:	e9cd 0100 	strd	r0, r1, [sp]
1a008bd2:	f000 81c6 	beq.w	1a008f62 <_dtoa_r+0xdf2>
1a008bd6:	4d9d      	ldr	r5, [pc, #628]	; (1a008e4c <_dtoa_r+0xcdc>)
1a008bd8:	2300      	movs	r3, #0
1a008bda:	2602      	movs	r6, #2
1a008bdc:	07e7      	lsls	r7, r4, #31
1a008bde:	d505      	bpl.n	1a008bec <_dtoa_r+0xa7c>
1a008be0:	e9d5 2300 	ldrd	r2, r3, [r5]
1a008be4:	f7fb ffbc 	bl	1a004b60 <__aeabi_dmul>
1a008be8:	3601      	adds	r6, #1
1a008bea:	2301      	movs	r3, #1
1a008bec:	1064      	asrs	r4, r4, #1
1a008bee:	f105 0508 	add.w	r5, r5, #8
1a008bf2:	d1f3      	bne.n	1a008bdc <_dtoa_r+0xa6c>
1a008bf4:	2b00      	cmp	r3, #0
1a008bf6:	f43f ac27 	beq.w	1a008448 <_dtoa_r+0x2d8>
1a008bfa:	e9cd 0100 	strd	r0, r1, [sp]
1a008bfe:	e423      	b.n	1a008448 <_dtoa_r+0x2d8>
1a008c00:	9b00      	ldr	r3, [sp, #0]
1a008c02:	2b00      	cmp	r3, #0
1a008c04:	f43f af6e 	beq.w	1a008ae4 <_dtoa_r+0x974>
1a008c08:	e726      	b.n	1a008a58 <_dtoa_r+0x8e8>
1a008c0a:	6869      	ldr	r1, [r5, #4]
1a008c0c:	4648      	mov	r0, r9
1a008c0e:	f000 fc7b 	bl	1a009508 <_Balloc>
1a008c12:	692b      	ldr	r3, [r5, #16]
1a008c14:	3302      	adds	r3, #2
1a008c16:	009a      	lsls	r2, r3, #2
1a008c18:	4604      	mov	r4, r0
1a008c1a:	f105 010c 	add.w	r1, r5, #12
1a008c1e:	300c      	adds	r0, #12
1a008c20:	f7fd fa10 	bl	1a006044 <memcpy>
1a008c24:	4621      	mov	r1, r4
1a008c26:	2201      	movs	r2, #1
1a008c28:	4648      	mov	r0, r9
1a008c2a:	f000 fe2d 	bl	1a009888 <__lshift>
1a008c2e:	4680      	mov	r8, r0
1a008c30:	e61f      	b.n	1a008872 <_dtoa_r+0x702>
1a008c32:	2400      	movs	r4, #0
1a008c34:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
1a008c38:	4621      	mov	r1, r4
1a008c3a:	4648      	mov	r0, r9
1a008c3c:	f000 fc64 	bl	1a009508 <_Balloc>
1a008c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a008c44:	930e      	str	r3, [sp, #56]	; 0x38
1a008c46:	9309      	str	r3, [sp, #36]	; 0x24
1a008c48:	2301      	movs	r3, #1
1a008c4a:	4683      	mov	fp, r0
1a008c4c:	9407      	str	r4, [sp, #28]
1a008c4e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
1a008c52:	930a      	str	r3, [sp, #40]	; 0x28
1a008c54:	e4b6      	b.n	1a0085c4 <_dtoa_r+0x454>
1a008c56:	f000 fc87 	bl	1a009568 <__multadd>
1a008c5a:	4627      	mov	r7, r4
1a008c5c:	4605      	mov	r5, r0
1a008c5e:	4680      	mov	r8, r0
1a008c60:	e614      	b.n	1a00888c <_dtoa_r+0x71c>
1a008c62:	4648      	mov	r0, r9
1a008c64:	f000 fc76 	bl	1a009554 <_Bfree>
1a008c68:	2301      	movs	r3, #1
1a008c6a:	e639      	b.n	1a0088e0 <_dtoa_r+0x770>
1a008c6c:	9b02      	ldr	r3, [sp, #8]
1a008c6e:	2b02      	cmp	r3, #2
1a008c70:	f77f adf3 	ble.w	1a00885a <_dtoa_r+0x6ea>
1a008c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008c76:	2b00      	cmp	r3, #0
1a008c78:	f000 80cf 	beq.w	1a008e1a <_dtoa_r+0xcaa>
1a008c7c:	9b07      	ldr	r3, [sp, #28]
1a008c7e:	43db      	mvns	r3, r3
1a008c80:	9306      	str	r3, [sp, #24]
1a008c82:	465c      	mov	r4, fp
1a008c84:	e78b      	b.n	1a008b9e <_dtoa_r+0xa2e>
1a008c86:	9a06      	ldr	r2, [sp, #24]
1a008c88:	2331      	movs	r3, #49	; 0x31
1a008c8a:	3201      	adds	r2, #1
1a008c8c:	9206      	str	r2, [sp, #24]
1a008c8e:	f88b 3000 	strb.w	r3, [fp]
1a008c92:	e6b3      	b.n	1a0089fc <_dtoa_r+0x88c>
1a008c94:	2401      	movs	r4, #1
1a008c96:	9409      	str	r4, [sp, #36]	; 0x24
1a008c98:	9407      	str	r4, [sp, #28]
1a008c9a:	f7ff bb8b 	b.w	1a0083b4 <_dtoa_r+0x244>
1a008c9e:	4630      	mov	r0, r6
1a008ca0:	f7fb fef4 	bl	1a004a8c <__aeabi_i2d>
1a008ca4:	e9dd 2300 	ldrd	r2, r3, [sp]
1a008ca8:	f7fb ff5a 	bl	1a004b60 <__aeabi_dmul>
1a008cac:	2200      	movs	r2, #0
1a008cae:	4b68      	ldr	r3, [pc, #416]	; (1a008e50 <_dtoa_r+0xce0>)
1a008cb0:	f7fb fda0 	bl	1a0047f4 <__adddf3>
1a008cb4:	4606      	mov	r6, r0
1a008cb6:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a008cba:	2200      	movs	r2, #0
1a008cbc:	4b61      	ldr	r3, [pc, #388]	; (1a008e44 <_dtoa_r+0xcd4>)
1a008cbe:	e9dd 0100 	ldrd	r0, r1, [sp]
1a008cc2:	f7fb fd95 	bl	1a0047f0 <__aeabi_dsub>
1a008cc6:	4632      	mov	r2, r6
1a008cc8:	463b      	mov	r3, r7
1a008cca:	4604      	mov	r4, r0
1a008ccc:	460d      	mov	r5, r1
1a008cce:	f7fc f9d7 	bl	1a005080 <__aeabi_dcmpgt>
1a008cd2:	2800      	cmp	r0, #0
1a008cd4:	d14f      	bne.n	1a008d76 <_dtoa_r+0xc06>
1a008cd6:	4632      	mov	r2, r6
1a008cd8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
1a008cdc:	4620      	mov	r0, r4
1a008cde:	4629      	mov	r1, r5
1a008ce0:	f7fc f9b0 	bl	1a005044 <__aeabi_dcmplt>
1a008ce4:	2800      	cmp	r0, #0
1a008ce6:	f43f ac69 	beq.w	1a0085bc <_dtoa_r+0x44c>
1a008cea:	2600      	movs	r6, #0
1a008cec:	4635      	mov	r5, r6
1a008cee:	e7c5      	b.n	1a008c7c <_dtoa_r+0xb0c>
1a008cf0:	2301      	movs	r3, #1
1a008cf2:	930a      	str	r3, [sp, #40]	; 0x28
1a008cf4:	e6c8      	b.n	1a008a88 <_dtoa_r+0x918>
1a008cf6:	4651      	mov	r1, sl
1a008cf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a008cfa:	4648      	mov	r0, r9
1a008cfc:	f000 fd74 	bl	1a0097e8 <__pow5mult>
1a008d00:	4682      	mov	sl, r0
1a008d02:	e572      	b.n	1a0087ea <_dtoa_r+0x67a>
1a008d04:	f8dd a000 	ldr.w	sl, [sp]
1a008d08:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a008d0c:	e686      	b.n	1a008a1c <_dtoa_r+0x8ac>
1a008d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a008d10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a008d12:	1afb      	subs	r3, r7, r3
1a008d14:	441a      	add	r2, r3
1a008d16:	e9cd 720b 	strd	r7, r2, [sp, #44]	; 0x2c
1a008d1a:	2700      	movs	r7, #0
1a008d1c:	e512      	b.n	1a008744 <_dtoa_r+0x5d4>
1a008d1e:	2b00      	cmp	r3, #0
1a008d20:	9402      	str	r4, [sp, #8]
1a008d22:	465e      	mov	r6, fp
1a008d24:	f107 0401 	add.w	r4, r7, #1
1a008d28:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a008d2c:	f300 80ba 	bgt.w	1a008ea4 <_dtoa_r+0xd34>
1a008d30:	9b00      	ldr	r3, [sp, #0]
1a008d32:	9502      	str	r5, [sp, #8]
1a008d34:	703b      	strb	r3, [r7, #0]
1a008d36:	4645      	mov	r5, r8
1a008d38:	e660      	b.n	1a0089fc <_dtoa_r+0x88c>
1a008d3a:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a008d3e:	2602      	movs	r6, #2
1a008d40:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
1a008d44:	f7ff bb67 	b.w	1a008416 <_dtoa_r+0x2a6>
1a008d48:	9b00      	ldr	r3, [sp, #0]
1a008d4a:	2b39      	cmp	r3, #57	; 0x39
1a008d4c:	465e      	mov	r6, fp
1a008d4e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a008d52:	f000 80b9 	beq.w	1a008ec8 <_dtoa_r+0xd58>
1a008d56:	9b00      	ldr	r3, [sp, #0]
1a008d58:	9502      	str	r5, [sp, #8]
1a008d5a:	3301      	adds	r3, #1
1a008d5c:	703b      	strb	r3, [r7, #0]
1a008d5e:	4645      	mov	r5, r8
1a008d60:	e64c      	b.n	1a0089fc <_dtoa_r+0x88c>
1a008d62:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
1a008d66:	1a9c      	subs	r4, r3, r2
1a008d68:	e4f5      	b.n	1a008756 <_dtoa_r+0x5e6>
1a008d6a:	465e      	mov	r6, fp
1a008d6c:	9502      	str	r5, [sp, #8]
1a008d6e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a008d72:	4645      	mov	r5, r8
1a008d74:	e61a      	b.n	1a0089ac <_dtoa_r+0x83c>
1a008d76:	2600      	movs	r6, #0
1a008d78:	4635      	mov	r5, r6
1a008d7a:	e708      	b.n	1a008b8e <_dtoa_r+0xa1e>
1a008d7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
1a008d80:	e9dd 0100 	ldrd	r0, r1, [sp]
1a008d84:	f7fb feec 	bl	1a004b60 <__aeabi_dmul>
1a008d88:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a008d8a:	f88b 5000 	strb.w	r5, [fp]
1a008d8e:	2b01      	cmp	r3, #1
1a008d90:	e9cd 0100 	strd	r0, r1, [sp]
1a008d94:	d020      	beq.n	1a008dd8 <_dtoa_r+0xc68>
1a008d96:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a008d98:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
1a008d9c:	445b      	add	r3, fp
1a008d9e:	4698      	mov	r8, r3
1a008da0:	2200      	movs	r2, #0
1a008da2:	4b2c      	ldr	r3, [pc, #176]	; (1a008e54 <_dtoa_r+0xce4>)
1a008da4:	4630      	mov	r0, r6
1a008da6:	4639      	mov	r1, r7
1a008da8:	f7fb feda 	bl	1a004b60 <__aeabi_dmul>
1a008dac:	460f      	mov	r7, r1
1a008dae:	4606      	mov	r6, r0
1a008db0:	f001 fa5a 	bl	1a00a268 <__aeabi_d2iz>
1a008db4:	4605      	mov	r5, r0
1a008db6:	f7fb fe69 	bl	1a004a8c <__aeabi_i2d>
1a008dba:	3530      	adds	r5, #48	; 0x30
1a008dbc:	4602      	mov	r2, r0
1a008dbe:	460b      	mov	r3, r1
1a008dc0:	4630      	mov	r0, r6
1a008dc2:	4639      	mov	r1, r7
1a008dc4:	f7fb fd14 	bl	1a0047f0 <__aeabi_dsub>
1a008dc8:	f804 5b01 	strb.w	r5, [r4], #1
1a008dcc:	4544      	cmp	r4, r8
1a008dce:	4606      	mov	r6, r0
1a008dd0:	460f      	mov	r7, r1
1a008dd2:	d1e5      	bne.n	1a008da0 <_dtoa_r+0xc30>
1a008dd4:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
1a008dd8:	4b1f      	ldr	r3, [pc, #124]	; (1a008e58 <_dtoa_r+0xce8>)
1a008dda:	2200      	movs	r2, #0
1a008ddc:	e9dd 0100 	ldrd	r0, r1, [sp]
1a008de0:	f7fb fd08 	bl	1a0047f4 <__adddf3>
1a008de4:	4632      	mov	r2, r6
1a008de6:	463b      	mov	r3, r7
1a008de8:	f7fc f92c 	bl	1a005044 <__aeabi_dcmplt>
1a008dec:	2800      	cmp	r0, #0
1a008dee:	d070      	beq.n	1a008ed2 <_dtoa_r+0xd62>
1a008df0:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a008df2:	9306      	str	r3, [sp, #24]
1a008df4:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a008df8:	e48f      	b.n	1a00871a <_dtoa_r+0x5aa>
1a008dfa:	2330      	movs	r3, #48	; 0x30
1a008dfc:	f88b 3000 	strb.w	r3, [fp]
1a008e00:	9b06      	ldr	r3, [sp, #24]
1a008e02:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a008e06:	3301      	adds	r3, #1
1a008e08:	9306      	str	r3, [sp, #24]
1a008e0a:	465b      	mov	r3, fp
1a008e0c:	e489      	b.n	1a008722 <_dtoa_r+0x5b2>
1a008e0e:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a008e10:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a008e14:	e6a0      	b.n	1a008b58 <_dtoa_r+0x9e8>
1a008e16:	2300      	movs	r3, #0
1a008e18:	e676      	b.n	1a008b08 <_dtoa_r+0x998>
1a008e1a:	4631      	mov	r1, r6
1a008e1c:	2205      	movs	r2, #5
1a008e1e:	4648      	mov	r0, r9
1a008e20:	f000 fba2 	bl	1a009568 <__multadd>
1a008e24:	4601      	mov	r1, r0
1a008e26:	4606      	mov	r6, r0
1a008e28:	4650      	mov	r0, sl
1a008e2a:	f000 fd83 	bl	1a009934 <__mcmp>
1a008e2e:	2800      	cmp	r0, #0
1a008e30:	f73f aead 	bgt.w	1a008b8e <_dtoa_r+0xa1e>
1a008e34:	e722      	b.n	1a008c7c <_dtoa_r+0xb0c>
1a008e36:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a008e3a:	2602      	movs	r6, #2
1a008e3c:	ed8d 7b00 	vstr	d7, [sp]
1a008e40:	f7ff bb02 	b.w	1a008448 <_dtoa_r+0x2d8>
1a008e44:	40140000 	.word	0x40140000
1a008e48:	1a00aaf0 	.word	0x1a00aaf0
1a008e4c:	1a00aac8 	.word	0x1a00aac8
1a008e50:	401c0000 	.word	0x401c0000
1a008e54:	40240000 	.word	0x40240000
1a008e58:	3fe00000 	.word	0x3fe00000
1a008e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008e5e:	2b00      	cmp	r3, #0
1a008e60:	f43f af1d 	beq.w	1a008c9e <_dtoa_r+0xb2e>
1a008e64:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1a008e66:	2c00      	cmp	r4, #0
1a008e68:	f77f aba8 	ble.w	1a0085bc <_dtoa_r+0x44c>
1a008e6c:	2200      	movs	r2, #0
1a008e6e:	4b45      	ldr	r3, [pc, #276]	; (1a008f84 <_dtoa_r+0xe14>)
1a008e70:	e9dd 0100 	ldrd	r0, r1, [sp]
1a008e74:	f7fb fe74 	bl	1a004b60 <__aeabi_dmul>
1a008e78:	e9cd 0100 	strd	r0, r1, [sp]
1a008e7c:	1c70      	adds	r0, r6, #1
1a008e7e:	f7fb fe05 	bl	1a004a8c <__aeabi_i2d>
1a008e82:	e9dd 2300 	ldrd	r2, r3, [sp]
1a008e86:	f7fb fe6b 	bl	1a004b60 <__aeabi_dmul>
1a008e8a:	4b3f      	ldr	r3, [pc, #252]	; (1a008f88 <_dtoa_r+0xe18>)
1a008e8c:	2200      	movs	r2, #0
1a008e8e:	f7fb fcb1 	bl	1a0047f4 <__adddf3>
1a008e92:	9b06      	ldr	r3, [sp, #24]
1a008e94:	9412      	str	r4, [sp, #72]	; 0x48
1a008e96:	3b01      	subs	r3, #1
1a008e98:	4606      	mov	r6, r0
1a008e9a:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a008e9e:	9316      	str	r3, [sp, #88]	; 0x58
1a008ea0:	f7ff baf3 	b.w	1a00848a <_dtoa_r+0x31a>
1a008ea4:	4651      	mov	r1, sl
1a008ea6:	2201      	movs	r2, #1
1a008ea8:	4648      	mov	r0, r9
1a008eaa:	f000 fced 	bl	1a009888 <__lshift>
1a008eae:	4631      	mov	r1, r6
1a008eb0:	4682      	mov	sl, r0
1a008eb2:	f000 fd3f 	bl	1a009934 <__mcmp>
1a008eb6:	2800      	cmp	r0, #0
1a008eb8:	dd3b      	ble.n	1a008f32 <_dtoa_r+0xdc2>
1a008eba:	9b00      	ldr	r3, [sp, #0]
1a008ebc:	2b39      	cmp	r3, #57	; 0x39
1a008ebe:	d003      	beq.n	1a008ec8 <_dtoa_r+0xd58>
1a008ec0:	9b02      	ldr	r3, [sp, #8]
1a008ec2:	3331      	adds	r3, #49	; 0x31
1a008ec4:	9300      	str	r3, [sp, #0]
1a008ec6:	e733      	b.n	1a008d30 <_dtoa_r+0xbc0>
1a008ec8:	2239      	movs	r2, #57	; 0x39
1a008eca:	9502      	str	r5, [sp, #8]
1a008ecc:	703a      	strb	r2, [r7, #0]
1a008ece:	4645      	mov	r5, r8
1a008ed0:	e58e      	b.n	1a0089f0 <_dtoa_r+0x880>
1a008ed2:	e9dd 2300 	ldrd	r2, r3, [sp]
1a008ed6:	2000      	movs	r0, #0
1a008ed8:	492c      	ldr	r1, [pc, #176]	; (1a008f8c <_dtoa_r+0xe1c>)
1a008eda:	f7fb fc89 	bl	1a0047f0 <__aeabi_dsub>
1a008ede:	4632      	mov	r2, r6
1a008ee0:	463b      	mov	r3, r7
1a008ee2:	f7fc f8cd 	bl	1a005080 <__aeabi_dcmpgt>
1a008ee6:	b910      	cbnz	r0, 1a008eee <_dtoa_r+0xd7e>
1a008ee8:	f7ff bb68 	b.w	1a0085bc <_dtoa_r+0x44c>
1a008eec:	4614      	mov	r4, r2
1a008eee:	f814 3c01 	ldrb.w	r3, [r4, #-1]
1a008ef2:	2b30      	cmp	r3, #48	; 0x30
1a008ef4:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a008ef8:	d0f8      	beq.n	1a008eec <_dtoa_r+0xd7c>
1a008efa:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a008efc:	9306      	str	r3, [sp, #24]
1a008efe:	e58d      	b.n	1a008a1c <_dtoa_r+0x8ac>
1a008f00:	46d9      	mov	r9, fp
1a008f02:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a008f06:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
1a008f0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a008f0c:	9306      	str	r3, [sp, #24]
1a008f0e:	e404      	b.n	1a00871a <_dtoa_r+0x5aa>
1a008f10:	9b00      	ldr	r3, [sp, #0]
1a008f12:	2b39      	cmp	r3, #57	; 0x39
1a008f14:	4621      	mov	r1, r4
1a008f16:	4632      	mov	r2, r6
1a008f18:	f107 0401 	add.w	r4, r7, #1
1a008f1c:	465e      	mov	r6, fp
1a008f1e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a008f22:	d0d1      	beq.n	1a008ec8 <_dtoa_r+0xd58>
1a008f24:	2a00      	cmp	r2, #0
1a008f26:	f77f af03 	ble.w	1a008d30 <_dtoa_r+0xbc0>
1a008f2a:	460b      	mov	r3, r1
1a008f2c:	3331      	adds	r3, #49	; 0x31
1a008f2e:	9300      	str	r3, [sp, #0]
1a008f30:	e6fe      	b.n	1a008d30 <_dtoa_r+0xbc0>
1a008f32:	f47f aefd 	bne.w	1a008d30 <_dtoa_r+0xbc0>
1a008f36:	9b00      	ldr	r3, [sp, #0]
1a008f38:	07da      	lsls	r2, r3, #31
1a008f3a:	f57f aef9 	bpl.w	1a008d30 <_dtoa_r+0xbc0>
1a008f3e:	e7bc      	b.n	1a008eba <_dtoa_r+0xd4a>
1a008f40:	4629      	mov	r1, r5
1a008f42:	2300      	movs	r3, #0
1a008f44:	220a      	movs	r2, #10
1a008f46:	4648      	mov	r0, r9
1a008f48:	f000 fb0e 	bl	1a009568 <__multadd>
1a008f4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008f4e:	2b00      	cmp	r3, #0
1a008f50:	4605      	mov	r5, r0
1a008f52:	dd09      	ble.n	1a008f68 <_dtoa_r+0xdf8>
1a008f54:	9309      	str	r3, [sp, #36]	; 0x24
1a008f56:	e484      	b.n	1a008862 <_dtoa_r+0x6f2>
1a008f58:	9b02      	ldr	r3, [sp, #8]
1a008f5a:	2b02      	cmp	r3, #2
1a008f5c:	dc0e      	bgt.n	1a008f7c <_dtoa_r+0xe0c>
1a008f5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008f60:	e507      	b.n	1a008972 <_dtoa_r+0x802>
1a008f62:	2602      	movs	r6, #2
1a008f64:	f7ff ba70 	b.w	1a008448 <_dtoa_r+0x2d8>
1a008f68:	9b02      	ldr	r3, [sp, #8]
1a008f6a:	2b02      	cmp	r3, #2
1a008f6c:	dc06      	bgt.n	1a008f7c <_dtoa_r+0xe0c>
1a008f6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008f70:	e7f0      	b.n	1a008f54 <_dtoa_r+0xde4>
1a008f72:	f43f ac59 	beq.w	1a008828 <_dtoa_r+0x6b8>
1a008f76:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a008f7a:	e450      	b.n	1a00881e <_dtoa_r+0x6ae>
1a008f7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008f7e:	9309      	str	r3, [sp, #36]	; 0x24
1a008f80:	e678      	b.n	1a008c74 <_dtoa_r+0xb04>
1a008f82:	bf00      	nop
1a008f84:	40240000 	.word	0x40240000
1a008f88:	401c0000 	.word	0x401c0000
1a008f8c:	3fe00000 	.word	0x3fe00000

1a008f90 <__sfvwrite_r>:
1a008f90:	6893      	ldr	r3, [r2, #8]
1a008f92:	2b00      	cmp	r3, #0
1a008f94:	f000 80e4 	beq.w	1a009160 <__sfvwrite_r+0x1d0>
1a008f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a008f9c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a008fa0:	b29b      	uxth	r3, r3
1a008fa2:	460c      	mov	r4, r1
1a008fa4:	0719      	lsls	r1, r3, #28
1a008fa6:	b083      	sub	sp, #12
1a008fa8:	4682      	mov	sl, r0
1a008faa:	4690      	mov	r8, r2
1a008fac:	d535      	bpl.n	1a00901a <__sfvwrite_r+0x8a>
1a008fae:	6922      	ldr	r2, [r4, #16]
1a008fb0:	b39a      	cbz	r2, 1a00901a <__sfvwrite_r+0x8a>
1a008fb2:	f013 0202 	ands.w	r2, r3, #2
1a008fb6:	f8d8 6000 	ldr.w	r6, [r8]
1a008fba:	d03d      	beq.n	1a009038 <__sfvwrite_r+0xa8>
1a008fbc:	2700      	movs	r7, #0
1a008fbe:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a008fc2:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a008fc6:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 1a009288 <__sfvwrite_r+0x2f8>
1a008fca:	463d      	mov	r5, r7
1a008fcc:	454d      	cmp	r5, r9
1a008fce:	462b      	mov	r3, r5
1a008fd0:	463a      	mov	r2, r7
1a008fd2:	bf28      	it	cs
1a008fd4:	464b      	movcs	r3, r9
1a008fd6:	4661      	mov	r1, ip
1a008fd8:	4650      	mov	r0, sl
1a008fda:	b1d5      	cbz	r5, 1a009012 <__sfvwrite_r+0x82>
1a008fdc:	47d8      	blx	fp
1a008fde:	2800      	cmp	r0, #0
1a008fe0:	f340 80c6 	ble.w	1a009170 <__sfvwrite_r+0x1e0>
1a008fe4:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a008fe8:	1a1b      	subs	r3, r3, r0
1a008fea:	4407      	add	r7, r0
1a008fec:	1a2d      	subs	r5, r5, r0
1a008fee:	f8c8 3008 	str.w	r3, [r8, #8]
1a008ff2:	2b00      	cmp	r3, #0
1a008ff4:	f000 80b0 	beq.w	1a009158 <__sfvwrite_r+0x1c8>
1a008ff8:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a008ffc:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a009000:	454d      	cmp	r5, r9
1a009002:	462b      	mov	r3, r5
1a009004:	463a      	mov	r2, r7
1a009006:	bf28      	it	cs
1a009008:	464b      	movcs	r3, r9
1a00900a:	4661      	mov	r1, ip
1a00900c:	4650      	mov	r0, sl
1a00900e:	2d00      	cmp	r5, #0
1a009010:	d1e4      	bne.n	1a008fdc <__sfvwrite_r+0x4c>
1a009012:	e9d6 7500 	ldrd	r7, r5, [r6]
1a009016:	3608      	adds	r6, #8
1a009018:	e7d8      	b.n	1a008fcc <__sfvwrite_r+0x3c>
1a00901a:	4621      	mov	r1, r4
1a00901c:	4650      	mov	r0, sl
1a00901e:	f7fe ffad 	bl	1a007f7c <__swsetup_r>
1a009022:	2800      	cmp	r0, #0
1a009024:	f040 812a 	bne.w	1a00927c <__sfvwrite_r+0x2ec>
1a009028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00902c:	f8d8 6000 	ldr.w	r6, [r8]
1a009030:	b29b      	uxth	r3, r3
1a009032:	f013 0202 	ands.w	r2, r3, #2
1a009036:	d1c1      	bne.n	1a008fbc <__sfvwrite_r+0x2c>
1a009038:	f013 0901 	ands.w	r9, r3, #1
1a00903c:	d15d      	bne.n	1a0090fa <__sfvwrite_r+0x16a>
1a00903e:	68a7      	ldr	r7, [r4, #8]
1a009040:	6820      	ldr	r0, [r4, #0]
1a009042:	464d      	mov	r5, r9
1a009044:	2d00      	cmp	r5, #0
1a009046:	d054      	beq.n	1a0090f2 <__sfvwrite_r+0x162>
1a009048:	059a      	lsls	r2, r3, #22
1a00904a:	f140 809b 	bpl.w	1a009184 <__sfvwrite_r+0x1f4>
1a00904e:	42af      	cmp	r7, r5
1a009050:	46bb      	mov	fp, r7
1a009052:	f200 80d8 	bhi.w	1a009206 <__sfvwrite_r+0x276>
1a009056:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a00905a:	d02f      	beq.n	1a0090bc <__sfvwrite_r+0x12c>
1a00905c:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
1a009060:	eb07 0747 	add.w	r7, r7, r7, lsl #1
1a009064:	eba0 0b01 	sub.w	fp, r0, r1
1a009068:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
1a00906c:	1c68      	adds	r0, r5, #1
1a00906e:	107f      	asrs	r7, r7, #1
1a009070:	4458      	add	r0, fp
1a009072:	42b8      	cmp	r0, r7
1a009074:	463a      	mov	r2, r7
1a009076:	bf84      	itt	hi
1a009078:	4607      	movhi	r7, r0
1a00907a:	463a      	movhi	r2, r7
1a00907c:	055b      	lsls	r3, r3, #21
1a00907e:	f140 80d3 	bpl.w	1a009228 <__sfvwrite_r+0x298>
1a009082:	4611      	mov	r1, r2
1a009084:	4650      	mov	r0, sl
1a009086:	f7fc fd23 	bl	1a005ad0 <_malloc_r>
1a00908a:	2800      	cmp	r0, #0
1a00908c:	f000 80f0 	beq.w	1a009270 <__sfvwrite_r+0x2e0>
1a009090:	465a      	mov	r2, fp
1a009092:	6921      	ldr	r1, [r4, #16]
1a009094:	9001      	str	r0, [sp, #4]
1a009096:	f7fc ffd5 	bl	1a006044 <memcpy>
1a00909a:	89a2      	ldrh	r2, [r4, #12]
1a00909c:	9b01      	ldr	r3, [sp, #4]
1a00909e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a0090a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0090a6:	81a2      	strh	r2, [r4, #12]
1a0090a8:	eba7 020b 	sub.w	r2, r7, fp
1a0090ac:	eb03 000b 	add.w	r0, r3, fp
1a0090b0:	6167      	str	r7, [r4, #20]
1a0090b2:	6123      	str	r3, [r4, #16]
1a0090b4:	6020      	str	r0, [r4, #0]
1a0090b6:	60a2      	str	r2, [r4, #8]
1a0090b8:	462f      	mov	r7, r5
1a0090ba:	46ab      	mov	fp, r5
1a0090bc:	465a      	mov	r2, fp
1a0090be:	4649      	mov	r1, r9
1a0090c0:	f000 f9be 	bl	1a009440 <memmove>
1a0090c4:	68a2      	ldr	r2, [r4, #8]
1a0090c6:	6823      	ldr	r3, [r4, #0]
1a0090c8:	1bd2      	subs	r2, r2, r7
1a0090ca:	445b      	add	r3, fp
1a0090cc:	462f      	mov	r7, r5
1a0090ce:	60a2      	str	r2, [r4, #8]
1a0090d0:	6023      	str	r3, [r4, #0]
1a0090d2:	2500      	movs	r5, #0
1a0090d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a0090d8:	1bdb      	subs	r3, r3, r7
1a0090da:	44b9      	add	r9, r7
1a0090dc:	f8c8 3008 	str.w	r3, [r8, #8]
1a0090e0:	2b00      	cmp	r3, #0
1a0090e2:	d039      	beq.n	1a009158 <__sfvwrite_r+0x1c8>
1a0090e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0090e8:	68a7      	ldr	r7, [r4, #8]
1a0090ea:	6820      	ldr	r0, [r4, #0]
1a0090ec:	b29b      	uxth	r3, r3
1a0090ee:	2d00      	cmp	r5, #0
1a0090f0:	d1aa      	bne.n	1a009048 <__sfvwrite_r+0xb8>
1a0090f2:	e9d6 9500 	ldrd	r9, r5, [r6]
1a0090f6:	3608      	adds	r6, #8
1a0090f8:	e7a4      	b.n	1a009044 <__sfvwrite_r+0xb4>
1a0090fa:	4633      	mov	r3, r6
1a0090fc:	4691      	mov	r9, r2
1a0090fe:	4610      	mov	r0, r2
1a009100:	4617      	mov	r7, r2
1a009102:	464e      	mov	r6, r9
1a009104:	469b      	mov	fp, r3
1a009106:	2f00      	cmp	r7, #0
1a009108:	d06b      	beq.n	1a0091e2 <__sfvwrite_r+0x252>
1a00910a:	2800      	cmp	r0, #0
1a00910c:	d071      	beq.n	1a0091f2 <__sfvwrite_r+0x262>
1a00910e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
1a009112:	6820      	ldr	r0, [r4, #0]
1a009114:	45b9      	cmp	r9, r7
1a009116:	464b      	mov	r3, r9
1a009118:	bf28      	it	cs
1a00911a:	463b      	movcs	r3, r7
1a00911c:	4288      	cmp	r0, r1
1a00911e:	d903      	bls.n	1a009128 <__sfvwrite_r+0x198>
1a009120:	68a5      	ldr	r5, [r4, #8]
1a009122:	4415      	add	r5, r2
1a009124:	42ab      	cmp	r3, r5
1a009126:	dc71      	bgt.n	1a00920c <__sfvwrite_r+0x27c>
1a009128:	429a      	cmp	r2, r3
1a00912a:	f300 8093 	bgt.w	1a009254 <__sfvwrite_r+0x2c4>
1a00912e:	4613      	mov	r3, r2
1a009130:	6a65      	ldr	r5, [r4, #36]	; 0x24
1a009132:	69e1      	ldr	r1, [r4, #28]
1a009134:	4632      	mov	r2, r6
1a009136:	4650      	mov	r0, sl
1a009138:	47a8      	blx	r5
1a00913a:	1e05      	subs	r5, r0, #0
1a00913c:	dd18      	ble.n	1a009170 <__sfvwrite_r+0x1e0>
1a00913e:	ebb9 0905 	subs.w	r9, r9, r5
1a009142:	d00f      	beq.n	1a009164 <__sfvwrite_r+0x1d4>
1a009144:	2001      	movs	r0, #1
1a009146:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00914a:	1b5b      	subs	r3, r3, r5
1a00914c:	442e      	add	r6, r5
1a00914e:	1b7f      	subs	r7, r7, r5
1a009150:	f8c8 3008 	str.w	r3, [r8, #8]
1a009154:	2b00      	cmp	r3, #0
1a009156:	d1d6      	bne.n	1a009106 <__sfvwrite_r+0x176>
1a009158:	2000      	movs	r0, #0
1a00915a:	b003      	add	sp, #12
1a00915c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009160:	2000      	movs	r0, #0
1a009162:	4770      	bx	lr
1a009164:	4621      	mov	r1, r4
1a009166:	4650      	mov	r0, sl
1a009168:	f7fc fa76 	bl	1a005658 <_fflush_r>
1a00916c:	2800      	cmp	r0, #0
1a00916e:	d0ea      	beq.n	1a009146 <__sfvwrite_r+0x1b6>
1a009170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a009178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00917c:	81a3      	strh	r3, [r4, #12]
1a00917e:	b003      	add	sp, #12
1a009180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009184:	6923      	ldr	r3, [r4, #16]
1a009186:	4283      	cmp	r3, r0
1a009188:	d315      	bcc.n	1a0091b6 <__sfvwrite_r+0x226>
1a00918a:	6961      	ldr	r1, [r4, #20]
1a00918c:	42a9      	cmp	r1, r5
1a00918e:	d812      	bhi.n	1a0091b6 <__sfvwrite_r+0x226>
1a009190:	4b3c      	ldr	r3, [pc, #240]	; (1a009284 <__sfvwrite_r+0x2f4>)
1a009192:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a009194:	429d      	cmp	r5, r3
1a009196:	bf94      	ite	ls
1a009198:	462b      	movls	r3, r5
1a00919a:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
1a00919e:	464a      	mov	r2, r9
1a0091a0:	fb93 f3f1 	sdiv	r3, r3, r1
1a0091a4:	4650      	mov	r0, sl
1a0091a6:	fb01 f303 	mul.w	r3, r1, r3
1a0091aa:	69e1      	ldr	r1, [r4, #28]
1a0091ac:	47b8      	blx	r7
1a0091ae:	1e07      	subs	r7, r0, #0
1a0091b0:	ddde      	ble.n	1a009170 <__sfvwrite_r+0x1e0>
1a0091b2:	1bed      	subs	r5, r5, r7
1a0091b4:	e78e      	b.n	1a0090d4 <__sfvwrite_r+0x144>
1a0091b6:	42af      	cmp	r7, r5
1a0091b8:	bf28      	it	cs
1a0091ba:	462f      	movcs	r7, r5
1a0091bc:	463a      	mov	r2, r7
1a0091be:	4649      	mov	r1, r9
1a0091c0:	f000 f93e 	bl	1a009440 <memmove>
1a0091c4:	68a3      	ldr	r3, [r4, #8]
1a0091c6:	6822      	ldr	r2, [r4, #0]
1a0091c8:	1bdb      	subs	r3, r3, r7
1a0091ca:	443a      	add	r2, r7
1a0091cc:	60a3      	str	r3, [r4, #8]
1a0091ce:	6022      	str	r2, [r4, #0]
1a0091d0:	2b00      	cmp	r3, #0
1a0091d2:	d1ee      	bne.n	1a0091b2 <__sfvwrite_r+0x222>
1a0091d4:	4621      	mov	r1, r4
1a0091d6:	4650      	mov	r0, sl
1a0091d8:	f7fc fa3e 	bl	1a005658 <_fflush_r>
1a0091dc:	2800      	cmp	r0, #0
1a0091de:	d0e8      	beq.n	1a0091b2 <__sfvwrite_r+0x222>
1a0091e0:	e7c6      	b.n	1a009170 <__sfvwrite_r+0x1e0>
1a0091e2:	f10b 0308 	add.w	r3, fp, #8
1a0091e6:	e953 6702 	ldrd	r6, r7, [r3, #-8]
1a0091ea:	469b      	mov	fp, r3
1a0091ec:	3308      	adds	r3, #8
1a0091ee:	2f00      	cmp	r7, #0
1a0091f0:	d0f9      	beq.n	1a0091e6 <__sfvwrite_r+0x256>
1a0091f2:	463a      	mov	r2, r7
1a0091f4:	210a      	movs	r1, #10
1a0091f6:	4630      	mov	r0, r6
1a0091f8:	f000 f8d2 	bl	1a0093a0 <memchr>
1a0091fc:	b338      	cbz	r0, 1a00924e <__sfvwrite_r+0x2be>
1a0091fe:	3001      	adds	r0, #1
1a009200:	eba0 0906 	sub.w	r9, r0, r6
1a009204:	e783      	b.n	1a00910e <__sfvwrite_r+0x17e>
1a009206:	462f      	mov	r7, r5
1a009208:	46ab      	mov	fp, r5
1a00920a:	e757      	b.n	1a0090bc <__sfvwrite_r+0x12c>
1a00920c:	4631      	mov	r1, r6
1a00920e:	462a      	mov	r2, r5
1a009210:	f000 f916 	bl	1a009440 <memmove>
1a009214:	6823      	ldr	r3, [r4, #0]
1a009216:	442b      	add	r3, r5
1a009218:	6023      	str	r3, [r4, #0]
1a00921a:	4621      	mov	r1, r4
1a00921c:	4650      	mov	r0, sl
1a00921e:	f7fc fa1b 	bl	1a005658 <_fflush_r>
1a009222:	2800      	cmp	r0, #0
1a009224:	d08b      	beq.n	1a00913e <__sfvwrite_r+0x1ae>
1a009226:	e7a3      	b.n	1a009170 <__sfvwrite_r+0x1e0>
1a009228:	4650      	mov	r0, sl
1a00922a:	f000 fc77 	bl	1a009b1c <_realloc_r>
1a00922e:	4603      	mov	r3, r0
1a009230:	2800      	cmp	r0, #0
1a009232:	f47f af39 	bne.w	1a0090a8 <__sfvwrite_r+0x118>
1a009236:	6921      	ldr	r1, [r4, #16]
1a009238:	4650      	mov	r0, sl
1a00923a:	f7fc faf1 	bl	1a005820 <_free_r>
1a00923e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009242:	220c      	movs	r2, #12
1a009244:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a009248:	f8ca 2000 	str.w	r2, [sl]
1a00924c:	e792      	b.n	1a009174 <__sfvwrite_r+0x1e4>
1a00924e:	f107 0901 	add.w	r9, r7, #1
1a009252:	e75c      	b.n	1a00910e <__sfvwrite_r+0x17e>
1a009254:	461a      	mov	r2, r3
1a009256:	4631      	mov	r1, r6
1a009258:	9301      	str	r3, [sp, #4]
1a00925a:	f000 f8f1 	bl	1a009440 <memmove>
1a00925e:	9b01      	ldr	r3, [sp, #4]
1a009260:	68a1      	ldr	r1, [r4, #8]
1a009262:	6822      	ldr	r2, [r4, #0]
1a009264:	1ac9      	subs	r1, r1, r3
1a009266:	441a      	add	r2, r3
1a009268:	60a1      	str	r1, [r4, #8]
1a00926a:	6022      	str	r2, [r4, #0]
1a00926c:	461d      	mov	r5, r3
1a00926e:	e766      	b.n	1a00913e <__sfvwrite_r+0x1ae>
1a009270:	230c      	movs	r3, #12
1a009272:	f8ca 3000 	str.w	r3, [sl]
1a009276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00927a:	e77b      	b.n	1a009174 <__sfvwrite_r+0x1e4>
1a00927c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a009280:	e76b      	b.n	1a00915a <__sfvwrite_r+0x1ca>
1a009282:	bf00      	nop
1a009284:	7ffffffe 	.word	0x7ffffffe
1a009288:	7ffffc00 	.word	0x7ffffc00

1a00928c <_localeconv_r>:
1a00928c:	4a04      	ldr	r2, [pc, #16]	; (1a0092a0 <_localeconv_r+0x14>)
1a00928e:	4b05      	ldr	r3, [pc, #20]	; (1a0092a4 <_localeconv_r+0x18>)
1a009290:	6812      	ldr	r2, [r2, #0]
1a009292:	6b50      	ldr	r0, [r2, #52]	; 0x34
1a009294:	2800      	cmp	r0, #0
1a009296:	bf08      	it	eq
1a009298:	4618      	moveq	r0, r3
1a00929a:	30f0      	adds	r0, #240	; 0xf0
1a00929c:	4770      	bx	lr
1a00929e:	bf00      	nop
1a0092a0:	100000cc 	.word	0x100000cc
1a0092a4:	100004f8 	.word	0x100004f8

1a0092a8 <__swhatbuf_r>:
1a0092a8:	b570      	push	{r4, r5, r6, lr}
1a0092aa:	460c      	mov	r4, r1
1a0092ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0092b0:	2900      	cmp	r1, #0
1a0092b2:	b096      	sub	sp, #88	; 0x58
1a0092b4:	4615      	mov	r5, r2
1a0092b6:	461e      	mov	r6, r3
1a0092b8:	da0f      	bge.n	1a0092da <__swhatbuf_r+0x32>
1a0092ba:	89a2      	ldrh	r2, [r4, #12]
1a0092bc:	2300      	movs	r3, #0
1a0092be:	f012 0080 	ands.w	r0, r2, #128	; 0x80
1a0092c2:	6033      	str	r3, [r6, #0]
1a0092c4:	d104      	bne.n	1a0092d0 <__swhatbuf_r+0x28>
1a0092c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0092ca:	602b      	str	r3, [r5, #0]
1a0092cc:	b016      	add	sp, #88	; 0x58
1a0092ce:	bd70      	pop	{r4, r5, r6, pc}
1a0092d0:	2240      	movs	r2, #64	; 0x40
1a0092d2:	4618      	mov	r0, r3
1a0092d4:	602a      	str	r2, [r5, #0]
1a0092d6:	b016      	add	sp, #88	; 0x58
1a0092d8:	bd70      	pop	{r4, r5, r6, pc}
1a0092da:	466a      	mov	r2, sp
1a0092dc:	f7f7 ffb1 	bl	1a001242 <_fstat_r>
1a0092e0:	2800      	cmp	r0, #0
1a0092e2:	dbea      	blt.n	1a0092ba <__swhatbuf_r+0x12>
1a0092e4:	9b01      	ldr	r3, [sp, #4]
1a0092e6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
1a0092ea:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
1a0092ee:	fab3 f383 	clz	r3, r3
1a0092f2:	095b      	lsrs	r3, r3, #5
1a0092f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
1a0092f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a0092fc:	6033      	str	r3, [r6, #0]
1a0092fe:	602a      	str	r2, [r5, #0]
1a009300:	b016      	add	sp, #88	; 0x58
1a009302:	bd70      	pop	{r4, r5, r6, pc}

1a009304 <__smakebuf_r>:
1a009304:	898a      	ldrh	r2, [r1, #12]
1a009306:	0792      	lsls	r2, r2, #30
1a009308:	460b      	mov	r3, r1
1a00930a:	d506      	bpl.n	1a00931a <__smakebuf_r+0x16>
1a00930c:	f101 0243 	add.w	r2, r1, #67	; 0x43
1a009310:	2101      	movs	r1, #1
1a009312:	601a      	str	r2, [r3, #0]
1a009314:	e9c3 2104 	strd	r2, r1, [r3, #16]
1a009318:	4770      	bx	lr
1a00931a:	b570      	push	{r4, r5, r6, lr}
1a00931c:	b082      	sub	sp, #8
1a00931e:	ab01      	add	r3, sp, #4
1a009320:	466a      	mov	r2, sp
1a009322:	460c      	mov	r4, r1
1a009324:	4605      	mov	r5, r0
1a009326:	f7ff ffbf 	bl	1a0092a8 <__swhatbuf_r>
1a00932a:	9900      	ldr	r1, [sp, #0]
1a00932c:	4606      	mov	r6, r0
1a00932e:	4628      	mov	r0, r5
1a009330:	f7fc fbce 	bl	1a005ad0 <_malloc_r>
1a009334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009338:	b1d8      	cbz	r0, 1a009372 <__smakebuf_r+0x6e>
1a00933a:	4916      	ldr	r1, [pc, #88]	; (1a009394 <__smakebuf_r+0x90>)
1a00933c:	63e9      	str	r1, [r5, #60]	; 0x3c
1a00933e:	9a01      	ldr	r2, [sp, #4]
1a009340:	9900      	ldr	r1, [sp, #0]
1a009342:	6020      	str	r0, [r4, #0]
1a009344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a009348:	81a3      	strh	r3, [r4, #12]
1a00934a:	e9c4 0104 	strd	r0, r1, [r4, #16]
1a00934e:	b91a      	cbnz	r2, 1a009358 <__smakebuf_r+0x54>
1a009350:	4333      	orrs	r3, r6
1a009352:	81a3      	strh	r3, [r4, #12]
1a009354:	b002      	add	sp, #8
1a009356:	bd70      	pop	{r4, r5, r6, pc}
1a009358:	4628      	mov	r0, r5
1a00935a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a00935e:	f7f7 ff75 	bl	1a00124c <_isatty_r>
1a009362:	b1a0      	cbz	r0, 1a00938e <__smakebuf_r+0x8a>
1a009364:	89a3      	ldrh	r3, [r4, #12]
1a009366:	f023 0303 	bic.w	r3, r3, #3
1a00936a:	f043 0301 	orr.w	r3, r3, #1
1a00936e:	b21b      	sxth	r3, r3
1a009370:	e7ee      	b.n	1a009350 <__smakebuf_r+0x4c>
1a009372:	059a      	lsls	r2, r3, #22
1a009374:	d4ee      	bmi.n	1a009354 <__smakebuf_r+0x50>
1a009376:	f023 0303 	bic.w	r3, r3, #3
1a00937a:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a00937e:	f043 0302 	orr.w	r3, r3, #2
1a009382:	2101      	movs	r1, #1
1a009384:	81a3      	strh	r3, [r4, #12]
1a009386:	6022      	str	r2, [r4, #0]
1a009388:	e9c4 2104 	strd	r2, r1, [r4, #16]
1a00938c:	e7e2      	b.n	1a009354 <__smakebuf_r+0x50>
1a00938e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009392:	e7dd      	b.n	1a009350 <__smakebuf_r+0x4c>
1a009394:	1a005705 	.word	0x1a005705
1a009398:	ffffffff 	.word	0xffffffff
1a00939c:	ffffffff 	.word	0xffffffff

1a0093a0 <memchr>:
1a0093a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0093a4:	2a10      	cmp	r2, #16
1a0093a6:	db2b      	blt.n	1a009400 <memchr+0x60>
1a0093a8:	f010 0f07 	tst.w	r0, #7
1a0093ac:	d008      	beq.n	1a0093c0 <memchr+0x20>
1a0093ae:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0093b2:	3a01      	subs	r2, #1
1a0093b4:	428b      	cmp	r3, r1
1a0093b6:	d02d      	beq.n	1a009414 <memchr+0x74>
1a0093b8:	f010 0f07 	tst.w	r0, #7
1a0093bc:	b342      	cbz	r2, 1a009410 <memchr+0x70>
1a0093be:	d1f6      	bne.n	1a0093ae <memchr+0xe>
1a0093c0:	b4f0      	push	{r4, r5, r6, r7}
1a0093c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a0093c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a0093ca:	f022 0407 	bic.w	r4, r2, #7
1a0093ce:	f07f 0700 	mvns.w	r7, #0
1a0093d2:	2300      	movs	r3, #0
1a0093d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a0093d8:	3c08      	subs	r4, #8
1a0093da:	ea85 0501 	eor.w	r5, r5, r1
1a0093de:	ea86 0601 	eor.w	r6, r6, r1
1a0093e2:	fa85 f547 	uadd8	r5, r5, r7
1a0093e6:	faa3 f587 	sel	r5, r3, r7
1a0093ea:	fa86 f647 	uadd8	r6, r6, r7
1a0093ee:	faa5 f687 	sel	r6, r5, r7
1a0093f2:	b98e      	cbnz	r6, 1a009418 <memchr+0x78>
1a0093f4:	d1ee      	bne.n	1a0093d4 <memchr+0x34>
1a0093f6:	bcf0      	pop	{r4, r5, r6, r7}
1a0093f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0093fc:	f002 0207 	and.w	r2, r2, #7
1a009400:	b132      	cbz	r2, 1a009410 <memchr+0x70>
1a009402:	f810 3b01 	ldrb.w	r3, [r0], #1
1a009406:	3a01      	subs	r2, #1
1a009408:	ea83 0301 	eor.w	r3, r3, r1
1a00940c:	b113      	cbz	r3, 1a009414 <memchr+0x74>
1a00940e:	d1f8      	bne.n	1a009402 <memchr+0x62>
1a009410:	2000      	movs	r0, #0
1a009412:	4770      	bx	lr
1a009414:	3801      	subs	r0, #1
1a009416:	4770      	bx	lr
1a009418:	2d00      	cmp	r5, #0
1a00941a:	bf06      	itte	eq
1a00941c:	4635      	moveq	r5, r6
1a00941e:	3803      	subeq	r0, #3
1a009420:	3807      	subne	r0, #7
1a009422:	f015 0f01 	tst.w	r5, #1
1a009426:	d107      	bne.n	1a009438 <memchr+0x98>
1a009428:	3001      	adds	r0, #1
1a00942a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00942e:	bf02      	ittt	eq
1a009430:	3001      	addeq	r0, #1
1a009432:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a009436:	3001      	addeq	r0, #1
1a009438:	bcf0      	pop	{r4, r5, r6, r7}
1a00943a:	3801      	subs	r0, #1
1a00943c:	4770      	bx	lr
1a00943e:	bf00      	nop

1a009440 <memmove>:
1a009440:	4288      	cmp	r0, r1
1a009442:	b4f0      	push	{r4, r5, r6, r7}
1a009444:	d90d      	bls.n	1a009462 <memmove+0x22>
1a009446:	188b      	adds	r3, r1, r2
1a009448:	4283      	cmp	r3, r0
1a00944a:	d90a      	bls.n	1a009462 <memmove+0x22>
1a00944c:	1884      	adds	r4, r0, r2
1a00944e:	b132      	cbz	r2, 1a00945e <memmove+0x1e>
1a009450:	4622      	mov	r2, r4
1a009452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a009456:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a00945a:	4299      	cmp	r1, r3
1a00945c:	d1f9      	bne.n	1a009452 <memmove+0x12>
1a00945e:	bcf0      	pop	{r4, r5, r6, r7}
1a009460:	4770      	bx	lr
1a009462:	2a0f      	cmp	r2, #15
1a009464:	d949      	bls.n	1a0094fa <memmove+0xba>
1a009466:	ea40 0301 	orr.w	r3, r0, r1
1a00946a:	079b      	lsls	r3, r3, #30
1a00946c:	d147      	bne.n	1a0094fe <memmove+0xbe>
1a00946e:	f1a2 0310 	sub.w	r3, r2, #16
1a009472:	091b      	lsrs	r3, r3, #4
1a009474:	f101 0720 	add.w	r7, r1, #32
1a009478:	eb07 1703 	add.w	r7, r7, r3, lsl #4
1a00947c:	f101 0410 	add.w	r4, r1, #16
1a009480:	f100 0510 	add.w	r5, r0, #16
1a009484:	f854 6c10 	ldr.w	r6, [r4, #-16]
1a009488:	f845 6c10 	str.w	r6, [r5, #-16]
1a00948c:	f854 6c0c 	ldr.w	r6, [r4, #-12]
1a009490:	f845 6c0c 	str.w	r6, [r5, #-12]
1a009494:	f854 6c08 	ldr.w	r6, [r4, #-8]
1a009498:	f845 6c08 	str.w	r6, [r5, #-8]
1a00949c:	f854 6c04 	ldr.w	r6, [r4, #-4]
1a0094a0:	f845 6c04 	str.w	r6, [r5, #-4]
1a0094a4:	3410      	adds	r4, #16
1a0094a6:	42bc      	cmp	r4, r7
1a0094a8:	f105 0510 	add.w	r5, r5, #16
1a0094ac:	d1ea      	bne.n	1a009484 <memmove+0x44>
1a0094ae:	3301      	adds	r3, #1
1a0094b0:	f002 050f 	and.w	r5, r2, #15
1a0094b4:	011b      	lsls	r3, r3, #4
1a0094b6:	2d03      	cmp	r5, #3
1a0094b8:	4419      	add	r1, r3
1a0094ba:	4403      	add	r3, r0
1a0094bc:	d921      	bls.n	1a009502 <memmove+0xc2>
1a0094be:	1f1f      	subs	r7, r3, #4
1a0094c0:	460e      	mov	r6, r1
1a0094c2:	462c      	mov	r4, r5
1a0094c4:	3c04      	subs	r4, #4
1a0094c6:	f856 cb04 	ldr.w	ip, [r6], #4
1a0094ca:	f847 cf04 	str.w	ip, [r7, #4]!
1a0094ce:	2c03      	cmp	r4, #3
1a0094d0:	d8f8      	bhi.n	1a0094c4 <memmove+0x84>
1a0094d2:	1f2c      	subs	r4, r5, #4
1a0094d4:	f024 0403 	bic.w	r4, r4, #3
1a0094d8:	3404      	adds	r4, #4
1a0094da:	4423      	add	r3, r4
1a0094dc:	4421      	add	r1, r4
1a0094de:	f002 0203 	and.w	r2, r2, #3
1a0094e2:	2a00      	cmp	r2, #0
1a0094e4:	d0bb      	beq.n	1a00945e <memmove+0x1e>
1a0094e6:	3b01      	subs	r3, #1
1a0094e8:	440a      	add	r2, r1
1a0094ea:	f811 4b01 	ldrb.w	r4, [r1], #1
1a0094ee:	f803 4f01 	strb.w	r4, [r3, #1]!
1a0094f2:	4291      	cmp	r1, r2
1a0094f4:	d1f9      	bne.n	1a0094ea <memmove+0xaa>
1a0094f6:	bcf0      	pop	{r4, r5, r6, r7}
1a0094f8:	4770      	bx	lr
1a0094fa:	4603      	mov	r3, r0
1a0094fc:	e7f1      	b.n	1a0094e2 <memmove+0xa2>
1a0094fe:	4603      	mov	r3, r0
1a009500:	e7f1      	b.n	1a0094e6 <memmove+0xa6>
1a009502:	462a      	mov	r2, r5
1a009504:	e7ed      	b.n	1a0094e2 <memmove+0xa2>
1a009506:	bf00      	nop

1a009508 <_Balloc>:
1a009508:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a00950a:	b570      	push	{r4, r5, r6, lr}
1a00950c:	4605      	mov	r5, r0
1a00950e:	460c      	mov	r4, r1
1a009510:	b14b      	cbz	r3, 1a009526 <_Balloc+0x1e>
1a009512:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a009516:	b180      	cbz	r0, 1a00953a <_Balloc+0x32>
1a009518:	6802      	ldr	r2, [r0, #0]
1a00951a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a00951e:	2300      	movs	r3, #0
1a009520:	e9c0 3303 	strd	r3, r3, [r0, #12]
1a009524:	bd70      	pop	{r4, r5, r6, pc}
1a009526:	2221      	movs	r2, #33	; 0x21
1a009528:	2104      	movs	r1, #4
1a00952a:	f000 fd51 	bl	1a009fd0 <_calloc_r>
1a00952e:	4603      	mov	r3, r0
1a009530:	64e8      	str	r0, [r5, #76]	; 0x4c
1a009532:	2800      	cmp	r0, #0
1a009534:	d1ed      	bne.n	1a009512 <_Balloc+0xa>
1a009536:	2000      	movs	r0, #0
1a009538:	bd70      	pop	{r4, r5, r6, pc}
1a00953a:	2101      	movs	r1, #1
1a00953c:	fa01 f604 	lsl.w	r6, r1, r4
1a009540:	1d72      	adds	r2, r6, #5
1a009542:	4628      	mov	r0, r5
1a009544:	0092      	lsls	r2, r2, #2
1a009546:	f000 fd43 	bl	1a009fd0 <_calloc_r>
1a00954a:	2800      	cmp	r0, #0
1a00954c:	d0f3      	beq.n	1a009536 <_Balloc+0x2e>
1a00954e:	e9c0 4601 	strd	r4, r6, [r0, #4]
1a009552:	e7e4      	b.n	1a00951e <_Balloc+0x16>

1a009554 <_Bfree>:
1a009554:	b131      	cbz	r1, 1a009564 <_Bfree+0x10>
1a009556:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a009558:	684a      	ldr	r2, [r1, #4]
1a00955a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a00955e:	6008      	str	r0, [r1, #0]
1a009560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a009564:	4770      	bx	lr
1a009566:	bf00      	nop

1a009568 <__multadd>:
1a009568:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00956a:	690c      	ldr	r4, [r1, #16]
1a00956c:	b083      	sub	sp, #12
1a00956e:	460d      	mov	r5, r1
1a009570:	4606      	mov	r6, r0
1a009572:	f101 0c14 	add.w	ip, r1, #20
1a009576:	2700      	movs	r7, #0
1a009578:	f8dc 0000 	ldr.w	r0, [ip]
1a00957c:	b281      	uxth	r1, r0
1a00957e:	fb02 3301 	mla	r3, r2, r1, r3
1a009582:	0c01      	lsrs	r1, r0, #16
1a009584:	0c18      	lsrs	r0, r3, #16
1a009586:	fb02 0101 	mla	r1, r2, r1, r0
1a00958a:	b29b      	uxth	r3, r3
1a00958c:	3701      	adds	r7, #1
1a00958e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
1a009592:	42bc      	cmp	r4, r7
1a009594:	f84c 3b04 	str.w	r3, [ip], #4
1a009598:	ea4f 4311 	mov.w	r3, r1, lsr #16
1a00959c:	dcec      	bgt.n	1a009578 <__multadd+0x10>
1a00959e:	b13b      	cbz	r3, 1a0095b0 <__multadd+0x48>
1a0095a0:	68aa      	ldr	r2, [r5, #8]
1a0095a2:	42a2      	cmp	r2, r4
1a0095a4:	dd07      	ble.n	1a0095b6 <__multadd+0x4e>
1a0095a6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a0095aa:	3401      	adds	r4, #1
1a0095ac:	6153      	str	r3, [r2, #20]
1a0095ae:	612c      	str	r4, [r5, #16]
1a0095b0:	4628      	mov	r0, r5
1a0095b2:	b003      	add	sp, #12
1a0095b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0095b6:	6869      	ldr	r1, [r5, #4]
1a0095b8:	9301      	str	r3, [sp, #4]
1a0095ba:	3101      	adds	r1, #1
1a0095bc:	4630      	mov	r0, r6
1a0095be:	f7ff ffa3 	bl	1a009508 <_Balloc>
1a0095c2:	692a      	ldr	r2, [r5, #16]
1a0095c4:	3202      	adds	r2, #2
1a0095c6:	f105 010c 	add.w	r1, r5, #12
1a0095ca:	4607      	mov	r7, r0
1a0095cc:	0092      	lsls	r2, r2, #2
1a0095ce:	300c      	adds	r0, #12
1a0095d0:	f7fc fd38 	bl	1a006044 <memcpy>
1a0095d4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a0095d6:	6869      	ldr	r1, [r5, #4]
1a0095d8:	9b01      	ldr	r3, [sp, #4]
1a0095da:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a0095de:	6028      	str	r0, [r5, #0]
1a0095e0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a0095e4:	463d      	mov	r5, r7
1a0095e6:	e7de      	b.n	1a0095a6 <__multadd+0x3e>

1a0095e8 <__hi0bits>:
1a0095e8:	0c02      	lsrs	r2, r0, #16
1a0095ea:	0412      	lsls	r2, r2, #16
1a0095ec:	4603      	mov	r3, r0
1a0095ee:	b9c2      	cbnz	r2, 1a009622 <__hi0bits+0x3a>
1a0095f0:	0403      	lsls	r3, r0, #16
1a0095f2:	2010      	movs	r0, #16
1a0095f4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a0095f8:	bf04      	itt	eq
1a0095fa:	021b      	lsleq	r3, r3, #8
1a0095fc:	3008      	addeq	r0, #8
1a0095fe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1a009602:	bf04      	itt	eq
1a009604:	011b      	lsleq	r3, r3, #4
1a009606:	3004      	addeq	r0, #4
1a009608:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1a00960c:	bf04      	itt	eq
1a00960e:	009b      	lsleq	r3, r3, #2
1a009610:	3002      	addeq	r0, #2
1a009612:	2b00      	cmp	r3, #0
1a009614:	db04      	blt.n	1a009620 <__hi0bits+0x38>
1a009616:	005b      	lsls	r3, r3, #1
1a009618:	d501      	bpl.n	1a00961e <__hi0bits+0x36>
1a00961a:	3001      	adds	r0, #1
1a00961c:	4770      	bx	lr
1a00961e:	2020      	movs	r0, #32
1a009620:	4770      	bx	lr
1a009622:	2000      	movs	r0, #0
1a009624:	e7e6      	b.n	1a0095f4 <__hi0bits+0xc>
1a009626:	bf00      	nop

1a009628 <__lo0bits>:
1a009628:	6803      	ldr	r3, [r0, #0]
1a00962a:	f013 0207 	ands.w	r2, r3, #7
1a00962e:	4601      	mov	r1, r0
1a009630:	d007      	beq.n	1a009642 <__lo0bits+0x1a>
1a009632:	07da      	lsls	r2, r3, #31
1a009634:	d41f      	bmi.n	1a009676 <__lo0bits+0x4e>
1a009636:	0798      	lsls	r0, r3, #30
1a009638:	d51f      	bpl.n	1a00967a <__lo0bits+0x52>
1a00963a:	085b      	lsrs	r3, r3, #1
1a00963c:	600b      	str	r3, [r1, #0]
1a00963e:	2001      	movs	r0, #1
1a009640:	4770      	bx	lr
1a009642:	b298      	uxth	r0, r3
1a009644:	b1a0      	cbz	r0, 1a009670 <__lo0bits+0x48>
1a009646:	4610      	mov	r0, r2
1a009648:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00964c:	bf04      	itt	eq
1a00964e:	0a1b      	lsreq	r3, r3, #8
1a009650:	3008      	addeq	r0, #8
1a009652:	071a      	lsls	r2, r3, #28
1a009654:	bf04      	itt	eq
1a009656:	091b      	lsreq	r3, r3, #4
1a009658:	3004      	addeq	r0, #4
1a00965a:	079a      	lsls	r2, r3, #30
1a00965c:	bf04      	itt	eq
1a00965e:	089b      	lsreq	r3, r3, #2
1a009660:	3002      	addeq	r0, #2
1a009662:	07da      	lsls	r2, r3, #31
1a009664:	d402      	bmi.n	1a00966c <__lo0bits+0x44>
1a009666:	085b      	lsrs	r3, r3, #1
1a009668:	d00b      	beq.n	1a009682 <__lo0bits+0x5a>
1a00966a:	3001      	adds	r0, #1
1a00966c:	600b      	str	r3, [r1, #0]
1a00966e:	4770      	bx	lr
1a009670:	0c1b      	lsrs	r3, r3, #16
1a009672:	2010      	movs	r0, #16
1a009674:	e7e8      	b.n	1a009648 <__lo0bits+0x20>
1a009676:	2000      	movs	r0, #0
1a009678:	4770      	bx	lr
1a00967a:	089b      	lsrs	r3, r3, #2
1a00967c:	600b      	str	r3, [r1, #0]
1a00967e:	2002      	movs	r0, #2
1a009680:	4770      	bx	lr
1a009682:	2020      	movs	r0, #32
1a009684:	4770      	bx	lr
1a009686:	bf00      	nop

1a009688 <__i2b>:
1a009688:	b510      	push	{r4, lr}
1a00968a:	460c      	mov	r4, r1
1a00968c:	2101      	movs	r1, #1
1a00968e:	f7ff ff3b 	bl	1a009508 <_Balloc>
1a009692:	2201      	movs	r2, #1
1a009694:	e9c0 2404 	strd	r2, r4, [r0, #16]
1a009698:	bd10      	pop	{r4, pc}
1a00969a:	bf00      	nop

1a00969c <__multiply>:
1a00969c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0096a0:	690e      	ldr	r6, [r1, #16]
1a0096a2:	6914      	ldr	r4, [r2, #16]
1a0096a4:	42a6      	cmp	r6, r4
1a0096a6:	b083      	sub	sp, #12
1a0096a8:	460f      	mov	r7, r1
1a0096aa:	4615      	mov	r5, r2
1a0096ac:	da04      	bge.n	1a0096b8 <__multiply+0x1c>
1a0096ae:	4632      	mov	r2, r6
1a0096b0:	462f      	mov	r7, r5
1a0096b2:	4626      	mov	r6, r4
1a0096b4:	460d      	mov	r5, r1
1a0096b6:	4614      	mov	r4, r2
1a0096b8:	e9d7 1301 	ldrd	r1, r3, [r7, #4]
1a0096bc:	eb06 0804 	add.w	r8, r6, r4
1a0096c0:	4543      	cmp	r3, r8
1a0096c2:	bfb8      	it	lt
1a0096c4:	3101      	addlt	r1, #1
1a0096c6:	f7ff ff1f 	bl	1a009508 <_Balloc>
1a0096ca:	f100 0914 	add.w	r9, r0, #20
1a0096ce:	eb09 0e88 	add.w	lr, r9, r8, lsl #2
1a0096d2:	45f1      	cmp	r9, lr
1a0096d4:	9000      	str	r0, [sp, #0]
1a0096d6:	d205      	bcs.n	1a0096e4 <__multiply+0x48>
1a0096d8:	464b      	mov	r3, r9
1a0096da:	2200      	movs	r2, #0
1a0096dc:	f843 2b04 	str.w	r2, [r3], #4
1a0096e0:	459e      	cmp	lr, r3
1a0096e2:	d8fb      	bhi.n	1a0096dc <__multiply+0x40>
1a0096e4:	f105 0a14 	add.w	sl, r5, #20
1a0096e8:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
1a0096ec:	f107 0314 	add.w	r3, r7, #20
1a0096f0:	45a2      	cmp	sl, r4
1a0096f2:	eb03 0c86 	add.w	ip, r3, r6, lsl #2
1a0096f6:	d261      	bcs.n	1a0097bc <__multiply+0x120>
1a0096f8:	1b64      	subs	r4, r4, r5
1a0096fa:	3c15      	subs	r4, #21
1a0096fc:	f024 0403 	bic.w	r4, r4, #3
1a009700:	f8cd e004 	str.w	lr, [sp, #4]
1a009704:	44a2      	add	sl, r4
1a009706:	f105 0210 	add.w	r2, r5, #16
1a00970a:	469e      	mov	lr, r3
1a00970c:	e005      	b.n	1a00971a <__multiply+0x7e>
1a00970e:	0c2d      	lsrs	r5, r5, #16
1a009710:	d12b      	bne.n	1a00976a <__multiply+0xce>
1a009712:	4592      	cmp	sl, r2
1a009714:	f109 0904 	add.w	r9, r9, #4
1a009718:	d04e      	beq.n	1a0097b8 <__multiply+0x11c>
1a00971a:	f852 5f04 	ldr.w	r5, [r2, #4]!
1a00971e:	fa1f fb85 	uxth.w	fp, r5
1a009722:	f1bb 0f00 	cmp.w	fp, #0
1a009726:	d0f2      	beq.n	1a00970e <__multiply+0x72>
1a009728:	4677      	mov	r7, lr
1a00972a:	464e      	mov	r6, r9
1a00972c:	2000      	movs	r0, #0
1a00972e:	e000      	b.n	1a009732 <__multiply+0x96>
1a009730:	4626      	mov	r6, r4
1a009732:	f857 1b04 	ldr.w	r1, [r7], #4
1a009736:	6834      	ldr	r4, [r6, #0]
1a009738:	b28b      	uxth	r3, r1
1a00973a:	b2a5      	uxth	r5, r4
1a00973c:	0c09      	lsrs	r1, r1, #16
1a00973e:	0c24      	lsrs	r4, r4, #16
1a009740:	fb0b 5303 	mla	r3, fp, r3, r5
1a009744:	4403      	add	r3, r0
1a009746:	fb0b 4001 	mla	r0, fp, r1, r4
1a00974a:	eb00 4013 	add.w	r0, r0, r3, lsr #16
1a00974e:	4634      	mov	r4, r6
1a009750:	b29b      	uxth	r3, r3
1a009752:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1a009756:	45bc      	cmp	ip, r7
1a009758:	ea4f 4010 	mov.w	r0, r0, lsr #16
1a00975c:	f844 3b04 	str.w	r3, [r4], #4
1a009760:	d8e6      	bhi.n	1a009730 <__multiply+0x94>
1a009762:	6070      	str	r0, [r6, #4]
1a009764:	6815      	ldr	r5, [r2, #0]
1a009766:	0c2d      	lsrs	r5, r5, #16
1a009768:	d0d3      	beq.n	1a009712 <__multiply+0x76>
1a00976a:	f8d9 3000 	ldr.w	r3, [r9]
1a00976e:	4676      	mov	r6, lr
1a009770:	4618      	mov	r0, r3
1a009772:	46cb      	mov	fp, r9
1a009774:	2100      	movs	r1, #0
1a009776:	e000      	b.n	1a00977a <__multiply+0xde>
1a009778:	46a3      	mov	fp, r4
1a00977a:	8834      	ldrh	r4, [r6, #0]
1a00977c:	0c00      	lsrs	r0, r0, #16
1a00977e:	fb05 0004 	mla	r0, r5, r4, r0
1a009782:	4401      	add	r1, r0
1a009784:	b29b      	uxth	r3, r3
1a009786:	465c      	mov	r4, fp
1a009788:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00978c:	f844 3b04 	str.w	r3, [r4], #4
1a009790:	f856 3b04 	ldr.w	r3, [r6], #4
1a009794:	f8db 0004 	ldr.w	r0, [fp, #4]
1a009798:	0c1b      	lsrs	r3, r3, #16
1a00979a:	b287      	uxth	r7, r0
1a00979c:	fb05 7303 	mla	r3, r5, r3, r7
1a0097a0:	eb03 4311 	add.w	r3, r3, r1, lsr #16
1a0097a4:	45b4      	cmp	ip, r6
1a0097a6:	ea4f 4113 	mov.w	r1, r3, lsr #16
1a0097aa:	d8e5      	bhi.n	1a009778 <__multiply+0xdc>
1a0097ac:	4592      	cmp	sl, r2
1a0097ae:	f8cb 3004 	str.w	r3, [fp, #4]
1a0097b2:	f109 0904 	add.w	r9, r9, #4
1a0097b6:	d1b0      	bne.n	1a00971a <__multiply+0x7e>
1a0097b8:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0097bc:	f1b8 0f00 	cmp.w	r8, #0
1a0097c0:	dd0b      	ble.n	1a0097da <__multiply+0x13e>
1a0097c2:	f85e 3c04 	ldr.w	r3, [lr, #-4]
1a0097c6:	f1ae 0e04 	sub.w	lr, lr, #4
1a0097ca:	b11b      	cbz	r3, 1a0097d4 <__multiply+0x138>
1a0097cc:	e005      	b.n	1a0097da <__multiply+0x13e>
1a0097ce:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
1a0097d2:	b913      	cbnz	r3, 1a0097da <__multiply+0x13e>
1a0097d4:	f1b8 0801 	subs.w	r8, r8, #1
1a0097d8:	d1f9      	bne.n	1a0097ce <__multiply+0x132>
1a0097da:	9800      	ldr	r0, [sp, #0]
1a0097dc:	f8c0 8010 	str.w	r8, [r0, #16]
1a0097e0:	b003      	add	sp, #12
1a0097e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0097e6:	bf00      	nop

1a0097e8 <__pow5mult>:
1a0097e8:	f012 0303 	ands.w	r3, r2, #3
1a0097ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0097f0:	4614      	mov	r4, r2
1a0097f2:	4607      	mov	r7, r0
1a0097f4:	d12e      	bne.n	1a009854 <__pow5mult+0x6c>
1a0097f6:	460d      	mov	r5, r1
1a0097f8:	10a4      	asrs	r4, r4, #2
1a0097fa:	d01c      	beq.n	1a009836 <__pow5mult+0x4e>
1a0097fc:	6cbe      	ldr	r6, [r7, #72]	; 0x48
1a0097fe:	b396      	cbz	r6, 1a009866 <__pow5mult+0x7e>
1a009800:	07e3      	lsls	r3, r4, #31
1a009802:	f04f 0800 	mov.w	r8, #0
1a009806:	d406      	bmi.n	1a009816 <__pow5mult+0x2e>
1a009808:	1064      	asrs	r4, r4, #1
1a00980a:	d014      	beq.n	1a009836 <__pow5mult+0x4e>
1a00980c:	6830      	ldr	r0, [r6, #0]
1a00980e:	b1a8      	cbz	r0, 1a00983c <__pow5mult+0x54>
1a009810:	4606      	mov	r6, r0
1a009812:	07e3      	lsls	r3, r4, #31
1a009814:	d5f8      	bpl.n	1a009808 <__pow5mult+0x20>
1a009816:	4632      	mov	r2, r6
1a009818:	4629      	mov	r1, r5
1a00981a:	4638      	mov	r0, r7
1a00981c:	f7ff ff3e 	bl	1a00969c <__multiply>
1a009820:	b1b5      	cbz	r5, 1a009850 <__pow5mult+0x68>
1a009822:	686a      	ldr	r2, [r5, #4]
1a009824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a009826:	1064      	asrs	r4, r4, #1
1a009828:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a00982c:	6029      	str	r1, [r5, #0]
1a00982e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a009832:	4605      	mov	r5, r0
1a009834:	d1ea      	bne.n	1a00980c <__pow5mult+0x24>
1a009836:	4628      	mov	r0, r5
1a009838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00983c:	4632      	mov	r2, r6
1a00983e:	4631      	mov	r1, r6
1a009840:	4638      	mov	r0, r7
1a009842:	f7ff ff2b 	bl	1a00969c <__multiply>
1a009846:	6030      	str	r0, [r6, #0]
1a009848:	f8c0 8000 	str.w	r8, [r0]
1a00984c:	4606      	mov	r6, r0
1a00984e:	e7e0      	b.n	1a009812 <__pow5mult+0x2a>
1a009850:	4605      	mov	r5, r0
1a009852:	e7d9      	b.n	1a009808 <__pow5mult+0x20>
1a009854:	3b01      	subs	r3, #1
1a009856:	4a0b      	ldr	r2, [pc, #44]	; (1a009884 <__pow5mult+0x9c>)
1a009858:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a00985c:	2300      	movs	r3, #0
1a00985e:	f7ff fe83 	bl	1a009568 <__multadd>
1a009862:	4605      	mov	r5, r0
1a009864:	e7c8      	b.n	1a0097f8 <__pow5mult+0x10>
1a009866:	2101      	movs	r1, #1
1a009868:	4638      	mov	r0, r7
1a00986a:	f7ff fe4d 	bl	1a009508 <_Balloc>
1a00986e:	f240 2371 	movw	r3, #625	; 0x271
1a009872:	6143      	str	r3, [r0, #20]
1a009874:	2201      	movs	r2, #1
1a009876:	2300      	movs	r3, #0
1a009878:	6102      	str	r2, [r0, #16]
1a00987a:	4606      	mov	r6, r0
1a00987c:	64b8      	str	r0, [r7, #72]	; 0x48
1a00987e:	6003      	str	r3, [r0, #0]
1a009880:	e7be      	b.n	1a009800 <__pow5mult+0x18>
1a009882:	bf00      	nop
1a009884:	1a00abb8 	.word	0x1a00abb8

1a009888 <__lshift>:
1a009888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00988c:	4691      	mov	r9, r2
1a00988e:	690a      	ldr	r2, [r1, #16]
1a009890:	460e      	mov	r6, r1
1a009892:	ea4f 1469 	mov.w	r4, r9, asr #5
1a009896:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
1a00989a:	eb04 0802 	add.w	r8, r4, r2
1a00989e:	f108 0501 	add.w	r5, r8, #1
1a0098a2:	429d      	cmp	r5, r3
1a0098a4:	4607      	mov	r7, r0
1a0098a6:	dd04      	ble.n	1a0098b2 <__lshift+0x2a>
1a0098a8:	005b      	lsls	r3, r3, #1
1a0098aa:	429d      	cmp	r5, r3
1a0098ac:	f101 0101 	add.w	r1, r1, #1
1a0098b0:	dcfa      	bgt.n	1a0098a8 <__lshift+0x20>
1a0098b2:	4638      	mov	r0, r7
1a0098b4:	f7ff fe28 	bl	1a009508 <_Balloc>
1a0098b8:	2c00      	cmp	r4, #0
1a0098ba:	f100 0314 	add.w	r3, r0, #20
1a0098be:	dd37      	ble.n	1a009930 <__lshift+0xa8>
1a0098c0:	eb03 0184 	add.w	r1, r3, r4, lsl #2
1a0098c4:	2200      	movs	r2, #0
1a0098c6:	f843 2b04 	str.w	r2, [r3], #4
1a0098ca:	428b      	cmp	r3, r1
1a0098cc:	d1fb      	bne.n	1a0098c6 <__lshift+0x3e>
1a0098ce:	6934      	ldr	r4, [r6, #16]
1a0098d0:	f106 0314 	add.w	r3, r6, #20
1a0098d4:	f019 091f 	ands.w	r9, r9, #31
1a0098d8:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
1a0098dc:	d020      	beq.n	1a009920 <__lshift+0x98>
1a0098de:	f1c9 0e20 	rsb	lr, r9, #32
1a0098e2:	2200      	movs	r2, #0
1a0098e4:	e000      	b.n	1a0098e8 <__lshift+0x60>
1a0098e6:	4651      	mov	r1, sl
1a0098e8:	681c      	ldr	r4, [r3, #0]
1a0098ea:	468a      	mov	sl, r1
1a0098ec:	fa04 f409 	lsl.w	r4, r4, r9
1a0098f0:	4314      	orrs	r4, r2
1a0098f2:	f84a 4b04 	str.w	r4, [sl], #4
1a0098f6:	f853 2b04 	ldr.w	r2, [r3], #4
1a0098fa:	4563      	cmp	r3, ip
1a0098fc:	fa22 f20e 	lsr.w	r2, r2, lr
1a009900:	d3f1      	bcc.n	1a0098e6 <__lshift+0x5e>
1a009902:	604a      	str	r2, [r1, #4]
1a009904:	b10a      	cbz	r2, 1a00990a <__lshift+0x82>
1a009906:	f108 0502 	add.w	r5, r8, #2
1a00990a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00990c:	6872      	ldr	r2, [r6, #4]
1a00990e:	3d01      	subs	r5, #1
1a009910:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a009914:	6105      	str	r5, [r0, #16]
1a009916:	6031      	str	r1, [r6, #0]
1a009918:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
1a00991c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a009920:	3904      	subs	r1, #4
1a009922:	f853 2b04 	ldr.w	r2, [r3], #4
1a009926:	f841 2f04 	str.w	r2, [r1, #4]!
1a00992a:	459c      	cmp	ip, r3
1a00992c:	d8f9      	bhi.n	1a009922 <__lshift+0x9a>
1a00992e:	e7ec      	b.n	1a00990a <__lshift+0x82>
1a009930:	4619      	mov	r1, r3
1a009932:	e7cc      	b.n	1a0098ce <__lshift+0x46>

1a009934 <__mcmp>:
1a009934:	b430      	push	{r4, r5}
1a009936:	690b      	ldr	r3, [r1, #16]
1a009938:	4605      	mov	r5, r0
1a00993a:	6900      	ldr	r0, [r0, #16]
1a00993c:	1ac0      	subs	r0, r0, r3
1a00993e:	d10f      	bne.n	1a009960 <__mcmp+0x2c>
1a009940:	009b      	lsls	r3, r3, #2
1a009942:	3514      	adds	r5, #20
1a009944:	3114      	adds	r1, #20
1a009946:	4419      	add	r1, r3
1a009948:	442b      	add	r3, r5
1a00994a:	e001      	b.n	1a009950 <__mcmp+0x1c>
1a00994c:	429d      	cmp	r5, r3
1a00994e:	d207      	bcs.n	1a009960 <__mcmp+0x2c>
1a009950:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a009954:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a009958:	4294      	cmp	r4, r2
1a00995a:	d0f7      	beq.n	1a00994c <__mcmp+0x18>
1a00995c:	d302      	bcc.n	1a009964 <__mcmp+0x30>
1a00995e:	2001      	movs	r0, #1
1a009960:	bc30      	pop	{r4, r5}
1a009962:	4770      	bx	lr
1a009964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a009968:	e7fa      	b.n	1a009960 <__mcmp+0x2c>
1a00996a:	bf00      	nop

1a00996c <__mdiff>:
1a00996c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a009970:	6913      	ldr	r3, [r2, #16]
1a009972:	690d      	ldr	r5, [r1, #16]
1a009974:	1aed      	subs	r5, r5, r3
1a009976:	2d00      	cmp	r5, #0
1a009978:	460e      	mov	r6, r1
1a00997a:	4690      	mov	r8, r2
1a00997c:	f101 0414 	add.w	r4, r1, #20
1a009980:	f102 0714 	add.w	r7, r2, #20
1a009984:	d114      	bne.n	1a0099b0 <__mdiff+0x44>
1a009986:	009b      	lsls	r3, r3, #2
1a009988:	18e2      	adds	r2, r4, r3
1a00998a:	443b      	add	r3, r7
1a00998c:	e001      	b.n	1a009992 <__mdiff+0x26>
1a00998e:	42a2      	cmp	r2, r4
1a009990:	d959      	bls.n	1a009a46 <__mdiff+0xda>
1a009992:	f852 cd04 	ldr.w	ip, [r2, #-4]!
1a009996:	f853 1d04 	ldr.w	r1, [r3, #-4]!
1a00999a:	458c      	cmp	ip, r1
1a00999c:	d0f7      	beq.n	1a00998e <__mdiff+0x22>
1a00999e:	d209      	bcs.n	1a0099b4 <__mdiff+0x48>
1a0099a0:	4622      	mov	r2, r4
1a0099a2:	4633      	mov	r3, r6
1a0099a4:	463c      	mov	r4, r7
1a0099a6:	4646      	mov	r6, r8
1a0099a8:	4617      	mov	r7, r2
1a0099aa:	4698      	mov	r8, r3
1a0099ac:	2501      	movs	r5, #1
1a0099ae:	e001      	b.n	1a0099b4 <__mdiff+0x48>
1a0099b0:	dbf6      	blt.n	1a0099a0 <__mdiff+0x34>
1a0099b2:	2500      	movs	r5, #0
1a0099b4:	6871      	ldr	r1, [r6, #4]
1a0099b6:	f7ff fda7 	bl	1a009508 <_Balloc>
1a0099ba:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a0099be:	6936      	ldr	r6, [r6, #16]
1a0099c0:	60c5      	str	r5, [r0, #12]
1a0099c2:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
1a0099c6:	46bc      	mov	ip, r7
1a0099c8:	f100 0514 	add.w	r5, r0, #20
1a0099cc:	eb04 0786 	add.w	r7, r4, r6, lsl #2
1a0099d0:	2300      	movs	r3, #0
1a0099d2:	f85c 1b04 	ldr.w	r1, [ip], #4
1a0099d6:	f854 8b04 	ldr.w	r8, [r4], #4
1a0099da:	b28a      	uxth	r2, r1
1a0099dc:	fa13 f388 	uxtah	r3, r3, r8
1a0099e0:	0c09      	lsrs	r1, r1, #16
1a0099e2:	1a9a      	subs	r2, r3, r2
1a0099e4:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
1a0099e8:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a0099ec:	b292      	uxth	r2, r2
1a0099ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a0099f2:	45e6      	cmp	lr, ip
1a0099f4:	f845 2b04 	str.w	r2, [r5], #4
1a0099f8:	ea4f 4323 	mov.w	r3, r3, asr #16
1a0099fc:	d8e9      	bhi.n	1a0099d2 <__mdiff+0x66>
1a0099fe:	42a7      	cmp	r7, r4
1a009a00:	d917      	bls.n	1a009a32 <__mdiff+0xc6>
1a009a02:	46ae      	mov	lr, r5
1a009a04:	46a4      	mov	ip, r4
1a009a06:	f85c 2b04 	ldr.w	r2, [ip], #4
1a009a0a:	fa13 f382 	uxtah	r3, r3, r2
1a009a0e:	1419      	asrs	r1, r3, #16
1a009a10:	eb01 4112 	add.w	r1, r1, r2, lsr #16
1a009a14:	b29b      	uxth	r3, r3
1a009a16:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
1a009a1a:	4567      	cmp	r7, ip
1a009a1c:	f84e 2b04 	str.w	r2, [lr], #4
1a009a20:	ea4f 4321 	mov.w	r3, r1, asr #16
1a009a24:	d8ef      	bhi.n	1a009a06 <__mdiff+0x9a>
1a009a26:	43e4      	mvns	r4, r4
1a009a28:	4427      	add	r7, r4
1a009a2a:	f027 0703 	bic.w	r7, r7, #3
1a009a2e:	3704      	adds	r7, #4
1a009a30:	443d      	add	r5, r7
1a009a32:	3d04      	subs	r5, #4
1a009a34:	b922      	cbnz	r2, 1a009a40 <__mdiff+0xd4>
1a009a36:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a009a3a:	3e01      	subs	r6, #1
1a009a3c:	2b00      	cmp	r3, #0
1a009a3e:	d0fa      	beq.n	1a009a36 <__mdiff+0xca>
1a009a40:	6106      	str	r6, [r0, #16]
1a009a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a009a46:	2100      	movs	r1, #0
1a009a48:	f7ff fd5e 	bl	1a009508 <_Balloc>
1a009a4c:	2201      	movs	r2, #1
1a009a4e:	2300      	movs	r3, #0
1a009a50:	e9c0 2304 	strd	r2, r3, [r0, #16]
1a009a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a009a58 <__d2b>:
1a009a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a009a5c:	460f      	mov	r7, r1
1a009a5e:	b083      	sub	sp, #12
1a009a60:	2101      	movs	r1, #1
1a009a62:	ec55 4b10 	vmov	r4, r5, d0
1a009a66:	4616      	mov	r6, r2
1a009a68:	f7ff fd4e 	bl	1a009508 <_Balloc>
1a009a6c:	f3c5 580a 	ubfx	r8, r5, #20, #11
1a009a70:	4681      	mov	r9, r0
1a009a72:	f3c5 0313 	ubfx	r3, r5, #0, #20
1a009a76:	f1b8 0f00 	cmp.w	r8, #0
1a009a7a:	d001      	beq.n	1a009a80 <__d2b+0x28>
1a009a7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a009a80:	2c00      	cmp	r4, #0
1a009a82:	9301      	str	r3, [sp, #4]
1a009a84:	d024      	beq.n	1a009ad0 <__d2b+0x78>
1a009a86:	a802      	add	r0, sp, #8
1a009a88:	f840 4d08 	str.w	r4, [r0, #-8]!
1a009a8c:	f7ff fdcc 	bl	1a009628 <__lo0bits>
1a009a90:	2800      	cmp	r0, #0
1a009a92:	d136      	bne.n	1a009b02 <__d2b+0xaa>
1a009a94:	e9dd 2300 	ldrd	r2, r3, [sp]
1a009a98:	f8c9 2014 	str.w	r2, [r9, #20]
1a009a9c:	2b00      	cmp	r3, #0
1a009a9e:	bf0c      	ite	eq
1a009aa0:	2101      	moveq	r1, #1
1a009aa2:	2102      	movne	r1, #2
1a009aa4:	f8c9 3018 	str.w	r3, [r9, #24]
1a009aa8:	f8c9 1010 	str.w	r1, [r9, #16]
1a009aac:	f1b8 0f00 	cmp.w	r8, #0
1a009ab0:	d11b      	bne.n	1a009aea <__d2b+0x92>
1a009ab2:	eb09 0381 	add.w	r3, r9, r1, lsl #2
1a009ab6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a009aba:	6038      	str	r0, [r7, #0]
1a009abc:	6918      	ldr	r0, [r3, #16]
1a009abe:	f7ff fd93 	bl	1a0095e8 <__hi0bits>
1a009ac2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1a009ac6:	6030      	str	r0, [r6, #0]
1a009ac8:	4648      	mov	r0, r9
1a009aca:	b003      	add	sp, #12
1a009acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a009ad0:	a801      	add	r0, sp, #4
1a009ad2:	f7ff fda9 	bl	1a009628 <__lo0bits>
1a009ad6:	9b01      	ldr	r3, [sp, #4]
1a009ad8:	f8c9 3014 	str.w	r3, [r9, #20]
1a009adc:	2101      	movs	r1, #1
1a009ade:	3020      	adds	r0, #32
1a009ae0:	f8c9 1010 	str.w	r1, [r9, #16]
1a009ae4:	f1b8 0f00 	cmp.w	r8, #0
1a009ae8:	d0e3      	beq.n	1a009ab2 <__d2b+0x5a>
1a009aea:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
1a009aee:	eb08 0300 	add.w	r3, r8, r0
1a009af2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a009af6:	603b      	str	r3, [r7, #0]
1a009af8:	6030      	str	r0, [r6, #0]
1a009afa:	4648      	mov	r0, r9
1a009afc:	b003      	add	sp, #12
1a009afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a009b02:	e9dd 1300 	ldrd	r1, r3, [sp]
1a009b06:	f1c0 0220 	rsb	r2, r0, #32
1a009b0a:	fa03 f202 	lsl.w	r2, r3, r2
1a009b0e:	430a      	orrs	r2, r1
1a009b10:	40c3      	lsrs	r3, r0
1a009b12:	9301      	str	r3, [sp, #4]
1a009b14:	f8c9 2014 	str.w	r2, [r9, #20]
1a009b18:	e7c0      	b.n	1a009a9c <__d2b+0x44>
1a009b1a:	bf00      	nop

1a009b1c <_realloc_r>:
1a009b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a009b20:	4692      	mov	sl, r2
1a009b22:	b083      	sub	sp, #12
1a009b24:	2900      	cmp	r1, #0
1a009b26:	f000 80a1 	beq.w	1a009c6c <_realloc_r+0x150>
1a009b2a:	460d      	mov	r5, r1
1a009b2c:	4680      	mov	r8, r0
1a009b2e:	f10a 040b 	add.w	r4, sl, #11
1a009b32:	f7fc fb6b 	bl	1a00620c <__malloc_lock>
1a009b36:	f855 2c04 	ldr.w	r2, [r5, #-4]
1a009b3a:	2c16      	cmp	r4, #22
1a009b3c:	f022 0603 	bic.w	r6, r2, #3
1a009b40:	f1a5 0708 	sub.w	r7, r5, #8
1a009b44:	d83e      	bhi.n	1a009bc4 <_realloc_r+0xa8>
1a009b46:	2410      	movs	r4, #16
1a009b48:	4621      	mov	r1, r4
1a009b4a:	45a2      	cmp	sl, r4
1a009b4c:	d83f      	bhi.n	1a009bce <_realloc_r+0xb2>
1a009b4e:	428e      	cmp	r6, r1
1a009b50:	eb07 0906 	add.w	r9, r7, r6
1a009b54:	da74      	bge.n	1a009c40 <_realloc_r+0x124>
1a009b56:	4bc7      	ldr	r3, [pc, #796]	; (1a009e74 <_realloc_r+0x358>)
1a009b58:	6898      	ldr	r0, [r3, #8]
1a009b5a:	4548      	cmp	r0, r9
1a009b5c:	f000 80aa 	beq.w	1a009cb4 <_realloc_r+0x198>
1a009b60:	f8d9 0004 	ldr.w	r0, [r9, #4]
1a009b64:	f020 0301 	bic.w	r3, r0, #1
1a009b68:	444b      	add	r3, r9
1a009b6a:	685b      	ldr	r3, [r3, #4]
1a009b6c:	07db      	lsls	r3, r3, #31
1a009b6e:	f140 8083 	bpl.w	1a009c78 <_realloc_r+0x15c>
1a009b72:	07d2      	lsls	r2, r2, #31
1a009b74:	d534      	bpl.n	1a009be0 <_realloc_r+0xc4>
1a009b76:	4651      	mov	r1, sl
1a009b78:	4640      	mov	r0, r8
1a009b7a:	f7fb ffa9 	bl	1a005ad0 <_malloc_r>
1a009b7e:	4682      	mov	sl, r0
1a009b80:	b1e0      	cbz	r0, 1a009bbc <_realloc_r+0xa0>
1a009b82:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a009b86:	f023 0301 	bic.w	r3, r3, #1
1a009b8a:	443b      	add	r3, r7
1a009b8c:	f1a0 0208 	sub.w	r2, r0, #8
1a009b90:	4293      	cmp	r3, r2
1a009b92:	f000 80f9 	beq.w	1a009d88 <_realloc_r+0x26c>
1a009b96:	1f32      	subs	r2, r6, #4
1a009b98:	2a24      	cmp	r2, #36	; 0x24
1a009b9a:	f200 8107 	bhi.w	1a009dac <_realloc_r+0x290>
1a009b9e:	2a13      	cmp	r2, #19
1a009ba0:	6829      	ldr	r1, [r5, #0]
1a009ba2:	f200 80e6 	bhi.w	1a009d72 <_realloc_r+0x256>
1a009ba6:	4603      	mov	r3, r0
1a009ba8:	462a      	mov	r2, r5
1a009baa:	6019      	str	r1, [r3, #0]
1a009bac:	6851      	ldr	r1, [r2, #4]
1a009bae:	6059      	str	r1, [r3, #4]
1a009bb0:	6892      	ldr	r2, [r2, #8]
1a009bb2:	609a      	str	r2, [r3, #8]
1a009bb4:	4629      	mov	r1, r5
1a009bb6:	4640      	mov	r0, r8
1a009bb8:	f7fb fe32 	bl	1a005820 <_free_r>
1a009bbc:	4640      	mov	r0, r8
1a009bbe:	f7fc fb2b 	bl	1a006218 <__malloc_unlock>
1a009bc2:	e04f      	b.n	1a009c64 <_realloc_r+0x148>
1a009bc4:	f024 0407 	bic.w	r4, r4, #7
1a009bc8:	2c00      	cmp	r4, #0
1a009bca:	4621      	mov	r1, r4
1a009bcc:	dabd      	bge.n	1a009b4a <_realloc_r+0x2e>
1a009bce:	f04f 0a00 	mov.w	sl, #0
1a009bd2:	230c      	movs	r3, #12
1a009bd4:	4650      	mov	r0, sl
1a009bd6:	f8c8 3000 	str.w	r3, [r8]
1a009bda:	b003      	add	sp, #12
1a009bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009be0:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a009be4:	eba7 0b03 	sub.w	fp, r7, r3
1a009be8:	f8db 2004 	ldr.w	r2, [fp, #4]
1a009bec:	f022 0203 	bic.w	r2, r2, #3
1a009bf0:	18b3      	adds	r3, r6, r2
1a009bf2:	428b      	cmp	r3, r1
1a009bf4:	dbbf      	blt.n	1a009b76 <_realloc_r+0x5a>
1a009bf6:	46da      	mov	sl, fp
1a009bf8:	f8db 100c 	ldr.w	r1, [fp, #12]
1a009bfc:	f85a 0f08 	ldr.w	r0, [sl, #8]!
1a009c00:	1f32      	subs	r2, r6, #4
1a009c02:	2a24      	cmp	r2, #36	; 0x24
1a009c04:	60c1      	str	r1, [r0, #12]
1a009c06:	eb0b 0903 	add.w	r9, fp, r3
1a009c0a:	6088      	str	r0, [r1, #8]
1a009c0c:	f200 80c6 	bhi.w	1a009d9c <_realloc_r+0x280>
1a009c10:	2a13      	cmp	r2, #19
1a009c12:	6829      	ldr	r1, [r5, #0]
1a009c14:	f240 80c0 	bls.w	1a009d98 <_realloc_r+0x27c>
1a009c18:	f8cb 1008 	str.w	r1, [fp, #8]
1a009c1c:	6869      	ldr	r1, [r5, #4]
1a009c1e:	f8cb 100c 	str.w	r1, [fp, #12]
1a009c22:	2a1b      	cmp	r2, #27
1a009c24:	68a9      	ldr	r1, [r5, #8]
1a009c26:	f200 80d8 	bhi.w	1a009dda <_realloc_r+0x2be>
1a009c2a:	f10b 0210 	add.w	r2, fp, #16
1a009c2e:	3508      	adds	r5, #8
1a009c30:	6011      	str	r1, [r2, #0]
1a009c32:	6869      	ldr	r1, [r5, #4]
1a009c34:	6051      	str	r1, [r2, #4]
1a009c36:	68a9      	ldr	r1, [r5, #8]
1a009c38:	6091      	str	r1, [r2, #8]
1a009c3a:	461e      	mov	r6, r3
1a009c3c:	465f      	mov	r7, fp
1a009c3e:	4655      	mov	r5, sl
1a009c40:	687b      	ldr	r3, [r7, #4]
1a009c42:	1b32      	subs	r2, r6, r4
1a009c44:	2a0f      	cmp	r2, #15
1a009c46:	f003 0301 	and.w	r3, r3, #1
1a009c4a:	d822      	bhi.n	1a009c92 <_realloc_r+0x176>
1a009c4c:	4333      	orrs	r3, r6
1a009c4e:	607b      	str	r3, [r7, #4]
1a009c50:	f8d9 3004 	ldr.w	r3, [r9, #4]
1a009c54:	f043 0301 	orr.w	r3, r3, #1
1a009c58:	f8c9 3004 	str.w	r3, [r9, #4]
1a009c5c:	4640      	mov	r0, r8
1a009c5e:	f7fc fadb 	bl	1a006218 <__malloc_unlock>
1a009c62:	46aa      	mov	sl, r5
1a009c64:	4650      	mov	r0, sl
1a009c66:	b003      	add	sp, #12
1a009c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009c6c:	4611      	mov	r1, r2
1a009c6e:	b003      	add	sp, #12
1a009c70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a009c74:	f7fb bf2c 	b.w	1a005ad0 <_malloc_r>
1a009c78:	f020 0003 	bic.w	r0, r0, #3
1a009c7c:	1833      	adds	r3, r6, r0
1a009c7e:	428b      	cmp	r3, r1
1a009c80:	db61      	blt.n	1a009d46 <_realloc_r+0x22a>
1a009c82:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
1a009c86:	461e      	mov	r6, r3
1a009c88:	60ca      	str	r2, [r1, #12]
1a009c8a:	eb07 0903 	add.w	r9, r7, r3
1a009c8e:	6091      	str	r1, [r2, #8]
1a009c90:	e7d6      	b.n	1a009c40 <_realloc_r+0x124>
1a009c92:	1939      	adds	r1, r7, r4
1a009c94:	4323      	orrs	r3, r4
1a009c96:	f042 0201 	orr.w	r2, r2, #1
1a009c9a:	607b      	str	r3, [r7, #4]
1a009c9c:	604a      	str	r2, [r1, #4]
1a009c9e:	f8d9 3004 	ldr.w	r3, [r9, #4]
1a009ca2:	f043 0301 	orr.w	r3, r3, #1
1a009ca6:	3108      	adds	r1, #8
1a009ca8:	f8c9 3004 	str.w	r3, [r9, #4]
1a009cac:	4640      	mov	r0, r8
1a009cae:	f7fb fdb7 	bl	1a005820 <_free_r>
1a009cb2:	e7d3      	b.n	1a009c5c <_realloc_r+0x140>
1a009cb4:	6840      	ldr	r0, [r0, #4]
1a009cb6:	f020 0903 	bic.w	r9, r0, #3
1a009cba:	44b1      	add	r9, r6
1a009cbc:	f104 0010 	add.w	r0, r4, #16
1a009cc0:	4581      	cmp	r9, r0
1a009cc2:	da77      	bge.n	1a009db4 <_realloc_r+0x298>
1a009cc4:	07d2      	lsls	r2, r2, #31
1a009cc6:	f53f af56 	bmi.w	1a009b76 <_realloc_r+0x5a>
1a009cca:	f855 2c08 	ldr.w	r2, [r5, #-8]
1a009cce:	eba7 0b02 	sub.w	fp, r7, r2
1a009cd2:	f8db 2004 	ldr.w	r2, [fp, #4]
1a009cd6:	f022 0203 	bic.w	r2, r2, #3
1a009cda:	4491      	add	r9, r2
1a009cdc:	4548      	cmp	r0, r9
1a009cde:	dc87      	bgt.n	1a009bf0 <_realloc_r+0xd4>
1a009ce0:	46da      	mov	sl, fp
1a009ce2:	f8db 100c 	ldr.w	r1, [fp, #12]
1a009ce6:	f85a 0f08 	ldr.w	r0, [sl, #8]!
1a009cea:	1f32      	subs	r2, r6, #4
1a009cec:	2a24      	cmp	r2, #36	; 0x24
1a009cee:	60c1      	str	r1, [r0, #12]
1a009cf0:	6088      	str	r0, [r1, #8]
1a009cf2:	f200 80a1 	bhi.w	1a009e38 <_realloc_r+0x31c>
1a009cf6:	2a13      	cmp	r2, #19
1a009cf8:	6829      	ldr	r1, [r5, #0]
1a009cfa:	f240 809b 	bls.w	1a009e34 <_realloc_r+0x318>
1a009cfe:	f8cb 1008 	str.w	r1, [fp, #8]
1a009d02:	6869      	ldr	r1, [r5, #4]
1a009d04:	f8cb 100c 	str.w	r1, [fp, #12]
1a009d08:	2a1b      	cmp	r2, #27
1a009d0a:	68a9      	ldr	r1, [r5, #8]
1a009d0c:	f200 809b 	bhi.w	1a009e46 <_realloc_r+0x32a>
1a009d10:	f10b 0210 	add.w	r2, fp, #16
1a009d14:	3508      	adds	r5, #8
1a009d16:	6011      	str	r1, [r2, #0]
1a009d18:	6869      	ldr	r1, [r5, #4]
1a009d1a:	6051      	str	r1, [r2, #4]
1a009d1c:	68a9      	ldr	r1, [r5, #8]
1a009d1e:	6091      	str	r1, [r2, #8]
1a009d20:	eb0b 0104 	add.w	r1, fp, r4
1a009d24:	eba9 0204 	sub.w	r2, r9, r4
1a009d28:	f042 0201 	orr.w	r2, r2, #1
1a009d2c:	6099      	str	r1, [r3, #8]
1a009d2e:	604a      	str	r2, [r1, #4]
1a009d30:	f8db 3004 	ldr.w	r3, [fp, #4]
1a009d34:	f003 0301 	and.w	r3, r3, #1
1a009d38:	431c      	orrs	r4, r3
1a009d3a:	4640      	mov	r0, r8
1a009d3c:	f8cb 4004 	str.w	r4, [fp, #4]
1a009d40:	f7fc fa6a 	bl	1a006218 <__malloc_unlock>
1a009d44:	e78e      	b.n	1a009c64 <_realloc_r+0x148>
1a009d46:	07d3      	lsls	r3, r2, #31
1a009d48:	f53f af15 	bmi.w	1a009b76 <_realloc_r+0x5a>
1a009d4c:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a009d50:	eba7 0b03 	sub.w	fp, r7, r3
1a009d54:	f8db 2004 	ldr.w	r2, [fp, #4]
1a009d58:	f022 0203 	bic.w	r2, r2, #3
1a009d5c:	4410      	add	r0, r2
1a009d5e:	1983      	adds	r3, r0, r6
1a009d60:	428b      	cmp	r3, r1
1a009d62:	f6ff af45 	blt.w	1a009bf0 <_realloc_r+0xd4>
1a009d66:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
1a009d6a:	46da      	mov	sl, fp
1a009d6c:	60ca      	str	r2, [r1, #12]
1a009d6e:	6091      	str	r1, [r2, #8]
1a009d70:	e742      	b.n	1a009bf8 <_realloc_r+0xdc>
1a009d72:	6001      	str	r1, [r0, #0]
1a009d74:	686b      	ldr	r3, [r5, #4]
1a009d76:	6043      	str	r3, [r0, #4]
1a009d78:	2a1b      	cmp	r2, #27
1a009d7a:	d83a      	bhi.n	1a009df2 <_realloc_r+0x2d6>
1a009d7c:	f105 0208 	add.w	r2, r5, #8
1a009d80:	f100 0308 	add.w	r3, r0, #8
1a009d84:	68a9      	ldr	r1, [r5, #8]
1a009d86:	e710      	b.n	1a009baa <_realloc_r+0x8e>
1a009d88:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a009d8c:	f023 0303 	bic.w	r3, r3, #3
1a009d90:	441e      	add	r6, r3
1a009d92:	eb07 0906 	add.w	r9, r7, r6
1a009d96:	e753      	b.n	1a009c40 <_realloc_r+0x124>
1a009d98:	4652      	mov	r2, sl
1a009d9a:	e749      	b.n	1a009c30 <_realloc_r+0x114>
1a009d9c:	4629      	mov	r1, r5
1a009d9e:	4650      	mov	r0, sl
1a009da0:	461e      	mov	r6, r3
1a009da2:	465f      	mov	r7, fp
1a009da4:	f7ff fb4c 	bl	1a009440 <memmove>
1a009da8:	4655      	mov	r5, sl
1a009daa:	e749      	b.n	1a009c40 <_realloc_r+0x124>
1a009dac:	4629      	mov	r1, r5
1a009dae:	f7ff fb47 	bl	1a009440 <memmove>
1a009db2:	e6ff      	b.n	1a009bb4 <_realloc_r+0x98>
1a009db4:	4427      	add	r7, r4
1a009db6:	eba9 0904 	sub.w	r9, r9, r4
1a009dba:	f049 0201 	orr.w	r2, r9, #1
1a009dbe:	609f      	str	r7, [r3, #8]
1a009dc0:	607a      	str	r2, [r7, #4]
1a009dc2:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a009dc6:	f003 0301 	and.w	r3, r3, #1
1a009dca:	431c      	orrs	r4, r3
1a009dcc:	4640      	mov	r0, r8
1a009dce:	f845 4c04 	str.w	r4, [r5, #-4]
1a009dd2:	f7fc fa21 	bl	1a006218 <__malloc_unlock>
1a009dd6:	46aa      	mov	sl, r5
1a009dd8:	e744      	b.n	1a009c64 <_realloc_r+0x148>
1a009dda:	f8cb 1010 	str.w	r1, [fp, #16]
1a009dde:	68e9      	ldr	r1, [r5, #12]
1a009de0:	f8cb 1014 	str.w	r1, [fp, #20]
1a009de4:	2a24      	cmp	r2, #36	; 0x24
1a009de6:	d010      	beq.n	1a009e0a <_realloc_r+0x2ee>
1a009de8:	6929      	ldr	r1, [r5, #16]
1a009dea:	f10b 0218 	add.w	r2, fp, #24
1a009dee:	3510      	adds	r5, #16
1a009df0:	e71e      	b.n	1a009c30 <_realloc_r+0x114>
1a009df2:	68ab      	ldr	r3, [r5, #8]
1a009df4:	6083      	str	r3, [r0, #8]
1a009df6:	68eb      	ldr	r3, [r5, #12]
1a009df8:	60c3      	str	r3, [r0, #12]
1a009dfa:	2a24      	cmp	r2, #36	; 0x24
1a009dfc:	d010      	beq.n	1a009e20 <_realloc_r+0x304>
1a009dfe:	f105 0210 	add.w	r2, r5, #16
1a009e02:	f100 0310 	add.w	r3, r0, #16
1a009e06:	6929      	ldr	r1, [r5, #16]
1a009e08:	e6cf      	b.n	1a009baa <_realloc_r+0x8e>
1a009e0a:	692a      	ldr	r2, [r5, #16]
1a009e0c:	f8cb 2018 	str.w	r2, [fp, #24]
1a009e10:	696a      	ldr	r2, [r5, #20]
1a009e12:	f8cb 201c 	str.w	r2, [fp, #28]
1a009e16:	69a9      	ldr	r1, [r5, #24]
1a009e18:	f10b 0220 	add.w	r2, fp, #32
1a009e1c:	3518      	adds	r5, #24
1a009e1e:	e707      	b.n	1a009c30 <_realloc_r+0x114>
1a009e20:	692b      	ldr	r3, [r5, #16]
1a009e22:	6103      	str	r3, [r0, #16]
1a009e24:	696b      	ldr	r3, [r5, #20]
1a009e26:	6143      	str	r3, [r0, #20]
1a009e28:	69a9      	ldr	r1, [r5, #24]
1a009e2a:	f105 0218 	add.w	r2, r5, #24
1a009e2e:	f100 0318 	add.w	r3, r0, #24
1a009e32:	e6ba      	b.n	1a009baa <_realloc_r+0x8e>
1a009e34:	4652      	mov	r2, sl
1a009e36:	e76e      	b.n	1a009d16 <_realloc_r+0x1fa>
1a009e38:	4629      	mov	r1, r5
1a009e3a:	4650      	mov	r0, sl
1a009e3c:	9301      	str	r3, [sp, #4]
1a009e3e:	f7ff faff 	bl	1a009440 <memmove>
1a009e42:	9b01      	ldr	r3, [sp, #4]
1a009e44:	e76c      	b.n	1a009d20 <_realloc_r+0x204>
1a009e46:	f8cb 1010 	str.w	r1, [fp, #16]
1a009e4a:	68e9      	ldr	r1, [r5, #12]
1a009e4c:	f8cb 1014 	str.w	r1, [fp, #20]
1a009e50:	2a24      	cmp	r2, #36	; 0x24
1a009e52:	d004      	beq.n	1a009e5e <_realloc_r+0x342>
1a009e54:	6929      	ldr	r1, [r5, #16]
1a009e56:	f10b 0218 	add.w	r2, fp, #24
1a009e5a:	3510      	adds	r5, #16
1a009e5c:	e75b      	b.n	1a009d16 <_realloc_r+0x1fa>
1a009e5e:	692a      	ldr	r2, [r5, #16]
1a009e60:	f8cb 2018 	str.w	r2, [fp, #24]
1a009e64:	696a      	ldr	r2, [r5, #20]
1a009e66:	f8cb 201c 	str.w	r2, [fp, #28]
1a009e6a:	69a9      	ldr	r1, [r5, #24]
1a009e6c:	f10b 0220 	add.w	r2, fp, #32
1a009e70:	3518      	adds	r5, #24
1a009e72:	e750      	b.n	1a009d16 <_realloc_r+0x1fa>
1a009e74:	10000664 	.word	0x10000664

1a009e78 <frexp>:
1a009e78:	ec53 2b10 	vmov	r2, r3, d0
1a009e7c:	b570      	push	{r4, r5, r6, lr}
1a009e7e:	4e16      	ldr	r6, [pc, #88]	; (1a009ed8 <frexp+0x60>)
1a009e80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a009e84:	2500      	movs	r5, #0
1a009e86:	42b1      	cmp	r1, r6
1a009e88:	4604      	mov	r4, r0
1a009e8a:	6005      	str	r5, [r0, #0]
1a009e8c:	dc21      	bgt.n	1a009ed2 <frexp+0x5a>
1a009e8e:	ee10 6a10 	vmov	r6, s0
1a009e92:	430e      	orrs	r6, r1
1a009e94:	d01d      	beq.n	1a009ed2 <frexp+0x5a>
1a009e96:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a009e9a:	4618      	mov	r0, r3
1a009e9c:	da0c      	bge.n	1a009eb8 <frexp+0x40>
1a009e9e:	4619      	mov	r1, r3
1a009ea0:	2200      	movs	r2, #0
1a009ea2:	ee10 0a10 	vmov	r0, s0
1a009ea6:	4b0d      	ldr	r3, [pc, #52]	; (1a009edc <frexp+0x64>)
1a009ea8:	f7fa fe5a 	bl	1a004b60 <__aeabi_dmul>
1a009eac:	f06f 0535 	mvn.w	r5, #53	; 0x35
1a009eb0:	4602      	mov	r2, r0
1a009eb2:	4608      	mov	r0, r1
1a009eb4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a009eb8:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
1a009ebc:	1509      	asrs	r1, r1, #20
1a009ebe:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
1a009ec2:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
1a009ec6:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
1a009eca:	4429      	add	r1, r5
1a009ecc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a009ed0:	6021      	str	r1, [r4, #0]
1a009ed2:	ec43 2b10 	vmov	d0, r2, r3
1a009ed6:	bd70      	pop	{r4, r5, r6, pc}
1a009ed8:	7fefffff 	.word	0x7fefffff
1a009edc:	43500000 	.word	0x43500000

1a009ee0 <strncpy>:
1a009ee0:	ea40 0301 	orr.w	r3, r0, r1
1a009ee4:	079b      	lsls	r3, r3, #30
1a009ee6:	b470      	push	{r4, r5, r6}
1a009ee8:	d12a      	bne.n	1a009f40 <strncpy+0x60>
1a009eea:	2a03      	cmp	r2, #3
1a009eec:	d928      	bls.n	1a009f40 <strncpy+0x60>
1a009eee:	460c      	mov	r4, r1
1a009ef0:	4603      	mov	r3, r0
1a009ef2:	4621      	mov	r1, r4
1a009ef4:	f854 6b04 	ldr.w	r6, [r4], #4
1a009ef8:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
1a009efc:	ea25 0506 	bic.w	r5, r5, r6
1a009f00:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
1a009f04:	d106      	bne.n	1a009f14 <strncpy+0x34>
1a009f06:	3a04      	subs	r2, #4
1a009f08:	2a03      	cmp	r2, #3
1a009f0a:	f843 6b04 	str.w	r6, [r3], #4
1a009f0e:	4621      	mov	r1, r4
1a009f10:	d8ef      	bhi.n	1a009ef2 <strncpy+0x12>
1a009f12:	b19a      	cbz	r2, 1a009f3c <strncpy+0x5c>
1a009f14:	780c      	ldrb	r4, [r1, #0]
1a009f16:	701c      	strb	r4, [r3, #0]
1a009f18:	3a01      	subs	r2, #1
1a009f1a:	3301      	adds	r3, #1
1a009f1c:	b13c      	cbz	r4, 1a009f2e <strncpy+0x4e>
1a009f1e:	b16a      	cbz	r2, 1a009f3c <strncpy+0x5c>
1a009f20:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a009f24:	f803 4b01 	strb.w	r4, [r3], #1
1a009f28:	3a01      	subs	r2, #1
1a009f2a:	2c00      	cmp	r4, #0
1a009f2c:	d1f7      	bne.n	1a009f1e <strncpy+0x3e>
1a009f2e:	b12a      	cbz	r2, 1a009f3c <strncpy+0x5c>
1a009f30:	441a      	add	r2, r3
1a009f32:	2100      	movs	r1, #0
1a009f34:	f803 1b01 	strb.w	r1, [r3], #1
1a009f38:	4293      	cmp	r3, r2
1a009f3a:	d1fb      	bne.n	1a009f34 <strncpy+0x54>
1a009f3c:	bc70      	pop	{r4, r5, r6}
1a009f3e:	4770      	bx	lr
1a009f40:	4603      	mov	r3, r0
1a009f42:	e7e6      	b.n	1a009f12 <strncpy+0x32>

1a009f44 <__sprint_r.part.0>:
1a009f44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a009f48:	6e4b      	ldr	r3, [r1, #100]	; 0x64
1a009f4a:	049c      	lsls	r4, r3, #18
1a009f4c:	4692      	mov	sl, r2
1a009f4e:	d52d      	bpl.n	1a009fac <__sprint_r.part.0+0x68>
1a009f50:	6893      	ldr	r3, [r2, #8]
1a009f52:	6812      	ldr	r2, [r2, #0]
1a009f54:	b343      	cbz	r3, 1a009fa8 <__sprint_r.part.0+0x64>
1a009f56:	460e      	mov	r6, r1
1a009f58:	4607      	mov	r7, r0
1a009f5a:	f102 0908 	add.w	r9, r2, #8
1a009f5e:	e959 5b02 	ldrd	r5, fp, [r9, #-8]
1a009f62:	ea5f 089b 	movs.w	r8, fp, lsr #2
1a009f66:	d015      	beq.n	1a009f94 <__sprint_r.part.0+0x50>
1a009f68:	3d04      	subs	r5, #4
1a009f6a:	2400      	movs	r4, #0
1a009f6c:	e001      	b.n	1a009f72 <__sprint_r.part.0+0x2e>
1a009f6e:	45a0      	cmp	r8, r4
1a009f70:	d00e      	beq.n	1a009f90 <__sprint_r.part.0+0x4c>
1a009f72:	4632      	mov	r2, r6
1a009f74:	f855 1f04 	ldr.w	r1, [r5, #4]!
1a009f78:	4638      	mov	r0, r7
1a009f7a:	f000 f8ad 	bl	1a00a0d8 <_fputwc_r>
1a009f7e:	1c43      	adds	r3, r0, #1
1a009f80:	f104 0401 	add.w	r4, r4, #1
1a009f84:	d1f3      	bne.n	1a009f6e <__sprint_r.part.0+0x2a>
1a009f86:	2300      	movs	r3, #0
1a009f88:	e9ca 3301 	strd	r3, r3, [sl, #4]
1a009f8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009f90:	f8da 3008 	ldr.w	r3, [sl, #8]
1a009f94:	f02b 0b03 	bic.w	fp, fp, #3
1a009f98:	eba3 030b 	sub.w	r3, r3, fp
1a009f9c:	f8ca 3008 	str.w	r3, [sl, #8]
1a009fa0:	f109 0908 	add.w	r9, r9, #8
1a009fa4:	2b00      	cmp	r3, #0
1a009fa6:	d1da      	bne.n	1a009f5e <__sprint_r.part.0+0x1a>
1a009fa8:	2000      	movs	r0, #0
1a009faa:	e7ec      	b.n	1a009f86 <__sprint_r.part.0+0x42>
1a009fac:	f7fe fff0 	bl	1a008f90 <__sfvwrite_r>
1a009fb0:	2300      	movs	r3, #0
1a009fb2:	e9ca 3301 	strd	r3, r3, [sl, #4]
1a009fb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009fba:	bf00      	nop

1a009fbc <__sprint_r>:
1a009fbc:	6893      	ldr	r3, [r2, #8]
1a009fbe:	b10b      	cbz	r3, 1a009fc4 <__sprint_r+0x8>
1a009fc0:	f7ff bfc0 	b.w	1a009f44 <__sprint_r.part.0>
1a009fc4:	b410      	push	{r4}
1a009fc6:	4618      	mov	r0, r3
1a009fc8:	6053      	str	r3, [r2, #4]
1a009fca:	f85d 4b04 	ldr.w	r4, [sp], #4
1a009fce:	4770      	bx	lr

1a009fd0 <_calloc_r>:
1a009fd0:	b510      	push	{r4, lr}
1a009fd2:	fb02 f101 	mul.w	r1, r2, r1
1a009fd6:	f7fb fd7b 	bl	1a005ad0 <_malloc_r>
1a009fda:	4604      	mov	r4, r0
1a009fdc:	b1d8      	cbz	r0, 1a00a016 <_calloc_r+0x46>
1a009fde:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a009fe2:	f022 0203 	bic.w	r2, r2, #3
1a009fe6:	3a04      	subs	r2, #4
1a009fe8:	2a24      	cmp	r2, #36	; 0x24
1a009fea:	d81d      	bhi.n	1a00a028 <_calloc_r+0x58>
1a009fec:	2a13      	cmp	r2, #19
1a009fee:	d914      	bls.n	1a00a01a <_calloc_r+0x4a>
1a009ff0:	2300      	movs	r3, #0
1a009ff2:	2a1b      	cmp	r2, #27
1a009ff4:	e9c0 3300 	strd	r3, r3, [r0]
1a009ff8:	d91b      	bls.n	1a00a032 <_calloc_r+0x62>
1a009ffa:	2a24      	cmp	r2, #36	; 0x24
1a009ffc:	e9c0 3302 	strd	r3, r3, [r0, #8]
1a00a000:	bf0a      	itet	eq
1a00a002:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
1a00a006:	f100 0210 	addne.w	r2, r0, #16
1a00a00a:	f100 0218 	addeq.w	r2, r0, #24
1a00a00e:	2300      	movs	r3, #0
1a00a010:	e9c2 3300 	strd	r3, r3, [r2]
1a00a014:	6093      	str	r3, [r2, #8]
1a00a016:	4620      	mov	r0, r4
1a00a018:	bd10      	pop	{r4, pc}
1a00a01a:	4602      	mov	r2, r0
1a00a01c:	2300      	movs	r3, #0
1a00a01e:	e9c2 3300 	strd	r3, r3, [r2]
1a00a022:	6093      	str	r3, [r2, #8]
1a00a024:	4620      	mov	r0, r4
1a00a026:	bd10      	pop	{r4, pc}
1a00a028:	2100      	movs	r1, #0
1a00a02a:	f7fc f8a5 	bl	1a006178 <memset>
1a00a02e:	4620      	mov	r0, r4
1a00a030:	bd10      	pop	{r4, pc}
1a00a032:	f100 0208 	add.w	r2, r0, #8
1a00a036:	e7f1      	b.n	1a00a01c <_calloc_r+0x4c>

1a00a038 <__fputwc>:
1a00a038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00a03c:	b082      	sub	sp, #8
1a00a03e:	4681      	mov	r9, r0
1a00a040:	4688      	mov	r8, r1
1a00a042:	4614      	mov	r4, r2
1a00a044:	f7fb fd2e 	bl	1a005aa4 <__locale_mb_cur_max>
1a00a048:	2801      	cmp	r0, #1
1a00a04a:	d103      	bne.n	1a00a054 <__fputwc+0x1c>
1a00a04c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a00a050:	2bfe      	cmp	r3, #254	; 0xfe
1a00a052:	d933      	bls.n	1a00a0bc <__fputwc+0x84>
1a00a054:	4642      	mov	r2, r8
1a00a056:	f104 035c 	add.w	r3, r4, #92	; 0x5c
1a00a05a:	a901      	add	r1, sp, #4
1a00a05c:	4648      	mov	r0, r9
1a00a05e:	f000 f8c5 	bl	1a00a1ec <_wcrtomb_r>
1a00a062:	1c42      	adds	r2, r0, #1
1a00a064:	4606      	mov	r6, r0
1a00a066:	d02f      	beq.n	1a00a0c8 <__fputwc+0x90>
1a00a068:	b320      	cbz	r0, 1a00a0b4 <__fputwc+0x7c>
1a00a06a:	f89d c004 	ldrb.w	ip, [sp, #4]
1a00a06e:	2500      	movs	r5, #0
1a00a070:	f10d 0a04 	add.w	sl, sp, #4
1a00a074:	e009      	b.n	1a00a08a <__fputwc+0x52>
1a00a076:	6823      	ldr	r3, [r4, #0]
1a00a078:	1c5a      	adds	r2, r3, #1
1a00a07a:	6022      	str	r2, [r4, #0]
1a00a07c:	f883 c000 	strb.w	ip, [r3]
1a00a080:	3501      	adds	r5, #1
1a00a082:	42b5      	cmp	r5, r6
1a00a084:	d216      	bcs.n	1a00a0b4 <__fputwc+0x7c>
1a00a086:	f815 c00a 	ldrb.w	ip, [r5, sl]
1a00a08a:	68a3      	ldr	r3, [r4, #8]
1a00a08c:	3b01      	subs	r3, #1
1a00a08e:	2b00      	cmp	r3, #0
1a00a090:	60a3      	str	r3, [r4, #8]
1a00a092:	daf0      	bge.n	1a00a076 <__fputwc+0x3e>
1a00a094:	69a7      	ldr	r7, [r4, #24]
1a00a096:	42bb      	cmp	r3, r7
1a00a098:	4661      	mov	r1, ip
1a00a09a:	4622      	mov	r2, r4
1a00a09c:	4648      	mov	r0, r9
1a00a09e:	db02      	blt.n	1a00a0a6 <__fputwc+0x6e>
1a00a0a0:	f1bc 0f0a 	cmp.w	ip, #10
1a00a0a4:	d1e7      	bne.n	1a00a076 <__fputwc+0x3e>
1a00a0a6:	f000 f849 	bl	1a00a13c <__swbuf_r>
1a00a0aa:	1c43      	adds	r3, r0, #1
1a00a0ac:	d1e8      	bne.n	1a00a080 <__fputwc+0x48>
1a00a0ae:	b002      	add	sp, #8
1a00a0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00a0b4:	4640      	mov	r0, r8
1a00a0b6:	b002      	add	sp, #8
1a00a0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00a0bc:	fa5f fc88 	uxtb.w	ip, r8
1a00a0c0:	4606      	mov	r6, r0
1a00a0c2:	f88d c004 	strb.w	ip, [sp, #4]
1a00a0c6:	e7d2      	b.n	1a00a06e <__fputwc+0x36>
1a00a0c8:	89a3      	ldrh	r3, [r4, #12]
1a00a0ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00a0ce:	81a3      	strh	r3, [r4, #12]
1a00a0d0:	b002      	add	sp, #8
1a00a0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00a0d6:	bf00      	nop

1a00a0d8 <_fputwc_r>:
1a00a0d8:	b530      	push	{r4, r5, lr}
1a00a0da:	4605      	mov	r5, r0
1a00a0dc:	6e50      	ldr	r0, [r2, #100]	; 0x64
1a00a0de:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
1a00a0e2:	07c0      	lsls	r0, r0, #31
1a00a0e4:	4614      	mov	r4, r2
1a00a0e6:	b083      	sub	sp, #12
1a00a0e8:	b29a      	uxth	r2, r3
1a00a0ea:	d401      	bmi.n	1a00a0f0 <_fputwc_r+0x18>
1a00a0ec:	0590      	lsls	r0, r2, #22
1a00a0ee:	d51c      	bpl.n	1a00a12a <_fputwc_r+0x52>
1a00a0f0:	0490      	lsls	r0, r2, #18
1a00a0f2:	d406      	bmi.n	1a00a102 <_fputwc_r+0x2a>
1a00a0f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a00a0f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a00a0fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a00a0fe:	81a3      	strh	r3, [r4, #12]
1a00a100:	6662      	str	r2, [r4, #100]	; 0x64
1a00a102:	4628      	mov	r0, r5
1a00a104:	4622      	mov	r2, r4
1a00a106:	f7ff ff97 	bl	1a00a038 <__fputwc>
1a00a10a:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00a10c:	07da      	lsls	r2, r3, #31
1a00a10e:	4605      	mov	r5, r0
1a00a110:	d402      	bmi.n	1a00a118 <_fputwc_r+0x40>
1a00a112:	89a3      	ldrh	r3, [r4, #12]
1a00a114:	059b      	lsls	r3, r3, #22
1a00a116:	d502      	bpl.n	1a00a11e <_fputwc_r+0x46>
1a00a118:	4628      	mov	r0, r5
1a00a11a:	b003      	add	sp, #12
1a00a11c:	bd30      	pop	{r4, r5, pc}
1a00a11e:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00a120:	f7fb fcd4 	bl	1a005acc <__retarget_lock_release_recursive>
1a00a124:	4628      	mov	r0, r5
1a00a126:	b003      	add	sp, #12
1a00a128:	bd30      	pop	{r4, r5, pc}
1a00a12a:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00a12c:	9101      	str	r1, [sp, #4]
1a00a12e:	f7fb fccb 	bl	1a005ac8 <__retarget_lock_acquire_recursive>
1a00a132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00a136:	9901      	ldr	r1, [sp, #4]
1a00a138:	b29a      	uxth	r2, r3
1a00a13a:	e7d9      	b.n	1a00a0f0 <_fputwc_r+0x18>

1a00a13c <__swbuf_r>:
1a00a13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00a13e:	460d      	mov	r5, r1
1a00a140:	4614      	mov	r4, r2
1a00a142:	4606      	mov	r6, r0
1a00a144:	b110      	cbz	r0, 1a00a14c <__swbuf_r+0x10>
1a00a146:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a00a148:	2b00      	cmp	r3, #0
1a00a14a:	d043      	beq.n	1a00a1d4 <__swbuf_r+0x98>
1a00a14c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00a150:	69a3      	ldr	r3, [r4, #24]
1a00a152:	60a3      	str	r3, [r4, #8]
1a00a154:	b291      	uxth	r1, r2
1a00a156:	0708      	lsls	r0, r1, #28
1a00a158:	d51b      	bpl.n	1a00a192 <__swbuf_r+0x56>
1a00a15a:	6923      	ldr	r3, [r4, #16]
1a00a15c:	b1cb      	cbz	r3, 1a00a192 <__swbuf_r+0x56>
1a00a15e:	b2ed      	uxtb	r5, r5
1a00a160:	0489      	lsls	r1, r1, #18
1a00a162:	462f      	mov	r7, r5
1a00a164:	d522      	bpl.n	1a00a1ac <__swbuf_r+0x70>
1a00a166:	6822      	ldr	r2, [r4, #0]
1a00a168:	6961      	ldr	r1, [r4, #20]
1a00a16a:	1ad3      	subs	r3, r2, r3
1a00a16c:	4299      	cmp	r1, r3
1a00a16e:	dd29      	ble.n	1a00a1c4 <__swbuf_r+0x88>
1a00a170:	3301      	adds	r3, #1
1a00a172:	68a1      	ldr	r1, [r4, #8]
1a00a174:	1c50      	adds	r0, r2, #1
1a00a176:	3901      	subs	r1, #1
1a00a178:	60a1      	str	r1, [r4, #8]
1a00a17a:	6020      	str	r0, [r4, #0]
1a00a17c:	7015      	strb	r5, [r2, #0]
1a00a17e:	6962      	ldr	r2, [r4, #20]
1a00a180:	429a      	cmp	r2, r3
1a00a182:	d02a      	beq.n	1a00a1da <__swbuf_r+0x9e>
1a00a184:	89a3      	ldrh	r3, [r4, #12]
1a00a186:	07db      	lsls	r3, r3, #31
1a00a188:	d501      	bpl.n	1a00a18e <__swbuf_r+0x52>
1a00a18a:	2d0a      	cmp	r5, #10
1a00a18c:	d025      	beq.n	1a00a1da <__swbuf_r+0x9e>
1a00a18e:	4638      	mov	r0, r7
1a00a190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00a192:	4621      	mov	r1, r4
1a00a194:	4630      	mov	r0, r6
1a00a196:	f7fd fef1 	bl	1a007f7c <__swsetup_r>
1a00a19a:	bb20      	cbnz	r0, 1a00a1e6 <__swbuf_r+0xaa>
1a00a19c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00a1a0:	6923      	ldr	r3, [r4, #16]
1a00a1a2:	b291      	uxth	r1, r2
1a00a1a4:	b2ed      	uxtb	r5, r5
1a00a1a6:	0489      	lsls	r1, r1, #18
1a00a1a8:	462f      	mov	r7, r5
1a00a1aa:	d4dc      	bmi.n	1a00a166 <__swbuf_r+0x2a>
1a00a1ac:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a00a1ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a00a1b2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a00a1b6:	81a2      	strh	r2, [r4, #12]
1a00a1b8:	6822      	ldr	r2, [r4, #0]
1a00a1ba:	6661      	str	r1, [r4, #100]	; 0x64
1a00a1bc:	6961      	ldr	r1, [r4, #20]
1a00a1be:	1ad3      	subs	r3, r2, r3
1a00a1c0:	4299      	cmp	r1, r3
1a00a1c2:	dcd5      	bgt.n	1a00a170 <__swbuf_r+0x34>
1a00a1c4:	4621      	mov	r1, r4
1a00a1c6:	4630      	mov	r0, r6
1a00a1c8:	f7fb fa46 	bl	1a005658 <_fflush_r>
1a00a1cc:	b958      	cbnz	r0, 1a00a1e6 <__swbuf_r+0xaa>
1a00a1ce:	6822      	ldr	r2, [r4, #0]
1a00a1d0:	2301      	movs	r3, #1
1a00a1d2:	e7ce      	b.n	1a00a172 <__swbuf_r+0x36>
1a00a1d4:	f7fb fa9c 	bl	1a005710 <__sinit>
1a00a1d8:	e7b8      	b.n	1a00a14c <__swbuf_r+0x10>
1a00a1da:	4621      	mov	r1, r4
1a00a1dc:	4630      	mov	r0, r6
1a00a1de:	f7fb fa3b 	bl	1a005658 <_fflush_r>
1a00a1e2:	2800      	cmp	r0, #0
1a00a1e4:	d0d3      	beq.n	1a00a18e <__swbuf_r+0x52>
1a00a1e6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a00a1ea:	e7d0      	b.n	1a00a18e <__swbuf_r+0x52>

1a00a1ec <_wcrtomb_r>:
1a00a1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00a1ee:	4c11      	ldr	r4, [pc, #68]	; (1a00a234 <_wcrtomb_r+0x48>)
1a00a1f0:	6824      	ldr	r4, [r4, #0]
1a00a1f2:	b085      	sub	sp, #20
1a00a1f4:	4606      	mov	r6, r0
1a00a1f6:	6b64      	ldr	r4, [r4, #52]	; 0x34
1a00a1f8:	461f      	mov	r7, r3
1a00a1fa:	b151      	cbz	r1, 1a00a212 <_wcrtomb_r+0x26>
1a00a1fc:	4d0e      	ldr	r5, [pc, #56]	; (1a00a238 <_wcrtomb_r+0x4c>)
1a00a1fe:	2c00      	cmp	r4, #0
1a00a200:	bf08      	it	eq
1a00a202:	462c      	moveq	r4, r5
1a00a204:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1a00a208:	47a0      	blx	r4
1a00a20a:	1c43      	adds	r3, r0, #1
1a00a20c:	d00c      	beq.n	1a00a228 <_wcrtomb_r+0x3c>
1a00a20e:	b005      	add	sp, #20
1a00a210:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00a212:	4a09      	ldr	r2, [pc, #36]	; (1a00a238 <_wcrtomb_r+0x4c>)
1a00a214:	2c00      	cmp	r4, #0
1a00a216:	bf08      	it	eq
1a00a218:	4614      	moveq	r4, r2
1a00a21a:	460a      	mov	r2, r1
1a00a21c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1a00a220:	a901      	add	r1, sp, #4
1a00a222:	47a0      	blx	r4
1a00a224:	1c43      	adds	r3, r0, #1
1a00a226:	d1f2      	bne.n	1a00a20e <_wcrtomb_r+0x22>
1a00a228:	2200      	movs	r2, #0
1a00a22a:	238a      	movs	r3, #138	; 0x8a
1a00a22c:	603a      	str	r2, [r7, #0]
1a00a22e:	6033      	str	r3, [r6, #0]
1a00a230:	b005      	add	sp, #20
1a00a232:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00a234:	100000cc 	.word	0x100000cc
1a00a238:	100004f8 	.word	0x100004f8

1a00a23c <__aeabi_dcmpun>:
1a00a23c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a00a240:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a00a244:	d102      	bne.n	1a00a24c <__aeabi_dcmpun+0x10>
1a00a246:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a00a24a:	d10a      	bne.n	1a00a262 <__aeabi_dcmpun+0x26>
1a00a24c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a00a250:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a00a254:	d102      	bne.n	1a00a25c <__aeabi_dcmpun+0x20>
1a00a256:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a00a25a:	d102      	bne.n	1a00a262 <__aeabi_dcmpun+0x26>
1a00a25c:	f04f 0000 	mov.w	r0, #0
1a00a260:	4770      	bx	lr
1a00a262:	f04f 0001 	mov.w	r0, #1
1a00a266:	4770      	bx	lr

1a00a268 <__aeabi_d2iz>:
1a00a268:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a00a26c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a00a270:	d215      	bcs.n	1a00a29e <__aeabi_d2iz+0x36>
1a00a272:	d511      	bpl.n	1a00a298 <__aeabi_d2iz+0x30>
1a00a274:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a00a278:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a00a27c:	d912      	bls.n	1a00a2a4 <__aeabi_d2iz+0x3c>
1a00a27e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a00a282:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a00a286:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a00a28a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a00a28e:	fa23 f002 	lsr.w	r0, r3, r2
1a00a292:	bf18      	it	ne
1a00a294:	4240      	negne	r0, r0
1a00a296:	4770      	bx	lr
1a00a298:	f04f 0000 	mov.w	r0, #0
1a00a29c:	4770      	bx	lr
1a00a29e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a00a2a2:	d105      	bne.n	1a00a2b0 <__aeabi_d2iz+0x48>
1a00a2a4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a00a2a8:	bf08      	it	eq
1a00a2aa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a00a2ae:	4770      	bx	lr
1a00a2b0:	f04f 0000 	mov.w	r0, #0
1a00a2b4:	4770      	bx	lr
1a00a2b6:	bf00      	nop
1a00a2b8:	63206c45 	.word	0x63206c45
1a00a2bc:	6e616d6f 	.word	0x6e616d6f
1a00a2c0:	65206f64 	.word	0x65206f64
1a00a2c4:	63253a73 	.word	0x63253a73
1a00a2c8:	0000000a 	.word	0x0000000a
1a00a2cc:	616d6f43 	.word	0x616d6f43
1a00a2d0:	206f646e 	.word	0x206f646e
1a00a2d4:	61766e49 	.word	0x61766e49
1a00a2d8:	6f64696c 	.word	0x6f64696c
1a00a2dc:	2e2e2e2e 	.word	0x2e2e2e2e
1a00a2e0:	0000002e 	.word	0x0000002e
1a00a2e4:	656d756e 	.word	0x656d756e
1a00a2e8:	64206f72 	.word	0x64206f72
1a00a2ec:	61702065 	.word	0x61702065
1a00a2f0:	3a736f73 	.word	0x3a736f73
1a00a2f4:	000a6425 	.word	0x000a6425
1a00a2f8:	20746553 	.word	0x20746553
1a00a2fc:	6e696f50 	.word	0x6e696f50
1a00a300:	64253a74 	.word	0x64253a74
1a00a304:	ffff000a 	.word	0xffff000a
1a00a308:	62617254 	.word	0x62617254
1a00a30c:	206f6a61 	.word	0x206f6a61
1a00a310:	616e6946 	.word	0x616e6946
1a00a314:	6f63206c 	.word	0x6f63206c
1a00a318:	7266206e 	.word	0x7266206e
1a00a31c:	54526565 	.word	0x54526565
1a00a320:	7920534f 	.word	0x7920534f
1a00a324:	50417320 	.word	0x50417320
1a00a328:	00002e49 	.word	0x00002e49
1a00a32c:	72616568 	.word	0x72616568
1a00a330:	61656274 	.word	0x61656274
1a00a334:	00000074 	.word	0x00000074
1a00a338:	65726154 	.word	0x65726154
1a00a33c:	75712061 	.word	0x75712061
1a00a340:	6c612065 	.word	0x6c612065
1a00a344:	6563616d 	.word	0x6563616d
1a00a348:	6520616e 	.word	0x6520616e
1a00a34c:	6f63206c 	.word	0x6f63206c
1a00a350:	646e616d 	.word	0x646e616d
1a00a354:	0000006f 	.word	0x0000006f
1a00a358:	65726154 	.word	0x65726154
1a00a35c:	75712061 	.word	0x75712061
1a00a360:	72702065 	.word	0x72702065
1a00a364:	7365636f 	.word	0x7365636f
1a00a368:	6c652061 	.word	0x6c652061
1a00a36c:	6d6f6320 	.word	0x6d6f6320
1a00a370:	6f646e61 	.word	0x6f646e61
1a00a374:	63657220 	.word	0x63657220
1a00a378:	64696269 	.word	0x64696269
1a00a37c:	0000006f 	.word	0x0000006f
1a00a380:	65726154 	.word	0x65726154
1a00a384:	48202c61 	.word	0x48202c61
1a00a388:	6c696261 	.word	0x6c696261
1a00a38c:	20617469 	.word	0x20617469
1a00a390:	6544206f 	.word	0x6544206f
1a00a394:	62616873 	.word	0x62616873
1a00a398:	74696c69 	.word	0x74696c69
1a00a39c:	6c652061 	.word	0x6c652061
1a00a3a0:	746f4d20 	.word	0x746f4d20
1a00a3a4:	0000726f 	.word	0x0000726f
1a00a3a8:	65726154 	.word	0x65726154
1a00a3ac:	65202c61 	.word	0x65202c61
1a00a3b0:	62617473 	.word	0x62617473
1a00a3b4:	6563656c 	.word	0x6563656c
1a00a3b8:	736f6c20 	.word	0x736f6c20
1a00a3bc:	63696d20 	.word	0x63696d20
1a00a3c0:	61706f72 	.word	0x61706f72
1a00a3c4:	00736f73 	.word	0x00736f73
1a00a3c8:	65726154 	.word	0x65726154
1a00a3cc:	65202c61 	.word	0x65202c61
1a00a3d0:	62617473 	.word	0x62617473
1a00a3d4:	6563656c 	.word	0x6563656c
1a00a3d8:	206c6520 	.word	0x206c6520
1a00a3dc:	746e6573 	.word	0x746e6573
1a00a3e0:	206f6469 	.word	0x206f6469
1a00a3e4:	67206564 	.word	0x67206564
1a00a3e8:	206f7269 	.word	0x206f7269
1a00a3ec:	206c6564 	.word	0x206c6564
1a00a3f0:	20656a65 	.word	0x20656a65
1a00a3f4:	206c6564 	.word	0x206c6564
1a00a3f8:	6f746f4d 	.word	0x6f746f4d
1a00a3fc:	00000072 	.word	0x00000072
1a00a400:	65726154 	.word	0x65726154
1a00a404:	65202c61 	.word	0x65202c61
1a00a408:	62617473 	.word	0x62617473
1a00a40c:	6563656c 	.word	0x6563656c
1a00a410:	20616c20 	.word	0x20616c20
1a00a414:	746e6163 	.word	0x746e6163
1a00a418:	64616469 	.word	0x64616469
1a00a41c:	20656420 	.word	0x20656420
1a00a420:	736c7570 	.word	0x736c7570
1a00a424:	0000736f 	.word	0x0000736f
1a00a428:	65726154 	.word	0x65726154
1a00a42c:	68202c61 	.word	0x68202c61
1a00a430:	20656361 	.word	0x20656361
1a00a434:	62617274 	.word	0x62617274
1a00a438:	72616a61 	.word	0x72616a61
1a00a43c:	206c6120 	.word	0x206c6120
1a00a440:	6f746f6d 	.word	0x6f746f6d
1a00a444:	61502072 	.word	0x61502072
1a00a448:	6f632050 	.word	0x6f632050
1a00a44c:	53206f6d 	.word	0x53206f6d
1a00a450:	6f767265 	.word	0x6f767265
1a00a454:	00000000 	.word	0x00000000
1a00a458:	65726154 	.word	0x65726154
1a00a45c:	73652c61 	.word	0x73652c61
1a00a460:	6c626174 	.word	0x6c626174
1a00a464:	20656365 	.word	0x20656365
1a00a468:	73206c65 	.word	0x73206c65
1a00a46c:	702d7465 	.word	0x702d7465
1a00a470:	746e696f 	.word	0x746e696f
1a00a474:	00000000 	.word	0x00000000
1a00a478:	65726154 	.word	0x65726154
1a00a47c:	65202c61 	.word	0x65202c61
1a00a480:	6e616373 	.word	0x6e616373
1a00a484:	6c206165 	.word	0x6c206165
1a00a488:	6320736f 	.word	0x6320736f
1a00a48c:	6c616e61 	.word	0x6c616e61
1a00a490:	43207365 	.word	0x43207365
1a00a494:	79203148 	.word	0x79203148
1a00a498:	32484320 	.word	0x32484320
1a00a49c:	6c656420 	.word	0x6c656420
1a00a4a0:	43444120 	.word	0x43444120
1a00a4a4:	ffffff00 	.word	0xffffff00
1a00a4a8:	6f746f4d 	.word	0x6f746f4d
1a00a4ac:	61482072 	.word	0x61482072
1a00a4b0:	696c6962 	.word	0x696c6962
1a00a4b4:	6f646174 	.word	0x6f646174
1a00a4b8:	00000000 	.word	0x00000000
1a00a4bc:	6f746f4d 	.word	0x6f746f4d
1a00a4c0:	65442072 	.word	0x65442072
1a00a4c4:	62616873 	.word	0x62616873
1a00a4c8:	74696c69 	.word	0x74696c69
1a00a4cc:	006f6461 	.word	0x006f6461
1a00a4d0:	4c4c5546 	.word	0x4c4c5546
1a00a4d4:	4554535f 	.word	0x4554535f
1a00a4d8:	00000050 	.word	0x00000050
1a00a4dc:	464c4148 	.word	0x464c4148
1a00a4e0:	4554535f 	.word	0x4554535f
1a00a4e4:	00000050 	.word	0x00000050
1a00a4e8:	54535f34 	.word	0x54535f34
1a00a4ec:	00005045 	.word	0x00005045
1a00a4f0:	54535f38 	.word	0x54535f38
1a00a4f4:	00005045 	.word	0x00005045
1a00a4f8:	535f3631 	.word	0x535f3631
1a00a4fc:	00504554 	.word	0x00504554
1a00a500:	535f3233 	.word	0x535f3233
1a00a504:	00504554 	.word	0x00504554
1a00a508:	746e6553 	.word	0x746e6553
1a00a50c:	206f6469 	.word	0x206f6469
1a00a510:	61726f48 	.word	0x61726f48
1a00a514:	006f6972 	.word	0x006f6972
1a00a518:	746e6553 	.word	0x746e6553
1a00a51c:	206f6469 	.word	0x206f6469
1a00a520:	69746e41 	.word	0x69746e41
1a00a524:	61726f48 	.word	0x61726f48
1a00a528:	006f6972 	.word	0x006f6972
1a00a52c:	73206f4e 	.word	0x73206f4e
1a00a530:	75702065 	.word	0x75702065
1a00a534:	65206f64 	.word	0x65206f64
1a00a538:	69726373 	.word	0x69726373
1a00a53c:	20726962 	.word	0x20726962
1a00a540:	63206c65 	.word	0x63206c65
1a00a544:	6e616d6f 	.word	0x6e616d6f
1a00a548:	65206f64 	.word	0x65206f64
1a00a54c:	616c206e 	.word	0x616c206e
1a00a550:	6c6f6320 	.word	0x6c6f6320
1a00a554:	65642061 	.word	0x65642061
1a00a558:	6574206c 	.word	0x6574206c
1a00a55c:	726f706d 	.word	0x726f706d
1a00a560:	64617a69 	.word	0x64617a69
1a00a564:	ff00726f 	.word	0xff00726f
1a00a568:	6f747541 	.word	0x6f747541
1a00a56c:	6f6c6552 	.word	0x6f6c6552
1a00a570:	00006461 	.word	0x00006461
1a00a574:	6f747541 	.word	0x6f747541
1a00a578:	6f6c6552 	.word	0x6f6c6552
1a00a57c:	65536461 	.word	0x65536461
1a00a580:	006f7672 	.word	0x006f7672
1a00a584:	6f727245 	.word	0x6f727245
1a00a588:	2e253a72 	.word	0x2e253a72
1a00a58c:	000a6635 	.word	0x000a6635
1a00a590:	696c6153 	.word	0x696c6153
1a00a594:	4f206164 	.word	0x4f206164
1a00a598:	75507475 	.word	0x75507475
1a00a59c:	2e253a74 	.word	0x2e253a74
1a00a5a0:	000a6635 	.word	0x000a6635
1a00a5a4:	65746f50 	.word	0x65746f50
1a00a5a8:	6f69636e 	.word	0x6f69636e
1a00a5ac:	7274656d 	.word	0x7274656d
1a00a5b0:	6564206f 	.word	0x6564206f
1a00a5b4:	6a65206c 	.word	0x6a65206c
1a00a5b8:	2e253a65 	.word	0x2e253a65
1a00a5bc:	000a6635 	.word	0x000a6635
1a00a5c0:	6c707041 	.word	0x6c707041
1a00a5c4:	74616369 	.word	0x74616369
1a00a5c8:	206e6f69 	.word	0x206e6f69
1a00a5cc:	6c6c614d 	.word	0x6c6c614d
1a00a5d0:	4620636f 	.word	0x4620636f
1a00a5d4:	656c6961 	.word	0x656c6961
1a00a5d8:	6f482064 	.word	0x6f482064
1a00a5dc:	0d216b6f 	.word	0x0d216b6f
1a00a5e0:	00000000 	.word	0x00000000
1a00a5e4:	7362696c 	.word	0x7362696c
1a00a5e8:	6572662f 	.word	0x6572662f
1a00a5ec:	6f747265 	.word	0x6f747265
1a00a5f0:	6f732f73 	.word	0x6f732f73
1a00a5f4:	65637275 	.word	0x65637275
1a00a5f8:	6f6f682f 	.word	0x6f6f682f
1a00a5fc:	632e736b 	.word	0x632e736b
1a00a600:	ffffff00 	.word	0xffffff00
1a00a604:	70410a0d 	.word	0x70410a0d
1a00a608:	63696c70 	.word	0x63696c70
1a00a60c:	6f697461 	.word	0x6f697461
1a00a610:	7453206e 	.word	0x7453206e
1a00a614:	206b6361 	.word	0x206b6361
1a00a618:	7265764f 	.word	0x7265764f
1a00a61c:	776f6c66 	.word	0x776f6c66
1a00a620:	6f202121 	.word	0x6f202121
1a00a624:	6154206e 	.word	0x6154206e
1a00a628:	203a6b73 	.word	0x203a6b73
1a00a62c:	0a0d7325 	.word	0x0a0d7325
1a00a630:	ffffff00 	.word	0xffffff00
1a00a634:	41760a0d 	.word	0x41760a0d
1a00a638:	72657373 	.word	0x72657373
1a00a63c:	6c614374 	.word	0x6c614374
1a00a640:	2864656c 	.word	0x2864656c
1a00a644:	200a0d29 	.word	0x200a0d29
1a00a648:	4c4c2020 	.word	0x4c4c2020
1a00a64c:	20656e69 	.word	0x20656e69
1a00a650:	626d754e 	.word	0x626d754e
1a00a654:	3d207265 	.word	0x3d207265
1a00a658:	0d642520 	.word	0x0d642520
1a00a65c:	2020200a 	.word	0x2020200a
1a00a660:	656c6946 	.word	0x656c6946
1a00a664:	6d614e20 	.word	0x6d614e20
1a00a668:	203d2065 	.word	0x203d2065
1a00a66c:	0a0d7325 	.word	0x0a0d7325
1a00a670:	ff000a0d 	.word	0xff000a0d
1a00a674:	454c4449 	.word	0x454c4449
1a00a678:	ffffff00 	.word	0xffffff00
1a00a67c:	51726d54 	.word	0x51726d54
1a00a680:	ffffff00 	.word	0xffffff00
1a00a684:	20726d54 	.word	0x20726d54
1a00a688:	00637653 	.word	0x00637653

1a00a68c <ExtRateIn>:
1a00a68c:	00000000                                ....

1a00a690 <GpioButtons>:
1a00a690:	08000400 09010900                       ........

1a00a698 <GpioLeds>:
1a00a698:	01050005 0e000205 0c010b01              ............

1a00a6a4 <GpioPorts>:
1a00a6a4:	03030003 0f050403 05031005 07030603     ................
1a00a6b4:	ffff0802                                ....

1a00a6b8 <OscRateIn>:
1a00a6b8:	00b71b00                                ....

1a00a6bc <InitClkStates>:
1a00a6bc:	01010f01                                ....

1a00a6c0 <pinmuxing>:
1a00a6c0:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a00a6d0:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a00a6e0:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00a6f0:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00a700:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00a710:	00d50301 00d50401 00160107 00560207     ..............V.
1a00a720:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00a730:	00570206                                ..W.

1a00a734 <UART_BClock>:
1a00a734:	01a201c2 01620182                       ......b.

1a00a73c <UART_PClock>:
1a00a73c:	00820081 00a200a1 08040201 0f0f0f03     ................
1a00a74c:	ffff00ff                                ....

1a00a750 <periph_to_base>:
1a00a750:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a00a760:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a00a770:	000100e0 01000100 01200003 00060120     .......... . ...
1a00a780:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00a790:	01820013 00120182 01a201a2 01c20011     ................
1a00a7a0:	001001c2 01e201e2 0202000f 000e0202     ................
1a00a7b0:	02220222 0223000d 001c0223              "."...#.#...

1a00a7bc <InitClkStates>:
1a00a7bc:	00010100 00010909 0001090a 01010701     ................
1a00a7cc:	00010902 00010906 0101090c 0001090d     ................
1a00a7dc:	0001090e 0001090f 00010910 00010911     ................
1a00a7ec:	00010912 00010913 00011114 00011119     ................
1a00a7fc:	0001111a 0001111b                       ........

1a00a804 <lpcUarts>:
1a00a804:	40081000 06020406 00180205 40081000     ...@...........@
1a00a814:	09070509 00180706 40082000 00000000     ......... .@....
1a00a824:	00190000 400c1000 07060107 001a0602     .......@........
1a00a834:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a00a844:	02020302 001b0204 00061a80 0000000a     ................

1a00a854 <gpioPinsInit>:
1a00a854:	02000104 00050701 05010d03 04080100     ................
1a00a864:	02020002 02000304 00000403 04070002     ................
1a00a874:	030c0300 09050402 05040103 04030208     ................
1a00a884:	04020305 06040504 0802000c 03000b06     ................
1a00a894:	00090607 07060503 060f0504 03030004     ................
1a00a8a4:	02000404 00050404 06040502 04060200     ................
1a00a8b4:	0c050408 05040a04 0003010e 14010a00     ................
1a00a8c4:	010f0000 0d000012 00001101 0010010c     ................
1a00a8d4:	07070300 000f0300 01000001 00000000     ................
1a00a8e4:	000a0600 08060603 06100504 04030005     ................
1a00a8f4:	03000106 04090400 04010d05 010b0000     ................
1a00a904:	0200000f 00000001 00010104 02010800     ................
1a00a914:	01090000 09010006 05040002 04010200     ................
1a00a924:	02020105 02020504 0e00000a 01000b02     ................
1a00a934:	000c020b ffff0c01                       ........

1a00a93c <ultrasonicSensorsIrqMap>:
1a00a93c:	ff020100 00000043 49534f50 ffff0058     ....C...POSIX...
1a00a94c:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
1a00a95c:	33323130 37363534 62613938 66656463     0123456789abcdef
1a00a96c:	00000000 33323130 37363534 42413938     ....0123456789AB
1a00a97c:	46454443 00000000 6c756e28 0000296c     CDEF....(null)..
1a00a98c:	ffff0030                                0...

1a00a990 <blanks.8605>:
1a00a990:	20202020 20202020 20202020 20202020                     

1a00a9a0 <zeroes.8606>:
1a00a9a0:	30303030 30303030 30303030 30303030     0000000000000000

1a00a9b0 <_ctype_>:
1a00a9b0:	20202000 20202020 28282020 20282828     .         ((((( 
1a00a9c0:	20202020 20202020 20202020 20202020                     
1a00a9d0:	10108820 10101010 10101010 10101010      ...............
1a00a9e0:	04040410 04040404 10040404 10101010     ................
1a00a9f0:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a00aa00:	01010101 01010101 01010101 10101010     ................
1a00aa10:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a00aa20:	02020202 02020202 02020202 10101010     ................
1a00aa30:	00000020 00000000 00000000 00000000      ...............
	...
1a00aab0:	ffffff00 69666e49 7974696e 00000000     ....Infinity....
1a00aac0:	004e614e ffffffff                       NaN.....

1a00aac8 <__mprec_bigtens>:
1a00aac8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a00aad8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a00aae8:	7f73bf3c 75154fdd                       <.s..O.u

1a00aaf0 <__mprec_tens>:
1a00aaf0:	00000000 3ff00000 00000000 40240000     .......?......$@
1a00ab00:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a00ab10:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a00ab20:	00000000 412e8480 00000000 416312d0     .......A......cA
1a00ab30:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a00ab40:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a00ab50:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a00ab60:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a00ab70:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a00ab80:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a00ab90:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a00aba0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a00abb0:	79d99db4 44ea7843                       ...yCx.D

1a00abb8 <p05.7367>:
1a00abb8:	00000005 00000019 0000007d              ........}...
