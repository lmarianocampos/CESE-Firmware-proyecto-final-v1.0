
mis_proyectos/firmware_proyecto_final_v1.0/out/firmware_proyecto_final_v1.0.elf:     file format elf32-littlearm
mis_proyectos/firmware_proyecto_final_v1.0/out/firmware_proyecto_final_v1.0.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0011b9

Program Header:
0x70000001 off    0x0001ac20 vaddr 0x1a00ac20 paddr 0x1a00ac20 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00007a28 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000ac28 memsz 0x0000ac28 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00ac28 align 2**16
         filesz 0x00000a74 memsz 0x00000a74 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ac1c  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000a74  10000000  1a00ac28  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020a74  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020a74  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020a74  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020a74  2**2
                  CONTENTS
  6 .bss          00006fb0  10000a78  10000a78  00000a78  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020a74  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020a74  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020a74  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020a74  2**2
                  CONTENTS
 11 .init_array   00000004  1a00ac1c  1a00ac1c  0001ac1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a00ac20  1a00ac20  0001ac20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020a74  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020a74  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020a74  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020a74  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020a74  2**2
                  CONTENTS
 18 .noinit       00000000  10007a28  10007a28  00020a74  2**2
                  CONTENTS
 19 .debug_info   00039b97  00000000  00000000  00020a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00006b61  00000000  00000000  0005a60b  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000c261  00000000  00000000  0006116c  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001138  00000000  00000000  0006d3cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001208  00000000  00000000  0006e505  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00012500  00000000  00000000  0006f70d  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0001a0e1  00000000  00000000  00081c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00030945  00000000  00000000  0009bcee  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000cc633  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000cc6b2  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00003c84  00000000  00000000  000cc6ec  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000a78 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a00ac1c l    d  .init_array	00000000 .init_array
1a00ac20 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10007a28 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a003ee8 l     F .text	000000c8 uartProcessIRQ
100078c8 l     O .bss	00000004 rxIsrCallbackUART0
100078cc l     O .bss	00000004 rxIsrCallbackUART0Params
100078d0 l     O .bss	00000004 rxIsrCallbackUART2
100078d4 l     O .bss	00000004 rxIsrCallbackUART2Params
100078d8 l     O .bss	00000004 rxIsrCallbackUART3
100078dc l     O .bss	00000004 rxIsrCallbackUART3Params
100078e0 l     O .bss	00000004 txIsrCallbackUART0
100078e4 l     O .bss	00000004 txIsrCallbackUART0Params
100078e8 l     O .bss	00000004 txIsrCallbackUART2
100078ec l     O .bss	00000004 txIsrCallbackUART2Params
100078f0 l     O .bss	00000004 txIsrCallbackUART3
100078f4 l     O .bss	00000004 txIsrCallbackUART3Params
1a00a85c l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 pid.c
00000000 l    df *ABS*	00000000 serialport.c
10000a78 l     O .bss	00000004 receiveQueue
00000000 l    df *ABS*	00000000 commandprocessing.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 heartbeat.c
00000000 l    df *ABS*	00000000 steppermotor.c
1a0009d4 l     F .text	00000058 stepperMotorAutoReloadTimerServo
1a000a2c l     F .text	00000068 stepperMotorAutoReloadTimer
10000000 l     O .data	00000001 flag.14490
10000001 l     O .data	00000001 flagDutyCycle.14499
00000000 l    df *ABS*	00000000 adc.c
00000000 l    df *ABS*	00000000 system.c
10000a7c l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_4.c
1a00130c l     F .text	00000064 prvHeapInit
10000a84 l     O .bss	00006400 ucHeap
1a001370 l     F .text	00000058 prvInsertBlockIntoFreeList
10000a80 l     O .bss	00000004 pxEnd
10006e84 l     O .bss	00000004 xBlockAllocatedBit
10006e88 l     O .bss	00000004 xFreeBytesRemaining
10006e8c l     O .bss	00000004 xMinimumEverFreeBytesRemaining
10006e90 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a001554 l     F .text	0000001e prvIsQueueFull
1a001572 l     F .text	0000001a prvIsQueueEmpty
1a00158c l     F .text	00000076 prvCopyDataToQueue
1a001602 l     F .text	00000024 prvCopyDataFromQueue
1a001626 l     F .text	0000006e prvUnlockQueue
1a001718 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10006e98 l     O .bss	00000168 uxIdleTaskStack.10728
10007000 l     O .bss	000005a0 uxTimerTaskStack.10735
100075a0 l     O .bss	00000060 xIdleTaskTCB.10727
10007600 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001d58 l     F .text	0000002c prvResetNextTaskUnblockTime
1a001d84 l     F .text	00000092 prvInitialiseNewTask
1a001e18 l     F .text	00000068 prvInitialiseTaskLists
1a001e80 l     F .text	000000ac prvAddNewTaskToReadyList
1a001f2c l     F .text	00000038 prvDeleteTCB
1a001f64 l     F .text	0000004c prvCheckTasksWaitingTermination
1a001fb0 l     F .text	00000028 prvIdleTask
1a001fd8 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10007664 l     O .bss	00000004 pxDelayedTaskList
10007668 l     O .bss	00000004 pxOverflowDelayedTaskList
1000766c l     O .bss	0000008c pxReadyTasksLists
100076f8 l     O .bss	00000004 uxCurrentNumberOfTasks
100076fc l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10007700 l     O .bss	00000004 uxPendedTicks
10007704 l     O .bss	00000004 uxSchedulerSuspended
10007708 l     O .bss	00000004 uxTaskNumber
1000770c l     O .bss	00000004 uxTopReadyPriority
10007710 l     O .bss	00000014 xDelayedTaskList1
10007724 l     O .bss	00000014 xDelayedTaskList2
10007738 l     O .bss	00000004 xNextTaskUnblockTime
1000773c l     O .bss	00000004 xNumOfOverflows
10007740 l     O .bss	00000014 xPendingReadyList
10007754 l     O .bss	00000004 xSchedulerRunning
10007758 l     O .bss	00000014 xSuspendedTaskList
1000776c l     O .bss	00000014 xTasksWaitingTermination
10007780 l     O .bss	00000004 xTickCount
10007784 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a0027d8 l     F .text	00000020 prvGetNextExpireTime
1a0027f8 l     F .text	00000048 prvInsertTimerInActiveList
1a002840 l     F .text	00000070 prvCheckForValidListAndQueue
1a0028b0 l     F .text	00000040 prvInitialiseNewTimer
1a002c6c l     F .text	00000016 prvTimerTask
1a0029f8 l     F .text	00000078 prvSwitchTimerLists
1a002a70 l     F .text	0000002c prvSampleTimeNow
1a002a9c l     F .text	00000060 prvProcessExpiredTimer
1a002afc l     F .text	00000074 prvProcessTimerOrBlockTask
1a002b70 l     F .text	000000fc prvProcessReceivedCommands
10007788 l     O .bss	00000004 pxCurrentTimerList
1000778c l     O .bss	00000004 pxOverflowTimerList
10007790 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10007830 l     O .bss	00000014 xActiveTimerList1
10007844 l     O .bss	00000014 xActiveTimerList2
10007858 l     O .bss	00000004 xLastTime.11777
1000785c l     O .bss	00000050 xStaticTimerQueue.11827
100078ac l     O .bss	00000004 xTimerQueue
100078b0 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002c84 l     F .text	00000040 prvTaskExitError
1a002cc4 l     F .text	00000022 prvPortStartFirstTask
1a002cec l     F .text	0000000e vPortEnableVFP
1a002d50 l       .text	00000000 pxCurrentTCBConst2
1a002e30 l       .text	00000000 pxCurrentTCBConst
100078b4 l     O .bss	00000001 ucMaxSysCallPriority
100078b8 l     O .bss	00000004 ulMaxPRIGROUPValue
10000004 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a003024 l     F .text	00000044 Board_LED_Init
1a003068 l     F .text	00000040 Board_TEC_Init
1a0030a8 l     F .text	00000040 Board_GPIO_Init
1a0030e8 l     F .text	00000030 Board_ADC_Init
1a003118 l     F .text	00000038 Board_SPI_Init
1a003150 l     F .text	00000024 Board_I2C_Init
1a00a6e8 l     O .text	00000008 GpioButtons
1a00a6f0 l     O .text	0000000c GpioLeds
1a00a6fc l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a00a714 l     O .text	00000004 InitClkStates
1a00a718 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000008 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a003340 l     F .text	0000002c Chip_UART_GetIndex
1a00a78c l     O .text	00000008 UART_BClock
1a00a794 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0034e8 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0034fc l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0036b0 l     F .text	000000a4 pll_calc_divs
1a003754 l     F .text	0000010c pll_get_frac
1a003860 l     F .text	0000004c Chip_Clock_FindBaseClock
1a003ad4 l     F .text	00000022 Chip_Clock_GetDivRate
100078c0 l     O .bss	00000008 audio_usb_pll_freq
1a00a7a8 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00a814 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003de0 l     F .text	00000014 Chip_SSP_GetClockIndex
1a003df4 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000040 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0041fe l     F .text	00000002 errorOcurred
1a004200 l     F .text	00000002 doNothing
10000044 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00441c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100078f8 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a00476c l     F .text	00000010 clearInterrupt
1a00477c l     F .text	0000005c serveInterrupt
10000084 l     O .data	00000048 ultrasonicSensors
1a00a994 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0056c4 l     F .text	00000050 std
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
1a007f1c l     F .text	00000084 __sbprintf
1a00a9e8 l     O .text	00000010 blanks.8605
1a00a9f8 l     O .text	00000010 zeroes.8606
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1a008088 l     F .text	00000124 quorem
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
1a00ac10 l     O .text	0000000c p05.7367
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a009f84 l     F .text	00000076 __sprint_r.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
100000d0 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a00ac20 l       .init_array	00000000 __init_array_end
1a00ac1c l       .bss_RAM5	00000000 __preinit_array_end
1a00ac1c l       .init_array	00000000 __init_array_start
1a00ac1c l       .bss_RAM5	00000000 __preinit_array_start
1a00a27c g     F .text	0000002c .hidden __aeabi_dcmpun
1a0038f8 g     F .text	0000001c Chip_Clock_GetDividerSource
1a001258 g     F .text	00000012 _isatty_r
1a005068 g     F .text	00000012 .hidden __aeabi_dcmple
1a00625c g     F .text	0000009c _puts_r
1a004284 g     F .text	00000044 TIMER2_IRQHandler
1a004114 g     F .text	00000014 uartRxRead
1a004fa4 g     F .text	0000007a .hidden __cmpdf2
1a00126a g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a003594 g     F .text	00000016 Chip_ADC_DeInit
1a080000 g       *ABS*	00000000 __top_MFlashA512
1000796c g     O .bss	00000004 stepperMotorPulseQueue
1a004fa4 g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002d98 g     F .text	0000002c vPortExitCritical
1a004b14 g     F .text	0000005a .hidden __floatdidf
1a002954 g     F .text	00000038 xTimerCreate
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a006234 g     F .text	00000028 printf
1a00320a g     F .text	00000008 __stdio_init
10007a04 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a00a22c g     F .text	00000050 _wcrtomb_r
1a006368 g     F .text	00000020 __sseek
1a005720 g     F .text	00000058 __sinit
1a00a17c g     F .text	000000b0 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a001be0 g     F .text	00000052 vQueueWaitForMessageRestricted
1a000000 g       *ABS*	00000000 __vectors_start__
1a00365a g     F .text	0000000c Chip_ADC_SetResolution
1a006228 g     F .text	0000000c __malloc_unlock
1a000300 g     F .text	00000024 PdiCreateQueue
1a002e34 g     F .text	0000002c SysTick_Handler
1a0033c0 g     F .text	00000040 Chip_UART_SetBaud
10007a08 g     O .bss	00000001 __lock___arc4random_mutex
1a0011b4  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0031ac g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a009480 g     F .text	000000c6 memmove
10007930 g     O .bss	00000028 pid
1a000dc8 g     F .text	000000c8 stepperMotorMicroStepsTask
10007970 g     O .bss	00000001 flagStep
1a002dd0 g     F .text	00000064 PendSV_Handler
1a001994 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a009548 g     F .text	0000004c _Balloc
1a00ac28 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a004f94 g     F .text	0000008a .hidden __gtdf2
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10007660 g     O .bss	00000004 pxCurrentTCB
1a00124e g     F .text	0000000a _fstat_r
53ff66d6 g       *ABS*	00000000 __valid_user_code_checksum
1a00ac28 g       .ARM.exidx	00000000 _etext
1a005030 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a002664 g     F .text	00000018 vTaskInternalSetTimeOutState
10007974 g     O .bss	00000020 stepper
1a0042c8 g     F .text	00000044 TIMER3_IRQHandler
1a003b76 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a000d40 g     F .text	0000005c stepperMotorSetPulseServoTask
1a0001a8 g     F .text	00000012 bss_init
1a002e98 g     F .text	00000110 xPortStartScheduler
1a006054 g     F .text	00000134 memcpy
1a002570 g     F .text	00000030 vTaskPlaceOnEventList
1a005020 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
10007994 g     O .bss	00000004 xAutoReloadTimer
1a005714 g     F .text	0000000c _cleanup_r
1a004a9c g     F .text	00000022 .hidden __floatsidf
1a002e60  w    F .text	00000038 vPortSetupTimerInterrupt
1a004f9c g     F .text	00000082 .hidden __ltdf2
1a005144 g     F .text	00000000 .hidden __aeabi_uldivmod
10007a28 g       .noinit	00000000 _noinit
1a0062f8 g     F .text	00000010 puts
1a0014e4 g     F .text	00000070 vPortFree
1a0041d2 g     F .text	00000018 uartWriteString
100079fc g     O .bss	00000004 SystemCoreClock
1a00336c g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002fa8 g     F .text	0000005c vPortValidateInterruptPriority
1a00353c g     F .text	00000018 readAdcVal
1a00ab48 g     O .text	000000c8 __mprec_tens
1a000b94 g     F .text	00000062 stepperMotorInit
1a000180  w    F .text	00000002 UsageFault_Handler
1a003c28 g     F .text	0000004c Chip_Clock_GetRate
1a000d9c g     F .text	0000002c stepperMotorSetMicroSteps
1a001c4e g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1000792c g     O .bss	00000004 __malloc_top_pad
1a000418 g     F .text	00000024 serialPortQueueCreate
1a00324c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a004a7c g     F .text	0000001e .hidden __aeabi_ui2d
1a0092cc g     F .text	0000001c _localeconv_r
1a0096c8 g     F .text	00000012 __i2b
1a008fd0 g     F .text	000002fc __sfvwrite_r
1a005174 g     F .text	000002cc .hidden __udivmoddi4
1a0047f8 g     F .text	00000000 .hidden __aeabi_drsub
1a0012ec g     F .text	00000020 _sbrk_r
1a00a6e4 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001274 g     F .text	0000004e _read_r
1a001c48 g     F .text	00000006 vListInitialiseItem
1a005054 g     F .text	00000012 .hidden __aeabi_dcmplt
1a005444 g     F .text	000000d0 _fclose_r
1a0047e2 g     F .text	0000000a GPIO1_IRQHandler
1a001a60 g     F .text	00000158 xQueueReceive
100079bc g     O .bss	00000040 xQueueRegistry
10007924 g     O .bss	00000004 __malloc_max_sbrked_mem
1a004ac0 g     F .text	00000042 .hidden __extendsfdf2
1a004dc4 g     F .text	000001d0 .hidden __aeabi_ddiv
1a001cdc g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a004804 g     F .text	00000276 .hidden __adddf3
1a00ac20 g       .ARM.exidx	00000000 __exidx_start
10007998 g     O .bss	00000004 stepperMotorDirectionQueue
10007a0c g     O .bss	00000001 __lock___env_recursive_mutex
1a004b70 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
1a00352e g     F .text	0000000e setStartMode
10007a10 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a000464 g     F .text	00000050 serialPortTaskStorageCommand
1a009b5c g     F .text	0000035c _realloc_r
1a005a6c g     F .text	00000048 __libc_init_array
1a00a118 g     F .text	00000064 _fputwc_r
1a00ab20 g     O .text	00000028 __mprec_bigtens
1a00430c g     F .text	000000b8 adcInit
1a004a7c g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a009974 g     F .text	00000036 __mcmp
1a0013c8 g     F .text	0000011c pvPortMalloc
1a0031c8 g     F .text	00000030 Board_Init
1a001242  w    F .text	00000002 _init
1a001c32 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1000799c g     O .bss	00000004 stepperMotorPulseServoQueue
1a0050a4 g     F .text	0000009e .hidden __aeabi_d2f
1a000c60 g     F .text	00000068 stepperMotorSetDirectionTask
1a0021ec g     F .text	0000000c xTaskGetTickCount
1a001818 g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10007a28 g       .bss	00000000 _ebss
1a003666 g     F .text	00000028 Chip_ADC_EnableChannel
1a004204 g     F .text	00000040 TIMER0_IRQHandler
1a0011b8 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a009628 g     F .text	0000003e __hi0bits
1a003308 g     F .text	00000038 Chip_I2C_SetClockRate
1a00a2a8 g     F .text	0000004e .hidden __fixdfsi
1a002728 g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0038ac g     F .text	0000004c Chip_Clock_EnableCrystal
10007a14 g     O .bss	00000001 __lock___malloc_recursive_mutex
1a0004b4 g     F .text	00000024 commandProcessingQueueCreate
1a0035aa g     F .text	00000008 Chip_ADC_ReadValue
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0025d8 g     F .text	0000008c xTaskRemoveFromEventList
1a001d20  w    F .text	0000001c vApplicationMallocFailedHook
100079a0 g     O .bss	00000002 numOfStepes
1a004804 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a004f9c g     F .text	00000082 .hidden __ledf2
1a003608 g     F .text	00000020 Chip_ADC_SetStartMode
1a009828 g     F .text	000000a0 __pow5mult
1a004b04 g     F .text	0000006a .hidden __aeabi_ul2d
1a004244 g     F .text	00000040 TIMER1_IRQHandler
1a0032e4 g     F .text	00000024 Chip_I2C_Init
1a005adc g     F .text	00000002 __retarget_lock_release_recursive
1a0041ea g     F .text	0000000a UART2_IRQHandler
1a003a68 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a00a8ac g     O .text	000000e6 gpioPinsInit
1a003fb0 g     F .text	00000090 uartInterrupt
1a001cf4  w    F .text	0000002c vAssertCalled
1a0041b8 g     F .text	0000001a uartWriteByte
1a003e0c g     F .text	00000012 Chip_SSP_SetClockRate
1a000cc8 g     F .text	00000078 stepperMotorSetPulseTask
1a005090 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0046ce g     F .text	00000016 gpioToggle
1a0047ec g     F .text	0000000a GPIO2_IRQHandler
1a005778 g     F .text	0000000c __sfp_lock_acquire
1a0093e0 g     F .text	00000000 memchr
1a00267c g     F .text	00000080 xTaskCheckForTimeOut
1a005830 g     F .text	000001e8 _free_r
1a0043c4 g     F .text	00000058 adcRead
1a003b50 g     F .text	00000026 Chip_Clock_GetBaseClock
1a005ab4 g     F .text	0000001c __locale_mb_cur_max
1a00507c g     F .text	00000012 .hidden __aeabi_dcmpge
100079a4 g     O .bss	00000004 stepperMotorEnableQueue
10000a78 g       .bss	00000000 _bss
1a0035b2 g     F .text	00000036 Chip_ADC_ReadStatus
1a003628 g     F .text	00000032 Chip_ADC_SetSampleRate
1a004800 g     F .text	0000027a .hidden __aeabi_dsub
10000a6c g     O .data	00000004 __malloc_sbrk_base
100078bc g     O .bss	00000004 freeRtosInterruptCallback
1a0021dc g     F .text	00000010 vTaskSuspendAll
1a004b04 g     F .text	0000006a .hidden __floatundidf
10007968 g     O .bss	00000004 processingComandQueue
1a0098c8 g     F .text	000000ac __lshift
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a003e1e g     F .text	0000003e Chip_SSP_SetBitRate
1a001c9a g     F .text	00000028 uxListRemove
1a003ddc g     F .text	00000002 Chip_GPIO_Init
1a00043c g     F .text	00000028 serialPortForInterruptInit
1a00a710 g     O .text	00000004 OscRateIn
1a00413c g     F .text	0000007c uartInit
1a0096dc g     F .text	0000014a __multiply
100079b0 g     O .bss	0000000c servo
1a002070 g     F .text	00000072 xTaskCreateStatic
10007a28 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a009f20 g     F .text	00000064 strncpy
100078fc g     O .bss	00000028 __malloc_current_mallinfo
1a009a98 g     F .text	000000c2 __d2b
1a0024a8 g     F .text	000000c8 vTaskSwitchContext
1a000b30 g     F .text	00000064 stepperMotorTimerInit
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a00173a g     F .text	00000090 xQueueGenericCreateStatic
1a0025a0 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a001244 g     F .text	0000000a _close_r
1a004a9c g     F .text	00000022 .hidden __aeabi_i2d
1a004450 g     F .text	000001ac gpioInit
1a001cc4 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a005ad4 g     F .text	00000002 __retarget_lock_close_recursive
1a00298c g     F .text	0000006c xTimerGenericCommand
1a007fbc g     F .text	000000cc __swsetup_r
1a001d3c  w    F .text	0000001c vApplicationStackOverflowHook
1a005440  w    F .text	00000002 .hidden __aeabi_ldiv0
1a004dc4 g     F .text	000001d0 .hidden __divdf3
10000664 g     O .data	00000408 __malloc_av_
1a004b70 g     F .text	00000254 .hidden __muldf3
1a006308 g     F .text	00000022 __sread
1a0046e4 g     F .text	0000001c USB0_IRQHandler
1a003bf4 g     F .text	00000034 Chip_Clock_Disable
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a00621c g     F .text	0000000c __malloc_lock
1a003198 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a005668 g     F .text	0000005a _fflush_r
1a00a010 g     F .text	00000068 _calloc_r
1a0009b8 g     F .text	0000001c heartBeat
1a003914 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a005ad8 g     F .text	00000002 __retarget_lock_acquire_recursive
1a000ea0 g     F .text	00000314 adcScanChannelTask
1a006188 g     F .text	00000094 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000818 g     F .text	000001a0 main
10007928 g     O .bss	00000004 __malloc_max_total_mem
1a000e90 g     F .text	0000000a adcStart
1a005ad0 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a001c66 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002d30 g     F .text	00000024 SVC_Handler
1a006388 g     F .text	00000008 __sclose
1a0028f0 g     F .text	00000064 xTimerCreateTimerTask
1a0050a4 g     F .text	0000009e .hidden __truncdfsf2
1a0081b0 g     F .text	00000e20 _dtoa_r
1a005ae0 g     F .text	00000548 _malloc_r
1a007fa0 g     F .text	0000001a __ascii_wctomb
1a004b14 g     F .text	0000005a .hidden __aeabi_l2d
1a0040fc g     F .text	00000018 uartTxReady
1a002404 g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a003b84 g     F .text	0000003c Chip_Clock_EnableOpts
1a003202 g     F .text	00000008 __stdio_getchar
1a000508 g     F .text	00000310 commandProcessingTask
1a0017ca g     F .text	0000004e xQueueGenericCreate
1a005790 g     F .text	000000a0 _malloc_trim_r
1a003930 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0039e8 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003e94 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a004fa4 g     F .text	0000007a .hidden __nedf2
1a0045fc g     F .text	0000006a gpioWrite
1a001240  w    F .text	00000002 _fini
1a000350 g     F .text	00000068 setingSetPiontPIDTask
1a002310 g     F .text	000000f4 xTaskResumeAll
1a002148 g     F .text	00000094 vTaskStartScheduler
1a003554 g     F .text	00000040 Chip_ADC_Init
10007a00 g     O .bss	00000004 g_pUsbApi
1a003214 g     F .text	00000038 Board_SetupMuxing
1a003400 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a0012c2 g     F .text	00000028 _write_r
100079a8 g     O .bss	00000004 xAutoReloadTimerServo
1a00368e g     F .text	00000022 Chip_ADC_SetBurstCmd
1a000bf8 g     F .text	00000068 stepperMotorEnableTask
1a0001ba  w    F .text	00000002 ETH_IRQHandler
100000cc g     O .data	00000004 _impure_ptr
1a005514 g     F .text	00000154 __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a000324 g     F .text	0000002a startPid
1a004128 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a006028 g     F .text	0000002a __ascii_mbtowc
10000000 g       .data	00000000 _data
1a0026fc g     F .text	0000000c vTaskMissedYield
10007a28 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003e5c g     F .text	00000038 Chip_SSP_Init
1a001bb8 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0021f8 g     F .text	00000118 xTaskIncrementTick
1a0092e8 g     F .text	0000005c __swhatbuf_r
1a003004 g     F .text	00000020 DAC_IRQHandler
1a003174 g     F .text	00000024 Board_Debug_Init
1a005040 g     F .text	00000012 .hidden __aeabi_dcmpeq
1a0031f8 g     F .text	0000000a __stdio_putchar
1a0004d8 g     F .text	0000002e commandProcessingConverterCaracterToDecimal
1a001694 g     F .text	00000084 xQueueGenericReset
1a0035e8 g     F .text	00000020 Chip_ADC_Int_SetChannelCmd
10000a74 g       .data	00000000 _edata
1a0032c4 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a00a078 g     F .text	0000009e __fputwc
10007a18 g     O .bss	00000001 __lock___at_quick_exit_mutex
10007958 g     O .bss	00000004 pidSetPointQueue
100079ac g     O .bss	00000004 stepperMotorMicroStepsQueue
1a0020e2 g     F .text	00000066 xTaskCreate
1a003c88 g     F .text	00000154 Chip_SetupCoreClock
1a00632c g     F .text	0000003c __swrite
1a0047d8 g     F .text	0000000a GPIO0_IRQHandler
10000a70 g     O .data	00000004 __malloc_trim_threshold
1a000000 g     O .text	00000040 g_pfnVectors
1a005a18 g     F .text	00000052 _fwalk_reent
1a003c74 g     F .text	00000014 SystemCoreClockUpdate
1a0099ac g     F .text	000000ec __mdiff
1a00a2a8 g     F .text	0000004e .hidden __aeabi_d2iz
10007960 g     O .bss	00000008 setPoint
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a005784 g     F .text	0000000c __sfp_lock_release
1a0003b8 g     F .text	00000060 serialPortReceiveData
1a002708 g     F .text	00000020 xTaskGetSchedulerState
1a00aa08 g     O .text	00000101 _ctype_
1a005440  w    F .text	00000002 .hidden __aeabi_idiv0
1a00a27c g     F .text	0000002c .hidden __unorddf2
1a004040 g     F .text	000000bc uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
10007a1c g     O .bss	00000001 __lock___dd_hash_mutex
1a009344 g     F .text	00000094 __smakebuf_r
10007a20 g     O .bss	00000001 __lock___tz_mutex
1a0063c0 g     F .text	000000dc strlen
1a002d00 g     F .text	0000002c pxPortInitialiseStack
1a003bc0 g     F .text	00000034 Chip_Clock_Enable
1a005030 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a004f94 g     F .text	0000008a .hidden __gedf2
1a0041f4 g     F .text	0000000a UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a009ffc g     F .text	00000014 __sprint_r
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a004666 g     F .text	00000068 gpioRead
1a000a94 g     F .text	0000009c stepperMotorQueueCreate
1a004ac0 g     F .text	00000042 .hidden __aeabi_f2d
1a004700 g     F .text	0000006c boardInit
1a002d54 g     F .text	00000044 vPortEnterCritical
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a004800 g     F .text	0000027a .hidden __subdf3
1a0064a0 g     F .text	00001a7c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a009668 g     F .text	0000005e __lo0bits
1a009eb8 g     F .text	00000068 frexp
100004f8 g     O .data	0000016c __global_locale
1a003af8 g     F .text	00000058 Chip_Clock_SetBaseClock
1a003ecc g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10007a24 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a0032b8 g     F .text	0000000c Board_SystemInit
1a0095a8 g     F .text	00000080 __multadd
1a009594 g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 b9 11 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a d6 66 ff 53     }............f.S
	...
1a00002c:	31 2d 00 1a 85 01 00 1a 00 00 00 00 d1 2d 00 1a     1-...........-..
1a00003c:	35 2e 00 1a                                         5...

1a000040 <g_pfnVendorVectors>:
1a000040:	05 30 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     .0..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	e5 46 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .F..............
1a000070:	05 42 00 1a 45 42 00 1a 85 42 00 1a c9 42 00 1a     .B..EB...B...B..
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a eb 41 00 1a f5 41 00 1a     .........A...A..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	d9 47 00 1a e3 47 00 1a ed 47 00 1a bb 01 00 1a     .G...G...G......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a00ac28 	.word	0x1a00ac28
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000a74 	.word	0x00000a74
1a000120:	1a00ac28 	.word	0x1a00ac28
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00ac28 	.word	0x1a00ac28
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00ac28 	.word	0x1a00ac28
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00ac28 	.word	0x1a00ac28
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000a78 	.word	0x10000a78
1a000154:	00006fb0 	.word	0x00006fb0
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:


}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f003 fe92 	bl	1a003ee8 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <PdiCreateQueue>:
 ** @addtogroup aplicacion principal
 ** @{ */
/*==================[inlcusiones]============================================*/
#include "pid.h"

void PdiCreateQueue(void){
1a000300:	b508      	push	{r3, lr}
	pidSetPointQueue = xQueueCreate(SIZEQUEUEPIDSETPOINT,sizeof(uint16_t));
1a000302:	2200      	movs	r2, #0
1a000304:	2102      	movs	r1, #2
1a000306:	2003      	movs	r0, #3
1a000308:	f001 fa5f 	bl	1a0017ca <xQueueGenericCreate>
1a00030c:	4b04      	ldr	r3, [pc, #16]	; (1a000320 <PdiCreateQueue+0x20>)
1a00030e:	6018      	str	r0, [r3, #0]
	if (pidSetPointQueue == NULL) {/*Si devolvio NULL es muy probable que no haya suficiente memoria para crear la cola*/
1a000310:	b100      	cbz	r0, 1a000314 <PdiCreateQueue+0x14>
			gpioWrite(LED3, ON);
			while (1)
				;/*Se queda bloquedo el sistema hasta que venga el personal de mantenimiento*/
		}
}
1a000312:	bd08      	pop	{r3, pc}
			gpioWrite(LED3, ON);
1a000314:	2101      	movs	r1, #1
1a000316:	202d      	movs	r0, #45	; 0x2d
1a000318:	f004 f970 	bl	1a0045fc <gpioWrite>
1a00031c:	e7fe      	b.n	1a00031c <PdiCreateQueue+0x1c>
1a00031e:	bf00      	nop
1a000320:	10007958 	.word	0x10007958

1a000324 <startPid>:


/*==================[API]============================================*/
void startPid(Pid_t *pid,uint16_t sPoint, uint16_t sensorPresion,float setPoint, float inPut,float error,float iTerm,float outMax,float outMin,float kp, float ki, float outPut )
{
	pid->sPoint = sPoint;
1a000324:	8001      	strh	r1, [r0, #0]
	pid->sensorPresion = sensorPresion;
1a000326:	8042      	strh	r2, [r0, #2]
	pid->setPoint = setPoint;
1a000328:	ed80 0a09 	vstr	s0, [r0, #36]	; 0x24
	pid->inPut = inPut;
1a00032c:	edc0 0a01 	vstr	s1, [r0, #4]
	pid->error = error;
1a000330:	ed80 1a02 	vstr	s2, [r0, #8]
	pid->iTerm =iTerm;
1a000334:	edc0 1a03 	vstr	s3, [r0, #12]
	pid->outMax = outMax;
1a000338:	ed80 2a04 	vstr	s4, [r0, #16]
	pid->outMin = outMin;
1a00033c:	edc0 2a05 	vstr	s5, [r0, #20]
	pid->kp = kp;
1a000340:	ed80 3a06 	vstr	s6, [r0, #24]
	pid->ki = ki;
1a000344:	edc0 3a07 	vstr	s7, [r0, #28]
	pid->outPut = outPut;
1a000348:	ed80 4a08 	vstr	s8, [r0, #32]
}
1a00034c:	4770      	bx	lr
1a00034e:	Address 0x000000001a00034e is out of bounds.


1a000350 <setingSetPiontPIDTask>:
/*=====[Prototypes (declarations) of task ]=============*/
void setingSetPiontPIDTask(void * taskParmPtr){
1a000350:	b500      	push	{lr}
1a000352:	b083      	sub	sp, #12
1a000354:	e004      	b.n	1a000360 <setingSetPiontPIDTask+0x10>
	uint16_t porcent;
	while(TRUE){

		if (xQueueReceive(pidSetPointQueue, &porcent,portMAX_DELAY) == pdTRUE)	{
			switch(porcent){
1a000356:	2b19      	cmp	r3, #25
1a000358:	d102      	bne.n	1a000360 <setingSetPiontPIDTask+0x10>
			case 25: pid.setPoint = 0.277750;
1a00035a:	4b11      	ldr	r3, [pc, #68]	; (1a0003a0 <setingSetPiontPIDTask+0x50>)
1a00035c:	4a11      	ldr	r2, [pc, #68]	; (1a0003a4 <setingSetPiontPIDTask+0x54>)
1a00035e:	625a      	str	r2, [r3, #36]	; 0x24
		if (xQueueReceive(pidSetPointQueue, &porcent,portMAX_DELAY) == pdTRUE)	{
1a000360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000364:	f10d 0106 	add.w	r1, sp, #6
1a000368:	4b0f      	ldr	r3, [pc, #60]	; (1a0003a8 <setingSetPiontPIDTask+0x58>)
1a00036a:	6818      	ldr	r0, [r3, #0]
1a00036c:	f001 fb78 	bl	1a001a60 <xQueueReceive>
1a000370:	2801      	cmp	r0, #1
1a000372:	d1f5      	bne.n	1a000360 <setingSetPiontPIDTask+0x10>
			switch(porcent){
1a000374:	f8bd 3006 	ldrh.w	r3, [sp, #6]
1a000378:	2b32      	cmp	r3, #50	; 0x32
1a00037a:	d008      	beq.n	1a00038e <setingSetPiontPIDTask+0x3e>
1a00037c:	d9eb      	bls.n	1a000356 <setingSetPiontPIDTask+0x6>
1a00037e:	2b4b      	cmp	r3, #75	; 0x4b
1a000380:	d009      	beq.n	1a000396 <setingSetPiontPIDTask+0x46>
1a000382:	2b64      	cmp	r3, #100	; 0x64
1a000384:	d1ec      	bne.n	1a000360 <setingSetPiontPIDTask+0x10>
			break;
			case 50: pid.setPoint = 0.43550;
			break;
			case 75: pid.setPoint = 0.653250;
			break;
			case 100: pid.setPoint=0.87100;
1a000386:	4b06      	ldr	r3, [pc, #24]	; (1a0003a0 <setingSetPiontPIDTask+0x50>)
1a000388:	4a08      	ldr	r2, [pc, #32]	; (1a0003ac <setingSetPiontPIDTask+0x5c>)
1a00038a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
1a00038c:	e7e8      	b.n	1a000360 <setingSetPiontPIDTask+0x10>
			case 50: pid.setPoint = 0.43550;
1a00038e:	4b04      	ldr	r3, [pc, #16]	; (1a0003a0 <setingSetPiontPIDTask+0x50>)
1a000390:	4a07      	ldr	r2, [pc, #28]	; (1a0003b0 <setingSetPiontPIDTask+0x60>)
1a000392:	625a      	str	r2, [r3, #36]	; 0x24
			break;
1a000394:	e7e4      	b.n	1a000360 <setingSetPiontPIDTask+0x10>
			case 75: pid.setPoint = 0.653250;
1a000396:	4b02      	ldr	r3, [pc, #8]	; (1a0003a0 <setingSetPiontPIDTask+0x50>)
1a000398:	4a06      	ldr	r2, [pc, #24]	; (1a0003b4 <setingSetPiontPIDTask+0x64>)
1a00039a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
1a00039c:	e7e0      	b.n	1a000360 <setingSetPiontPIDTask+0x10>
1a00039e:	bf00      	nop
1a0003a0:	10007930 	.word	0x10007930
1a0003a4:	3e8e353f 	.word	0x3e8e353f
1a0003a8:	10007958 	.word	0x10007958
1a0003ac:	3f5ef9db 	.word	0x3f5ef9db
1a0003b0:	3edef9db 	.word	0x3edef9db
1a0003b4:	3f273b64 	.word	0x3f273b64

1a0003b8 <serialPortReceiveData>:
		uartCallbackSet(UART_USB, UART_RECEIVE, serialPortReceiveData, NULL);
		// Habilito todas las interrupciones de UART_232
		uartInterrupt(UART_USB, TRUE);
}

void serialPortReceiveData(void *noUsado){
1a0003b8:	b510      	push	{r4, lr}
1a0003ba:	b082      	sub	sp, #8
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
1a0003bc:	2400      	movs	r4, #0
1a0003be:	9401      	str	r4, [sp, #4]
	//UBaseType_t uxSavedInterruptStatus;
    char data;
   // uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
	  data =uartRxRead(UART_USB);
1a0003c0:	2003      	movs	r0, #3
1a0003c2:	f003 fea7 	bl	1a004114 <uartRxRead>
1a0003c6:	4601      	mov	r1, r0
1a0003c8:	f88d 0003 	strb.w	r0, [sp, #3]
	  uartWriteByte(UART_USB, data);
1a0003cc:	2003      	movs	r0, #3
1a0003ce:	f003 fef3 	bl	1a0041b8 <uartWriteByte>
	  uartWriteString(UART_USB, "\n");
1a0003d2:	490e      	ldr	r1, [pc, #56]	; (1a00040c <serialPortReceiveData+0x54>)
1a0003d4:	2003      	movs	r0, #3
1a0003d6:	f003 fefc 	bl	1a0041d2 <uartWriteString>
	  //printf("El caracter recibido es:%c\n",data);
	  //taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
	  xQueueSendFromISR(receiveQueue, &data, &xHigherPriorityTaskWoken);
1a0003da:	4623      	mov	r3, r4
1a0003dc:	aa01      	add	r2, sp, #4
1a0003de:	f10d 0103 	add.w	r1, sp, #3
1a0003e2:	480b      	ldr	r0, [pc, #44]	; (1a000410 <serialPortReceiveData+0x58>)
1a0003e4:	6800      	ldr	r0, [r0, #0]
1a0003e6:	f001 fad5 	bl	1a001994 <xQueueGenericSendFromISR>
	  if (xHigherPriorityTaskWoken == pdTRUE) {
1a0003ea:	9b01      	ldr	r3, [sp, #4]
1a0003ec:	2b01      	cmp	r3, #1
1a0003ee:	d001      	beq.n	1a0003f4 <serialPortReceiveData+0x3c>
	  		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	  	}

}
1a0003f0:	b002      	add	sp, #8
1a0003f2:	bd10      	pop	{r4, pc}
	  		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
1a0003f4:	2b00      	cmp	r3, #0
1a0003f6:	d0fb      	beq.n	1a0003f0 <serialPortReceiveData+0x38>
1a0003f8:	4b06      	ldr	r3, [pc, #24]	; (1a000414 <serialPortReceiveData+0x5c>)
1a0003fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0003fe:	601a      	str	r2, [r3, #0]
1a000400:	f3bf 8f4f 	dsb	sy
1a000404:	f3bf 8f6f 	isb	sy
}
1a000408:	e7f2      	b.n	1a0003f0 <serialPortReceiveData+0x38>
1a00040a:	bf00      	nop
1a00040c:	1a00a308 	.word	0x1a00a308
1a000410:	10000a78 	.word	0x10000a78
1a000414:	e000ed04 	.word	0xe000ed04

1a000418 <serialPortQueueCreate>:
void serialPortQueueCreate(void){
1a000418:	b508      	push	{r3, lr}
 receiveQueue = xQueueCreate(SIZEQUEUERECEIVE,sizeof(char));
1a00041a:	2200      	movs	r2, #0
1a00041c:	2101      	movs	r1, #1
1a00041e:	2064      	movs	r0, #100	; 0x64
1a000420:	f001 f9d3 	bl	1a0017ca <xQueueGenericCreate>
1a000424:	4b04      	ldr	r3, [pc, #16]	; (1a000438 <serialPortQueueCreate+0x20>)
1a000426:	6018      	str	r0, [r3, #0]
 if(receiveQueue == NULL){/*Si devolvio NULL es muy probable que no haya suficiente memoria para crear la cola*/
1a000428:	b100      	cbz	r0, 1a00042c <serialPortQueueCreate+0x14>
}
1a00042a:	bd08      	pop	{r3, pc}
	 gpioWrite(LED1, ON);
1a00042c:	2101      	movs	r1, #1
1a00042e:	202b      	movs	r0, #43	; 0x2b
1a000430:	f004 f8e4 	bl	1a0045fc <gpioWrite>
1a000434:	e7fe      	b.n	1a000434 <serialPortQueueCreate+0x1c>
1a000436:	bf00      	nop
1a000438:	10000a78 	.word	0x10000a78

1a00043c <serialPortForInterruptInit>:
void serialPortForInterruptInit(void){
1a00043c:	b508      	push	{r3, lr}
		uartConfig(UART_USB, 115200);
1a00043e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000442:	2003      	movs	r0, #3
1a000444:	f003 fe7a 	bl	1a00413c <uartInit>
		uartCallbackSet(UART_USB, UART_RECEIVE, serialPortReceiveData, NULL);
1a000448:	2300      	movs	r3, #0
1a00044a:	4a05      	ldr	r2, [pc, #20]	; (1a000460 <serialPortForInterruptInit+0x24>)
1a00044c:	4619      	mov	r1, r3
1a00044e:	2003      	movs	r0, #3
1a000450:	f003 fdf6 	bl	1a004040 <uartCallbackSet>
		uartInterrupt(UART_USB, TRUE);
1a000454:	2101      	movs	r1, #1
1a000456:	2003      	movs	r0, #3
1a000458:	f003 fdaa 	bl	1a003fb0 <uartInterrupt>
}
1a00045c:	bd08      	pop	{r3, pc}
1a00045e:	bf00      	nop
1a000460:	1a0003b9 	.word	0x1a0003b9

1a000464 <serialPortTaskStorageCommand>:

void serialPortTaskStorageCommand(void * taskParmPtr) {
1a000464:	b530      	push	{r4, r5, lr}
1a000466:	b089      	sub	sp, #36	; 0x24

	char command[20];
	char *pCommand=NULL;
	uint8_t index = 0;
	char data;
	pCommand=command;
1a000468:	ab03      	add	r3, sp, #12
1a00046a:	9302      	str	r3, [sp, #8]
	uint8_t index = 0;
1a00046c:	2400      	movs	r4, #0
1a00046e:	e00a      	b.n	1a000486 <serialPortTaskStorageCommand+0x22>
		if (xQueueReceive(receiveQueue, &data, portMAX_DELAY) == pdTRUE) {
			*(command+index)=data;

			//*(pCommand+index) = data;
			if (*(command+index) == '\n') {
				*(command+index) = '\0';
1a000470:	2500      	movs	r5, #0
1a000472:	5515      	strb	r5, [r2, r4]

				//Envió el comando que se recibio
				//así desbloqueo la tarea que realiza la interpretación del comando(proceso)
				xQueueSend(processingComandQueue, &pCommand, portMAX_DELAY);
1a000474:	462b      	mov	r3, r5
1a000476:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00047a:	a902      	add	r1, sp, #8
1a00047c:	480b      	ldr	r0, [pc, #44]	; (1a0004ac <serialPortTaskStorageCommand+0x48>)
1a00047e:	6800      	ldr	r0, [r0, #0]
1a000480:	f001 f9ca 	bl	1a001818 <xQueueGenericSend>

				index = 0;
1a000484:	462c      	mov	r4, r5
		if (xQueueReceive(receiveQueue, &data, portMAX_DELAY) == pdTRUE) {
1a000486:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00048a:	f10d 0107 	add.w	r1, sp, #7
1a00048e:	4b08      	ldr	r3, [pc, #32]	; (1a0004b0 <serialPortTaskStorageCommand+0x4c>)
1a000490:	6818      	ldr	r0, [r3, #0]
1a000492:	f001 fae5 	bl	1a001a60 <xQueueReceive>
1a000496:	2801      	cmp	r0, #1
1a000498:	d1f5      	bne.n	1a000486 <serialPortTaskStorageCommand+0x22>
			*(command+index)=data;
1a00049a:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00049e:	aa03      	add	r2, sp, #12
1a0004a0:	5513      	strb	r3, [r2, r4]
			if (*(command+index) == '\n') {
1a0004a2:	2b0a      	cmp	r3, #10
1a0004a4:	d0e4      	beq.n	1a000470 <serialPortTaskStorageCommand+0xc>
			} else {
				index++;
1a0004a6:	3401      	adds	r4, #1
1a0004a8:	b2e4      	uxtb	r4, r4
1a0004aa:	e7ec      	b.n	1a000486 <serialPortTaskStorageCommand+0x22>
1a0004ac:	10007968 	.word	0x10007968
1a0004b0:	10000a78 	.word	0x10000a78

1a0004b4 <commandProcessingQueueCreate>:
/*==================[inlcusiones]============================================*/
#include "commandprocessing.h"
#include "steppermotor.h"
#include "pid.h"

void commandProcessingQueueCreate(void) {
1a0004b4:	b508      	push	{r3, lr}
	processingComandQueue = xQueueCreate(SIZECOMMANDQUEUE, sizeof(char*));
1a0004b6:	2200      	movs	r2, #0
1a0004b8:	2104      	movs	r1, #4
1a0004ba:	2064      	movs	r0, #100	; 0x64
1a0004bc:	f001 f985 	bl	1a0017ca <xQueueGenericCreate>
1a0004c0:	4b04      	ldr	r3, [pc, #16]	; (1a0004d4 <commandProcessingQueueCreate+0x20>)
1a0004c2:	6018      	str	r0, [r3, #0]

	if (processingComandQueue == NULL) {/*Si devolvio NULL es muy probable que no haya suficiente memoria para crear la cola*/
1a0004c4:	b100      	cbz	r0, 1a0004c8 <commandProcessingQueueCreate+0x14>
		gpioWrite(LED1, ON);
		while (1)
			;/*Se queda bloquedo el sistema hasta que venga el personal de mantenimiento*/
	}
}
1a0004c6:	bd08      	pop	{r3, pc}
		gpioWrite(LED1, ON);
1a0004c8:	2101      	movs	r1, #1
1a0004ca:	202b      	movs	r0, #43	; 0x2b
1a0004cc:	f004 f896 	bl	1a0045fc <gpioWrite>
1a0004d0:	e7fe      	b.n	1a0004d0 <commandProcessingQueueCreate+0x1c>
1a0004d2:	bf00      	nop
1a0004d4:	10007968 	.word	0x10007968

1a0004d8 <commandProcessingConverterCaracterToDecimal>:
			}
		}
	}
}

uint16_t commandProcessingConverterCaracterToDecimal(char * pointer, uint8_t length) {
1a0004d8:	b4f0      	push	{r4, r5, r6, r7}
		    uint32_t tam = length;
		    uint32_t expo = 0;
		    uint32_t pot=1;
		    uint32_t i;

		    for(i=tam ;i>0;--i)
1a0004da:	460a      	mov	r2, r1
	uint32_t num=0;
1a0004dc:	2700      	movs	r7, #0
		    for(i=tam ;i>0;--i)
1a0004de:	e008      	b.n	1a0004f2 <commandProcessingConverterCaracterToDecimal+0x1a>

		        expo = tam-i;
		        pot=1;
		        while( expo > 0)//para sacar la potencia
		        {
		                pot  = pot*10  ;
1a0004e0:	eb03 0483 	add.w	r4, r3, r3, lsl #2
1a0004e4:	0063      	lsls	r3, r4, #1
		                expo = expo-1 ;
1a0004e6:	3a01      	subs	r2, #1
		        while( expo > 0)//para sacar la potencia
1a0004e8:	2a00      	cmp	r2, #0
1a0004ea:	d1f9      	bne.n	1a0004e0 <commandProcessingConverterCaracterToDecimal+0x8>
		        }
		    num = num+digito*pot;
1a0004ec:	fb05 7703 	mla	r7, r5, r3, r7
		    for(i=tam ;i>0;--i)
1a0004f0:	4632      	mov	r2, r6
1a0004f2:	b12a      	cbz	r2, 1a000500 <commandProcessingConverterCaracterToDecimal+0x28>
		        digito=(uint32_t) (*(pointer+(i-1))-48);
1a0004f4:	1e56      	subs	r6, r2, #1
1a0004f6:	5d85      	ldrb	r5, [r0, r6]
1a0004f8:	3d30      	subs	r5, #48	; 0x30
		        expo = tam-i;
1a0004fa:	1a8a      	subs	r2, r1, r2
		        pot=1;
1a0004fc:	2301      	movs	r3, #1
		        while( expo > 0)//para sacar la potencia
1a0004fe:	e7f3      	b.n	1a0004e8 <commandProcessingConverterCaracterToDecimal+0x10>
		    }
		    return num;
	}
1a000500:	b2b8      	uxth	r0, r7
1a000502:	bcf0      	pop	{r4, r5, r6, r7}
1a000504:	4770      	bx	lr
1a000506:	Address 0x000000001a000506 is out of bounds.


1a000508 <commandProcessingTask>:
void commandProcessingTask(void * taskParmPtr) {
1a000508:	b510      	push	{r4, lr}
1a00050a:	b084      	sub	sp, #16
	char *pCommandToProcess = NULL;
1a00050c:	2300      	movs	r3, #0
1a00050e:	9303      	str	r3, [sp, #12]
1a000510:	e014      	b.n	1a00053c <commandProcessingTask+0x34>
				taskENTER_CRITICAL();
1a000512:	f002 fc1f 	bl	1a002d54 <vPortEnterCritical>
				printf("El comando es:%c\n", *(pCommandToProcess + index));
1a000516:	9b03      	ldr	r3, [sp, #12]
1a000518:	5d19      	ldrb	r1, [r3, r4]
1a00051a:	48b1      	ldr	r0, [pc, #708]	; (1a0007e0 <commandProcessingTask+0x2d8>)
1a00051c:	f005 fe8a 	bl	1a006234 <printf>
				taskEXIT_CRITICAL();
1a000520:	f002 fc3a 	bl	1a002d98 <vPortExitCritical>
				index++;
1a000524:	3401      	adds	r4, #1
1a000526:	b2e4      	uxtb	r4, r4
			while (*(pCommandToProcess + index) != '\0') {
1a000528:	9803      	ldr	r0, [sp, #12]
1a00052a:	5d03      	ldrb	r3, [r0, r4]
1a00052c:	2b00      	cmp	r3, #0
1a00052e:	d1f0      	bne.n	1a000512 <commandProcessingTask+0xa>
			switch (*(pCommandToProcess + index)) {
1a000530:	7803      	ldrb	r3, [r0, #0]
1a000532:	2b4d      	cmp	r3, #77	; 0x4d
1a000534:	d00d      	beq.n	1a000552 <commandProcessingTask+0x4a>
1a000536:	2b53      	cmp	r3, #83	; 0x53
1a000538:	f000 8120 	beq.w	1a00077c <commandProcessingTask+0x274>
		if (xQueueReceive(processingComandQueue, &pCommandToProcess,
1a00053c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000540:	a903      	add	r1, sp, #12
1a000542:	4ba8      	ldr	r3, [pc, #672]	; (1a0007e4 <commandProcessingTask+0x2dc>)
1a000544:	6818      	ldr	r0, [r3, #0]
1a000546:	f001 fa8b 	bl	1a001a60 <xQueueReceive>
1a00054a:	2801      	cmp	r0, #1
1a00054c:	d1f6      	bne.n	1a00053c <commandProcessingTask+0x34>
1a00054e:	2400      	movs	r4, #0
1a000550:	e7ea      	b.n	1a000528 <commandProcessingTask+0x20>
				switch (*(pCommandToProcess + 1)) {
1a000552:	7843      	ldrb	r3, [r0, #1]
1a000554:	3b44      	subs	r3, #68	; 0x44
1a000556:	2b10      	cmp	r3, #16
1a000558:	d8f0      	bhi.n	1a00053c <commandProcessingTask+0x34>
1a00055a:	a201      	add	r2, pc, #4	; (adr r2, 1a000560 <commandProcessingTask+0x58>)
1a00055c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a000560:	1a0005bd 	.word	0x1a0005bd
1a000564:	1a0005a5 	.word	0x1a0005a5
1a000568:	1a00053d 	.word	0x1a00053d
1a00056c:	1a00053d 	.word	0x1a00053d
1a000570:	1a00053d 	.word	0x1a00053d
1a000574:	1a00053d 	.word	0x1a00053d
1a000578:	1a00053d 	.word	0x1a00053d
1a00057c:	1a00053d 	.word	0x1a00053d
1a000580:	1a00053d 	.word	0x1a00053d
1a000584:	1a0005d3 	.word	0x1a0005d3
1a000588:	1a00053d 	.word	0x1a00053d
1a00058c:	1a00053d 	.word	0x1a00053d
1a000590:	1a00053d 	.word	0x1a00053d
1a000594:	1a00053d 	.word	0x1a00053d
1a000598:	1a00053d 	.word	0x1a00053d
1a00059c:	1a000745 	.word	0x1a000745
1a0005a0:	1a0006f7 	.word	0x1a0006f7
					enableMotor = STEPPER_ENABLE;
1a0005a4:	a904      	add	r1, sp, #16
1a0005a6:	2301      	movs	r3, #1
1a0005a8:	f801 3d05 	strb.w	r3, [r1, #-5]!
					xQueueSend(stepperMotorEnableQueue, &enableMotor,portMAX_DELAY);
1a0005ac:	2300      	movs	r3, #0
1a0005ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0005b2:	488d      	ldr	r0, [pc, #564]	; (1a0007e8 <commandProcessingTask+0x2e0>)
1a0005b4:	6800      	ldr	r0, [r0, #0]
1a0005b6:	f001 f92f 	bl	1a001818 <xQueueGenericSend>
					break;
1a0005ba:	e7bf      	b.n	1a00053c <commandProcessingTask+0x34>
					enableMotor = STEPPER_DISABLE;
1a0005bc:	2300      	movs	r3, #0
1a0005be:	a904      	add	r1, sp, #16
1a0005c0:	f801 3d05 	strb.w	r3, [r1, #-5]!
					xQueueSend(stepperMotorEnableQueue, &enableMotor,portMAX_DELAY);
1a0005c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0005c8:	4887      	ldr	r0, [pc, #540]	; (1a0007e8 <commandProcessingTask+0x2e0>)
1a0005ca:	6800      	ldr	r0, [r0, #0]
1a0005cc:	f001 f924 	bl	1a001818 <xQueueGenericSend>
					break;
1a0005d0:	e7b4      	b.n	1a00053c <commandProcessingTask+0x34>
					switch (*(pCommandToProcess + 2)) {
1a0005d2:	7883      	ldrb	r3, [r0, #2]
1a0005d4:	2b53      	cmp	r3, #83	; 0x53
1a0005d6:	d1b1      	bne.n	1a00053c <commandProcessingTask+0x34>
						switch (*(pCommandToProcess + 3)) {
1a0005d8:	78c3      	ldrb	r3, [r0, #3]
1a0005da:	3b30      	subs	r3, #48	; 0x30
1a0005dc:	2b18      	cmp	r3, #24
1a0005de:	d8ad      	bhi.n	1a00053c <commandProcessingTask+0x34>
1a0005e0:	a201      	add	r2, pc, #4	; (adr r2, 1a0005e8 <commandProcessingTask+0xe0>)
1a0005e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0005e6:	bf00      	nop
1a0005e8:	1a00067b 	.word	0x1a00067b
1a0005ec:	1a0006b7 	.word	0x1a0006b7
1a0005f0:	1a00053d 	.word	0x1a00053d
1a0005f4:	1a0006d7 	.word	0x1a0006d7
1a0005f8:	1a00053d 	.word	0x1a00053d
1a0005fc:	1a00053d 	.word	0x1a00053d
1a000600:	1a00053d 	.word	0x1a00053d
1a000604:	1a00053d 	.word	0x1a00053d
1a000608:	1a00053d 	.word	0x1a00053d
1a00060c:	1a00053d 	.word	0x1a00053d
1a000610:	1a00053d 	.word	0x1a00053d
1a000614:	1a00053d 	.word	0x1a00053d
1a000618:	1a00053d 	.word	0x1a00053d
1a00061c:	1a00053d 	.word	0x1a00053d
1a000620:	1a00053d 	.word	0x1a00053d
1a000624:	1a00053d 	.word	0x1a00053d
1a000628:	1a00053d 	.word	0x1a00053d
1a00062c:	1a00053d 	.word	0x1a00053d
1a000630:	1a00053d 	.word	0x1a00053d
1a000634:	1a00053d 	.word	0x1a00053d
1a000638:	1a00053d 	.word	0x1a00053d
1a00063c:	1a00053d 	.word	0x1a00053d
1a000640:	1a00064d 	.word	0x1a00064d
1a000644:	1a00053d 	.word	0x1a00053d
1a000648:	1a000663 	.word	0x1a000663
							microSteps = RESOLUTION_FULL_STEP;
1a00064c:	2300      	movs	r3, #0
1a00064e:	a904      	add	r1, sp, #16
1a000650:	f801 3d06 	strb.w	r3, [r1, #-6]!
							xQueueSend(stepperMotorMicroStepsQueue, &microSteps,
1a000654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000658:	4864      	ldr	r0, [pc, #400]	; (1a0007ec <commandProcessingTask+0x2e4>)
1a00065a:	6800      	ldr	r0, [r0, #0]
1a00065c:	f001 f8dc 	bl	1a001818 <xQueueGenericSend>
							break;
1a000660:	e76c      	b.n	1a00053c <commandProcessingTask+0x34>
							microSteps = RESOLUTION_HALF_STEP;
1a000662:	a904      	add	r1, sp, #16
1a000664:	2301      	movs	r3, #1
1a000666:	f801 3d06 	strb.w	r3, [r1, #-6]!
							xQueueSend(stepperMotorMicroStepsQueue, &microSteps,
1a00066a:	2300      	movs	r3, #0
1a00066c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000670:	485e      	ldr	r0, [pc, #376]	; (1a0007ec <commandProcessingTask+0x2e4>)
1a000672:	6800      	ldr	r0, [r0, #0]
1a000674:	f001 f8d0 	bl	1a001818 <xQueueGenericSend>
							break;
1a000678:	e760      	b.n	1a00053c <commandProcessingTask+0x34>
							switch (*(pCommandToProcess + 4)) {
1a00067a:	7903      	ldrb	r3, [r0, #4]
1a00067c:	2b34      	cmp	r3, #52	; 0x34
1a00067e:	d00e      	beq.n	1a00069e <commandProcessingTask+0x196>
1a000680:	2b38      	cmp	r3, #56	; 0x38
1a000682:	f47f af5b 	bne.w	1a00053c <commandProcessingTask+0x34>
								microSteps=RESOLUTION_8_STEP;
1a000686:	a904      	add	r1, sp, #16
1a000688:	2303      	movs	r3, #3
1a00068a:	f801 3d06 	strb.w	r3, [r1, #-6]!
								xQueueSend(stepperMotorMicroStepsQueue, &microSteps,
1a00068e:	2300      	movs	r3, #0
1a000690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000694:	4855      	ldr	r0, [pc, #340]	; (1a0007ec <commandProcessingTask+0x2e4>)
1a000696:	6800      	ldr	r0, [r0, #0]
1a000698:	f001 f8be 	bl	1a001818 <xQueueGenericSend>
								break;
1a00069c:	e74e      	b.n	1a00053c <commandProcessingTask+0x34>
								microSteps=RESOLUTION_4_STEP;
1a00069e:	a904      	add	r1, sp, #16
1a0006a0:	2302      	movs	r3, #2
1a0006a2:	f801 3d06 	strb.w	r3, [r1, #-6]!
								xQueueSend(stepperMotorMicroStepsQueue, &microSteps,
1a0006a6:	2300      	movs	r3, #0
1a0006a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0006ac:	484f      	ldr	r0, [pc, #316]	; (1a0007ec <commandProcessingTask+0x2e4>)
1a0006ae:	6800      	ldr	r0, [r0, #0]
1a0006b0:	f001 f8b2 	bl	1a001818 <xQueueGenericSend>
								break;
1a0006b4:	e742      	b.n	1a00053c <commandProcessingTask+0x34>
							if (*(pCommandToProcess + 4) == '6') {
1a0006b6:	7903      	ldrb	r3, [r0, #4]
1a0006b8:	2b36      	cmp	r3, #54	; 0x36
1a0006ba:	f47f af3f 	bne.w	1a00053c <commandProcessingTask+0x34>
								microSteps=RESOLUTION_16_STEP;
1a0006be:	a904      	add	r1, sp, #16
1a0006c0:	2304      	movs	r3, #4
1a0006c2:	f801 3d06 	strb.w	r3, [r1, #-6]!
								xQueueSend(stepperMotorMicroStepsQueue, &microSteps,
1a0006c6:	2300      	movs	r3, #0
1a0006c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0006cc:	4847      	ldr	r0, [pc, #284]	; (1a0007ec <commandProcessingTask+0x2e4>)
1a0006ce:	6800      	ldr	r0, [r0, #0]
1a0006d0:	f001 f8a2 	bl	1a001818 <xQueueGenericSend>
1a0006d4:	e732      	b.n	1a00053c <commandProcessingTask+0x34>
							if (*(pCommandToProcess + 4) == '2') {
1a0006d6:	7903      	ldrb	r3, [r0, #4]
1a0006d8:	2b32      	cmp	r3, #50	; 0x32
1a0006da:	f47f af2f 	bne.w	1a00053c <commandProcessingTask+0x34>
								microSteps = RESOLUTION_32_STEP;
1a0006de:	a904      	add	r1, sp, #16
1a0006e0:	2305      	movs	r3, #5
1a0006e2:	f801 3d06 	strb.w	r3, [r1, #-6]!
								xQueueSend(stepperMotorMicroStepsQueue, &microSteps,
1a0006e6:	2300      	movs	r3, #0
1a0006e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0006ec:	483f      	ldr	r0, [pc, #252]	; (1a0007ec <commandProcessingTask+0x2e4>)
1a0006ee:	6800      	ldr	r0, [r0, #0]
1a0006f0:	f001 f892 	bl	1a001818 <xQueueGenericSend>
1a0006f4:	e722      	b.n	1a00053c <commandProcessingTask+0x34>
							switch(*(pCommandToProcess + 2)){
1a0006f6:	7883      	ldrb	r3, [r0, #2]
1a0006f8:	2b41      	cmp	r3, #65	; 0x41
1a0006fa:	d00d      	beq.n	1a000718 <commandProcessingTask+0x210>
1a0006fc:	2b48      	cmp	r3, #72	; 0x48
1a0006fe:	f47f af1d 	bne.w	1a00053c <commandProcessingTask+0x34>
								directionMotor = STEPPER_RIGHT_OPEN;
1a000702:	2300      	movs	r3, #0
1a000704:	a904      	add	r1, sp, #16
1a000706:	f801 3d07 	strb.w	r3, [r1, #-7]!
								xQueueSend(stepperMotorDirectionQueue, &directionMotor,portMAX_DELAY);
1a00070a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00070e:	4838      	ldr	r0, [pc, #224]	; (1a0007f0 <commandProcessingTask+0x2e8>)
1a000710:	6800      	ldr	r0, [r0, #0]
1a000712:	f001 f881 	bl	1a001818 <xQueueGenericSend>
								break;
1a000716:	e711      	b.n	1a00053c <commandProcessingTask+0x34>
								directionMotor = STEPPER_LEFT_CLOSE;
1a000718:	a904      	add	r1, sp, #16
1a00071a:	2301      	movs	r3, #1
1a00071c:	f801 3d07 	strb.w	r3, [r1, #-7]!
								xQueueSend(stepperMotorDirectionQueue, &directionMotor,portMAX_DELAY);
1a000720:	2300      	movs	r3, #0
1a000722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000726:	4832      	ldr	r0, [pc, #200]	; (1a0007f0 <commandProcessingTask+0x2e8>)
1a000728:	6800      	ldr	r0, [r0, #0]
1a00072a:	f001 f875 	bl	1a001818 <xQueueGenericSend>
								break;
1a00072e:	e705      	b.n	1a00053c <commandProcessingTask+0x34>
							i++;
1a000730:	3201      	adds	r2, #1
1a000732:	b2d2      	uxtb	r2, r2
						while(*(pCommandToProcess + i)!='\0'){
1a000734:	5c83      	ldrb	r3, [r0, r2]
1a000736:	b143      	cbz	r3, 1a00074a <commandProcessingTask+0x242>
							if('0'<=*(pCommandToProcess + i) && '9'>=*(pCommandToProcess + i)){
1a000738:	3b30      	subs	r3, #48	; 0x30
1a00073a:	b2db      	uxtb	r3, r3
1a00073c:	2b09      	cmp	r3, #9
1a00073e:	d9f7      	bls.n	1a000730 <commandProcessingTask+0x228>
								validCommand=FALSE;
1a000740:	2100      	movs	r1, #0
1a000742:	e7f5      	b.n	1a000730 <commandProcessingTask+0x228>
						validCommand=TRUE;
1a000744:	2101      	movs	r1, #1
						i=2;
1a000746:	2202      	movs	r2, #2
1a000748:	e7f4      	b.n	1a000734 <commandProcessingTask+0x22c>
						if(validCommand==FALSE){
1a00074a:	b919      	cbnz	r1, 1a000754 <commandProcessingTask+0x24c>
							printf("Comando Invalido.....\n");
1a00074c:	4829      	ldr	r0, [pc, #164]	; (1a0007f4 <commandProcessingTask+0x2ec>)
1a00074e:	f005 fdd3 	bl	1a0062f8 <puts>
1a000752:	e6f3      	b.n	1a00053c <commandProcessingTask+0x34>
							numberOfSteps = commandProcessingConverterCaracterToDecimal((pCommandToProcess + 2),4);
1a000754:	2104      	movs	r1, #4
1a000756:	3002      	adds	r0, #2
1a000758:	f7ff febe 	bl	1a0004d8 <commandProcessingConverterCaracterToDecimal>
1a00075c:	4601      	mov	r1, r0
1a00075e:	ac04      	add	r4, sp, #16
1a000760:	f824 0d0a 	strh.w	r0, [r4, #-10]!
							printf("numero de pasos:%d\n",numberOfSteps);
1a000764:	4824      	ldr	r0, [pc, #144]	; (1a0007f8 <commandProcessingTask+0x2f0>)
1a000766:	f005 fd65 	bl	1a006234 <printf>
							xQueueSend(stepperMotorPulseQueue, &numberOfSteps,portMAX_DELAY);
1a00076a:	2300      	movs	r3, #0
1a00076c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000770:	4621      	mov	r1, r4
1a000772:	4822      	ldr	r0, [pc, #136]	; (1a0007fc <commandProcessingTask+0x2f4>)
1a000774:	6800      	ldr	r0, [r0, #0]
1a000776:	f001 f84f 	bl	1a001818 <xQueueGenericSend>
1a00077a:	e6df      	b.n	1a00053c <commandProcessingTask+0x34>
			case 'S': if(*(pCommandToProcess + 1)=='P'){
1a00077c:	7843      	ldrb	r3, [r0, #1]
1a00077e:	2b50      	cmp	r3, #80	; 0x50
1a000780:	f47f aedc 	bne.w	1a00053c <commandProcessingTask+0x34>
						sp = commandProcessingConverterCaracterToDecimal((pCommandToProcess + 2),3);
1a000784:	2103      	movs	r1, #3
1a000786:	3002      	adds	r0, #2
1a000788:	f7ff fea6 	bl	1a0004d8 <commandProcessingConverterCaracterToDecimal>
1a00078c:	4604      	mov	r4, r0
						taskENTER_CRITICAL();
1a00078e:	f002 fae1 	bl	1a002d54 <vPortEnterCritical>
						printf("Set Point:%d\n",sp);
1a000792:	4621      	mov	r1, r4
1a000794:	481a      	ldr	r0, [pc, #104]	; (1a000800 <commandProcessingTask+0x2f8>)
1a000796:	f005 fd4d 	bl	1a006234 <printf>
						taskEXIT_CRITICAL();
1a00079a:	f002 fafd 	bl	1a002d98 <vPortExitCritical>
						switch(sp){
1a00079e:	2c32      	cmp	r4, #50	; 0x32
1a0007a0:	d015      	beq.n	1a0007ce <commandProcessingTask+0x2c6>
1a0007a2:	d807      	bhi.n	1a0007b4 <commandProcessingTask+0x2ac>
1a0007a4:	b17c      	cbz	r4, 1a0007c6 <commandProcessingTask+0x2be>
1a0007a6:	2c19      	cmp	r4, #25
1a0007a8:	f47f aec8 	bne.w	1a00053c <commandProcessingTask+0x34>
									case 25: 	pid.setPoint = 0.72000;
1a0007ac:	4b15      	ldr	r3, [pc, #84]	; (1a000804 <commandProcessingTask+0x2fc>)
1a0007ae:	4a16      	ldr	r2, [pc, #88]	; (1a000808 <commandProcessingTask+0x300>)
1a0007b0:	625a      	str	r2, [r3, #36]	; 0x24
									break;
1a0007b2:	e6c3      	b.n	1a00053c <commandProcessingTask+0x34>
						switch(sp){
1a0007b4:	2c4b      	cmp	r4, #75	; 0x4b
1a0007b6:	d00f      	beq.n	1a0007d8 <commandProcessingTask+0x2d0>
1a0007b8:	2c64      	cmp	r4, #100	; 0x64
1a0007ba:	f47f aebf 	bne.w	1a00053c <commandProcessingTask+0x34>
									case 100: 	pid.setPoint = 0.85200;
1a0007be:	4b11      	ldr	r3, [pc, #68]	; (1a000804 <commandProcessingTask+0x2fc>)
1a0007c0:	4a12      	ldr	r2, [pc, #72]	; (1a00080c <commandProcessingTask+0x304>)
1a0007c2:	625a      	str	r2, [r3, #36]	; 0x24
									break;
1a0007c4:	e6ba      	b.n	1a00053c <commandProcessingTask+0x34>
									case 0: 	pid.setPoint = 0.69000;
1a0007c6:	4b0f      	ldr	r3, [pc, #60]	; (1a000804 <commandProcessingTask+0x2fc>)
1a0007c8:	4a11      	ldr	r2, [pc, #68]	; (1a000810 <commandProcessingTask+0x308>)
1a0007ca:	625a      	str	r2, [r3, #36]	; 0x24
									break;
1a0007cc:	e6b6      	b.n	1a00053c <commandProcessingTask+0x34>
									case 50: 	pid.setPoint = 0.75000;
1a0007ce:	4b0d      	ldr	r3, [pc, #52]	; (1a000804 <commandProcessingTask+0x2fc>)
1a0007d0:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
1a0007d4:	625a      	str	r2, [r3, #36]	; 0x24
									break;
1a0007d6:	e6b1      	b.n	1a00053c <commandProcessingTask+0x34>
									case 75: 	pid.setPoint = 0.80000;
1a0007d8:	4b0a      	ldr	r3, [pc, #40]	; (1a000804 <commandProcessingTask+0x2fc>)
1a0007da:	4a0e      	ldr	r2, [pc, #56]	; (1a000814 <commandProcessingTask+0x30c>)
1a0007dc:	625a      	str	r2, [r3, #36]	; 0x24
									break;
1a0007de:	e6ad      	b.n	1a00053c <commandProcessingTask+0x34>
1a0007e0:	1a00a2f8 	.word	0x1a00a2f8
1a0007e4:	10007968 	.word	0x10007968
1a0007e8:	100079a4 	.word	0x100079a4
1a0007ec:	100079ac 	.word	0x100079ac
1a0007f0:	10007998 	.word	0x10007998
1a0007f4:	1a00a30c 	.word	0x1a00a30c
1a0007f8:	1a00a324 	.word	0x1a00a324
1a0007fc:	1000796c 	.word	0x1000796c
1a000800:	1a00a338 	.word	0x1a00a338
1a000804:	10007930 	.word	0x10007930
1a000808:	3f3851ec 	.word	0x3f3851ec
1a00080c:	3f5a1cac 	.word	0x3f5a1cac
1a000810:	3f30a3d7 	.word	0x3f30a3d7
1a000814:	3f4ccccd 	.word	0x3f4ccccd

1a000818 <main>:

/*==================[funcion principal]======================================*/

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main(void)
{
1a000818:	b500      	push	{lr}
1a00081a:	b085      	sub	sp, #20
   // ---------- CONFIGURACIONES ------------------------------
   // Inicializar y configurar la plataforma
   boardConfig();
1a00081c:	f003 ff70 	bl	1a004700 <boardInit>
   serialPortForInterruptInit();
1a000820:	f7ff fe0c 	bl	1a00043c <serialPortForInterruptInit>
   // inicializo el motor PaP
   stepperMotorInit(&stepper,400,GPIO2,GPIO1,GPIO0,GPIO3,GPIO4,GPIO5,0.9 );
1a000824:	230d      	movs	r3, #13
1a000826:	9303      	str	r3, [sp, #12]
1a000828:	231e      	movs	r3, #30
1a00082a:	9302      	str	r3, [sp, #8]
1a00082c:	230e      	movs	r3, #14
1a00082e:	9301      	str	r3, [sp, #4]
1a000830:	2320      	movs	r3, #32
1a000832:	9300      	str	r3, [sp, #0]
1a000834:	ed9f 0a45 	vldr	s0, [pc, #276]	; 1a00094c <main+0x134>
1a000838:	230f      	movs	r3, #15
1a00083a:	221f      	movs	r2, #31
1a00083c:	f44f 71c8 	mov.w	r1, #400	; 0x190
1a000840:	4843      	ldr	r0, [pc, #268]	; (1a000950 <main+0x138>)
1a000842:	f000 f9a7 	bl	1a000b94 <stepperMotorInit>
   startPid(&pid,0, 0,0.00000, 0.00000,0.00000,0.00000,1.20000,0.00000,1.000, 0.05555, 0.00000);
1a000846:	ed9f 0a43 	vldr	s0, [pc, #268]	; 1a000954 <main+0x13c>
1a00084a:	eeb0 4a40 	vmov.f32	s8, s0
1a00084e:	eddf 3a42 	vldr	s7, [pc, #264]	; 1a000958 <main+0x140>
1a000852:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
1a000856:	eef0 2a40 	vmov.f32	s5, s0
1a00085a:	ed9f 2a40 	vldr	s4, [pc, #256]	; 1a00095c <main+0x144>
1a00085e:	eef0 1a40 	vmov.f32	s3, s0
1a000862:	eeb0 1a40 	vmov.f32	s2, s0
1a000866:	eef0 0a40 	vmov.f32	s1, s0
1a00086a:	2200      	movs	r2, #0
1a00086c:	4611      	mov	r1, r2
1a00086e:	483c      	ldr	r0, [pc, #240]	; (1a000960 <main+0x148>)
1a000870:	f7ff fd58 	bl	1a000324 <startPid>
   adcStart();
1a000874:	f000 fb0c 	bl	1a000e90 <adcStart>
   printf( "Trabajo Final con freeRTOS y sAPI.\n" );
1a000878:	483a      	ldr	r0, [pc, #232]	; (1a000964 <main+0x14c>)
1a00087a:	f005 fd3d 	bl	1a0062f8 <puts>

   serialPortQueueCreate();
1a00087e:	f7ff fdcb 	bl	1a000418 <serialPortQueueCreate>
   stepperMotorQueueCreate();
1a000882:	f000 f907 	bl	1a000a94 <stepperMotorQueueCreate>
   commandProcessingQueueCreate();
1a000886:	f7ff fe15 	bl	1a0004b4 <commandProcessingQueueCreate>
   PdiCreateQueue();
1a00088a:	f7ff fd39 	bl	1a000300 <PdiCreateQueue>
   stepperMotorTimerInit();
1a00088e:	f000 f94f 	bl	1a000b30 <stepperMotorTimerInit>
   // Crear tarea en freeRTOS
   xTaskCreate(
1a000892:	2400      	movs	r4, #0
1a000894:	9401      	str	r4, [sp, #4]
1a000896:	2601      	movs	r6, #1
1a000898:	9600      	str	r6, [sp, #0]
1a00089a:	4623      	mov	r3, r4
1a00089c:	22b4      	movs	r2, #180	; 0xb4
1a00089e:	4932      	ldr	r1, [pc, #200]	; (1a000968 <main+0x150>)
1a0008a0:	4832      	ldr	r0, [pc, #200]	; (1a00096c <main+0x154>)
1a0008a2:	f001 fc1e 	bl	1a0020e2 <xTaskCreate>
      configMINIMAL_STACK_SIZE*2, // Cantidad de stack de la tarea
      0,                          // Parametros de tarea
      tskIDLE_PRIORITY+1,         // Prioridad de la tarea
      0                           // Puntero a la tarea creada en el sistema
   );
   xTaskCreate(
1a0008a6:	9401      	str	r4, [sp, #4]
1a0008a8:	2503      	movs	r5, #3
1a0008aa:	9500      	str	r5, [sp, #0]
1a0008ac:	4623      	mov	r3, r4
1a0008ae:	22b4      	movs	r2, #180	; 0xb4
1a0008b0:	492f      	ldr	r1, [pc, #188]	; (1a000970 <main+0x158>)
1a0008b2:	4830      	ldr	r0, [pc, #192]	; (1a000974 <main+0x15c>)
1a0008b4:	f001 fc15 	bl	1a0020e2 <xTaskCreate>
         configMINIMAL_STACK_SIZE*2, // Cantidad de stack de la tarea
         0,                          // Parametros de tarea
         tskIDLE_PRIORITY+3,         // Prioridad de la tarea
         0                           // Puntero a la tarea creada en el sistema
      );
   xTaskCreate(
1a0008b8:	9401      	str	r4, [sp, #4]
1a0008ba:	9500      	str	r5, [sp, #0]
1a0008bc:	4623      	mov	r3, r4
1a0008be:	f44f 7207 	mov.w	r2, #540	; 0x21c
1a0008c2:	492d      	ldr	r1, [pc, #180]	; (1a000978 <main+0x160>)
1a0008c4:	482d      	ldr	r0, [pc, #180]	; (1a00097c <main+0x164>)
1a0008c6:	f001 fc0c 	bl	1a0020e2 <xTaskCreate>
            0,                          // Parametros de tarea
            tskIDLE_PRIORITY+3,         // Prioridad de la tarea
            0                           // Puntero a la tarea creada en el sistema
         );

   xTaskCreate(
1a0008ca:	9401      	str	r4, [sp, #4]
1a0008cc:	9500      	str	r5, [sp, #0]
1a0008ce:	4623      	mov	r3, r4
1a0008d0:	22b4      	movs	r2, #180	; 0xb4
1a0008d2:	492b      	ldr	r1, [pc, #172]	; (1a000980 <main+0x168>)
1a0008d4:	482b      	ldr	r0, [pc, #172]	; (1a000984 <main+0x16c>)
1a0008d6:	f001 fc04 	bl	1a0020e2 <xTaskCreate>
               0,                          // Parametros de tarea
               tskIDLE_PRIORITY+3,         // Prioridad de la tarea
               0                           // Puntero a la tarea creada en el sistema
            );

   xTaskCreate(
1a0008da:	9401      	str	r4, [sp, #4]
1a0008dc:	9500      	str	r5, [sp, #0]
1a0008de:	4623      	mov	r3, r4
1a0008e0:	f44f 7287 	mov.w	r2, #270	; 0x10e
1a0008e4:	4928      	ldr	r1, [pc, #160]	; (1a000988 <main+0x170>)
1a0008e6:	4829      	ldr	r0, [pc, #164]	; (1a00098c <main+0x174>)
1a0008e8:	f001 fbfb 	bl	1a0020e2 <xTaskCreate>
                  configMINIMAL_STACK_SIZE*3, // Cantidad de stack de la tarea
                  0,                          // Parametros de tarea
                  tskIDLE_PRIORITY+3,         // Prioridad de la tarea
                  0                           // Puntero a la tarea creada en el sistema
               );
   xTaskCreate(
1a0008ec:	9401      	str	r4, [sp, #4]
1a0008ee:	9500      	str	r5, [sp, #0]
1a0008f0:	4623      	mov	r3, r4
1a0008f2:	22b4      	movs	r2, #180	; 0xb4
1a0008f4:	4926      	ldr	r1, [pc, #152]	; (1a000990 <main+0x178>)
1a0008f6:	4827      	ldr	r0, [pc, #156]	; (1a000994 <main+0x17c>)
1a0008f8:	f001 fbf3 	bl	1a0020e2 <xTaskCreate>
                  configMINIMAL_STACK_SIZE*2, // Cantidad de stack de la tarea
                  0,                          // Parametros de tarea
                  tskIDLE_PRIORITY+3,         // Prioridad de la tarea
                  0                           // Puntero a la tarea creada en el sistema
               );
   xTaskCreate(
1a0008fc:	9401      	str	r4, [sp, #4]
1a0008fe:	2504      	movs	r5, #4
1a000900:	9500      	str	r5, [sp, #0]
1a000902:	4623      	mov	r3, r4
1a000904:	f44f 7287 	mov.w	r2, #270	; 0x10e
1a000908:	4923      	ldr	r1, [pc, #140]	; (1a000998 <main+0x180>)
1a00090a:	4824      	ldr	r0, [pc, #144]	; (1a00099c <main+0x184>)
1a00090c:	f001 fbe9 	bl	1a0020e2 <xTaskCreate>
                     0,                          // Parametros de tarea
                     tskIDLE_PRIORITY+4,         // Prioridad de la tarea
                     0                           // Puntero a la tarea creada en el sistema
                  );

   xTaskCreate(
1a000910:	9401      	str	r4, [sp, #4]
1a000912:	9500      	str	r5, [sp, #0]
1a000914:	4623      	mov	r3, r4
1a000916:	22b4      	movs	r2, #180	; 0xb4
1a000918:	4921      	ldr	r1, [pc, #132]	; (1a0009a0 <main+0x188>)
1a00091a:	4822      	ldr	r0, [pc, #136]	; (1a0009a4 <main+0x18c>)
1a00091c:	f001 fbe1 	bl	1a0020e2 <xTaskCreate>
                        0,                          // Parametros de tarea
                        tskIDLE_PRIORITY+4,         // Prioridad de la tarea
                        0                           // Puntero a la tarea creada en el sistema
                     );

   xTaskCreate(
1a000920:	9401      	str	r4, [sp, #4]
1a000922:	9500      	str	r5, [sp, #0]
1a000924:	4623      	mov	r3, r4
1a000926:	f44f 72b4 	mov.w	r2, #360	; 0x168
1a00092a:	491f      	ldr	r1, [pc, #124]	; (1a0009a8 <main+0x190>)
1a00092c:	481f      	ldr	r0, [pc, #124]	; (1a0009ac <main+0x194>)
1a00092e:	f001 fbd8 	bl	1a0020e2 <xTaskCreate>
                           0                           // Puntero a la tarea creada en el sistema
                        );



   xTaskCreate(
1a000932:	9401      	str	r4, [sp, #4]
1a000934:	9600      	str	r6, [sp, #0]
1a000936:	4623      	mov	r3, r4
1a000938:	f44f 72b4 	mov.w	r2, #360	; 0x168
1a00093c:	491c      	ldr	r1, [pc, #112]	; (1a0009b0 <main+0x198>)
1a00093e:	481d      	ldr	r0, [pc, #116]	; (1a0009b4 <main+0x19c>)
1a000940:	f001 fbcf 	bl	1a0020e2 <xTaskCreate>
                        0                           // Puntero a la tarea creada en el sistema
                     );


   //Iniciar scheduler
   vTaskStartScheduler();
1a000944:	f001 fc00 	bl	1a002148 <vTaskStartScheduler>
1a000948:	e7fe      	b.n	1a000948 <main+0x130>
1a00094a:	bf00      	nop
1a00094c:	3f666666 	.word	0x3f666666
1a000950:	10007974 	.word	0x10007974
1a000954:	00000000 	.word	0x00000000
1a000958:	3d638866 	.word	0x3d638866
1a00095c:	3f99999a 	.word	0x3f99999a
1a000960:	10007930 	.word	0x10007930
1a000964:	1a00a348 	.word	0x1a00a348
1a000968:	1a00a36c 	.word	0x1a00a36c
1a00096c:	1a0009b9 	.word	0x1a0009b9
1a000970:	1a00a378 	.word	0x1a00a378
1a000974:	1a000465 	.word	0x1a000465
1a000978:	1a00a398 	.word	0x1a00a398
1a00097c:	1a000509 	.word	0x1a000509
1a000980:	1a00a3c0 	.word	0x1a00a3c0
1a000984:	1a000bf9 	.word	0x1a000bf9
1a000988:	1a00a3e8 	.word	0x1a00a3e8
1a00098c:	1a000dc9 	.word	0x1a000dc9
1a000990:	1a00a408 	.word	0x1a00a408
1a000994:	1a000c61 	.word	0x1a000c61
1a000998:	1a00a440 	.word	0x1a00a440
1a00099c:	1a000cc9 	.word	0x1a000cc9
1a0009a0:	1a00a468 	.word	0x1a00a468
1a0009a4:	1a000d41 	.word	0x1a000d41
1a0009a8:	1a00a498 	.word	0x1a00a498
1a0009ac:	1a000351 	.word	0x1a000351
1a0009b0:	1a00a4b8 	.word	0x1a00a4b8
1a0009b4:	1a000ea1 	.word	0x1a000ea1

1a0009b8 <heartBeat>:
#include "bibliotecasfreeRTOS.h"


// Implementacion de funcion de la tarea heartbeat
void heartBeat( void* taskParmPtr )
{
1a0009b8:	b500      	push	{lr}
1a0009ba:	b083      	sub	sp, #12
   // ---------- CONFIGURACIONES ------------------------------
   // Tarea periodica cada 500 ms
   portTickType xPeriodicity =  500 / portTICK_RATE_MS;
   portTickType xLastWakeTime = xTaskGetTickCount();
1a0009bc:	f001 fc16 	bl	1a0021ec <xTaskGetTickCount>
1a0009c0:	9001      	str	r0, [sp, #4]

   // ---------- REPETIR POR SIEMPRE --------------------------
   while(TRUE) {
      gpioToggle( LEDB );
1a0009c2:	202a      	movs	r0, #42	; 0x2a
1a0009c4:	f003 fe83 	bl	1a0046ce <gpioToggle>

      // Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
      vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a0009c8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
1a0009cc:	a801      	add	r0, sp, #4
1a0009ce:	f001 fd19 	bl	1a002404 <vTaskDelayUntil>
1a0009d2:	e7f6      	b.n	1a0009c2 <heartBeat+0xa>

1a0009d4 <stepperMotorAutoReloadTimerServo>:
		}
	}

}

static void stepperMotorAutoReloadTimerServo(TimerHandle_t xTimer) {
1a0009d4:	b500      	push	{lr}
1a0009d6:	b083      	sub	sp, #12
	static bool_t flagDutyCycle = TRUE;

	if (stepper.flagPulse == TRUE) {
1a0009d8:	4b12      	ldr	r3, [pc, #72]	; (1a000a24 <stepperMotorAutoReloadTimerServo+0x50>)
1a0009da:	7d5b      	ldrb	r3, [r3, #21]
1a0009dc:	2b01      	cmp	r3, #1
1a0009de:	d117      	bne.n	1a000a10 <stepperMotorAutoReloadTimerServo+0x3c>
		if (flagDutyCycle == TRUE) {
1a0009e0:	4b11      	ldr	r3, [pc, #68]	; (1a000a28 <stepperMotorAutoReloadTimerServo+0x54>)
1a0009e2:	781b      	ldrb	r3, [r3, #0]
1a0009e4:	2b01      	cmp	r3, #1
1a0009e6:	d009      	beq.n	1a0009fc <stepperMotorAutoReloadTimerServo+0x28>
			gpioWrite(stepper.pulsePin, ON);
			flagDutyCycle = FALSE;
		} else {
			gpioWrite(stepper.pulsePin, OFF);
1a0009e8:	2100      	movs	r1, #0
1a0009ea:	4b0e      	ldr	r3, [pc, #56]	; (1a000a24 <stepperMotorAutoReloadTimerServo+0x50>)
1a0009ec:	f993 000c 	ldrsb.w	r0, [r3, #12]
1a0009f0:	f003 fe04 	bl	1a0045fc <gpioWrite>
			flagDutyCycle = TRUE;
1a0009f4:	4b0c      	ldr	r3, [pc, #48]	; (1a000a28 <stepperMotorAutoReloadTimerServo+0x54>)
1a0009f6:	2201      	movs	r2, #1
1a0009f8:	701a      	strb	r2, [r3, #0]
1a0009fa:	e00f      	b.n	1a000a1c <stepperMotorAutoReloadTimerServo+0x48>
			gpioWrite(stepper.pulsePin, ON);
1a0009fc:	2101      	movs	r1, #1
1a0009fe:	4b09      	ldr	r3, [pc, #36]	; (1a000a24 <stepperMotorAutoReloadTimerServo+0x50>)
1a000a00:	f993 000c 	ldrsb.w	r0, [r3, #12]
1a000a04:	f003 fdfa 	bl	1a0045fc <gpioWrite>
			flagDutyCycle = FALSE;
1a000a08:	4b07      	ldr	r3, [pc, #28]	; (1a000a28 <stepperMotorAutoReloadTimerServo+0x54>)
1a000a0a:	2200      	movs	r2, #0
1a000a0c:	701a      	strb	r2, [r3, #0]
1a000a0e:	e005      	b.n	1a000a1c <stepperMotorAutoReloadTimerServo+0x48>
		}

	}else
	{
		xTimerStop(xTimer,0);
1a000a10:	2200      	movs	r2, #0
1a000a12:	9200      	str	r2, [sp, #0]
1a000a14:	4613      	mov	r3, r2
1a000a16:	2103      	movs	r1, #3
1a000a18:	f001 ffb8 	bl	1a00298c <xTimerGenericCommand>
	}

}
1a000a1c:	b003      	add	sp, #12
1a000a1e:	f85d fb04 	ldr.w	pc, [sp], #4
1a000a22:	bf00      	nop
1a000a24:	10007974 	.word	0x10007974
1a000a28:	10000001 	.word	0x10000001

1a000a2c <stepperMotorAutoReloadTimer>:
static void stepperMotorAutoReloadTimer(TimerHandle_t xTimer){
1a000a2c:	b510      	push	{r4, lr}
1a000a2e:	b082      	sub	sp, #8
	if(numOfStepes>0){
1a000a30:	4b15      	ldr	r3, [pc, #84]	; (1a000a88 <stepperMotorAutoReloadTimer+0x5c>)
1a000a32:	881b      	ldrh	r3, [r3, #0]
1a000a34:	b1e3      	cbz	r3, 1a000a70 <stepperMotorAutoReloadTimer+0x44>
		if(flag==TRUE){
1a000a36:	4b15      	ldr	r3, [pc, #84]	; (1a000a8c <stepperMotorAutoReloadTimer+0x60>)
1a000a38:	781b      	ldrb	r3, [r3, #0]
1a000a3a:	2b01      	cmp	r3, #1
1a000a3c:	d00e      	beq.n	1a000a5c <stepperMotorAutoReloadTimer+0x30>
			gpioWrite(stepper.pulsePin,OFF);
1a000a3e:	2100      	movs	r1, #0
1a000a40:	4b13      	ldr	r3, [pc, #76]	; (1a000a90 <stepperMotorAutoReloadTimer+0x64>)
1a000a42:	f993 000c 	ldrsb.w	r0, [r3, #12]
1a000a46:	f003 fdd9 	bl	1a0045fc <gpioWrite>
			flag=TRUE;
1a000a4a:	4b10      	ldr	r3, [pc, #64]	; (1a000a8c <stepperMotorAutoReloadTimer+0x60>)
1a000a4c:	2201      	movs	r2, #1
1a000a4e:	701a      	strb	r2, [r3, #0]
			numOfStepes--;
1a000a50:	4a0d      	ldr	r2, [pc, #52]	; (1a000a88 <stepperMotorAutoReloadTimer+0x5c>)
1a000a52:	8813      	ldrh	r3, [r2, #0]
1a000a54:	3b01      	subs	r3, #1
1a000a56:	8013      	strh	r3, [r2, #0]
}
1a000a58:	b002      	add	sp, #8
1a000a5a:	bd10      	pop	{r4, pc}
			gpioWrite(stepper.pulsePin,ON);
1a000a5c:	2101      	movs	r1, #1
1a000a5e:	4b0c      	ldr	r3, [pc, #48]	; (1a000a90 <stepperMotorAutoReloadTimer+0x64>)
1a000a60:	f993 000c 	ldrsb.w	r0, [r3, #12]
1a000a64:	f003 fdca 	bl	1a0045fc <gpioWrite>
			flag=FALSE;
1a000a68:	4b08      	ldr	r3, [pc, #32]	; (1a000a8c <stepperMotorAutoReloadTimer+0x60>)
1a000a6a:	2200      	movs	r2, #0
1a000a6c:	701a      	strb	r2, [r3, #0]
1a000a6e:	e7f3      	b.n	1a000a58 <stepperMotorAutoReloadTimer+0x2c>
		xTimerStop(xTimer,0);
1a000a70:	2400      	movs	r4, #0
1a000a72:	9400      	str	r4, [sp, #0]
1a000a74:	4623      	mov	r3, r4
1a000a76:	4622      	mov	r2, r4
1a000a78:	2103      	movs	r1, #3
1a000a7a:	f001 ff87 	bl	1a00298c <xTimerGenericCommand>
		gpioWrite( LED1,OFF );
1a000a7e:	4621      	mov	r1, r4
1a000a80:	202b      	movs	r0, #43	; 0x2b
1a000a82:	f003 fdbb 	bl	1a0045fc <gpioWrite>
}
1a000a86:	e7e7      	b.n	1a000a58 <stepperMotorAutoReloadTimer+0x2c>
1a000a88:	100079a0 	.word	0x100079a0
1a000a8c:	10000000 	.word	0x10000000
1a000a90:	10007974 	.word	0x10007974

1a000a94 <stepperMotorQueueCreate>:
void stepperMotorQueueCreate(void) {
1a000a94:	b508      	push	{r3, lr}
	stepperMotorEnableQueue = xQueueCreate(SIZEQUEUEMOTORENABLE,
1a000a96:	2200      	movs	r2, #0
1a000a98:	2101      	movs	r1, #1
1a000a9a:	2003      	movs	r0, #3
1a000a9c:	f000 fe95 	bl	1a0017ca <xQueueGenericCreate>
1a000aa0:	4b1e      	ldr	r3, [pc, #120]	; (1a000b1c <stepperMotorQueueCreate+0x88>)
1a000aa2:	6018      	str	r0, [r3, #0]
	if (stepperMotorEnableQueue == NULL) {/*Si devolvio NULL es muy probable que no haya suficiente memoria para crear la cola*/
1a000aa4:	b160      	cbz	r0, 1a000ac0 <stepperMotorQueueCreate+0x2c>
	stepperMotorMicroStepsQueue = xQueueCreate(SIZEQUEUEMICROSTEPS,
1a000aa6:	2200      	movs	r2, #0
1a000aa8:	2101      	movs	r1, #1
1a000aaa:	2003      	movs	r0, #3
1a000aac:	f000 fe8d 	bl	1a0017ca <xQueueGenericCreate>
1a000ab0:	4b1b      	ldr	r3, [pc, #108]	; (1a000b20 <stepperMotorQueueCreate+0x8c>)
1a000ab2:	6018      	str	r0, [r3, #0]
	if (stepperMotorMicroStepsQueue == NULL) {/*Si devolvio NULL es muy probable que no haya suficiente memoria para crear la cola*/
1a000ab4:	b948      	cbnz	r0, 1a000aca <stepperMotorQueueCreate+0x36>
		gpioWrite(LED2, ON);
1a000ab6:	2101      	movs	r1, #1
1a000ab8:	202c      	movs	r0, #44	; 0x2c
1a000aba:	f003 fd9f 	bl	1a0045fc <gpioWrite>
1a000abe:	e7fe      	b.n	1a000abe <stepperMotorQueueCreate+0x2a>
		gpioWrite(LED2, ON);
1a000ac0:	2101      	movs	r1, #1
1a000ac2:	202c      	movs	r0, #44	; 0x2c
1a000ac4:	f003 fd9a 	bl	1a0045fc <gpioWrite>
1a000ac8:	e7fe      	b.n	1a000ac8 <stepperMotorQueueCreate+0x34>
	stepperMotorDirectionQueue = xQueueCreate(SIZEQUEUEDIRECTION,
1a000aca:	2200      	movs	r2, #0
1a000acc:	2101      	movs	r1, #1
1a000ace:	2003      	movs	r0, #3
1a000ad0:	f000 fe7b 	bl	1a0017ca <xQueueGenericCreate>
1a000ad4:	4b13      	ldr	r3, [pc, #76]	; (1a000b24 <stepperMotorQueueCreate+0x90>)
1a000ad6:	6018      	str	r0, [r3, #0]
	if (stepperMotorDirectionQueue == NULL) {/*Si devolvio NULL es muy probable que no haya suficiente memoria para crear la cola*/
1a000ad8:	b920      	cbnz	r0, 1a000ae4 <stepperMotorQueueCreate+0x50>
		gpioWrite(LED2, ON);
1a000ada:	2101      	movs	r1, #1
1a000adc:	202c      	movs	r0, #44	; 0x2c
1a000ade:	f003 fd8d 	bl	1a0045fc <gpioWrite>
1a000ae2:	e7fe      	b.n	1a000ae2 <stepperMotorQueueCreate+0x4e>
		stepperMotorPulseQueue = xQueueCreate(SIZEQUEUEPULSE,
1a000ae4:	2200      	movs	r2, #0
1a000ae6:	2102      	movs	r1, #2
1a000ae8:	2003      	movs	r0, #3
1a000aea:	f000 fe6e 	bl	1a0017ca <xQueueGenericCreate>
1a000aee:	4b0e      	ldr	r3, [pc, #56]	; (1a000b28 <stepperMotorQueueCreate+0x94>)
1a000af0:	6018      	str	r0, [r3, #0]
		if (stepperMotorPulseQueue == NULL) {/*Si devolvio NULL es muy probable que no haya suficiente memoria para crear la cola*/
1a000af2:	b140      	cbz	r0, 1a000b06 <stepperMotorQueueCreate+0x72>
		 stepperMotorPulseServoQueue = xQueueCreate(SIZEQUEUEPULSESERVO,
1a000af4:	2200      	movs	r2, #0
1a000af6:	2101      	movs	r1, #1
1a000af8:	2005      	movs	r0, #5
1a000afa:	f000 fe66 	bl	1a0017ca <xQueueGenericCreate>
1a000afe:	4b0b      	ldr	r3, [pc, #44]	; (1a000b2c <stepperMotorQueueCreate+0x98>)
1a000b00:	6018      	str	r0, [r3, #0]
		   if (stepperMotorPulseServoQueue == NULL) {/*Si devolvio NULL es muy probable que no haya suficiente memoria para crear la cola*/
1a000b02:	b128      	cbz	r0, 1a000b10 <stepperMotorQueueCreate+0x7c>
}
1a000b04:	bd08      	pop	{r3, pc}
			gpioWrite(LED2, ON);
1a000b06:	2101      	movs	r1, #1
1a000b08:	202c      	movs	r0, #44	; 0x2c
1a000b0a:	f003 fd77 	bl	1a0045fc <gpioWrite>
1a000b0e:	e7fe      	b.n	1a000b0e <stepperMotorQueueCreate+0x7a>
		   			gpioWrite(LED2, ON);
1a000b10:	2101      	movs	r1, #1
1a000b12:	202c      	movs	r0, #44	; 0x2c
1a000b14:	f003 fd72 	bl	1a0045fc <gpioWrite>
1a000b18:	e7fe      	b.n	1a000b18 <stepperMotorQueueCreate+0x84>
1a000b1a:	bf00      	nop
1a000b1c:	100079a4 	.word	0x100079a4
1a000b20:	100079ac 	.word	0x100079ac
1a000b24:	10007998 	.word	0x10007998
1a000b28:	1000796c 	.word	0x1000796c
1a000b2c:	1000799c 	.word	0x1000799c

1a000b30 <stepperMotorTimerInit>:
void stepperMotorTimerInit(){
1a000b30:	b500      	push	{lr}
1a000b32:	b083      	sub	sp, #12
	xAutoReloadTimer=xTimerCreate("AutoReload", AUTO_RELOAD_TIMER_PERIODO,pdTRUE,0,stepperMotorAutoReloadTimer);
1a000b34:	4b11      	ldr	r3, [pc, #68]	; (1a000b7c <stepperMotorTimerInit+0x4c>)
1a000b36:	9300      	str	r3, [sp, #0]
1a000b38:	2300      	movs	r3, #0
1a000b3a:	2201      	movs	r2, #1
1a000b3c:	2164      	movs	r1, #100	; 0x64
1a000b3e:	4810      	ldr	r0, [pc, #64]	; (1a000b80 <stepperMotorTimerInit+0x50>)
1a000b40:	f001 ff08 	bl	1a002954 <xTimerCreate>
1a000b44:	4b0f      	ldr	r3, [pc, #60]	; (1a000b84 <stepperMotorTimerInit+0x54>)
1a000b46:	6018      	str	r0, [r3, #0]
	if (xAutoReloadTimer== NULL) {/*Si devolvio NULL es porqe no se creo el temporizador*/
1a000b48:	b168      	cbz	r0, 1a000b66 <stepperMotorTimerInit+0x36>
	xAutoReloadTimerServo = xTimerCreate("AutoReloadServo", AUTO_RELOAD_TIMER_PERIODO_SERVO,pdTRUE,0,stepperMotorAutoReloadTimerServo);
1a000b4a:	4b0f      	ldr	r3, [pc, #60]	; (1a000b88 <stepperMotorTimerInit+0x58>)
1a000b4c:	9300      	str	r3, [sp, #0]
1a000b4e:	2300      	movs	r3, #0
1a000b50:	2201      	movs	r2, #1
1a000b52:	210a      	movs	r1, #10
1a000b54:	480d      	ldr	r0, [pc, #52]	; (1a000b8c <stepperMotorTimerInit+0x5c>)
1a000b56:	f001 fefd 	bl	1a002954 <xTimerCreate>
1a000b5a:	4b0d      	ldr	r3, [pc, #52]	; (1a000b90 <stepperMotorTimerInit+0x60>)
1a000b5c:	6018      	str	r0, [r3, #0]
		if (xAutoReloadTimerServo == NULL) {/*Si devolvio NULL es porqe no se creo el temporizador*/
1a000b5e:	b138      	cbz	r0, 1a000b70 <stepperMotorTimerInit+0x40>
}
1a000b60:	b003      	add	sp, #12
1a000b62:	f85d fb04 	ldr.w	pc, [sp], #4
				gpioWrite(LED2, ON);
1a000b66:	2101      	movs	r1, #1
1a000b68:	202c      	movs	r0, #44	; 0x2c
1a000b6a:	f003 fd47 	bl	1a0045fc <gpioWrite>
1a000b6e:	e7fe      	b.n	1a000b6e <stepperMotorTimerInit+0x3e>
					gpioWrite(LED2, ON);
1a000b70:	2101      	movs	r1, #1
1a000b72:	202c      	movs	r0, #44	; 0x2c
1a000b74:	f003 fd42 	bl	1a0045fc <gpioWrite>
1a000b78:	e7fe      	b.n	1a000b78 <stepperMotorTimerInit+0x48>
1a000b7a:	bf00      	nop
1a000b7c:	1a000a2d 	.word	0x1a000a2d
1a000b80:	1a00a5a8 	.word	0x1a00a5a8
1a000b84:	10007994 	.word	0x10007994
1a000b88:	1a0009d5 	.word	0x1a0009d5
1a000b8c:	1a00a5b4 	.word	0x1a00a5b4
1a000b90:	100079a8 	.word	0x100079a8

1a000b94 <stepperMotorInit>:
		gpioMap_t microStepsM1Pin, gpioMap_t microStepsM2Pin, float stepAngle) {
1a000b94:	b510      	push	{r4, lr}
1a000b96:	4604      	mov	r4, r0
	stepper->stepsPerRevolution = stepsPerRevolution;
1a000b98:	6001      	str	r1, [r0, #0]
	stepper->pulsePin = pulsePin;
1a000b9a:	7302      	strb	r2, [r0, #12]
	stepper->directionPin = directionPin;
1a000b9c:	7343      	strb	r3, [r0, #13]
	stepper->enablePin = enablePin;
1a000b9e:	f99d 3008 	ldrsb.w	r3, [sp, #8]
1a000ba2:	7383      	strb	r3, [r0, #14]
	stepper->microStepsM0Pin = microStepsM0Pin;
1a000ba4:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a000ba8:	73c3      	strb	r3, [r0, #15]
	stepper->microStepsM1Pin = microStepsM1Pin;
1a000baa:	f99d 3010 	ldrsb.w	r3, [sp, #16]
1a000bae:	7403      	strb	r3, [r0, #16]
	stepper->microStepsM2Pin = microStepsM2Pin;
1a000bb0:	f99d 3014 	ldrsb.w	r3, [sp, #20]
1a000bb4:	7443      	strb	r3, [r0, #17]
	stepper->stepAngle = stepAngle;
1a000bb6:	ed80 0a07 	vstr	s0, [r0, #28]
	gpioConfig(stepper->pulsePin, GPIO_OUTPUT);
1a000bba:	2101      	movs	r1, #1
1a000bbc:	4610      	mov	r0, r2
1a000bbe:	f003 fc47 	bl	1a004450 <gpioInit>
	gpioConfig(stepper->directionPin, GPIO_OUTPUT);
1a000bc2:	2101      	movs	r1, #1
1a000bc4:	f994 000d 	ldrsb.w	r0, [r4, #13]
1a000bc8:	f003 fc42 	bl	1a004450 <gpioInit>
	gpioConfig(stepper->enablePin, GPIO_OUTPUT);
1a000bcc:	2101      	movs	r1, #1
1a000bce:	f994 000e 	ldrsb.w	r0, [r4, #14]
1a000bd2:	f003 fc3d 	bl	1a004450 <gpioInit>
	gpioConfig(stepper->microStepsM0Pin, GPIO_OUTPUT);
1a000bd6:	2101      	movs	r1, #1
1a000bd8:	f994 000f 	ldrsb.w	r0, [r4, #15]
1a000bdc:	f003 fc38 	bl	1a004450 <gpioInit>
	gpioConfig(stepper->microStepsM1Pin, GPIO_OUTPUT);
1a000be0:	2101      	movs	r1, #1
1a000be2:	f994 0010 	ldrsb.w	r0, [r4, #16]
1a000be6:	f003 fc33 	bl	1a004450 <gpioInit>
	gpioConfig(stepper->microStepsM2Pin, GPIO_OUTPUT);
1a000bea:	2101      	movs	r1, #1
1a000bec:	f994 0011 	ldrsb.w	r0, [r4, #17]
1a000bf0:	f003 fc2e 	bl	1a004450 <gpioInit>
}
1a000bf4:	bd10      	pop	{r4, pc}
1a000bf6:	Address 0x000000001a000bf6 is out of bounds.


1a000bf8 <stepperMotorEnableTask>:
void stepperMotorEnableTask(void * taskParmPtr) {
1a000bf8:	b500      	push	{lr}
1a000bfa:	b083      	sub	sp, #12
1a000bfc:	e00b      	b.n	1a000c16 <stepperMotorEnableTask+0x1e>
				gpioWrite(stepper.enablePin, FALSE);
1a000bfe:	4c14      	ldr	r4, [pc, #80]	; (1a000c50 <stepperMotorEnableTask+0x58>)
1a000c00:	2100      	movs	r1, #0
1a000c02:	f994 000e 	ldrsb.w	r0, [r4, #14]
1a000c06:	f003 fcf9 	bl	1a0045fc <gpioWrite>
				stepper.isEnable = ena;
1a000c0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000c0e:	74e3      	strb	r3, [r4, #19]
				printf("Motor Deshabilitado\n");
1a000c10:	4810      	ldr	r0, [pc, #64]	; (1a000c54 <stepperMotorEnableTask+0x5c>)
1a000c12:	f005 fb71 	bl	1a0062f8 <puts>
		if (xQueueReceive(stepperMotorEnableQueue, &ena,
1a000c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000c1a:	f10d 0107 	add.w	r1, sp, #7
1a000c1e:	4b0e      	ldr	r3, [pc, #56]	; (1a000c58 <stepperMotorEnableTask+0x60>)
1a000c20:	6818      	ldr	r0, [r3, #0]
1a000c22:	f000 ff1d 	bl	1a001a60 <xQueueReceive>
1a000c26:	2801      	cmp	r0, #1
1a000c28:	d1f5      	bne.n	1a000c16 <stepperMotorEnableTask+0x1e>
			switch (ena) {
1a000c2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000c2e:	2b00      	cmp	r3, #0
1a000c30:	d0e5      	beq.n	1a000bfe <stepperMotorEnableTask+0x6>
1a000c32:	2b01      	cmp	r3, #1
1a000c34:	d1ef      	bne.n	1a000c16 <stepperMotorEnableTask+0x1e>
				gpioWrite(stepper.enablePin, TRUE); //activo en bajo, en el hardware implemente una compuerta NOT
1a000c36:	4c06      	ldr	r4, [pc, #24]	; (1a000c50 <stepperMotorEnableTask+0x58>)
1a000c38:	2101      	movs	r1, #1
1a000c3a:	f994 000e 	ldrsb.w	r0, [r4, #14]
1a000c3e:	f003 fcdd 	bl	1a0045fc <gpioWrite>
				stepper.isEnable = ena;
1a000c42:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000c46:	74e3      	strb	r3, [r4, #19]
				printf("Motor Habilitado\n");
1a000c48:	4804      	ldr	r0, [pc, #16]	; (1a000c5c <stepperMotorEnableTask+0x64>)
1a000c4a:	f005 fb55 	bl	1a0062f8 <puts>
				break;
1a000c4e:	e7e2      	b.n	1a000c16 <stepperMotorEnableTask+0x1e>
1a000c50:	10007974 	.word	0x10007974
1a000c54:	1a00a4fc 	.word	0x1a00a4fc
1a000c58:	100079a4 	.word	0x100079a4
1a000c5c:	1a00a4e8 	.word	0x1a00a4e8

1a000c60 <stepperMotorSetDirectionTask>:
void stepperMotorSetDirectionTask(void * taskParmPtr){
1a000c60:	b500      	push	{lr}
1a000c62:	b083      	sub	sp, #12
1a000c64:	e00b      	b.n	1a000c7e <stepperMotorSetDirectionTask+0x1e>
				gpioWrite(stepper.directionPin, TRUE);
1a000c66:	4c14      	ldr	r4, [pc, #80]	; (1a000cb8 <stepperMotorSetDirectionTask+0x58>)
1a000c68:	2101      	movs	r1, #1
1a000c6a:	f994 000d 	ldrsb.w	r0, [r4, #13]
1a000c6e:	f003 fcc5 	bl	1a0045fc <gpioWrite>
				stepper.direction = directionMotor;
1a000c72:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000c76:	74a3      	strb	r3, [r4, #18]
				printf("Sentido Horario\n");
1a000c78:	4810      	ldr	r0, [pc, #64]	; (1a000cbc <stepperMotorSetDirectionTask+0x5c>)
1a000c7a:	f005 fb3d 	bl	1a0062f8 <puts>
	if(xQueueReceive(stepperMotorDirectionQueue, &directionMotor,
1a000c7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000c82:	f10d 0107 	add.w	r1, sp, #7
1a000c86:	4b0e      	ldr	r3, [pc, #56]	; (1a000cc0 <stepperMotorSetDirectionTask+0x60>)
1a000c88:	6818      	ldr	r0, [r3, #0]
1a000c8a:	f000 fee9 	bl	1a001a60 <xQueueReceive>
1a000c8e:	2801      	cmp	r0, #1
1a000c90:	d1f5      	bne.n	1a000c7e <stepperMotorSetDirectionTask+0x1e>
		switch (directionMotor) {
1a000c92:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000c96:	2b00      	cmp	r3, #0
1a000c98:	d0e5      	beq.n	1a000c66 <stepperMotorSetDirectionTask+0x6>
1a000c9a:	2b01      	cmp	r3, #1
1a000c9c:	d1ef      	bne.n	1a000c7e <stepperMotorSetDirectionTask+0x1e>
				gpioWrite(stepper.directionPin, FALSE);
1a000c9e:	4c06      	ldr	r4, [pc, #24]	; (1a000cb8 <stepperMotorSetDirectionTask+0x58>)
1a000ca0:	2100      	movs	r1, #0
1a000ca2:	f994 000d 	ldrsb.w	r0, [r4, #13]
1a000ca6:	f003 fca9 	bl	1a0045fc <gpioWrite>
				stepper.direction = directionMotor;
1a000caa:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000cae:	74a3      	strb	r3, [r4, #18]
				printf("Sentido AntiHorario\n");
1a000cb0:	4804      	ldr	r0, [pc, #16]	; (1a000cc4 <stepperMotorSetDirectionTask+0x64>)
1a000cb2:	f005 fb21 	bl	1a0062f8 <puts>
				break;
1a000cb6:	e7e2      	b.n	1a000c7e <stepperMotorSetDirectionTask+0x1e>
1a000cb8:	10007974 	.word	0x10007974
1a000cbc:	1a00a548 	.word	0x1a00a548
1a000cc0:	10007998 	.word	0x10007998
1a000cc4:	1a00a558 	.word	0x1a00a558

1a000cc8 <stepperMotorSetPulseTask>:
void stepperMotorSetPulseTask(void * taskParmPtr) {
1a000cc8:	b500      	push	{lr}
1a000cca:	b085      	sub	sp, #20
	uint16_t nOfSteps =0;
1a000ccc:	2300      	movs	r3, #0
1a000cce:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (xQueueReceive(stepperMotorPulseQueue, &nOfSteps,
1a000cd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000cd6:	f10d 010e 	add.w	r1, sp, #14
1a000cda:	4b13      	ldr	r3, [pc, #76]	; (1a000d28 <stepperMotorSetPulseTask+0x60>)
1a000cdc:	6818      	ldr	r0, [r3, #0]
1a000cde:	f000 febf 	bl	1a001a60 <xQueueReceive>
1a000ce2:	2801      	cmp	r0, #1
1a000ce4:	d1f5      	bne.n	1a000cd2 <stepperMotorSetPulseTask+0xa>
			printf("numero de pasos:%d\n", nOfSteps);
1a000ce6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
1a000cea:	4810      	ldr	r0, [pc, #64]	; (1a000d2c <stepperMotorSetPulseTask+0x64>)
1a000cec:	f005 faa2 	bl	1a006234 <printf>
			stepper.lastNumberOfSteps = nOfSteps;
1a000cf0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
1a000cf4:	4b0e      	ldr	r3, [pc, #56]	; (1a000d30 <stepperMotorSetPulseTask+0x68>)
1a000cf6:	809a      	strh	r2, [r3, #4]
			numOfStepes = stepper.lastNumberOfSteps;
1a000cf8:	490e      	ldr	r1, [pc, #56]	; (1a000d34 <stepperMotorSetPulseTask+0x6c>)
1a000cfa:	800a      	strh	r2, [r1, #0]
			gpioWrite(stepper.pulsePin, OFF);
1a000cfc:	2100      	movs	r1, #0
1a000cfe:	f993 000c 	ldrsb.w	r0, [r3, #12]
1a000d02:	f003 fc7b 	bl	1a0045fc <gpioWrite>
			if (xTimerStart(xAutoReloadTimer,0) == pdFALSE) {
1a000d06:	4b0c      	ldr	r3, [pc, #48]	; (1a000d38 <stepperMotorSetPulseTask+0x70>)
1a000d08:	681c      	ldr	r4, [r3, #0]
1a000d0a:	f001 fa6f 	bl	1a0021ec <xTaskGetTickCount>
1a000d0e:	2300      	movs	r3, #0
1a000d10:	9300      	str	r3, [sp, #0]
1a000d12:	4602      	mov	r2, r0
1a000d14:	2101      	movs	r1, #1
1a000d16:	4620      	mov	r0, r4
1a000d18:	f001 fe38 	bl	1a00298c <xTimerGenericCommand>
1a000d1c:	2800      	cmp	r0, #0
1a000d1e:	d1d8      	bne.n	1a000cd2 <stepperMotorSetPulseTask+0xa>
				printf(
1a000d20:	4806      	ldr	r0, [pc, #24]	; (1a000d3c <stepperMotorSetPulseTask+0x74>)
1a000d22:	f005 fae9 	bl	1a0062f8 <puts>
1a000d26:	e7d4      	b.n	1a000cd2 <stepperMotorSetPulseTask+0xa>
1a000d28:	1000796c 	.word	0x1000796c
1a000d2c:	1a00a324 	.word	0x1a00a324
1a000d30:	10007974 	.word	0x10007974
1a000d34:	100079a0 	.word	0x100079a0
1a000d38:	10007994 	.word	0x10007994
1a000d3c:	1a00a56c 	.word	0x1a00a56c

1a000d40 <stepperMotorSetPulseServoTask>:
void stepperMotorSetPulseServoTask(void * taskParmPtr){
1a000d40:	b500      	push	{lr}
1a000d42:	b085      	sub	sp, #20
			if (xQueueReceive(stepperMotorPulseServoQueue, &flagStep,
1a000d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000d48:	f10d 010f 	add.w	r1, sp, #15
1a000d4c:	4b0f      	ldr	r3, [pc, #60]	; (1a000d8c <stepperMotorSetPulseServoTask+0x4c>)
1a000d4e:	6818      	ldr	r0, [r3, #0]
1a000d50:	f000 fe86 	bl	1a001a60 <xQueueReceive>
1a000d54:	2801      	cmp	r0, #1
1a000d56:	d1f5      	bne.n	1a000d44 <stepperMotorSetPulseServoTask+0x4>
					stepper.flagPulse = flagStep;
1a000d58:	4b0d      	ldr	r3, [pc, #52]	; (1a000d90 <stepperMotorSetPulseServoTask+0x50>)
1a000d5a:	f89d 200f 	ldrb.w	r2, [sp, #15]
1a000d5e:	755a      	strb	r2, [r3, #21]
					gpioWrite(stepper.pulsePin, OFF);
1a000d60:	2100      	movs	r1, #0
1a000d62:	f993 000c 	ldrsb.w	r0, [r3, #12]
1a000d66:	f003 fc49 	bl	1a0045fc <gpioWrite>
					if (xTimerStart(xAutoReloadTimerServo,0) == pdFALSE) {
1a000d6a:	4b0a      	ldr	r3, [pc, #40]	; (1a000d94 <stepperMotorSetPulseServoTask+0x54>)
1a000d6c:	681c      	ldr	r4, [r3, #0]
1a000d6e:	f001 fa3d 	bl	1a0021ec <xTaskGetTickCount>
1a000d72:	2300      	movs	r3, #0
1a000d74:	9300      	str	r3, [sp, #0]
1a000d76:	4602      	mov	r2, r0
1a000d78:	2101      	movs	r1, #1
1a000d7a:	4620      	mov	r0, r4
1a000d7c:	f001 fe06 	bl	1a00298c <xTimerGenericCommand>
1a000d80:	2800      	cmp	r0, #0
1a000d82:	d1df      	bne.n	1a000d44 <stepperMotorSetPulseServoTask+0x4>
									printf(
1a000d84:	4804      	ldr	r0, [pc, #16]	; (1a000d98 <stepperMotorSetPulseServoTask+0x58>)
1a000d86:	f005 fab7 	bl	1a0062f8 <puts>
1a000d8a:	e7db      	b.n	1a000d44 <stepperMotorSetPulseServoTask+0x4>
1a000d8c:	1000799c 	.word	0x1000799c
1a000d90:	10007974 	.word	0x10007974
1a000d94:	100079a8 	.word	0x100079a8
1a000d98:	1a00a56c 	.word	0x1a00a56c

1a000d9c <stepperMotorSetMicroSteps>:


void stepperMotorSetMicroSteps(bool_t m0MicroStep, bool_t m1MicroStep,
		bool_t m2MicroStep) {
1a000d9c:	b570      	push	{r4, r5, r6, lr}
1a000d9e:	460e      	mov	r6, r1
1a000da0:	4615      	mov	r5, r2
	//controlar que el eje del motor no este girando para poder establecer un microsteps....
	//podemos preguntar si pulseCount=0
	gpioWrite(stepper.microStepsM0Pin, m0MicroStep);
1a000da2:	4c08      	ldr	r4, [pc, #32]	; (1a000dc4 <stepperMotorSetMicroSteps+0x28>)
1a000da4:	4601      	mov	r1, r0
1a000da6:	f994 000f 	ldrsb.w	r0, [r4, #15]
1a000daa:	f003 fc27 	bl	1a0045fc <gpioWrite>
	gpioWrite(stepper.microStepsM1Pin, m1MicroStep);
1a000dae:	4631      	mov	r1, r6
1a000db0:	f994 0010 	ldrsb.w	r0, [r4, #16]
1a000db4:	f003 fc22 	bl	1a0045fc <gpioWrite>
	gpioWrite(stepper.microStepsM2Pin, m2MicroStep);
1a000db8:	4629      	mov	r1, r5
1a000dba:	f994 0011 	ldrsb.w	r0, [r4, #17]
1a000dbe:	f003 fc1d 	bl	1a0045fc <gpioWrite>
}
1a000dc2:	bd70      	pop	{r4, r5, r6, pc}
1a000dc4:	10007974 	.word	0x10007974

1a000dc8 <stepperMotorMicroStepsTask>:
void stepperMotorMicroStepsTask(void * taskParmPtr) {
1a000dc8:	b500      	push	{lr}
1a000dca:	b083      	sub	sp, #12
1a000dcc:	e007      	b.n	1a000dde <stepperMotorMicroStepsTask+0x16>
				stepperMotorSetMicroSteps( FALSE, FALSE, FALSE);
1a000dce:	2200      	movs	r2, #0
1a000dd0:	4611      	mov	r1, r2
1a000dd2:	4610      	mov	r0, r2
1a000dd4:	f7ff ffe2 	bl	1a000d9c <stepperMotorSetMicroSteps>
				printf("FULL_STEP\n");
1a000dd8:	4826      	ldr	r0, [pc, #152]	; (1a000e74 <stepperMotorMicroStepsTask+0xac>)
1a000dda:	f005 fa8d 	bl	1a0062f8 <puts>
		if (xQueueReceive(stepperMotorMicroStepsQueue, &mSteps,
1a000dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000de2:	f10d 0107 	add.w	r1, sp, #7
1a000de6:	4b24      	ldr	r3, [pc, #144]	; (1a000e78 <stepperMotorMicroStepsTask+0xb0>)
1a000de8:	6818      	ldr	r0, [r3, #0]
1a000dea:	f000 fe39 	bl	1a001a60 <xQueueReceive>
1a000dee:	2801      	cmp	r0, #1
1a000df0:	d1f5      	bne.n	1a000dde <stepperMotorMicroStepsTask+0x16>
			switch (mSteps) {
1a000df2:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000df6:	2b05      	cmp	r3, #5
1a000df8:	d8f1      	bhi.n	1a000dde <stepperMotorMicroStepsTask+0x16>
1a000dfa:	a201      	add	r2, pc, #4	; (adr r2, 1a000e00 <stepperMotorMicroStepsTask+0x38>)
1a000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a000e00:	1a000dcf 	.word	0x1a000dcf
1a000e04:	1a000e19 	.word	0x1a000e19
1a000e08:	1a000e2b 	.word	0x1a000e2b
1a000e0c:	1a000e3d 	.word	0x1a000e3d
1a000e10:	1a000e4f 	.word	0x1a000e4f
1a000e14:	1a000e61 	.word	0x1a000e61
				stepperMotorSetMicroSteps(TRUE, FALSE, FALSE);
1a000e18:	2200      	movs	r2, #0
1a000e1a:	4611      	mov	r1, r2
1a000e1c:	2001      	movs	r0, #1
1a000e1e:	f7ff ffbd 	bl	1a000d9c <stepperMotorSetMicroSteps>
				printf("HALF_STEP\n");
1a000e22:	4816      	ldr	r0, [pc, #88]	; (1a000e7c <stepperMotorMicroStepsTask+0xb4>)
1a000e24:	f005 fa68 	bl	1a0062f8 <puts>
				break;
1a000e28:	e7d9      	b.n	1a000dde <stepperMotorMicroStepsTask+0x16>
				stepperMotorSetMicroSteps(FALSE, TRUE, FALSE);
1a000e2a:	2200      	movs	r2, #0
1a000e2c:	2101      	movs	r1, #1
1a000e2e:	4610      	mov	r0, r2
1a000e30:	f7ff ffb4 	bl	1a000d9c <stepperMotorSetMicroSteps>
				printf("4_STEP\n");
1a000e34:	4812      	ldr	r0, [pc, #72]	; (1a000e80 <stepperMotorMicroStepsTask+0xb8>)
1a000e36:	f005 fa5f 	bl	1a0062f8 <puts>
				break;
1a000e3a:	e7d0      	b.n	1a000dde <stepperMotorMicroStepsTask+0x16>
				stepperMotorSetMicroSteps(TRUE, TRUE, FALSE);
1a000e3c:	2200      	movs	r2, #0
1a000e3e:	2101      	movs	r1, #1
1a000e40:	4608      	mov	r0, r1
1a000e42:	f7ff ffab 	bl	1a000d9c <stepperMotorSetMicroSteps>
				printf("8_STEP\n");
1a000e46:	480f      	ldr	r0, [pc, #60]	; (1a000e84 <stepperMotorMicroStepsTask+0xbc>)
1a000e48:	f005 fa56 	bl	1a0062f8 <puts>
				break;
1a000e4c:	e7c7      	b.n	1a000dde <stepperMotorMicroStepsTask+0x16>
				stepperMotorSetMicroSteps(FALSE, FALSE, TRUE);
1a000e4e:	2201      	movs	r2, #1
1a000e50:	2100      	movs	r1, #0
1a000e52:	4608      	mov	r0, r1
1a000e54:	f7ff ffa2 	bl	1a000d9c <stepperMotorSetMicroSteps>
				printf("16_STEP\n");
1a000e58:	480b      	ldr	r0, [pc, #44]	; (1a000e88 <stepperMotorMicroStepsTask+0xc0>)
1a000e5a:	f005 fa4d 	bl	1a0062f8 <puts>
				break;
1a000e5e:	e7be      	b.n	1a000dde <stepperMotorMicroStepsTask+0x16>
				stepperMotorSetMicroSteps(TRUE, TRUE, TRUE);
1a000e60:	2201      	movs	r2, #1
1a000e62:	4611      	mov	r1, r2
1a000e64:	4610      	mov	r0, r2
1a000e66:	f7ff ff99 	bl	1a000d9c <stepperMotorSetMicroSteps>
				printf("32_STEP\n");
1a000e6a:	4808      	ldr	r0, [pc, #32]	; (1a000e8c <stepperMotorMicroStepsTask+0xc4>)
1a000e6c:	f005 fa44 	bl	1a0062f8 <puts>
				break;
1a000e70:	e7b5      	b.n	1a000dde <stepperMotorMicroStepsTask+0x16>
1a000e72:	bf00      	nop
1a000e74:	1a00a510 	.word	0x1a00a510
1a000e78:	100079ac 	.word	0x100079ac
1a000e7c:	1a00a51c 	.word	0x1a00a51c
1a000e80:	1a00a528 	.word	0x1a00a528
1a000e84:	1a00a530 	.word	0x1a00a530
1a000e88:	1a00a538 	.word	0x1a00a538
1a000e8c:	1a00a540 	.word	0x1a00a540

1a000e90 <adcStart>:

/*==================[inlcusiones]============================================*/
#include "adc.h"
#include "pid.h"

void adcStart() {
1a000e90:	b508      	push	{r3, lr}
	adcConfig(ADC_ENABLE); /* ADC */
1a000e92:	2000      	movs	r0, #0
1a000e94:	f003 fa3a 	bl	1a00430c <adcInit>
}
1a000e98:	bd08      	pop	{r3, pc}
1a000e9a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000e9e:	Address 0x000000001a000e9e is out of bounds.


1a000ea0 <adcScanChannelTask>:

void adcScanChannelTask(void * taskParmPtr) {
1a000ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000ea4:	b082      	sub	sp, #8
	portTickType xPeriodicity = 10 / portTICK_RATE_MS;// cada 10mseg escanea los canales 1 y 2 del ADC
	portTickType xLastWakeTime = xTaskGetTickCount();
1a000ea6:	f001 f9a1 	bl	1a0021ec <xTaskGetTickCount>
1a000eaa:	9001      	str	r0, [sp, #4]
	uint16_t executePid = 0;

	uint16_t channel2 = 0;
	uint16_t index = 0;

	servo.flagCompA = TRUE;
1a000eac:	4bb8      	ldr	r3, [pc, #736]	; (1a001190 <adcScanChannelTask+0x2f0>)
1a000eae:	2201      	movs	r2, #1
1a000eb0:	729a      	strb	r2, [r3, #10]
	servo.flagCompB = TRUE;
1a000eb2:	72da      	strb	r2, [r3, #11]
	uint16_t index = 0;
1a000eb4:	2400      	movs	r4, #0
	uint16_t channel2 = 0;
1a000eb6:	4625      	mov	r5, r4
	uint16_t executePid = 0;
1a000eb8:	46a2      	mov	sl, r4
1a000eba:	e0e0      	b.n	1a00107e <adcScanChannelTask+0x1de>
	while (TRUE) {
		// pregunto si se cumplio un segundo para ejecutar el PID
		executePid++;
		if(executePid >= UNSEGUNDO){
			for(index=0; index<FILTRO_PROMEDIO_MOVIL; index++){
				pid.sensorPresion += adcRead(CH1);
1a000ebc:	2000      	movs	r0, #0
1a000ebe:	f003 fa81 	bl	1a0043c4 <adcRead>
1a000ec2:	49b4      	ldr	r1, [pc, #720]	; (1a001194 <adcScanChannelTask+0x2f4>)
1a000ec4:	884a      	ldrh	r2, [r1, #2]
1a000ec6:	4410      	add	r0, r2
1a000ec8:	8048      	strh	r0, [r1, #2]
			for(index=0; index<FILTRO_PROMEDIO_MOVIL; index++){
1a000eca:	3401      	adds	r4, #1
1a000ecc:	b2a4      	uxth	r4, r4
1a000ece:	2c09      	cmp	r4, #9
1a000ed0:	d9f4      	bls.n	1a000ebc <adcScanChannelTask+0x1c>
			}
			pid.sensorPresion = pid.sensorPresion/FILTRO_PROMEDIO_MOVIL;
1a000ed2:	4cb0      	ldr	r4, [pc, #704]	; (1a001194 <adcScanChannelTask+0x2f4>)
1a000ed4:	8860      	ldrh	r0, [r4, #2]
1a000ed6:	4bb0      	ldr	r3, [pc, #704]	; (1a001198 <adcScanChannelTask+0x2f8>)
1a000ed8:	fba3 3000 	umull	r3, r0, r3, r0
			pid.inPut = pid.sensorPresion * 0.00322;// convierto a tensión y multiplico por 100
1a000edc:	08c0      	lsrs	r0, r0, #3
1a000ede:	f003 fddd 	bl	1a004a9c <__aeabi_i2d>
1a000ee2:	a3a5      	add	r3, pc, #660	; (adr r3, 1a001178 <adcScanChannelTask+0x2d8>)
1a000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000ee8:	f003 fe42 	bl	1a004b70 <__aeabi_dmul>
1a000eec:	f004 f8da 	bl	1a0050a4 <__aeabi_d2f>
1a000ef0:	ee07 0a10 	vmov	s14, r0
1a000ef4:	6060      	str	r0, [r4, #4]
			pid.sensorPresion = 0;
1a000ef6:	2300      	movs	r3, #0
1a000ef8:	8063      	strh	r3, [r4, #2]

			pid.error= pid.setPoint - pid.inPut;
1a000efa:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
1a000efe:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a000f02:	edc4 7a02 	vstr	s15, [r4, #8]
			if((pid.error <= 0.00322) && (pid.error >= -0.00322)) pid.error = 0.00000;
1a000f06:	ee17 0a90 	vmov	r0, s15
1a000f0a:	f003 fdd9 	bl	1a004ac0 <__aeabi_f2d>
1a000f0e:	4606      	mov	r6, r0
1a000f10:	460f      	mov	r7, r1
1a000f12:	a399      	add	r3, pc, #612	; (adr r3, 1a001178 <adcScanChannelTask+0x2d8>)
1a000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000f18:	f004 f8a6 	bl	1a005068 <__aeabi_dcmple>
1a000f1c:	b148      	cbz	r0, 1a000f32 <adcScanChannelTask+0x92>
1a000f1e:	a398      	add	r3, pc, #608	; (adr r3, 1a001180 <adcScanChannelTask+0x2e0>)
1a000f20:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000f24:	4630      	mov	r0, r6
1a000f26:	4639      	mov	r1, r7
1a000f28:	f004 f8a8 	bl	1a00507c <__aeabi_dcmpge>
1a000f2c:	b108      	cbz	r0, 1a000f32 <adcScanChannelTask+0x92>
1a000f2e:	2200      	movs	r2, #0
1a000f30:	60a2      	str	r2, [r4, #8]
			//printf("Set-Point:%.5f\n",pid.setPoint);


			pid.iTerm +=(pid.ki*pid.error);
1a000f32:	4b98      	ldr	r3, [pc, #608]	; (1a001194 <adcScanChannelTask+0x2f4>)
1a000f34:	edd3 7a07 	vldr	s15, [r3, #28]
1a000f38:	ed93 7a02 	vldr	s14, [r3, #8]
1a000f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
1a000f40:	edd3 6a03 	vldr	s13, [r3, #12]
1a000f44:	ee77 7aa6 	vadd.f32	s15, s15, s13
1a000f48:	edc3 7a03 	vstr	s15, [r3, #12]
			if (pid.iTerm > pid.outMax)pid.iTerm = pid.outMax;
1a000f4c:	ed93 6a04 	vldr	s12, [r3, #16]
1a000f50:	eef4 7ac6 	vcmpe.f32	s15, s12
1a000f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000f58:	dd01      	ble.n	1a000f5e <adcScanChannelTask+0xbe>
1a000f5a:	ed83 6a03 	vstr	s12, [r3, #12]
			if (pid.iTerm < pid.outMin)pid.iTerm = pid.outMin;
1a000f5e:	4b8d      	ldr	r3, [pc, #564]	; (1a001194 <adcScanChannelTask+0x2f4>)
1a000f60:	edd3 7a03 	vldr	s15, [r3, #12]
1a000f64:	edd3 6a05 	vldr	s13, [r3, #20]
1a000f68:	eef4 7ae6 	vcmpe.f32	s15, s13
1a000f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000f70:	d501      	bpl.n	1a000f76 <adcScanChannelTask+0xd6>
1a000f72:	edc3 6a03 	vstr	s13, [r3, #12]
            //pid.iTerm=0.0000;
			pid.outPut =  pid.kp * pid.error + pid.iTerm;
1a000f76:	4b87      	ldr	r3, [pc, #540]	; (1a001194 <adcScanChannelTask+0x2f4>)
1a000f78:	edd3 7a06 	vldr	s15, [r3, #24]
1a000f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
1a000f80:	edd3 5a03 	vldr	s11, [r3, #12]
1a000f84:	ee77 7aa5 	vadd.f32	s15, s15, s11
1a000f88:	edc3 7a08 	vstr	s15, [r3, #32]

			if (pid.outPut > pid.outMax)pid.outPut = pid.outMax;
1a000f8c:	eeb4 6ae7 	vcmpe.f32	s12, s15
1a000f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000f94:	d501      	bpl.n	1a000f9a <adcScanChannelTask+0xfa>
1a000f96:	ed83 6a08 	vstr	s12, [r3, #32]
			if (pid.outPut < pid.outMin)pid.outPut = pid.outMin;
1a000f9a:	4b7e      	ldr	r3, [pc, #504]	; (1a001194 <adcScanChannelTask+0x2f4>)
1a000f9c:	edd3 7a08 	vldr	s15, [r3, #32]
1a000fa0:	eef4 6ae7 	vcmpe.f32	s13, s15
1a000fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000fa8:	dd01      	ble.n	1a000fae <adcScanChannelTask+0x10e>
1a000faa:	edc3 6a08 	vstr	s13, [r3, #32]
			index=0;

			//taskENTER_CRITICAL();
				printf("Error:%.5f\n",pid.error);
1a000fae:	ee17 0a10 	vmov	r0, s14
1a000fb2:	f003 fd85 	bl	1a004ac0 <__aeabi_f2d>
1a000fb6:	4602      	mov	r2, r0
1a000fb8:	460b      	mov	r3, r1
1a000fba:	4878      	ldr	r0, [pc, #480]	; (1a00119c <adcScanChannelTask+0x2fc>)
1a000fbc:	f005 f93a 	bl	1a006234 <printf>
				printf("Salida OutPut:%.5f\n", pid.outPut);
1a000fc0:	4c74      	ldr	r4, [pc, #464]	; (1a001194 <adcScanChannelTask+0x2f4>)
1a000fc2:	6a20      	ldr	r0, [r4, #32]
1a000fc4:	f003 fd7c 	bl	1a004ac0 <__aeabi_f2d>
1a000fc8:	4602      	mov	r2, r0
1a000fca:	460b      	mov	r3, r1
1a000fcc:	4874      	ldr	r0, [pc, #464]	; (1a0011a0 <adcScanChannelTask+0x300>)
1a000fce:	f005 f931 	bl	1a006234 <printf>
				printf("Potenciometro del eje:%.5f\n", servo.potentiometer);
1a000fd2:	4b6f      	ldr	r3, [pc, #444]	; (1a001190 <adcScanChannelTask+0x2f0>)
1a000fd4:	6858      	ldr	r0, [r3, #4]
1a000fd6:	f003 fd73 	bl	1a004ac0 <__aeabi_f2d>
1a000fda:	4602      	mov	r2, r0
1a000fdc:	460b      	mov	r3, r1
1a000fde:	4871      	ldr	r0, [pc, #452]	; (1a0011a4 <adcScanChannelTask+0x304>)
1a000fe0:	f005 f928 	bl	1a006234 <printf>
				printf("Sensor de presion:%.5f\n", pid.inPut);
1a000fe4:	6860      	ldr	r0, [r4, #4]
1a000fe6:	f003 fd6b 	bl	1a004ac0 <__aeabi_f2d>
1a000fea:	4602      	mov	r2, r0
1a000fec:	460b      	mov	r3, r1
1a000fee:	486e      	ldr	r0, [pc, #440]	; (1a0011a8 <adcScanChannelTask+0x308>)
1a000ff0:	f005 f920 	bl	1a006234 <printf>
			index=0;
1a000ff4:	2400      	movs	r4, #0
				//fflush(stdout);
			//taskEXIT_CRITICAL();

			executePid = 0;
1a000ff6:	46a2      	mov	sl, r4
1a000ff8:	e048      	b.n	1a00108c <adcScanChannelTask+0x1ec>
			for(index=0; index<FILTRO_PROMEDIO_MOVIL; index++){
1a000ffa:	2400      	movs	r4, #0
1a000ffc:	e767      	b.n	1a000ece <adcScanChannelTask+0x2e>
			servo.potentiometer = channel2 *0.00322;//convierto a tensión
			           //
			if(pid.outPut -2*0.00322> servo.potentiometer){//Abre la valvula
				if(servo.flagCompA == TRUE){
					//detengo al motor
					servo.flagPulse=FALSE;
1a000ffe:	4c64      	ldr	r4, [pc, #400]	; (1a001190 <adcScanChannelTask+0x2f0>)
1a001000:	2500      	movs	r5, #0
1a001002:	4626      	mov	r6, r4
1a001004:	f806 5f08 	strb.w	r5, [r6, #8]!
					xQueueSend(stepperMotorPulseServoQueue, &servo.flagPulse,
1a001008:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 1a0011b0 <adcScanChannelTask+0x310>
1a00100c:	462b      	mov	r3, r5
1a00100e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001012:	4631      	mov	r1, r6
1a001014:	f8d8 0000 	ldr.w	r0, [r8]
1a001018:	f000 fbfe 	bl	1a001818 <xQueueGenericSend>
												portMAX_DELAY);
					//establezco el sentido de giro
					servo.direction = STEPPER_LEFT_CLOSE;
1a00101c:	2701      	movs	r7, #1
1a00101e:	4621      	mov	r1, r4
1a001020:	f801 7f09 	strb.w	r7, [r1, #9]!
					xQueueSend(stepperMotorDirectionQueue, &servo.direction,portMAX_DELAY);
1a001024:	462b      	mov	r3, r5
1a001026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00102a:	4860      	ldr	r0, [pc, #384]	; (1a0011ac <adcScanChannelTask+0x30c>)
1a00102c:	6800      	ldr	r0, [r0, #0]
1a00102e:	f000 fbf3 	bl	1a001818 <xQueueGenericSend>
					//habilito la generación de pulsos
					servo.flagPulse = TRUE;
1a001032:	7227      	strb	r7, [r4, #8]
					xQueueSend(stepperMotorPulseServoQueue, &servo.flagPulse,
1a001034:	462b      	mov	r3, r5
1a001036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00103a:	4631      	mov	r1, r6
1a00103c:	f8d8 0000 	ldr.w	r0, [r8]
1a001040:	f000 fbea 	bl	1a001818 <xQueueGenericSend>
																	portMAX_DELAY);
					servo.flagCompA = FALSE;
1a001044:	72a5      	strb	r5, [r4, #10]
					servo.flagCompB = TRUE;
1a001046:	72e7      	strb	r7, [r4, #11]
				}

			}

			channel2 = 0;
			index = 0;
1a001048:	462c      	mov	r4, r5
1a00104a:	e014      	b.n	1a001076 <adcScanChannelTask+0x1d6>
				if(pid.outPut+2*0.00322<servo.potentiometer){ //Cierra la valvula
1a00104c:	a34e      	add	r3, pc, #312	; (adr r3, 1a001188 <adcScanChannelTask+0x2e8>)
1a00104e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001052:	4640      	mov	r0, r8
1a001054:	4649      	mov	r1, r9
1a001056:	f003 fbd5 	bl	1a004804 <__adddf3>
1a00105a:	4602      	mov	r2, r0
1a00105c:	460b      	mov	r3, r1
1a00105e:	4620      	mov	r0, r4
1a001060:	4629      	mov	r1, r5
1a001062:	f004 f815 	bl	1a005090 <__aeabi_dcmpgt>
1a001066:	2800      	cmp	r0, #0
1a001068:	d072      	beq.n	1a001150 <adcScanChannelTask+0x2b0>
					if(servo.flagCompB == TRUE){
1a00106a:	4b49      	ldr	r3, [pc, #292]	; (1a001190 <adcScanChannelTask+0x2f0>)
1a00106c:	7adb      	ldrb	r3, [r3, #11]
1a00106e:	2b01      	cmp	r3, #1
1a001070:	d047      	beq.n	1a001102 <adcScanChannelTask+0x262>
			index = 0;
1a001072:	2400      	movs	r4, #0
			channel2 = 0;
1a001074:	4625      	mov	r5, r4
		}
		vTaskDelayUntil(&xLastWakeTime, xPeriodicity);
1a001076:	210a      	movs	r1, #10
1a001078:	a801      	add	r0, sp, #4
1a00107a:	f001 f9c3 	bl	1a002404 <vTaskDelayUntil>
		executePid++;
1a00107e:	f10a 0a01 	add.w	sl, sl, #1
1a001082:	fa1f fa8a 	uxth.w	sl, sl
		if(executePid >= UNSEGUNDO){
1a001086:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
1a00108a:	d8b6      	bhi.n	1a000ffa <adcScanChannelTask+0x15a>
		channel2 = channel2 + adcRead(CH2);//potenciometro del eje
1a00108c:	2001      	movs	r0, #1
1a00108e:	f003 f999 	bl	1a0043c4 <adcRead>
1a001092:	4405      	add	r5, r0
1a001094:	b2ad      	uxth	r5, r5
		index++;
1a001096:	3401      	adds	r4, #1
1a001098:	b2a4      	uxth	r4, r4
		if (index == FILTRO_PROMEDIO_MOVIL) {// siendo el Filtro_promedio Movil =20, entonces cada 2 segundos tengo un valor de Voltaje, presión y altura
1a00109a:	2c0a      	cmp	r4, #10
1a00109c:	d1eb      	bne.n	1a001076 <adcScanChannelTask+0x1d6>
			channel2 = channel2 / FILTRO_PROMEDIO_MOVIL;
1a00109e:	483e      	ldr	r0, [pc, #248]	; (1a001198 <adcScanChannelTask+0x2f8>)
1a0010a0:	fba0 3005 	umull	r3, r0, r0, r5
			servo.potentiometer = channel2 *0.00322;//convierto a tensión
1a0010a4:	f3c0 00cf 	ubfx	r0, r0, #3, #16
1a0010a8:	f003 fcf8 	bl	1a004a9c <__aeabi_i2d>
1a0010ac:	a332      	add	r3, pc, #200	; (adr r3, 1a001178 <adcScanChannelTask+0x2d8>)
1a0010ae:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0010b2:	f003 fd5d 	bl	1a004b70 <__aeabi_dmul>
1a0010b6:	f003 fff5 	bl	1a0050a4 <__aeabi_d2f>
1a0010ba:	4604      	mov	r4, r0
1a0010bc:	4b34      	ldr	r3, [pc, #208]	; (1a001190 <adcScanChannelTask+0x2f0>)
1a0010be:	6058      	str	r0, [r3, #4]
			if(pid.outPut -2*0.00322> servo.potentiometer){//Abre la valvula
1a0010c0:	4b34      	ldr	r3, [pc, #208]	; (1a001194 <adcScanChannelTask+0x2f4>)
1a0010c2:	6a18      	ldr	r0, [r3, #32]
1a0010c4:	f003 fcfc 	bl	1a004ac0 <__aeabi_f2d>
1a0010c8:	4680      	mov	r8, r0
1a0010ca:	4689      	mov	r9, r1
1a0010cc:	a32e      	add	r3, pc, #184	; (adr r3, 1a001188 <adcScanChannelTask+0x2e8>)
1a0010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0010d2:	f003 fb95 	bl	1a004800 <__aeabi_dsub>
1a0010d6:	4606      	mov	r6, r0
1a0010d8:	460f      	mov	r7, r1
1a0010da:	4620      	mov	r0, r4
1a0010dc:	f003 fcf0 	bl	1a004ac0 <__aeabi_f2d>
1a0010e0:	4604      	mov	r4, r0
1a0010e2:	460d      	mov	r5, r1
1a0010e4:	4602      	mov	r2, r0
1a0010e6:	460b      	mov	r3, r1
1a0010e8:	4630      	mov	r0, r6
1a0010ea:	4639      	mov	r1, r7
1a0010ec:	f003 ffd0 	bl	1a005090 <__aeabi_dcmpgt>
1a0010f0:	2800      	cmp	r0, #0
1a0010f2:	d0ab      	beq.n	1a00104c <adcScanChannelTask+0x1ac>
				if(servo.flagCompA == TRUE){
1a0010f4:	4b26      	ldr	r3, [pc, #152]	; (1a001190 <adcScanChannelTask+0x2f0>)
1a0010f6:	7a9b      	ldrb	r3, [r3, #10]
1a0010f8:	2b01      	cmp	r3, #1
1a0010fa:	d080      	beq.n	1a000ffe <adcScanChannelTask+0x15e>
			index = 0;
1a0010fc:	2400      	movs	r4, #0
			channel2 = 0;
1a0010fe:	4625      	mov	r5, r4
1a001100:	e7b9      	b.n	1a001076 <adcScanChannelTask+0x1d6>
							servo.flagPulse=FALSE;
1a001102:	4c23      	ldr	r4, [pc, #140]	; (1a001190 <adcScanChannelTask+0x2f0>)
1a001104:	2500      	movs	r5, #0
1a001106:	4626      	mov	r6, r4
1a001108:	f806 5f08 	strb.w	r5, [r6, #8]!
							xQueueSend(stepperMotorPulseServoQueue, &servo.flagPulse,
1a00110c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1a0011b0 <adcScanChannelTask+0x310>
1a001110:	462b      	mov	r3, r5
1a001112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001116:	4631      	mov	r1, r6
1a001118:	f8d8 0000 	ldr.w	r0, [r8]
1a00111c:	f000 fb7c 	bl	1a001818 <xQueueGenericSend>
							servo.direction = STEPPER_RIGHT_OPEN;
1a001120:	4621      	mov	r1, r4
1a001122:	f801 5f09 	strb.w	r5, [r1, #9]!
							xQueueSend(stepperMotorDirectionQueue, &servo.direction,portMAX_DELAY);
1a001126:	462b      	mov	r3, r5
1a001128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00112c:	481f      	ldr	r0, [pc, #124]	; (1a0011ac <adcScanChannelTask+0x30c>)
1a00112e:	6800      	ldr	r0, [r0, #0]
1a001130:	f000 fb72 	bl	1a001818 <xQueueGenericSend>
							servo.flagPulse=TRUE;
1a001134:	2701      	movs	r7, #1
1a001136:	7227      	strb	r7, [r4, #8]
							xQueueSend(stepperMotorPulseServoQueue, &servo.flagPulse,
1a001138:	462b      	mov	r3, r5
1a00113a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00113e:	4631      	mov	r1, r6
1a001140:	f8d8 0000 	ldr.w	r0, [r8]
1a001144:	f000 fb68 	bl	1a001818 <xQueueGenericSend>
							servo.flagCompA = TRUE;
1a001148:	72a7      	strb	r7, [r4, #10]
							servo.flagCompB = FALSE;
1a00114a:	72e5      	strb	r5, [r4, #11]
			index = 0;
1a00114c:	462c      	mov	r4, r5
1a00114e:	e792      	b.n	1a001076 <adcScanChannelTask+0x1d6>
						servo.flagPulse=FALSE;
1a001150:	4c0f      	ldr	r4, [pc, #60]	; (1a001190 <adcScanChannelTask+0x2f0>)
1a001152:	2500      	movs	r5, #0
1a001154:	4621      	mov	r1, r4
1a001156:	f801 5f08 	strb.w	r5, [r1, #8]!
					    xQueueSend(stepperMotorPulseServoQueue, &servo.flagPulse,
1a00115a:	462b      	mov	r3, r5
1a00115c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001160:	4813      	ldr	r0, [pc, #76]	; (1a0011b0 <adcScanChannelTask+0x310>)
1a001162:	6800      	ldr	r0, [r0, #0]
1a001164:	f000 fb58 	bl	1a001818 <xQueueGenericSend>
					    servo.flagCompA = TRUE;
1a001168:	2301      	movs	r3, #1
1a00116a:	72a3      	strb	r3, [r4, #10]
						servo.flagCompB = TRUE;
1a00116c:	72e3      	strb	r3, [r4, #11]
			index = 0;
1a00116e:	462c      	mov	r4, r5
1a001170:	e781      	b.n	1a001076 <adcScanChannelTask+0x1d6>
1a001172:	bf00      	nop
1a001174:	f3af 8000 	nop.w
1a001178:	562e09ff 	.word	0x562e09ff
1a00117c:	3f6a60d4 	.word	0x3f6a60d4
1a001180:	562e09ff 	.word	0x562e09ff
1a001184:	bf6a60d4 	.word	0xbf6a60d4
1a001188:	562e09ff 	.word	0x562e09ff
1a00118c:	3f7a60d4 	.word	0x3f7a60d4
1a001190:	100079b0 	.word	0x100079b0
1a001194:	10007930 	.word	0x10007930
1a001198:	cccccccd 	.word	0xcccccccd
1a00119c:	1a00a5c4 	.word	0x1a00a5c4
1a0011a0:	1a00a5d0 	.word	0x1a00a5d0
1a0011a4:	1a00a5e4 	.word	0x1a00a5e4
1a0011a8:	1a00a600 	.word	0x1a00a600
1a0011ac:	10007998 	.word	0x10007998
1a0011b0:	1000799c 	.word	0x1000799c

1a0011b4 <initialise_monitor_handles>:
}
1a0011b4:	4770      	bx	lr
1a0011b6:	Address 0x000000001a0011b6 is out of bounds.


1a0011b8 <Reset_Handler>:
void Reset_Handler(void) {
1a0011b8:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0011ba:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0011bc:	4b19      	ldr	r3, [pc, #100]	; (1a001224 <Reset_Handler+0x6c>)
1a0011be:	4a1a      	ldr	r2, [pc, #104]	; (1a001228 <Reset_Handler+0x70>)
1a0011c0:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0011c2:	3304      	adds	r3, #4
1a0011c4:	4a19      	ldr	r2, [pc, #100]	; (1a00122c <Reset_Handler+0x74>)
1a0011c6:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0011c8:	2300      	movs	r3, #0
1a0011ca:	e005      	b.n	1a0011d8 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0011cc:	4a18      	ldr	r2, [pc, #96]	; (1a001230 <Reset_Handler+0x78>)
1a0011ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0011d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0011d6:	3301      	adds	r3, #1
1a0011d8:	2b07      	cmp	r3, #7
1a0011da:	d9f7      	bls.n	1a0011cc <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0011dc:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0011de:	4b15      	ldr	r3, [pc, #84]	; (1a001234 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0011e0:	e007      	b.n	1a0011f2 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0011e2:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0011e6:	689a      	ldr	r2, [r3, #8]
1a0011e8:	6859      	ldr	r1, [r3, #4]
1a0011ea:	6818      	ldr	r0, [r3, #0]
1a0011ec:	f7fe ffcd 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0011f0:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0011f2:	4a11      	ldr	r2, [pc, #68]	; (1a001238 <Reset_Handler+0x80>)
1a0011f4:	4293      	cmp	r3, r2
1a0011f6:	d3f4      	bcc.n	1a0011e2 <Reset_Handler+0x2a>
1a0011f8:	e006      	b.n	1a001208 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0011fa:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0011fc:	6859      	ldr	r1, [r3, #4]
1a0011fe:	f854 0b08 	ldr.w	r0, [r4], #8
1a001202:	f7fe ffd1 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a001206:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a001208:	4a0c      	ldr	r2, [pc, #48]	; (1a00123c <Reset_Handler+0x84>)
1a00120a:	4293      	cmp	r3, r2
1a00120c:	d3f5      	bcc.n	1a0011fa <Reset_Handler+0x42>
    SystemInit();
1a00120e:	f002 fe41 	bl	1a003e94 <SystemInit>
    __libc_init_array();
1a001212:	f004 fc2b 	bl	1a005a6c <__libc_init_array>
    initialise_monitor_handles();
1a001216:	f7ff ffcd 	bl	1a0011b4 <initialise_monitor_handles>
    main();
1a00121a:	f7ff fafd 	bl	1a000818 <main>
        __asm__ volatile("wfi");
1a00121e:	bf30      	wfi
1a001220:	e7fd      	b.n	1a00121e <Reset_Handler+0x66>
1a001222:	bf00      	nop
1a001224:	40053100 	.word	0x40053100
1a001228:	10df1000 	.word	0x10df1000
1a00122c:	01dff7ff 	.word	0x01dff7ff
1a001230:	e000e280 	.word	0xe000e280
1a001234:	1a000114 	.word	0x1a000114
1a001238:	1a000150 	.word	0x1a000150
1a00123c:	1a000178 	.word	0x1a000178

1a001240 <_fini>:
void _fini(void) {}
1a001240:	4770      	bx	lr

1a001242 <_init>:
void _init(void) {}
1a001242:	4770      	bx	lr

1a001244 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a001244:	2309      	movs	r3, #9
1a001246:	6003      	str	r3, [r0, #0]
   return -1;
}
1a001248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00124c:	4770      	bx	lr

1a00124e <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a00124e:	2358      	movs	r3, #88	; 0x58
1a001250:	6003      	str	r3, [r0, #0]
   return -1;
}
1a001252:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001256:	4770      	bx	lr

1a001258 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a001258:	2902      	cmp	r1, #2
1a00125a:	d801      	bhi.n	1a001260 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a00125c:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a00125e:	4770      	bx	lr
       SET_ERR(EBADF);
1a001260:	2309      	movs	r3, #9
1a001262:	6003      	str	r3, [r0, #0]
       return -1;
1a001264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001268:	4770      	bx	lr

1a00126a <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00126a:	2358      	movs	r3, #88	; 0x58
1a00126c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00126e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001272:	4770      	bx	lr

1a001274 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a001274:	2902      	cmp	r1, #2
1a001276:	d81f      	bhi.n	1a0012b8 <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a001278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00127c:	461d      	mov	r5, r3
1a00127e:	4617      	mov	r7, r2
1a001280:	4606      	mov	r6, r0
  size_t i = 0;
1a001282:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a001284:	42ac      	cmp	r4, r5
1a001286:	d211      	bcs.n	1a0012ac <_read_r+0x38>
         int c = __stdio_getchar();
1a001288:	f001 ffbb 	bl	1a003202 <__stdio_getchar>
         if( c != -1 ){
1a00128c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001290:	d0f8      	beq.n	1a001284 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a001292:	f104 0801 	add.w	r8, r4, #1
1a001296:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a001298:	280d      	cmp	r0, #13
1a00129a:	d003      	beq.n	1a0012a4 <_read_r+0x30>
1a00129c:	280a      	cmp	r0, #10
1a00129e:	d001      	beq.n	1a0012a4 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a0012a0:	4644      	mov	r4, r8
1a0012a2:	e7ef      	b.n	1a001284 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a0012a4:	f001 ffad 	bl	1a003202 <__stdio_getchar>
               return i;
1a0012a8:	4640      	mov	r0, r8
1a0012aa:	e003      	b.n	1a0012b4 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a0012ac:	2313      	movs	r3, #19
1a0012ae:	6033      	str	r3, [r6, #0]
      return -1;
1a0012b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a0012b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a0012b8:	2313      	movs	r3, #19
1a0012ba:	6003      	str	r3, [r0, #0]
      return -1;
1a0012bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0012c0:	4770      	bx	lr

1a0012c2 <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a0012c2:	2902      	cmp	r1, #2
1a0012c4:	d80c      	bhi.n	1a0012e0 <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a0012c6:	b570      	push	{r4, r5, r6, lr}
1a0012c8:	461d      	mov	r5, r3
1a0012ca:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0012cc:	2400      	movs	r4, #0
1a0012ce:	e003      	b.n	1a0012d8 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a0012d0:	5d30      	ldrb	r0, [r6, r4]
1a0012d2:	f001 ff91 	bl	1a0031f8 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a0012d6:	3401      	adds	r4, #1
1a0012d8:	42ac      	cmp	r4, r5
1a0012da:	d3f9      	bcc.n	1a0012d0 <_write_r+0xe>
       return n;
1a0012dc:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0012de:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0012e0:	2313      	movs	r3, #19
1a0012e2:	6003      	str	r3, [r0, #0]
       return -1;
1a0012e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0012e8:	4770      	bx	lr
1a0012ea:	Address 0x000000001a0012ea is out of bounds.


1a0012ec <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0012ec:	4b05      	ldr	r3, [pc, #20]	; (1a001304 <_sbrk_r+0x18>)
1a0012ee:	681b      	ldr	r3, [r3, #0]
1a0012f0:	b123      	cbz	r3, 1a0012fc <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0012f2:	4b04      	ldr	r3, [pc, #16]	; (1a001304 <_sbrk_r+0x18>)
1a0012f4:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0012f6:	4401      	add	r1, r0
1a0012f8:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0012fa:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0012fc:	4b01      	ldr	r3, [pc, #4]	; (1a001304 <_sbrk_r+0x18>)
1a0012fe:	4a02      	ldr	r2, [pc, #8]	; (1a001308 <_sbrk_r+0x1c>)
1a001300:	601a      	str	r2, [r3, #0]
1a001302:	e7f6      	b.n	1a0012f2 <_sbrk_r+0x6>
1a001304:	10000a7c 	.word	0x10000a7c
1a001308:	10007a28 	.word	0x10007a28

1a00130c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a00130c:	4a12      	ldr	r2, [pc, #72]	; (1a001358 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a00130e:	f012 0f07 	tst.w	r2, #7
1a001312:	d01e      	beq.n	1a001352 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a001314:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a001316:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a00131a:	f5c1 43c8 	rsb	r3, r1, #25600	; 0x6400
1a00131e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a001320:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a001322:	480e      	ldr	r0, [pc, #56]	; (1a00135c <prvHeapInit+0x50>)
1a001324:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a001326:	2100      	movs	r1, #0
1a001328:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a00132a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a00132c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a00132e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a001332:	480b      	ldr	r0, [pc, #44]	; (1a001360 <prvHeapInit+0x54>)
1a001334:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a001336:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a001338:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a00133a:	1a99      	subs	r1, r3, r2
1a00133c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a00133e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a001340:	4b08      	ldr	r3, [pc, #32]	; (1a001364 <prvHeapInit+0x58>)
1a001342:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a001344:	4b08      	ldr	r3, [pc, #32]	; (1a001368 <prvHeapInit+0x5c>)
1a001346:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a001348:	4b08      	ldr	r3, [pc, #32]	; (1a00136c <prvHeapInit+0x60>)
1a00134a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a00134e:	601a      	str	r2, [r3, #0]
}
1a001350:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a001352:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
1a001356:	e7e4      	b.n	1a001322 <prvHeapInit+0x16>
1a001358:	10000a84 	.word	0x10000a84
1a00135c:	10006e90 	.word	0x10006e90
1a001360:	10000a80 	.word	0x10000a80
1a001364:	10006e8c 	.word	0x10006e8c
1a001368:	10006e88 	.word	0x10006e88
1a00136c:	10006e84 	.word	0x10006e84

1a001370 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a001370:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a001372:	4b13      	ldr	r3, [pc, #76]	; (1a0013c0 <prvInsertBlockIntoFreeList+0x50>)
1a001374:	681a      	ldr	r2, [r3, #0]
1a001376:	4282      	cmp	r2, r0
1a001378:	d31b      	bcc.n	1a0013b2 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a00137a:	6859      	ldr	r1, [r3, #4]
1a00137c:	185c      	adds	r4, r3, r1
1a00137e:	4284      	cmp	r4, r0
1a001380:	d103      	bne.n	1a00138a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a001382:	6840      	ldr	r0, [r0, #4]
1a001384:	4401      	add	r1, r0
1a001386:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
1a001388:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a00138a:	6841      	ldr	r1, [r0, #4]
1a00138c:	1844      	adds	r4, r0, r1
1a00138e:	42a2      	cmp	r2, r4
1a001390:	d113      	bne.n	1a0013ba <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a001392:	4c0c      	ldr	r4, [pc, #48]	; (1a0013c4 <prvInsertBlockIntoFreeList+0x54>)
1a001394:	6824      	ldr	r4, [r4, #0]
1a001396:	42a2      	cmp	r2, r4
1a001398:	d00d      	beq.n	1a0013b6 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a00139a:	6852      	ldr	r2, [r2, #4]
1a00139c:	4411      	add	r1, r2
1a00139e:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a0013a0:	681a      	ldr	r2, [r3, #0]
1a0013a2:	6812      	ldr	r2, [r2, #0]
1a0013a4:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a0013a6:	4298      	cmp	r0, r3
1a0013a8:	d000      	beq.n	1a0013ac <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a0013aa:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a0013ac:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0013b0:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a0013b2:	4613      	mov	r3, r2
1a0013b4:	e7de      	b.n	1a001374 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a0013b6:	6004      	str	r4, [r0, #0]
1a0013b8:	e7f5      	b.n	1a0013a6 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a0013ba:	6002      	str	r2, [r0, #0]
1a0013bc:	e7f3      	b.n	1a0013a6 <prvInsertBlockIntoFreeList+0x36>
1a0013be:	bf00      	nop
1a0013c0:	10006e90 	.word	0x10006e90
1a0013c4:	10000a80 	.word	0x10000a80

1a0013c8 <pvPortMalloc>:
{
1a0013c8:	b570      	push	{r4, r5, r6, lr}
1a0013ca:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a0013cc:	f000 ff06 	bl	1a0021dc <vTaskSuspendAll>
		if( pxEnd == NULL )
1a0013d0:	4b3f      	ldr	r3, [pc, #252]	; (1a0014d0 <pvPortMalloc+0x108>)
1a0013d2:	681b      	ldr	r3, [r3, #0]
1a0013d4:	b1a3      	cbz	r3, 1a001400 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a0013d6:	4b3f      	ldr	r3, [pc, #252]	; (1a0014d4 <pvPortMalloc+0x10c>)
1a0013d8:	681b      	ldr	r3, [r3, #0]
1a0013da:	421c      	tst	r4, r3
1a0013dc:	d013      	beq.n	1a001406 <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
1a0013de:	f000 ff97 	bl	1a002310 <xTaskResumeAll>
void *pvReturn = NULL;
1a0013e2:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a0013e4:	f000 fc9c 	bl	1a001d20 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a0013e8:	f016 0f07 	tst.w	r6, #7
1a0013ec:	d06e      	beq.n	1a0014cc <pvPortMalloc+0x104>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0013ee:	f04f 0320 	mov.w	r3, #32
1a0013f2:	f383 8811 	msr	BASEPRI, r3
1a0013f6:	f3bf 8f6f 	isb	sy
1a0013fa:	f3bf 8f4f 	dsb	sy
1a0013fe:	e7fe      	b.n	1a0013fe <pvPortMalloc+0x36>
			prvHeapInit();
1a001400:	f7ff ff84 	bl	1a00130c <prvHeapInit>
1a001404:	e7e7      	b.n	1a0013d6 <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
1a001406:	b194      	cbz	r4, 1a00142e <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a001408:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a00140a:	f014 0f07 	tst.w	r4, #7
1a00140e:	d00e      	beq.n	1a00142e <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a001410:	f024 0407 	bic.w	r4, r4, #7
1a001414:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a001416:	f004 0307 	and.w	r3, r4, #7
1a00141a:	b143      	cbz	r3, 1a00142e <pvPortMalloc+0x66>
1a00141c:	f04f 0320 	mov.w	r3, #32
1a001420:	f383 8811 	msr	BASEPRI, r3
1a001424:	f3bf 8f6f 	isb	sy
1a001428:	f3bf 8f4f 	dsb	sy
1a00142c:	e7fe      	b.n	1a00142c <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a00142e:	b134      	cbz	r4, 1a00143e <pvPortMalloc+0x76>
1a001430:	4b29      	ldr	r3, [pc, #164]	; (1a0014d8 <pvPortMalloc+0x110>)
1a001432:	681b      	ldr	r3, [r3, #0]
1a001434:	42a3      	cmp	r3, r4
1a001436:	d306      	bcc.n	1a001446 <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a001438:	4b28      	ldr	r3, [pc, #160]	; (1a0014dc <pvPortMalloc+0x114>)
1a00143a:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a00143c:	e009      	b.n	1a001452 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a00143e:	f000 ff67 	bl	1a002310 <xTaskResumeAll>
void *pvReturn = NULL;
1a001442:	2600      	movs	r6, #0
1a001444:	e7ce      	b.n	1a0013e4 <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
1a001446:	f000 ff63 	bl	1a002310 <xTaskResumeAll>
void *pvReturn = NULL;
1a00144a:	2600      	movs	r6, #0
1a00144c:	e7ca      	b.n	1a0013e4 <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
1a00144e:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a001450:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a001452:	686a      	ldr	r2, [r5, #4]
1a001454:	42a2      	cmp	r2, r4
1a001456:	d202      	bcs.n	1a00145e <pvPortMalloc+0x96>
1a001458:	682a      	ldr	r2, [r5, #0]
1a00145a:	2a00      	cmp	r2, #0
1a00145c:	d1f7      	bne.n	1a00144e <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a00145e:	4a1c      	ldr	r2, [pc, #112]	; (1a0014d0 <pvPortMalloc+0x108>)
1a001460:	6812      	ldr	r2, [r2, #0]
1a001462:	42aa      	cmp	r2, r5
1a001464:	d014      	beq.n	1a001490 <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a001466:	681e      	ldr	r6, [r3, #0]
1a001468:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a00146a:	682a      	ldr	r2, [r5, #0]
1a00146c:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a00146e:	686b      	ldr	r3, [r5, #4]
1a001470:	1b1b      	subs	r3, r3, r4
1a001472:	2b10      	cmp	r3, #16
1a001474:	d914      	bls.n	1a0014a0 <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a001476:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a001478:	f010 0f07 	tst.w	r0, #7
1a00147c:	d00c      	beq.n	1a001498 <pvPortMalloc+0xd0>
1a00147e:	f04f 0320 	mov.w	r3, #32
1a001482:	f383 8811 	msr	BASEPRI, r3
1a001486:	f3bf 8f6f 	isb	sy
1a00148a:	f3bf 8f4f 	dsb	sy
1a00148e:	e7fe      	b.n	1a00148e <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a001490:	f000 ff3e 	bl	1a002310 <xTaskResumeAll>
void *pvReturn = NULL;
1a001494:	2600      	movs	r6, #0
1a001496:	e7a5      	b.n	1a0013e4 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a001498:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a00149a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a00149c:	f7ff ff68 	bl	1a001370 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a0014a0:	686a      	ldr	r2, [r5, #4]
1a0014a2:	490d      	ldr	r1, [pc, #52]	; (1a0014d8 <pvPortMalloc+0x110>)
1a0014a4:	680b      	ldr	r3, [r1, #0]
1a0014a6:	1a9b      	subs	r3, r3, r2
1a0014a8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a0014aa:	490d      	ldr	r1, [pc, #52]	; (1a0014e0 <pvPortMalloc+0x118>)
1a0014ac:	6809      	ldr	r1, [r1, #0]
1a0014ae:	428b      	cmp	r3, r1
1a0014b0:	d201      	bcs.n	1a0014b6 <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a0014b2:	490b      	ldr	r1, [pc, #44]	; (1a0014e0 <pvPortMalloc+0x118>)
1a0014b4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a0014b6:	4b07      	ldr	r3, [pc, #28]	; (1a0014d4 <pvPortMalloc+0x10c>)
1a0014b8:	681b      	ldr	r3, [r3, #0]
1a0014ba:	4313      	orrs	r3, r2
1a0014bc:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a0014be:	2300      	movs	r3, #0
1a0014c0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a0014c2:	f000 ff25 	bl	1a002310 <xTaskResumeAll>
		if( pvReturn == NULL )
1a0014c6:	2e00      	cmp	r6, #0
1a0014c8:	d18e      	bne.n	1a0013e8 <pvPortMalloc+0x20>
1a0014ca:	e78b      	b.n	1a0013e4 <pvPortMalloc+0x1c>
}
1a0014cc:	4630      	mov	r0, r6
1a0014ce:	bd70      	pop	{r4, r5, r6, pc}
1a0014d0:	10000a80 	.word	0x10000a80
1a0014d4:	10006e84 	.word	0x10006e84
1a0014d8:	10006e88 	.word	0x10006e88
1a0014dc:	10006e90 	.word	0x10006e90
1a0014e0:	10006e8c 	.word	0x10006e8c

1a0014e4 <vPortFree>:
	if( pv != NULL )
1a0014e4:	b380      	cbz	r0, 1a001548 <vPortFree+0x64>
{
1a0014e6:	b538      	push	{r3, r4, r5, lr}
1a0014e8:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a0014ea:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a0014ee:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a0014f2:	4916      	ldr	r1, [pc, #88]	; (1a00154c <vPortFree+0x68>)
1a0014f4:	6809      	ldr	r1, [r1, #0]
1a0014f6:	420a      	tst	r2, r1
1a0014f8:	d108      	bne.n	1a00150c <vPortFree+0x28>
1a0014fa:	f04f 0320 	mov.w	r3, #32
1a0014fe:	f383 8811 	msr	BASEPRI, r3
1a001502:	f3bf 8f6f 	isb	sy
1a001506:	f3bf 8f4f 	dsb	sy
1a00150a:	e7fe      	b.n	1a00150a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a00150c:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a001510:	b140      	cbz	r0, 1a001524 <vPortFree+0x40>
1a001512:	f04f 0320 	mov.w	r3, #32
1a001516:	f383 8811 	msr	BASEPRI, r3
1a00151a:	f3bf 8f6f 	isb	sy
1a00151e:	f3bf 8f4f 	dsb	sy
1a001522:	e7fe      	b.n	1a001522 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a001524:	ea22 0201 	bic.w	r2, r2, r1
1a001528:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a00152c:	f000 fe56 	bl	1a0021dc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a001530:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a001534:	4a06      	ldr	r2, [pc, #24]	; (1a001550 <vPortFree+0x6c>)
1a001536:	6813      	ldr	r3, [r2, #0]
1a001538:	440b      	add	r3, r1
1a00153a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a00153c:	4628      	mov	r0, r5
1a00153e:	f7ff ff17 	bl	1a001370 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a001542:	f000 fee5 	bl	1a002310 <xTaskResumeAll>
}
1a001546:	bd38      	pop	{r3, r4, r5, pc}
1a001548:	4770      	bx	lr
1a00154a:	bf00      	nop
1a00154c:	10006e84 	.word	0x10006e84
1a001550:	10006e88 	.word	0x10006e88

1a001554 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a001554:	b510      	push	{r4, lr}
1a001556:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a001558:	f001 fbfc 	bl	1a002d54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a00155c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00155e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001560:	429a      	cmp	r2, r3
1a001562:	d004      	beq.n	1a00156e <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a001564:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a001566:	f001 fc17 	bl	1a002d98 <vPortExitCritical>

	return xReturn;
}
1a00156a:	4620      	mov	r0, r4
1a00156c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a00156e:	2401      	movs	r4, #1
1a001570:	e7f9      	b.n	1a001566 <prvIsQueueFull+0x12>

1a001572 <prvIsQueueEmpty>:
{
1a001572:	b510      	push	{r4, lr}
1a001574:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001576:	f001 fbed 	bl	1a002d54 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a00157a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00157c:	b123      	cbz	r3, 1a001588 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a00157e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001580:	f001 fc0a 	bl	1a002d98 <vPortExitCritical>
}
1a001584:	4620      	mov	r0, r4
1a001586:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a001588:	2401      	movs	r4, #1
1a00158a:	e7f9      	b.n	1a001580 <prvIsQueueEmpty+0xe>

1a00158c <prvCopyDataToQueue>:
{
1a00158c:	b570      	push	{r4, r5, r6, lr}
1a00158e:	4604      	mov	r4, r0
1a001590:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001592:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a001594:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001596:	b95a      	cbnz	r2, 1a0015b0 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001598:	6803      	ldr	r3, [r0, #0]
1a00159a:	b11b      	cbz	r3, 1a0015a4 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a00159c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a00159e:	3501      	adds	r5, #1
1a0015a0:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a0015a2:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a0015a4:	6840      	ldr	r0, [r0, #4]
1a0015a6:	f001 f8bf 	bl	1a002728 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a0015aa:	2300      	movs	r3, #0
1a0015ac:	6063      	str	r3, [r4, #4]
1a0015ae:	e7f6      	b.n	1a00159e <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a0015b0:	b96e      	cbnz	r6, 1a0015ce <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a0015b2:	6880      	ldr	r0, [r0, #8]
1a0015b4:	f004 fd4e 	bl	1a006054 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a0015b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0015ba:	68a3      	ldr	r3, [r4, #8]
1a0015bc:	4413      	add	r3, r2
1a0015be:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0015c0:	6862      	ldr	r2, [r4, #4]
1a0015c2:	4293      	cmp	r3, r2
1a0015c4:	d319      	bcc.n	1a0015fa <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a0015c6:	6823      	ldr	r3, [r4, #0]
1a0015c8:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a0015ca:	2000      	movs	r0, #0
1a0015cc:	e7e7      	b.n	1a00159e <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0015ce:	68c0      	ldr	r0, [r0, #12]
1a0015d0:	f004 fd40 	bl	1a006054 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a0015d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0015d6:	4252      	negs	r2, r2
1a0015d8:	68e3      	ldr	r3, [r4, #12]
1a0015da:	4413      	add	r3, r2
1a0015dc:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0015de:	6821      	ldr	r1, [r4, #0]
1a0015e0:	428b      	cmp	r3, r1
1a0015e2:	d202      	bcs.n	1a0015ea <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a0015e4:	6863      	ldr	r3, [r4, #4]
1a0015e6:	441a      	add	r2, r3
1a0015e8:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a0015ea:	2e02      	cmp	r6, #2
1a0015ec:	d001      	beq.n	1a0015f2 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a0015ee:	2000      	movs	r0, #0
1a0015f0:	e7d5      	b.n	1a00159e <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0015f2:	b125      	cbz	r5, 1a0015fe <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a0015f4:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a0015f6:	2000      	movs	r0, #0
1a0015f8:	e7d1      	b.n	1a00159e <prvCopyDataToQueue+0x12>
1a0015fa:	2000      	movs	r0, #0
1a0015fc:	e7cf      	b.n	1a00159e <prvCopyDataToQueue+0x12>
1a0015fe:	2000      	movs	r0, #0
1a001600:	e7cd      	b.n	1a00159e <prvCopyDataToQueue+0x12>

1a001602 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a001602:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001604:	b172      	cbz	r2, 1a001624 <prvCopyDataFromQueue+0x22>
{
1a001606:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a001608:	68c3      	ldr	r3, [r0, #12]
1a00160a:	4413      	add	r3, r2
1a00160c:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a00160e:	6844      	ldr	r4, [r0, #4]
1a001610:	42a3      	cmp	r3, r4
1a001612:	d301      	bcc.n	1a001618 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a001614:	6803      	ldr	r3, [r0, #0]
1a001616:	60c3      	str	r3, [r0, #12]
1a001618:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a00161a:	68c1      	ldr	r1, [r0, #12]
1a00161c:	4620      	mov	r0, r4
1a00161e:	f004 fd19 	bl	1a006054 <memcpy>
}
1a001622:	bd10      	pop	{r4, pc}
1a001624:	4770      	bx	lr

1a001626 <prvUnlockQueue>:
{
1a001626:	b538      	push	{r3, r4, r5, lr}
1a001628:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a00162a:	f001 fb93 	bl	1a002d54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a00162e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a001632:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a001634:	e003      	b.n	1a00163e <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a001636:	f001 f861 	bl	1a0026fc <vTaskMissedYield>
			--cTxLock;
1a00163a:	3c01      	subs	r4, #1
1a00163c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a00163e:	2c00      	cmp	r4, #0
1a001640:	dd08      	ble.n	1a001654 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001642:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a001644:	b133      	cbz	r3, 1a001654 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001646:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a00164a:	f000 ffc5 	bl	1a0025d8 <xTaskRemoveFromEventList>
1a00164e:	2800      	cmp	r0, #0
1a001650:	d0f3      	beq.n	1a00163a <prvUnlockQueue+0x14>
1a001652:	e7f0      	b.n	1a001636 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a001654:	23ff      	movs	r3, #255	; 0xff
1a001656:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a00165a:	f001 fb9d 	bl	1a002d98 <vPortExitCritical>
	taskENTER_CRITICAL();
1a00165e:	f001 fb79 	bl	1a002d54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a001662:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a001666:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a001668:	e003      	b.n	1a001672 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a00166a:	f001 f847 	bl	1a0026fc <vTaskMissedYield>
				--cRxLock;
1a00166e:	3c01      	subs	r4, #1
1a001670:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a001672:	2c00      	cmp	r4, #0
1a001674:	dd08      	ble.n	1a001688 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001676:	692b      	ldr	r3, [r5, #16]
1a001678:	b133      	cbz	r3, 1a001688 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00167a:	f105 0010 	add.w	r0, r5, #16
1a00167e:	f000 ffab 	bl	1a0025d8 <xTaskRemoveFromEventList>
1a001682:	2800      	cmp	r0, #0
1a001684:	d0f3      	beq.n	1a00166e <prvUnlockQueue+0x48>
1a001686:	e7f0      	b.n	1a00166a <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a001688:	23ff      	movs	r3, #255	; 0xff
1a00168a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a00168e:	f001 fb83 	bl	1a002d98 <vPortExitCritical>
}
1a001692:	bd38      	pop	{r3, r4, r5, pc}

1a001694 <xQueueGenericReset>:
{
1a001694:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a001696:	b940      	cbnz	r0, 1a0016aa <xQueueGenericReset+0x16>
1a001698:	f04f 0320 	mov.w	r3, #32
1a00169c:	f383 8811 	msr	BASEPRI, r3
1a0016a0:	f3bf 8f6f 	isb	sy
1a0016a4:	f3bf 8f4f 	dsb	sy
1a0016a8:	e7fe      	b.n	1a0016a8 <xQueueGenericReset+0x14>
1a0016aa:	4604      	mov	r4, r0
1a0016ac:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a0016ae:	f001 fb51 	bl	1a002d54 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a0016b2:	6821      	ldr	r1, [r4, #0]
1a0016b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0016b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0016b8:	fb03 1002 	mla	r0, r3, r2, r1
1a0016bc:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a0016be:	2000      	movs	r0, #0
1a0016c0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a0016c2:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a0016c4:	3a01      	subs	r2, #1
1a0016c6:	fb02 1303 	mla	r3, r2, r3, r1
1a0016ca:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a0016cc:	23ff      	movs	r3, #255	; 0xff
1a0016ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a0016d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a0016d6:	b9a5      	cbnz	r5, 1a001702 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0016d8:	6923      	ldr	r3, [r4, #16]
1a0016da:	b91b      	cbnz	r3, 1a0016e4 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a0016dc:	f001 fb5c 	bl	1a002d98 <vPortExitCritical>
}
1a0016e0:	2001      	movs	r0, #1
1a0016e2:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0016e4:	f104 0010 	add.w	r0, r4, #16
1a0016e8:	f000 ff76 	bl	1a0025d8 <xTaskRemoveFromEventList>
1a0016ec:	2800      	cmp	r0, #0
1a0016ee:	d0f5      	beq.n	1a0016dc <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a0016f0:	4b08      	ldr	r3, [pc, #32]	; (1a001714 <xQueueGenericReset+0x80>)
1a0016f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0016f6:	601a      	str	r2, [r3, #0]
1a0016f8:	f3bf 8f4f 	dsb	sy
1a0016fc:	f3bf 8f6f 	isb	sy
1a001700:	e7ec      	b.n	1a0016dc <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a001702:	f104 0010 	add.w	r0, r4, #16
1a001706:	f000 fa94 	bl	1a001c32 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a00170a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00170e:	f000 fa90 	bl	1a001c32 <vListInitialise>
1a001712:	e7e3      	b.n	1a0016dc <xQueueGenericReset+0x48>
1a001714:	e000ed04 	.word	0xe000ed04

1a001718 <prvInitialiseNewQueue>:
{
1a001718:	b538      	push	{r3, r4, r5, lr}
1a00171a:	461d      	mov	r5, r3
1a00171c:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a00171e:	460b      	mov	r3, r1
1a001720:	b149      	cbz	r1, 1a001736 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a001722:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a001724:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a001726:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a001728:	2101      	movs	r1, #1
1a00172a:	4620      	mov	r0, r4
1a00172c:	f7ff ffb2 	bl	1a001694 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a001730:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a001734:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a001736:	6024      	str	r4, [r4, #0]
1a001738:	e7f4      	b.n	1a001724 <prvInitialiseNewQueue+0xc>

1a00173a <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a00173a:	b940      	cbnz	r0, 1a00174e <xQueueGenericCreateStatic+0x14>
1a00173c:	f04f 0320 	mov.w	r3, #32
1a001740:	f383 8811 	msr	BASEPRI, r3
1a001744:	f3bf 8f6f 	isb	sy
1a001748:	f3bf 8f4f 	dsb	sy
1a00174c:	e7fe      	b.n	1a00174c <xQueueGenericCreateStatic+0x12>
	{
1a00174e:	b510      	push	{r4, lr}
1a001750:	b084      	sub	sp, #16
1a001752:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a001754:	b153      	cbz	r3, 1a00176c <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a001756:	b192      	cbz	r2, 1a00177e <xQueueGenericCreateStatic+0x44>
1a001758:	b989      	cbnz	r1, 1a00177e <xQueueGenericCreateStatic+0x44>
1a00175a:	f04f 0320 	mov.w	r3, #32
1a00175e:	f383 8811 	msr	BASEPRI, r3
1a001762:	f3bf 8f6f 	isb	sy
1a001766:	f3bf 8f4f 	dsb	sy
1a00176a:	e7fe      	b.n	1a00176a <xQueueGenericCreateStatic+0x30>
1a00176c:	f04f 0320 	mov.w	r3, #32
1a001770:	f383 8811 	msr	BASEPRI, r3
1a001774:	f3bf 8f6f 	isb	sy
1a001778:	f3bf 8f4f 	dsb	sy
1a00177c:	e7fe      	b.n	1a00177c <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a00177e:	b94a      	cbnz	r2, 1a001794 <xQueueGenericCreateStatic+0x5a>
1a001780:	b141      	cbz	r1, 1a001794 <xQueueGenericCreateStatic+0x5a>
1a001782:	f04f 0320 	mov.w	r3, #32
1a001786:	f383 8811 	msr	BASEPRI, r3
1a00178a:	f3bf 8f6f 	isb	sy
1a00178e:	f3bf 8f4f 	dsb	sy
1a001792:	e7fe      	b.n	1a001792 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a001794:	2050      	movs	r0, #80	; 0x50
1a001796:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a001798:	9803      	ldr	r0, [sp, #12]
1a00179a:	2850      	cmp	r0, #80	; 0x50
1a00179c:	d008      	beq.n	1a0017b0 <xQueueGenericCreateStatic+0x76>
1a00179e:	f04f 0320 	mov.w	r3, #32
1a0017a2:	f383 8811 	msr	BASEPRI, r3
1a0017a6:	f3bf 8f6f 	isb	sy
1a0017aa:	f3bf 8f4f 	dsb	sy
1a0017ae:	e7fe      	b.n	1a0017ae <xQueueGenericCreateStatic+0x74>
1a0017b0:	4620      	mov	r0, r4
1a0017b2:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a0017b4:	2301      	movs	r3, #1
1a0017b6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a0017ba:	9400      	str	r4, [sp, #0]
1a0017bc:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a0017c0:	f7ff ffaa 	bl	1a001718 <prvInitialiseNewQueue>
	}
1a0017c4:	4620      	mov	r0, r4
1a0017c6:	b004      	add	sp, #16
1a0017c8:	bd10      	pop	{r4, pc}

1a0017ca <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0017ca:	b940      	cbnz	r0, 1a0017de <xQueueGenericCreate+0x14>
1a0017cc:	f04f 0320 	mov.w	r3, #32
1a0017d0:	f383 8811 	msr	BASEPRI, r3
1a0017d4:	f3bf 8f6f 	isb	sy
1a0017d8:	f3bf 8f4f 	dsb	sy
1a0017dc:	e7fe      	b.n	1a0017dc <xQueueGenericCreate+0x12>
	{
1a0017de:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0017e0:	b083      	sub	sp, #12
1a0017e2:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a0017e4:	b111      	cbz	r1, 1a0017ec <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0017e6:	fb01 f000 	mul.w	r0, r1, r0
1a0017ea:	e000      	b.n	1a0017ee <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a0017ec:	2000      	movs	r0, #0
1a0017ee:	4617      	mov	r7, r2
1a0017f0:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a0017f2:	3050      	adds	r0, #80	; 0x50
1a0017f4:	f7ff fde8 	bl	1a0013c8 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a0017f8:	4605      	mov	r5, r0
1a0017fa:	b150      	cbz	r0, 1a001812 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a0017fc:	2300      	movs	r3, #0
1a0017fe:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a001802:	9000      	str	r0, [sp, #0]
1a001804:	463b      	mov	r3, r7
1a001806:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a00180a:	4621      	mov	r1, r4
1a00180c:	4630      	mov	r0, r6
1a00180e:	f7ff ff83 	bl	1a001718 <prvInitialiseNewQueue>
	}
1a001812:	4628      	mov	r0, r5
1a001814:	b003      	add	sp, #12
1a001816:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a001818 <xQueueGenericSend>:
{
1a001818:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00181a:	b085      	sub	sp, #20
1a00181c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a00181e:	b160      	cbz	r0, 1a00183a <xQueueGenericSend+0x22>
1a001820:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001822:	b999      	cbnz	r1, 1a00184c <xQueueGenericSend+0x34>
1a001824:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001826:	b18a      	cbz	r2, 1a00184c <xQueueGenericSend+0x34>
1a001828:	f04f 0320 	mov.w	r3, #32
1a00182c:	f383 8811 	msr	BASEPRI, r3
1a001830:	f3bf 8f6f 	isb	sy
1a001834:	f3bf 8f4f 	dsb	sy
1a001838:	e7fe      	b.n	1a001838 <xQueueGenericSend+0x20>
1a00183a:	f04f 0320 	mov.w	r3, #32
1a00183e:	f383 8811 	msr	BASEPRI, r3
1a001842:	f3bf 8f6f 	isb	sy
1a001846:	f3bf 8f4f 	dsb	sy
1a00184a:	e7fe      	b.n	1a00184a <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a00184c:	2b02      	cmp	r3, #2
1a00184e:	d10b      	bne.n	1a001868 <xQueueGenericSend+0x50>
1a001850:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a001852:	2a01      	cmp	r2, #1
1a001854:	d008      	beq.n	1a001868 <xQueueGenericSend+0x50>
1a001856:	f04f 0320 	mov.w	r3, #32
1a00185a:	f383 8811 	msr	BASEPRI, r3
1a00185e:	f3bf 8f6f 	isb	sy
1a001862:	f3bf 8f4f 	dsb	sy
1a001866:	e7fe      	b.n	1a001866 <xQueueGenericSend+0x4e>
1a001868:	461e      	mov	r6, r3
1a00186a:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00186c:	f000 ff4c 	bl	1a002708 <xTaskGetSchedulerState>
1a001870:	b950      	cbnz	r0, 1a001888 <xQueueGenericSend+0x70>
1a001872:	9b01      	ldr	r3, [sp, #4]
1a001874:	b153      	cbz	r3, 1a00188c <xQueueGenericSend+0x74>
1a001876:	f04f 0320 	mov.w	r3, #32
1a00187a:	f383 8811 	msr	BASEPRI, r3
1a00187e:	f3bf 8f6f 	isb	sy
1a001882:	f3bf 8f4f 	dsb	sy
1a001886:	e7fe      	b.n	1a001886 <xQueueGenericSend+0x6e>
1a001888:	2500      	movs	r5, #0
1a00188a:	e03a      	b.n	1a001902 <xQueueGenericSend+0xea>
1a00188c:	2500      	movs	r5, #0
1a00188e:	e038      	b.n	1a001902 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001890:	4632      	mov	r2, r6
1a001892:	4639      	mov	r1, r7
1a001894:	4620      	mov	r0, r4
1a001896:	f7ff fe79 	bl	1a00158c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00189a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00189c:	b94b      	cbnz	r3, 1a0018b2 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a00189e:	b1a8      	cbz	r0, 1a0018cc <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a0018a0:	4b3b      	ldr	r3, [pc, #236]	; (1a001990 <xQueueGenericSend+0x178>)
1a0018a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0018a6:	601a      	str	r2, [r3, #0]
1a0018a8:	f3bf 8f4f 	dsb	sy
1a0018ac:	f3bf 8f6f 	isb	sy
1a0018b0:	e00c      	b.n	1a0018cc <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0018b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0018b6:	f000 fe8f 	bl	1a0025d8 <xTaskRemoveFromEventList>
1a0018ba:	b138      	cbz	r0, 1a0018cc <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a0018bc:	4b34      	ldr	r3, [pc, #208]	; (1a001990 <xQueueGenericSend+0x178>)
1a0018be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0018c2:	601a      	str	r2, [r3, #0]
1a0018c4:	f3bf 8f4f 	dsb	sy
1a0018c8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a0018cc:	f001 fa64 	bl	1a002d98 <vPortExitCritical>
				return pdPASS;
1a0018d0:	2001      	movs	r0, #1
}
1a0018d2:	b005      	add	sp, #20
1a0018d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a0018d6:	f001 fa5f 	bl	1a002d98 <vPortExitCritical>
					return errQUEUE_FULL;
1a0018da:	2000      	movs	r0, #0
1a0018dc:	e7f9      	b.n	1a0018d2 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0018de:	a802      	add	r0, sp, #8
1a0018e0:	f000 fec0 	bl	1a002664 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0018e4:	2501      	movs	r5, #1
1a0018e6:	e019      	b.n	1a00191c <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a0018e8:	2300      	movs	r3, #0
1a0018ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0018ee:	e021      	b.n	1a001934 <xQueueGenericSend+0x11c>
1a0018f0:	2300      	movs	r3, #0
1a0018f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0018f6:	e023      	b.n	1a001940 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a0018f8:	4620      	mov	r0, r4
1a0018fa:	f7ff fe94 	bl	1a001626 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0018fe:	f000 fd07 	bl	1a002310 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a001902:	f001 fa27 	bl	1a002d54 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001906:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001908:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00190a:	429a      	cmp	r2, r3
1a00190c:	d3c0      	bcc.n	1a001890 <xQueueGenericSend+0x78>
1a00190e:	2e02      	cmp	r6, #2
1a001910:	d0be      	beq.n	1a001890 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001912:	9b01      	ldr	r3, [sp, #4]
1a001914:	2b00      	cmp	r3, #0
1a001916:	d0de      	beq.n	1a0018d6 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a001918:	2d00      	cmp	r5, #0
1a00191a:	d0e0      	beq.n	1a0018de <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a00191c:	f001 fa3c 	bl	1a002d98 <vPortExitCritical>
		vTaskSuspendAll();
1a001920:	f000 fc5c 	bl	1a0021dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001924:	f001 fa16 	bl	1a002d54 <vPortEnterCritical>
1a001928:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a00192c:	b25b      	sxtb	r3, r3
1a00192e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001932:	d0d9      	beq.n	1a0018e8 <xQueueGenericSend+0xd0>
1a001934:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001938:	b25b      	sxtb	r3, r3
1a00193a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00193e:	d0d7      	beq.n	1a0018f0 <xQueueGenericSend+0xd8>
1a001940:	f001 fa2a 	bl	1a002d98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001944:	a901      	add	r1, sp, #4
1a001946:	a802      	add	r0, sp, #8
1a001948:	f000 fe98 	bl	1a00267c <xTaskCheckForTimeOut>
1a00194c:	b9c8      	cbnz	r0, 1a001982 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a00194e:	4620      	mov	r0, r4
1a001950:	f7ff fe00 	bl	1a001554 <prvIsQueueFull>
1a001954:	2800      	cmp	r0, #0
1a001956:	d0cf      	beq.n	1a0018f8 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a001958:	9901      	ldr	r1, [sp, #4]
1a00195a:	f104 0010 	add.w	r0, r4, #16
1a00195e:	f000 fe07 	bl	1a002570 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001962:	4620      	mov	r0, r4
1a001964:	f7ff fe5f 	bl	1a001626 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001968:	f000 fcd2 	bl	1a002310 <xTaskResumeAll>
1a00196c:	2800      	cmp	r0, #0
1a00196e:	d1c8      	bne.n	1a001902 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a001970:	4b07      	ldr	r3, [pc, #28]	; (1a001990 <xQueueGenericSend+0x178>)
1a001972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001976:	601a      	str	r2, [r3, #0]
1a001978:	f3bf 8f4f 	dsb	sy
1a00197c:	f3bf 8f6f 	isb	sy
1a001980:	e7bf      	b.n	1a001902 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a001982:	4620      	mov	r0, r4
1a001984:	f7ff fe4f 	bl	1a001626 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001988:	f000 fcc2 	bl	1a002310 <xTaskResumeAll>
			return errQUEUE_FULL;
1a00198c:	2000      	movs	r0, #0
1a00198e:	e7a0      	b.n	1a0018d2 <xQueueGenericSend+0xba>
1a001990:	e000ed04 	.word	0xe000ed04

1a001994 <xQueueGenericSendFromISR>:
{
1a001994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a001998:	b160      	cbz	r0, 1a0019b4 <xQueueGenericSendFromISR+0x20>
1a00199a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00199c:	b999      	cbnz	r1, 1a0019c6 <xQueueGenericSendFromISR+0x32>
1a00199e:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a0019a0:	b188      	cbz	r0, 1a0019c6 <xQueueGenericSendFromISR+0x32>
1a0019a2:	f04f 0320 	mov.w	r3, #32
1a0019a6:	f383 8811 	msr	BASEPRI, r3
1a0019aa:	f3bf 8f6f 	isb	sy
1a0019ae:	f3bf 8f4f 	dsb	sy
1a0019b2:	e7fe      	b.n	1a0019b2 <xQueueGenericSendFromISR+0x1e>
1a0019b4:	f04f 0320 	mov.w	r3, #32
1a0019b8:	f383 8811 	msr	BASEPRI, r3
1a0019bc:	f3bf 8f6f 	isb	sy
1a0019c0:	f3bf 8f4f 	dsb	sy
1a0019c4:	e7fe      	b.n	1a0019c4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0019c6:	2b02      	cmp	r3, #2
1a0019c8:	d10b      	bne.n	1a0019e2 <xQueueGenericSendFromISR+0x4e>
1a0019ca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a0019cc:	2801      	cmp	r0, #1
1a0019ce:	d008      	beq.n	1a0019e2 <xQueueGenericSendFromISR+0x4e>
1a0019d0:	f04f 0320 	mov.w	r3, #32
1a0019d4:	f383 8811 	msr	BASEPRI, r3
1a0019d8:	f3bf 8f6f 	isb	sy
1a0019dc:	f3bf 8f4f 	dsb	sy
1a0019e0:	e7fe      	b.n	1a0019e0 <xQueueGenericSendFromISR+0x4c>
1a0019e2:	461f      	mov	r7, r3
1a0019e4:	4690      	mov	r8, r2
1a0019e6:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a0019e8:	f001 fade 	bl	1a002fa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a0019ec:	f3ef 8611 	mrs	r6, BASEPRI
1a0019f0:	f04f 0320 	mov.w	r3, #32
1a0019f4:	f383 8811 	msr	BASEPRI, r3
1a0019f8:	f3bf 8f6f 	isb	sy
1a0019fc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001a00:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001a02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001a04:	429a      	cmp	r2, r3
1a001a06:	d303      	bcc.n	1a001a10 <xQueueGenericSendFromISR+0x7c>
1a001a08:	2f02      	cmp	r7, #2
1a001a0a:	d001      	beq.n	1a001a10 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a001a0c:	2000      	movs	r0, #0
1a001a0e:	e00f      	b.n	1a001a30 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a001a10:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a001a14:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001a16:	463a      	mov	r2, r7
1a001a18:	4649      	mov	r1, r9
1a001a1a:	4620      	mov	r0, r4
1a001a1c:	f7ff fdb6 	bl	1a00158c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a001a20:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001a24:	d008      	beq.n	1a001a38 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a001a26:	1c6b      	adds	r3, r5, #1
1a001a28:	b25b      	sxtb	r3, r3
1a001a2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a001a2e:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a001a30:	f386 8811 	msr	BASEPRI, r6
}
1a001a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001a38:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001a3a:	b15b      	cbz	r3, 1a001a54 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001a3c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001a40:	f000 fdca 	bl	1a0025d8 <xTaskRemoveFromEventList>
1a001a44:	b140      	cbz	r0, 1a001a58 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a001a46:	f1b8 0f00 	cmp.w	r8, #0
1a001a4a:	d007      	beq.n	1a001a5c <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a001a4c:	2001      	movs	r0, #1
1a001a4e:	f8c8 0000 	str.w	r0, [r8]
1a001a52:	e7ed      	b.n	1a001a30 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a001a54:	2001      	movs	r0, #1
1a001a56:	e7eb      	b.n	1a001a30 <xQueueGenericSendFromISR+0x9c>
1a001a58:	2001      	movs	r0, #1
1a001a5a:	e7e9      	b.n	1a001a30 <xQueueGenericSendFromISR+0x9c>
1a001a5c:	2001      	movs	r0, #1
1a001a5e:	e7e7      	b.n	1a001a30 <xQueueGenericSendFromISR+0x9c>

1a001a60 <xQueueReceive>:
{
1a001a60:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001a62:	b085      	sub	sp, #20
1a001a64:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001a66:	b160      	cbz	r0, 1a001a82 <xQueueReceive+0x22>
1a001a68:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001a6a:	b999      	cbnz	r1, 1a001a94 <xQueueReceive+0x34>
1a001a6c:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001a6e:	b18b      	cbz	r3, 1a001a94 <xQueueReceive+0x34>
	__asm volatile
1a001a70:	f04f 0320 	mov.w	r3, #32
1a001a74:	f383 8811 	msr	BASEPRI, r3
1a001a78:	f3bf 8f6f 	isb	sy
1a001a7c:	f3bf 8f4f 	dsb	sy
1a001a80:	e7fe      	b.n	1a001a80 <xQueueReceive+0x20>
1a001a82:	f04f 0320 	mov.w	r3, #32
1a001a86:	f383 8811 	msr	BASEPRI, r3
1a001a8a:	f3bf 8f6f 	isb	sy
1a001a8e:	f3bf 8f4f 	dsb	sy
1a001a92:	e7fe      	b.n	1a001a92 <xQueueReceive+0x32>
1a001a94:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001a96:	f000 fe37 	bl	1a002708 <xTaskGetSchedulerState>
1a001a9a:	b950      	cbnz	r0, 1a001ab2 <xQueueReceive+0x52>
1a001a9c:	9b01      	ldr	r3, [sp, #4]
1a001a9e:	b153      	cbz	r3, 1a001ab6 <xQueueReceive+0x56>
1a001aa0:	f04f 0320 	mov.w	r3, #32
1a001aa4:	f383 8811 	msr	BASEPRI, r3
1a001aa8:	f3bf 8f6f 	isb	sy
1a001aac:	f3bf 8f4f 	dsb	sy
1a001ab0:	e7fe      	b.n	1a001ab0 <xQueueReceive+0x50>
1a001ab2:	2600      	movs	r6, #0
1a001ab4:	e03e      	b.n	1a001b34 <xQueueReceive+0xd4>
1a001ab6:	2600      	movs	r6, #0
1a001ab8:	e03c      	b.n	1a001b34 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a001aba:	4639      	mov	r1, r7
1a001abc:	4620      	mov	r0, r4
1a001abe:	f7ff fda0 	bl	1a001602 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a001ac2:	3d01      	subs	r5, #1
1a001ac4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001ac6:	6923      	ldr	r3, [r4, #16]
1a001ac8:	b923      	cbnz	r3, 1a001ad4 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a001aca:	f001 f965 	bl	1a002d98 <vPortExitCritical>
				return pdPASS;
1a001ace:	2001      	movs	r0, #1
}
1a001ad0:	b005      	add	sp, #20
1a001ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001ad4:	f104 0010 	add.w	r0, r4, #16
1a001ad8:	f000 fd7e 	bl	1a0025d8 <xTaskRemoveFromEventList>
1a001adc:	2800      	cmp	r0, #0
1a001ade:	d0f4      	beq.n	1a001aca <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a001ae0:	4b34      	ldr	r3, [pc, #208]	; (1a001bb4 <xQueueReceive+0x154>)
1a001ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001ae6:	601a      	str	r2, [r3, #0]
1a001ae8:	f3bf 8f4f 	dsb	sy
1a001aec:	f3bf 8f6f 	isb	sy
1a001af0:	e7eb      	b.n	1a001aca <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a001af2:	f001 f951 	bl	1a002d98 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001af6:	2000      	movs	r0, #0
1a001af8:	e7ea      	b.n	1a001ad0 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001afa:	a802      	add	r0, sp, #8
1a001afc:	f000 fdb2 	bl	1a002664 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001b00:	2601      	movs	r6, #1
1a001b02:	e021      	b.n	1a001b48 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a001b04:	2300      	movs	r3, #0
1a001b06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001b0a:	e029      	b.n	1a001b60 <xQueueReceive+0x100>
1a001b0c:	2300      	movs	r3, #0
1a001b0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001b12:	e02b      	b.n	1a001b6c <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a001b14:	4620      	mov	r0, r4
1a001b16:	f7ff fd86 	bl	1a001626 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001b1a:	f000 fbf9 	bl	1a002310 <xTaskResumeAll>
1a001b1e:	e009      	b.n	1a001b34 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a001b20:	4620      	mov	r0, r4
1a001b22:	f7ff fd80 	bl	1a001626 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001b26:	f000 fbf3 	bl	1a002310 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001b2a:	4620      	mov	r0, r4
1a001b2c:	f7ff fd21 	bl	1a001572 <prvIsQueueEmpty>
1a001b30:	2800      	cmp	r0, #0
1a001b32:	d13d      	bne.n	1a001bb0 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a001b34:	f001 f90e 	bl	1a002d54 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001b38:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001b3a:	2d00      	cmp	r5, #0
1a001b3c:	d1bd      	bne.n	1a001aba <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001b3e:	9b01      	ldr	r3, [sp, #4]
1a001b40:	2b00      	cmp	r3, #0
1a001b42:	d0d6      	beq.n	1a001af2 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a001b44:	2e00      	cmp	r6, #0
1a001b46:	d0d8      	beq.n	1a001afa <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a001b48:	f001 f926 	bl	1a002d98 <vPortExitCritical>
		vTaskSuspendAll();
1a001b4c:	f000 fb46 	bl	1a0021dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001b50:	f001 f900 	bl	1a002d54 <vPortEnterCritical>
1a001b54:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001b58:	b25b      	sxtb	r3, r3
1a001b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001b5e:	d0d1      	beq.n	1a001b04 <xQueueReceive+0xa4>
1a001b60:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001b64:	b25b      	sxtb	r3, r3
1a001b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001b6a:	d0cf      	beq.n	1a001b0c <xQueueReceive+0xac>
1a001b6c:	f001 f914 	bl	1a002d98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001b70:	a901      	add	r1, sp, #4
1a001b72:	a802      	add	r0, sp, #8
1a001b74:	f000 fd82 	bl	1a00267c <xTaskCheckForTimeOut>
1a001b78:	2800      	cmp	r0, #0
1a001b7a:	d1d1      	bne.n	1a001b20 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001b7c:	4620      	mov	r0, r4
1a001b7e:	f7ff fcf8 	bl	1a001572 <prvIsQueueEmpty>
1a001b82:	2800      	cmp	r0, #0
1a001b84:	d0c6      	beq.n	1a001b14 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001b86:	9901      	ldr	r1, [sp, #4]
1a001b88:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001b8c:	f000 fcf0 	bl	1a002570 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001b90:	4620      	mov	r0, r4
1a001b92:	f7ff fd48 	bl	1a001626 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001b96:	f000 fbbb 	bl	1a002310 <xTaskResumeAll>
1a001b9a:	2800      	cmp	r0, #0
1a001b9c:	d1ca      	bne.n	1a001b34 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a001b9e:	4b05      	ldr	r3, [pc, #20]	; (1a001bb4 <xQueueReceive+0x154>)
1a001ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001ba4:	601a      	str	r2, [r3, #0]
1a001ba6:	f3bf 8f4f 	dsb	sy
1a001baa:	f3bf 8f6f 	isb	sy
1a001bae:	e7c1      	b.n	1a001b34 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a001bb0:	2000      	movs	r0, #0
1a001bb2:	e78d      	b.n	1a001ad0 <xQueueReceive+0x70>
1a001bb4:	e000ed04 	.word	0xe000ed04

1a001bb8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001bb8:	2300      	movs	r3, #0
1a001bba:	2b07      	cmp	r3, #7
1a001bbc:	d80c      	bhi.n	1a001bd8 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001bbe:	4a07      	ldr	r2, [pc, #28]	; (1a001bdc <vQueueAddToRegistry+0x24>)
1a001bc0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a001bc4:	b10a      	cbz	r2, 1a001bca <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001bc6:	3301      	adds	r3, #1
1a001bc8:	e7f7      	b.n	1a001bba <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a001bca:	4a04      	ldr	r2, [pc, #16]	; (1a001bdc <vQueueAddToRegistry+0x24>)
1a001bcc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001bd0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001bd4:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a001bd6:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a001bd8:	4770      	bx	lr
1a001bda:	bf00      	nop
1a001bdc:	100079bc 	.word	0x100079bc

1a001be0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001be0:	b570      	push	{r4, r5, r6, lr}
1a001be2:	4604      	mov	r4, r0
1a001be4:	460d      	mov	r5, r1
1a001be6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001be8:	f001 f8b4 	bl	1a002d54 <vPortEnterCritical>
1a001bec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001bf0:	b25b      	sxtb	r3, r3
1a001bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001bf6:	d00d      	beq.n	1a001c14 <vQueueWaitForMessageRestricted+0x34>
1a001bf8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001bfc:	b25b      	sxtb	r3, r3
1a001bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001c02:	d00b      	beq.n	1a001c1c <vQueueWaitForMessageRestricted+0x3c>
1a001c04:	f001 f8c8 	bl	1a002d98 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001c08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001c0a:	b15b      	cbz	r3, 1a001c24 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001c0c:	4620      	mov	r0, r4
1a001c0e:	f7ff fd0a 	bl	1a001626 <prvUnlockQueue>
	}
1a001c12:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a001c14:	2300      	movs	r3, #0
1a001c16:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001c1a:	e7ed      	b.n	1a001bf8 <vQueueWaitForMessageRestricted+0x18>
1a001c1c:	2300      	movs	r3, #0
1a001c1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001c22:	e7ef      	b.n	1a001c04 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001c24:	4632      	mov	r2, r6
1a001c26:	4629      	mov	r1, r5
1a001c28:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001c2c:	f000 fcb8 	bl	1a0025a0 <vTaskPlaceOnEventListRestricted>
1a001c30:	e7ec      	b.n	1a001c0c <vQueueWaitForMessageRestricted+0x2c>

1a001c32 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001c32:	f100 0308 	add.w	r3, r0, #8
1a001c36:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a001c38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001c3c:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001c3e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001c40:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001c42:	2300      	movs	r3, #0
1a001c44:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a001c46:	4770      	bx	lr

1a001c48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001c48:	2300      	movs	r3, #0
1a001c4a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001c4c:	4770      	bx	lr

1a001c4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001c4e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001c50:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a001c52:	689a      	ldr	r2, [r3, #8]
1a001c54:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a001c56:	689a      	ldr	r2, [r3, #8]
1a001c58:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001c5a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001c5c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001c5e:	6803      	ldr	r3, [r0, #0]
1a001c60:	3301      	adds	r3, #1
1a001c62:	6003      	str	r3, [r0, #0]
}
1a001c64:	4770      	bx	lr

1a001c66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a001c66:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001c68:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001c6a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001c6e:	d002      	beq.n	1a001c76 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001c70:	f100 0208 	add.w	r2, r0, #8
1a001c74:	e002      	b.n	1a001c7c <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a001c76:	6902      	ldr	r2, [r0, #16]
1a001c78:	e004      	b.n	1a001c84 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001c7a:	461a      	mov	r2, r3
1a001c7c:	6853      	ldr	r3, [r2, #4]
1a001c7e:	681c      	ldr	r4, [r3, #0]
1a001c80:	42ac      	cmp	r4, r5
1a001c82:	d9fa      	bls.n	1a001c7a <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a001c84:	6853      	ldr	r3, [r2, #4]
1a001c86:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001c88:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001c8a:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001c8c:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001c8e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001c90:	6803      	ldr	r3, [r0, #0]
1a001c92:	3301      	adds	r3, #1
1a001c94:	6003      	str	r3, [r0, #0]
}
1a001c96:	bc30      	pop	{r4, r5}
1a001c98:	4770      	bx	lr

1a001c9a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001c9a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001c9c:	6842      	ldr	r2, [r0, #4]
1a001c9e:	6881      	ldr	r1, [r0, #8]
1a001ca0:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a001ca2:	6882      	ldr	r2, [r0, #8]
1a001ca4:	6841      	ldr	r1, [r0, #4]
1a001ca6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001ca8:	685a      	ldr	r2, [r3, #4]
1a001caa:	4282      	cmp	r2, r0
1a001cac:	d006      	beq.n	1a001cbc <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001cae:	2200      	movs	r2, #0
1a001cb0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a001cb2:	681a      	ldr	r2, [r3, #0]
1a001cb4:	3a01      	subs	r2, #1
1a001cb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001cb8:	6818      	ldr	r0, [r3, #0]
}
1a001cba:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001cbc:	6882      	ldr	r2, [r0, #8]
1a001cbe:	605a      	str	r2, [r3, #4]
1a001cc0:	e7f5      	b.n	1a001cae <uxListRemove+0x14>
1a001cc2:	Address 0x000000001a001cc2 is out of bounds.


1a001cc4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a001cc4:	4b03      	ldr	r3, [pc, #12]	; (1a001cd4 <vApplicationGetIdleTaskMemory+0x10>)
1a001cc6:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a001cc8:	4b03      	ldr	r3, [pc, #12]	; (1a001cd8 <vApplicationGetIdleTaskMemory+0x14>)
1a001cca:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001ccc:	235a      	movs	r3, #90	; 0x5a
1a001cce:	6013      	str	r3, [r2, #0]
}
1a001cd0:	4770      	bx	lr
1a001cd2:	bf00      	nop
1a001cd4:	100075a0 	.word	0x100075a0
1a001cd8:	10006e98 	.word	0x10006e98

1a001cdc <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001cdc:	4b03      	ldr	r3, [pc, #12]	; (1a001cec <vApplicationGetTimerTaskMemory+0x10>)
1a001cde:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a001ce0:	4b03      	ldr	r3, [pc, #12]	; (1a001cf0 <vApplicationGetTimerTaskMemory+0x14>)
1a001ce2:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a001ce4:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a001ce8:	6013      	str	r3, [r2, #0]
1a001cea:	4770      	bx	lr
1a001cec:	10007600 	.word	0x10007600
1a001cf0:	10007000 	.word	0x10007000

1a001cf4 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a001cf4:	b510      	push	{r4, lr}
1a001cf6:	b082      	sub	sp, #8
1a001cf8:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a001cfa:	9001      	str	r0, [sp, #4]
1a001cfc:	2300      	movs	r3, #0
1a001cfe:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a001d00:	f001 f828 	bl	1a002d54 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a001d04:	9901      	ldr	r1, [sp, #4]
1a001d06:	4622      	mov	r2, r4
1a001d08:	4804      	ldr	r0, [pc, #16]	; (1a001d1c <vAssertCalled+0x28>)
1a001d0a:	f004 fa93 	bl	1a006234 <printf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a001d0e:	9b00      	ldr	r3, [sp, #0]
1a001d10:	2b00      	cmp	r3, #0
1a001d12:	d0fc      	beq.n	1a001d0e <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a001d14:	f001 f840 	bl	1a002d98 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a001d18:	b002      	add	sp, #8
1a001d1a:	bd10      	pop	{r4, pc}
1a001d1c:	1a00a68c 	.word	0x1a00a68c

1a001d20 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a001d20:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a001d22:	4804      	ldr	r0, [pc, #16]	; (1a001d34 <vApplicationMallocFailedHook+0x14>)
1a001d24:	f004 fae8 	bl	1a0062f8 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a001d28:	4903      	ldr	r1, [pc, #12]	; (1a001d38 <vApplicationMallocFailedHook+0x18>)
1a001d2a:	202c      	movs	r0, #44	; 0x2c
1a001d2c:	f7ff ffe2 	bl	1a001cf4 <vAssertCalled>
}
1a001d30:	bd08      	pop	{r3, pc}
1a001d32:	bf00      	nop
1a001d34:	1a00a618 	.word	0x1a00a618
1a001d38:	1a00a63c 	.word	0x1a00a63c

1a001d3c <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a001d3c:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a001d3e:	4804      	ldr	r0, [pc, #16]	; (1a001d50 <vApplicationStackOverflowHook+0x14>)
1a001d40:	f004 fa78 	bl	1a006234 <printf>
   vAssertCalled( __LINE__, __FILE__ );
1a001d44:	4903      	ldr	r1, [pc, #12]	; (1a001d54 <vApplicationStackOverflowHook+0x18>)
1a001d46:	2050      	movs	r0, #80	; 0x50
1a001d48:	f7ff ffd4 	bl	1a001cf4 <vAssertCalled>
}
1a001d4c:	bd08      	pop	{r3, pc}
1a001d4e:	bf00      	nop
1a001d50:	1a00a65c 	.word	0x1a00a65c
1a001d54:	1a00a63c 	.word	0x1a00a63c

1a001d58 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001d58:	4b08      	ldr	r3, [pc, #32]	; (1a001d7c <prvResetNextTaskUnblockTime+0x24>)
1a001d5a:	681b      	ldr	r3, [r3, #0]
1a001d5c:	681b      	ldr	r3, [r3, #0]
1a001d5e:	b13b      	cbz	r3, 1a001d70 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001d60:	4b06      	ldr	r3, [pc, #24]	; (1a001d7c <prvResetNextTaskUnblockTime+0x24>)
1a001d62:	681b      	ldr	r3, [r3, #0]
1a001d64:	68db      	ldr	r3, [r3, #12]
1a001d66:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001d68:	685a      	ldr	r2, [r3, #4]
1a001d6a:	4b05      	ldr	r3, [pc, #20]	; (1a001d80 <prvResetNextTaskUnblockTime+0x28>)
1a001d6c:	601a      	str	r2, [r3, #0]
	}
}
1a001d6e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a001d70:	4b03      	ldr	r3, [pc, #12]	; (1a001d80 <prvResetNextTaskUnblockTime+0x28>)
1a001d72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001d76:	601a      	str	r2, [r3, #0]
1a001d78:	4770      	bx	lr
1a001d7a:	bf00      	nop
1a001d7c:	10007664 	.word	0x10007664
1a001d80:	10007738 	.word	0x10007738

1a001d84 <prvInitialiseNewTask>:
{
1a001d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001d88:	4681      	mov	r9, r0
1a001d8a:	460d      	mov	r5, r1
1a001d8c:	4617      	mov	r7, r2
1a001d8e:	469a      	mov	sl, r3
1a001d90:	9e08      	ldr	r6, [sp, #32]
1a001d92:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a001d96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001d98:	0092      	lsls	r2, r2, #2
1a001d9a:	21a5      	movs	r1, #165	; 0xa5
1a001d9c:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001d9e:	f004 f9f3 	bl	1a006188 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001da2:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001da4:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001da8:	3a01      	subs	r2, #1
1a001daa:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001dae:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001db2:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001db4:	2300      	movs	r3, #0
1a001db6:	2b0f      	cmp	r3, #15
1a001db8:	d807      	bhi.n	1a001dca <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001dba:	5ce9      	ldrb	r1, [r5, r3]
1a001dbc:	18e2      	adds	r2, r4, r3
1a001dbe:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a001dc2:	5cea      	ldrb	r2, [r5, r3]
1a001dc4:	b10a      	cbz	r2, 1a001dca <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001dc6:	3301      	adds	r3, #1
1a001dc8:	e7f5      	b.n	1a001db6 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001dca:	2300      	movs	r3, #0
1a001dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001dd0:	2e06      	cmp	r6, #6
1a001dd2:	d900      	bls.n	1a001dd6 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001dd4:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001dd6:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001dd8:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001dda:	2500      	movs	r5, #0
1a001ddc:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001dde:	1d20      	adds	r0, r4, #4
1a001de0:	f7ff ff32 	bl	1a001c48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001de4:	f104 0018 	add.w	r0, r4, #24
1a001de8:	f7ff ff2e 	bl	1a001c48 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001dec:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001dee:	f1c6 0607 	rsb	r6, r6, #7
1a001df2:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001df4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001df6:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001df8:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001dfc:	4652      	mov	r2, sl
1a001dfe:	4649      	mov	r1, r9
1a001e00:	4638      	mov	r0, r7
1a001e02:	f000 ff7d 	bl	1a002d00 <pxPortInitialiseStack>
1a001e06:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001e08:	f1b8 0f00 	cmp.w	r8, #0
1a001e0c:	d001      	beq.n	1a001e12 <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001e0e:	f8c8 4000 	str.w	r4, [r8]
}
1a001e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001e16:	Address 0x000000001a001e16 is out of bounds.


1a001e18 <prvInitialiseTaskLists>:
{
1a001e18:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001e1a:	2400      	movs	r4, #0
1a001e1c:	e007      	b.n	1a001e2e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001e1e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001e22:	0093      	lsls	r3, r2, #2
1a001e24:	480e      	ldr	r0, [pc, #56]	; (1a001e60 <prvInitialiseTaskLists+0x48>)
1a001e26:	4418      	add	r0, r3
1a001e28:	f7ff ff03 	bl	1a001c32 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001e2c:	3401      	adds	r4, #1
1a001e2e:	2c06      	cmp	r4, #6
1a001e30:	d9f5      	bls.n	1a001e1e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a001e32:	4d0c      	ldr	r5, [pc, #48]	; (1a001e64 <prvInitialiseTaskLists+0x4c>)
1a001e34:	4628      	mov	r0, r5
1a001e36:	f7ff fefc 	bl	1a001c32 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001e3a:	4c0b      	ldr	r4, [pc, #44]	; (1a001e68 <prvInitialiseTaskLists+0x50>)
1a001e3c:	4620      	mov	r0, r4
1a001e3e:	f7ff fef8 	bl	1a001c32 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a001e42:	480a      	ldr	r0, [pc, #40]	; (1a001e6c <prvInitialiseTaskLists+0x54>)
1a001e44:	f7ff fef5 	bl	1a001c32 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001e48:	4809      	ldr	r0, [pc, #36]	; (1a001e70 <prvInitialiseTaskLists+0x58>)
1a001e4a:	f7ff fef2 	bl	1a001c32 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001e4e:	4809      	ldr	r0, [pc, #36]	; (1a001e74 <prvInitialiseTaskLists+0x5c>)
1a001e50:	f7ff feef 	bl	1a001c32 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001e54:	4b08      	ldr	r3, [pc, #32]	; (1a001e78 <prvInitialiseTaskLists+0x60>)
1a001e56:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001e58:	4b08      	ldr	r3, [pc, #32]	; (1a001e7c <prvInitialiseTaskLists+0x64>)
1a001e5a:	601c      	str	r4, [r3, #0]
}
1a001e5c:	bd38      	pop	{r3, r4, r5, pc}
1a001e5e:	bf00      	nop
1a001e60:	1000766c 	.word	0x1000766c
1a001e64:	10007710 	.word	0x10007710
1a001e68:	10007724 	.word	0x10007724
1a001e6c:	10007740 	.word	0x10007740
1a001e70:	1000776c 	.word	0x1000776c
1a001e74:	10007758 	.word	0x10007758
1a001e78:	10007664 	.word	0x10007664
1a001e7c:	10007668 	.word	0x10007668

1a001e80 <prvAddNewTaskToReadyList>:
{
1a001e80:	b510      	push	{r4, lr}
1a001e82:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001e84:	f000 ff66 	bl	1a002d54 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001e88:	4a21      	ldr	r2, [pc, #132]	; (1a001f10 <prvAddNewTaskToReadyList+0x90>)
1a001e8a:	6813      	ldr	r3, [r2, #0]
1a001e8c:	3301      	adds	r3, #1
1a001e8e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001e90:	4b20      	ldr	r3, [pc, #128]	; (1a001f14 <prvAddNewTaskToReadyList+0x94>)
1a001e92:	681b      	ldr	r3, [r3, #0]
1a001e94:	b15b      	cbz	r3, 1a001eae <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a001e96:	4b20      	ldr	r3, [pc, #128]	; (1a001f18 <prvAddNewTaskToReadyList+0x98>)
1a001e98:	681b      	ldr	r3, [r3, #0]
1a001e9a:	b96b      	cbnz	r3, 1a001eb8 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001e9c:	4b1d      	ldr	r3, [pc, #116]	; (1a001f14 <prvAddNewTaskToReadyList+0x94>)
1a001e9e:	681b      	ldr	r3, [r3, #0]
1a001ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001ea2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001ea4:	429a      	cmp	r2, r3
1a001ea6:	d807      	bhi.n	1a001eb8 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001ea8:	4b1a      	ldr	r3, [pc, #104]	; (1a001f14 <prvAddNewTaskToReadyList+0x94>)
1a001eaa:	601c      	str	r4, [r3, #0]
1a001eac:	e004      	b.n	1a001eb8 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a001eae:	4b19      	ldr	r3, [pc, #100]	; (1a001f14 <prvAddNewTaskToReadyList+0x94>)
1a001eb0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a001eb2:	6813      	ldr	r3, [r2, #0]
1a001eb4:	2b01      	cmp	r3, #1
1a001eb6:	d027      	beq.n	1a001f08 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001eb8:	4a18      	ldr	r2, [pc, #96]	; (1a001f1c <prvAddNewTaskToReadyList+0x9c>)
1a001eba:	6813      	ldr	r3, [r2, #0]
1a001ebc:	3301      	adds	r3, #1
1a001ebe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001ec0:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a001ec2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001ec4:	2201      	movs	r2, #1
1a001ec6:	409a      	lsls	r2, r3
1a001ec8:	4915      	ldr	r1, [pc, #84]	; (1a001f20 <prvAddNewTaskToReadyList+0xa0>)
1a001eca:	6808      	ldr	r0, [r1, #0]
1a001ecc:	4302      	orrs	r2, r0
1a001ece:	600a      	str	r2, [r1, #0]
1a001ed0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001ed4:	009a      	lsls	r2, r3, #2
1a001ed6:	1d21      	adds	r1, r4, #4
1a001ed8:	4812      	ldr	r0, [pc, #72]	; (1a001f24 <prvAddNewTaskToReadyList+0xa4>)
1a001eda:	4410      	add	r0, r2
1a001edc:	f7ff feb7 	bl	1a001c4e <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001ee0:	f000 ff5a 	bl	1a002d98 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001ee4:	4b0c      	ldr	r3, [pc, #48]	; (1a001f18 <prvAddNewTaskToReadyList+0x98>)
1a001ee6:	681b      	ldr	r3, [r3, #0]
1a001ee8:	b16b      	cbz	r3, 1a001f06 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001eea:	4b0a      	ldr	r3, [pc, #40]	; (1a001f14 <prvAddNewTaskToReadyList+0x94>)
1a001eec:	681b      	ldr	r3, [r3, #0]
1a001eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001ef0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001ef2:	429a      	cmp	r2, r3
1a001ef4:	d207      	bcs.n	1a001f06 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a001ef6:	4b0c      	ldr	r3, [pc, #48]	; (1a001f28 <prvAddNewTaskToReadyList+0xa8>)
1a001ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001efc:	601a      	str	r2, [r3, #0]
1a001efe:	f3bf 8f4f 	dsb	sy
1a001f02:	f3bf 8f6f 	isb	sy
}
1a001f06:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001f08:	f7ff ff86 	bl	1a001e18 <prvInitialiseTaskLists>
1a001f0c:	e7d4      	b.n	1a001eb8 <prvAddNewTaskToReadyList+0x38>
1a001f0e:	bf00      	nop
1a001f10:	100076f8 	.word	0x100076f8
1a001f14:	10007660 	.word	0x10007660
1a001f18:	10007754 	.word	0x10007754
1a001f1c:	10007708 	.word	0x10007708
1a001f20:	1000770c 	.word	0x1000770c
1a001f24:	1000766c 	.word	0x1000766c
1a001f28:	e000ed04 	.word	0xe000ed04

1a001f2c <prvDeleteTCB>:
	{
1a001f2c:	b510      	push	{r4, lr}
1a001f2e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a001f30:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001f34:	b933      	cbnz	r3, 1a001f44 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a001f36:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001f38:	f7ff fad4 	bl	1a0014e4 <vPortFree>
				vPortFree( pxTCB );
1a001f3c:	4620      	mov	r0, r4
1a001f3e:	f7ff fad1 	bl	1a0014e4 <vPortFree>
	}
1a001f42:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001f44:	2b01      	cmp	r3, #1
1a001f46:	d00a      	beq.n	1a001f5e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001f48:	2b02      	cmp	r3, #2
1a001f4a:	d0fa      	beq.n	1a001f42 <prvDeleteTCB+0x16>
1a001f4c:	f04f 0320 	mov.w	r3, #32
1a001f50:	f383 8811 	msr	BASEPRI, r3
1a001f54:	f3bf 8f6f 	isb	sy
1a001f58:	f3bf 8f4f 	dsb	sy
1a001f5c:	e7fe      	b.n	1a001f5c <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a001f5e:	f7ff fac1 	bl	1a0014e4 <vPortFree>
1a001f62:	e7ee      	b.n	1a001f42 <prvDeleteTCB+0x16>

1a001f64 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001f64:	4b0f      	ldr	r3, [pc, #60]	; (1a001fa4 <prvCheckTasksWaitingTermination+0x40>)
1a001f66:	681b      	ldr	r3, [r3, #0]
1a001f68:	b1d3      	cbz	r3, 1a001fa0 <prvCheckTasksWaitingTermination+0x3c>
{
1a001f6a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001f6c:	f000 fef2 	bl	1a002d54 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001f70:	4b0d      	ldr	r3, [pc, #52]	; (1a001fa8 <prvCheckTasksWaitingTermination+0x44>)
1a001f72:	68db      	ldr	r3, [r3, #12]
1a001f74:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001f76:	1d20      	adds	r0, r4, #4
1a001f78:	f7ff fe8f 	bl	1a001c9a <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001f7c:	4a0b      	ldr	r2, [pc, #44]	; (1a001fac <prvCheckTasksWaitingTermination+0x48>)
1a001f7e:	6813      	ldr	r3, [r2, #0]
1a001f80:	3b01      	subs	r3, #1
1a001f82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001f84:	4a07      	ldr	r2, [pc, #28]	; (1a001fa4 <prvCheckTasksWaitingTermination+0x40>)
1a001f86:	6813      	ldr	r3, [r2, #0]
1a001f88:	3b01      	subs	r3, #1
1a001f8a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001f8c:	f000 ff04 	bl	1a002d98 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a001f90:	4620      	mov	r0, r4
1a001f92:	f7ff ffcb 	bl	1a001f2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001f96:	4b03      	ldr	r3, [pc, #12]	; (1a001fa4 <prvCheckTasksWaitingTermination+0x40>)
1a001f98:	681b      	ldr	r3, [r3, #0]
1a001f9a:	2b00      	cmp	r3, #0
1a001f9c:	d1e6      	bne.n	1a001f6c <prvCheckTasksWaitingTermination+0x8>
}
1a001f9e:	bd10      	pop	{r4, pc}
1a001fa0:	4770      	bx	lr
1a001fa2:	bf00      	nop
1a001fa4:	100076fc 	.word	0x100076fc
1a001fa8:	1000776c 	.word	0x1000776c
1a001fac:	100076f8 	.word	0x100076f8

1a001fb0 <prvIdleTask>:
{
1a001fb0:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a001fb2:	f7ff ffd7 	bl	1a001f64 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a001fb6:	4b06      	ldr	r3, [pc, #24]	; (1a001fd0 <prvIdleTask+0x20>)
1a001fb8:	681b      	ldr	r3, [r3, #0]
1a001fba:	2b01      	cmp	r3, #1
1a001fbc:	d9f9      	bls.n	1a001fb2 <prvIdleTask+0x2>
				taskYIELD();
1a001fbe:	4b05      	ldr	r3, [pc, #20]	; (1a001fd4 <prvIdleTask+0x24>)
1a001fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001fc4:	601a      	str	r2, [r3, #0]
1a001fc6:	f3bf 8f4f 	dsb	sy
1a001fca:	f3bf 8f6f 	isb	sy
1a001fce:	e7f0      	b.n	1a001fb2 <prvIdleTask+0x2>
1a001fd0:	1000766c 	.word	0x1000766c
1a001fd4:	e000ed04 	.word	0xe000ed04

1a001fd8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001fd8:	b570      	push	{r4, r5, r6, lr}
1a001fda:	4604      	mov	r4, r0
1a001fdc:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a001fde:	4b1d      	ldr	r3, [pc, #116]	; (1a002054 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001fe0:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001fe2:	4b1d      	ldr	r3, [pc, #116]	; (1a002058 <prvAddCurrentTaskToDelayedList+0x80>)
1a001fe4:	6818      	ldr	r0, [r3, #0]
1a001fe6:	3004      	adds	r0, #4
1a001fe8:	f7ff fe57 	bl	1a001c9a <uxListRemove>
1a001fec:	b950      	cbnz	r0, 1a002004 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a001fee:	4b1a      	ldr	r3, [pc, #104]	; (1a002058 <prvAddCurrentTaskToDelayedList+0x80>)
1a001ff0:	681b      	ldr	r3, [r3, #0]
1a001ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001ff4:	2301      	movs	r3, #1
1a001ff6:	fa03 f202 	lsl.w	r2, r3, r2
1a001ffa:	4918      	ldr	r1, [pc, #96]	; (1a00205c <prvAddCurrentTaskToDelayedList+0x84>)
1a001ffc:	680b      	ldr	r3, [r1, #0]
1a001ffe:	ea23 0302 	bic.w	r3, r3, r2
1a002002:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a002004:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a002008:	d013      	beq.n	1a002032 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a00200a:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a00200c:	4b12      	ldr	r3, [pc, #72]	; (1a002058 <prvAddCurrentTaskToDelayedList+0x80>)
1a00200e:	681b      	ldr	r3, [r3, #0]
1a002010:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a002012:	42a5      	cmp	r5, r4
1a002014:	d816      	bhi.n	1a002044 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a002016:	4b12      	ldr	r3, [pc, #72]	; (1a002060 <prvAddCurrentTaskToDelayedList+0x88>)
1a002018:	6818      	ldr	r0, [r3, #0]
1a00201a:	4b0f      	ldr	r3, [pc, #60]	; (1a002058 <prvAddCurrentTaskToDelayedList+0x80>)
1a00201c:	6819      	ldr	r1, [r3, #0]
1a00201e:	3104      	adds	r1, #4
1a002020:	f7ff fe21 	bl	1a001c66 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a002024:	4b0f      	ldr	r3, [pc, #60]	; (1a002064 <prvAddCurrentTaskToDelayedList+0x8c>)
1a002026:	681b      	ldr	r3, [r3, #0]
1a002028:	42a3      	cmp	r3, r4
1a00202a:	d912      	bls.n	1a002052 <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a00202c:	4b0d      	ldr	r3, [pc, #52]	; (1a002064 <prvAddCurrentTaskToDelayedList+0x8c>)
1a00202e:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a002030:	e00f      	b.n	1a002052 <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a002032:	2e00      	cmp	r6, #0
1a002034:	d0e9      	beq.n	1a00200a <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a002036:	4b08      	ldr	r3, [pc, #32]	; (1a002058 <prvAddCurrentTaskToDelayedList+0x80>)
1a002038:	6819      	ldr	r1, [r3, #0]
1a00203a:	3104      	adds	r1, #4
1a00203c:	480a      	ldr	r0, [pc, #40]	; (1a002068 <prvAddCurrentTaskToDelayedList+0x90>)
1a00203e:	f7ff fe06 	bl	1a001c4e <vListInsertEnd>
1a002042:	e006      	b.n	1a002052 <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a002044:	4b09      	ldr	r3, [pc, #36]	; (1a00206c <prvAddCurrentTaskToDelayedList+0x94>)
1a002046:	6818      	ldr	r0, [r3, #0]
1a002048:	4b03      	ldr	r3, [pc, #12]	; (1a002058 <prvAddCurrentTaskToDelayedList+0x80>)
1a00204a:	6819      	ldr	r1, [r3, #0]
1a00204c:	3104      	adds	r1, #4
1a00204e:	f7ff fe0a 	bl	1a001c66 <vListInsert>
}
1a002052:	bd70      	pop	{r4, r5, r6, pc}
1a002054:	10007780 	.word	0x10007780
1a002058:	10007660 	.word	0x10007660
1a00205c:	1000770c 	.word	0x1000770c
1a002060:	10007664 	.word	0x10007664
1a002064:	10007738 	.word	0x10007738
1a002068:	10007758 	.word	0x10007758
1a00206c:	10007668 	.word	0x10007668

1a002070 <xTaskCreateStatic>:
	{
1a002070:	b570      	push	{r4, r5, r6, lr}
1a002072:	b086      	sub	sp, #24
1a002074:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a002076:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a002078:	b945      	cbnz	r5, 1a00208c <xTaskCreateStatic+0x1c>
1a00207a:	f04f 0320 	mov.w	r3, #32
1a00207e:	f383 8811 	msr	BASEPRI, r3
1a002082:	f3bf 8f6f 	isb	sy
1a002086:	f3bf 8f4f 	dsb	sy
1a00208a:	e7fe      	b.n	1a00208a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a00208c:	b944      	cbnz	r4, 1a0020a0 <xTaskCreateStatic+0x30>
1a00208e:	f04f 0320 	mov.w	r3, #32
1a002092:	f383 8811 	msr	BASEPRI, r3
1a002096:	f3bf 8f6f 	isb	sy
1a00209a:	f3bf 8f4f 	dsb	sy
1a00209e:	e7fe      	b.n	1a00209e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a0020a0:	2660      	movs	r6, #96	; 0x60
1a0020a2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a0020a4:	9e04      	ldr	r6, [sp, #16]
1a0020a6:	2e60      	cmp	r6, #96	; 0x60
1a0020a8:	d008      	beq.n	1a0020bc <xTaskCreateStatic+0x4c>
1a0020aa:	f04f 0320 	mov.w	r3, #32
1a0020ae:	f383 8811 	msr	BASEPRI, r3
1a0020b2:	f3bf 8f6f 	isb	sy
1a0020b6:	f3bf 8f4f 	dsb	sy
1a0020ba:	e7fe      	b.n	1a0020ba <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a0020bc:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a0020be:	2502      	movs	r5, #2
1a0020c0:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a0020c4:	2500      	movs	r5, #0
1a0020c6:	9503      	str	r5, [sp, #12]
1a0020c8:	9402      	str	r4, [sp, #8]
1a0020ca:	ad05      	add	r5, sp, #20
1a0020cc:	9501      	str	r5, [sp, #4]
1a0020ce:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0020d0:	9500      	str	r5, [sp, #0]
1a0020d2:	f7ff fe57 	bl	1a001d84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0020d6:	4620      	mov	r0, r4
1a0020d8:	f7ff fed2 	bl	1a001e80 <prvAddNewTaskToReadyList>
	}
1a0020dc:	9805      	ldr	r0, [sp, #20]
1a0020de:	b006      	add	sp, #24
1a0020e0:	bd70      	pop	{r4, r5, r6, pc}

1a0020e2 <xTaskCreate>:
	{
1a0020e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0020e6:	b085      	sub	sp, #20
1a0020e8:	4607      	mov	r7, r0
1a0020ea:	4688      	mov	r8, r1
1a0020ec:	4615      	mov	r5, r2
1a0020ee:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0020f0:	0090      	lsls	r0, r2, #2
1a0020f2:	f7ff f969 	bl	1a0013c8 <pvPortMalloc>
			if( pxStack != NULL )
1a0020f6:	b308      	cbz	r0, 1a00213c <xTaskCreate+0x5a>
1a0020f8:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a0020fa:	2060      	movs	r0, #96	; 0x60
1a0020fc:	f7ff f964 	bl	1a0013c8 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a002100:	4604      	mov	r4, r0
1a002102:	b1b8      	cbz	r0, 1a002134 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a002104:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a002106:	b1e4      	cbz	r4, 1a002142 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a002108:	2300      	movs	r3, #0
1a00210a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a00210e:	9303      	str	r3, [sp, #12]
1a002110:	9402      	str	r4, [sp, #8]
1a002112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a002114:	9301      	str	r3, [sp, #4]
1a002116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a002118:	9300      	str	r3, [sp, #0]
1a00211a:	464b      	mov	r3, r9
1a00211c:	462a      	mov	r2, r5
1a00211e:	4641      	mov	r1, r8
1a002120:	4638      	mov	r0, r7
1a002122:	f7ff fe2f 	bl	1a001d84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a002126:	4620      	mov	r0, r4
1a002128:	f7ff feaa 	bl	1a001e80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a00212c:	2001      	movs	r0, #1
	}
1a00212e:	b005      	add	sp, #20
1a002130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a002134:	4630      	mov	r0, r6
1a002136:	f7ff f9d5 	bl	1a0014e4 <vPortFree>
1a00213a:	e7e4      	b.n	1a002106 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a00213c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002140:	e7f5      	b.n	1a00212e <xTaskCreate+0x4c>
1a002142:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a002146:	e7f2      	b.n	1a00212e <xTaskCreate+0x4c>

1a002148 <vTaskStartScheduler>:
{
1a002148:	b510      	push	{r4, lr}
1a00214a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a00214c:	2400      	movs	r4, #0
1a00214e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a002150:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a002152:	aa07      	add	r2, sp, #28
1a002154:	a906      	add	r1, sp, #24
1a002156:	a805      	add	r0, sp, #20
1a002158:	f7ff fdb4 	bl	1a001cc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a00215c:	9b05      	ldr	r3, [sp, #20]
1a00215e:	9302      	str	r3, [sp, #8]
1a002160:	9b06      	ldr	r3, [sp, #24]
1a002162:	9301      	str	r3, [sp, #4]
1a002164:	9400      	str	r4, [sp, #0]
1a002166:	4623      	mov	r3, r4
1a002168:	9a07      	ldr	r2, [sp, #28]
1a00216a:	4917      	ldr	r1, [pc, #92]	; (1a0021c8 <vTaskStartScheduler+0x80>)
1a00216c:	4817      	ldr	r0, [pc, #92]	; (1a0021cc <vTaskStartScheduler+0x84>)
1a00216e:	f7ff ff7f 	bl	1a002070 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a002172:	b140      	cbz	r0, 1a002186 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a002174:	f000 fbbc 	bl	1a0028f0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a002178:	2801      	cmp	r0, #1
1a00217a:	d006      	beq.n	1a00218a <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a00217c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002180:	d018      	beq.n	1a0021b4 <vTaskStartScheduler+0x6c>
}
1a002182:	b008      	add	sp, #32
1a002184:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a002186:	2000      	movs	r0, #0
1a002188:	e7f6      	b.n	1a002178 <vTaskStartScheduler+0x30>
1a00218a:	f04f 0320 	mov.w	r3, #32
1a00218e:	f383 8811 	msr	BASEPRI, r3
1a002192:	f3bf 8f6f 	isb	sy
1a002196:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a00219a:	4b0d      	ldr	r3, [pc, #52]	; (1a0021d0 <vTaskStartScheduler+0x88>)
1a00219c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0021a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a0021a2:	4b0c      	ldr	r3, [pc, #48]	; (1a0021d4 <vTaskStartScheduler+0x8c>)
1a0021a4:	2201      	movs	r2, #1
1a0021a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a0021a8:	4b0b      	ldr	r3, [pc, #44]	; (1a0021d8 <vTaskStartScheduler+0x90>)
1a0021aa:	2200      	movs	r2, #0
1a0021ac:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a0021ae:	f000 fe73 	bl	1a002e98 <xPortStartScheduler>
1a0021b2:	e7e6      	b.n	1a002182 <vTaskStartScheduler+0x3a>
1a0021b4:	f04f 0320 	mov.w	r3, #32
1a0021b8:	f383 8811 	msr	BASEPRI, r3
1a0021bc:	f3bf 8f6f 	isb	sy
1a0021c0:	f3bf 8f4f 	dsb	sy
1a0021c4:	e7fe      	b.n	1a0021c4 <vTaskStartScheduler+0x7c>
1a0021c6:	bf00      	nop
1a0021c8:	1a00a6cc 	.word	0x1a00a6cc
1a0021cc:	1a001fb1 	.word	0x1a001fb1
1a0021d0:	10007738 	.word	0x10007738
1a0021d4:	10007754 	.word	0x10007754
1a0021d8:	10007780 	.word	0x10007780

1a0021dc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a0021dc:	4a02      	ldr	r2, [pc, #8]	; (1a0021e8 <vTaskSuspendAll+0xc>)
1a0021de:	6813      	ldr	r3, [r2, #0]
1a0021e0:	3301      	adds	r3, #1
1a0021e2:	6013      	str	r3, [r2, #0]
}
1a0021e4:	4770      	bx	lr
1a0021e6:	bf00      	nop
1a0021e8:	10007704 	.word	0x10007704

1a0021ec <xTaskGetTickCount>:
		xTicks = xTickCount;
1a0021ec:	4b01      	ldr	r3, [pc, #4]	; (1a0021f4 <xTaskGetTickCount+0x8>)
1a0021ee:	6818      	ldr	r0, [r3, #0]
}
1a0021f0:	4770      	bx	lr
1a0021f2:	bf00      	nop
1a0021f4:	10007780 	.word	0x10007780

1a0021f8 <xTaskIncrementTick>:
{
1a0021f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0021fa:	4b3a      	ldr	r3, [pc, #232]	; (1a0022e4 <xTaskIncrementTick+0xec>)
1a0021fc:	681b      	ldr	r3, [r3, #0]
1a0021fe:	2b00      	cmp	r3, #0
1a002200:	d164      	bne.n	1a0022cc <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a002202:	4b39      	ldr	r3, [pc, #228]	; (1a0022e8 <xTaskIncrementTick+0xf0>)
1a002204:	681d      	ldr	r5, [r3, #0]
1a002206:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a002208:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a00220a:	b9c5      	cbnz	r5, 1a00223e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a00220c:	4b37      	ldr	r3, [pc, #220]	; (1a0022ec <xTaskIncrementTick+0xf4>)
1a00220e:	681b      	ldr	r3, [r3, #0]
1a002210:	681b      	ldr	r3, [r3, #0]
1a002212:	b143      	cbz	r3, 1a002226 <xTaskIncrementTick+0x2e>
1a002214:	f04f 0320 	mov.w	r3, #32
1a002218:	f383 8811 	msr	BASEPRI, r3
1a00221c:	f3bf 8f6f 	isb	sy
1a002220:	f3bf 8f4f 	dsb	sy
1a002224:	e7fe      	b.n	1a002224 <xTaskIncrementTick+0x2c>
1a002226:	4a31      	ldr	r2, [pc, #196]	; (1a0022ec <xTaskIncrementTick+0xf4>)
1a002228:	6811      	ldr	r1, [r2, #0]
1a00222a:	4b31      	ldr	r3, [pc, #196]	; (1a0022f0 <xTaskIncrementTick+0xf8>)
1a00222c:	6818      	ldr	r0, [r3, #0]
1a00222e:	6010      	str	r0, [r2, #0]
1a002230:	6019      	str	r1, [r3, #0]
1a002232:	4a30      	ldr	r2, [pc, #192]	; (1a0022f4 <xTaskIncrementTick+0xfc>)
1a002234:	6813      	ldr	r3, [r2, #0]
1a002236:	3301      	adds	r3, #1
1a002238:	6013      	str	r3, [r2, #0]
1a00223a:	f7ff fd8d 	bl	1a001d58 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a00223e:	4b2e      	ldr	r3, [pc, #184]	; (1a0022f8 <xTaskIncrementTick+0x100>)
1a002240:	681b      	ldr	r3, [r3, #0]
1a002242:	42ab      	cmp	r3, r5
1a002244:	d938      	bls.n	1a0022b8 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a002246:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a002248:	4b2c      	ldr	r3, [pc, #176]	; (1a0022fc <xTaskIncrementTick+0x104>)
1a00224a:	681b      	ldr	r3, [r3, #0]
1a00224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00224e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002252:	009a      	lsls	r2, r3, #2
1a002254:	4b2a      	ldr	r3, [pc, #168]	; (1a002300 <xTaskIncrementTick+0x108>)
1a002256:	589b      	ldr	r3, [r3, r2]
1a002258:	2b01      	cmp	r3, #1
1a00225a:	d93c      	bls.n	1a0022d6 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a00225c:	2401      	movs	r4, #1
1a00225e:	e03a      	b.n	1a0022d6 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a002260:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a002262:	4b22      	ldr	r3, [pc, #136]	; (1a0022ec <xTaskIncrementTick+0xf4>)
1a002264:	681b      	ldr	r3, [r3, #0]
1a002266:	681b      	ldr	r3, [r3, #0]
1a002268:	b343      	cbz	r3, 1a0022bc <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a00226a:	4b20      	ldr	r3, [pc, #128]	; (1a0022ec <xTaskIncrementTick+0xf4>)
1a00226c:	681b      	ldr	r3, [r3, #0]
1a00226e:	68db      	ldr	r3, [r3, #12]
1a002270:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a002272:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a002274:	429d      	cmp	r5, r3
1a002276:	d326      	bcc.n	1a0022c6 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a002278:	1d37      	adds	r7, r6, #4
1a00227a:	4638      	mov	r0, r7
1a00227c:	f7ff fd0d 	bl	1a001c9a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a002280:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a002282:	b11b      	cbz	r3, 1a00228c <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a002284:	f106 0018 	add.w	r0, r6, #24
1a002288:	f7ff fd07 	bl	1a001c9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a00228c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a00228e:	2201      	movs	r2, #1
1a002290:	409a      	lsls	r2, r3
1a002292:	491c      	ldr	r1, [pc, #112]	; (1a002304 <xTaskIncrementTick+0x10c>)
1a002294:	6808      	ldr	r0, [r1, #0]
1a002296:	4302      	orrs	r2, r0
1a002298:	600a      	str	r2, [r1, #0]
1a00229a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00229e:	009a      	lsls	r2, r3, #2
1a0022a0:	4639      	mov	r1, r7
1a0022a2:	4817      	ldr	r0, [pc, #92]	; (1a002300 <xTaskIncrementTick+0x108>)
1a0022a4:	4410      	add	r0, r2
1a0022a6:	f7ff fcd2 	bl	1a001c4e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0022aa:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a0022ac:	4b13      	ldr	r3, [pc, #76]	; (1a0022fc <xTaskIncrementTick+0x104>)
1a0022ae:	681b      	ldr	r3, [r3, #0]
1a0022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0022b2:	429a      	cmp	r2, r3
1a0022b4:	d2d4      	bcs.n	1a002260 <xTaskIncrementTick+0x68>
1a0022b6:	e7d4      	b.n	1a002262 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a0022b8:	2400      	movs	r4, #0
1a0022ba:	e7d2      	b.n	1a002262 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0022bc:	4b0e      	ldr	r3, [pc, #56]	; (1a0022f8 <xTaskIncrementTick+0x100>)
1a0022be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0022c2:	601a      	str	r2, [r3, #0]
					break;
1a0022c4:	e7c0      	b.n	1a002248 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a0022c6:	4a0c      	ldr	r2, [pc, #48]	; (1a0022f8 <xTaskIncrementTick+0x100>)
1a0022c8:	6013      	str	r3, [r2, #0]
						break;
1a0022ca:	e7bd      	b.n	1a002248 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a0022cc:	4a0e      	ldr	r2, [pc, #56]	; (1a002308 <xTaskIncrementTick+0x110>)
1a0022ce:	6813      	ldr	r3, [r2, #0]
1a0022d0:	3301      	adds	r3, #1
1a0022d2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a0022d4:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a0022d6:	4b0d      	ldr	r3, [pc, #52]	; (1a00230c <xTaskIncrementTick+0x114>)
1a0022d8:	681b      	ldr	r3, [r3, #0]
1a0022da:	b103      	cbz	r3, 1a0022de <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a0022dc:	2401      	movs	r4, #1
}
1a0022de:	4620      	mov	r0, r4
1a0022e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0022e2:	bf00      	nop
1a0022e4:	10007704 	.word	0x10007704
1a0022e8:	10007780 	.word	0x10007780
1a0022ec:	10007664 	.word	0x10007664
1a0022f0:	10007668 	.word	0x10007668
1a0022f4:	1000773c 	.word	0x1000773c
1a0022f8:	10007738 	.word	0x10007738
1a0022fc:	10007660 	.word	0x10007660
1a002300:	1000766c 	.word	0x1000766c
1a002304:	1000770c 	.word	0x1000770c
1a002308:	10007700 	.word	0x10007700
1a00230c:	10007784 	.word	0x10007784

1a002310 <xTaskResumeAll>:
{
1a002310:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a002312:	4b33      	ldr	r3, [pc, #204]	; (1a0023e0 <xTaskResumeAll+0xd0>)
1a002314:	681b      	ldr	r3, [r3, #0]
1a002316:	b943      	cbnz	r3, 1a00232a <xTaskResumeAll+0x1a>
1a002318:	f04f 0320 	mov.w	r3, #32
1a00231c:	f383 8811 	msr	BASEPRI, r3
1a002320:	f3bf 8f6f 	isb	sy
1a002324:	f3bf 8f4f 	dsb	sy
1a002328:	e7fe      	b.n	1a002328 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a00232a:	f000 fd13 	bl	1a002d54 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a00232e:	4b2c      	ldr	r3, [pc, #176]	; (1a0023e0 <xTaskResumeAll+0xd0>)
1a002330:	681a      	ldr	r2, [r3, #0]
1a002332:	3a01      	subs	r2, #1
1a002334:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002336:	681b      	ldr	r3, [r3, #0]
1a002338:	2b00      	cmp	r3, #0
1a00233a:	d14d      	bne.n	1a0023d8 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a00233c:	4b29      	ldr	r3, [pc, #164]	; (1a0023e4 <xTaskResumeAll+0xd4>)
1a00233e:	681b      	ldr	r3, [r3, #0]
1a002340:	b923      	cbnz	r3, 1a00234c <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a002342:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a002344:	f000 fd28 	bl	1a002d98 <vPortExitCritical>
}
1a002348:	4620      	mov	r0, r4
1a00234a:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a00234c:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a00234e:	4b26      	ldr	r3, [pc, #152]	; (1a0023e8 <xTaskResumeAll+0xd8>)
1a002350:	681b      	ldr	r3, [r3, #0]
1a002352:	b31b      	cbz	r3, 1a00239c <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a002354:	4b24      	ldr	r3, [pc, #144]	; (1a0023e8 <xTaskResumeAll+0xd8>)
1a002356:	68db      	ldr	r3, [r3, #12]
1a002358:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a00235a:	f104 0018 	add.w	r0, r4, #24
1a00235e:	f7ff fc9c 	bl	1a001c9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a002362:	1d25      	adds	r5, r4, #4
1a002364:	4628      	mov	r0, r5
1a002366:	f7ff fc98 	bl	1a001c9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a00236a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00236c:	2201      	movs	r2, #1
1a00236e:	409a      	lsls	r2, r3
1a002370:	491e      	ldr	r1, [pc, #120]	; (1a0023ec <xTaskResumeAll+0xdc>)
1a002372:	6808      	ldr	r0, [r1, #0]
1a002374:	4302      	orrs	r2, r0
1a002376:	600a      	str	r2, [r1, #0]
1a002378:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00237c:	009a      	lsls	r2, r3, #2
1a00237e:	4629      	mov	r1, r5
1a002380:	481b      	ldr	r0, [pc, #108]	; (1a0023f0 <xTaskResumeAll+0xe0>)
1a002382:	4410      	add	r0, r2
1a002384:	f7ff fc63 	bl	1a001c4e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a002388:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00238a:	4b1a      	ldr	r3, [pc, #104]	; (1a0023f4 <xTaskResumeAll+0xe4>)
1a00238c:	681b      	ldr	r3, [r3, #0]
1a00238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002390:	429a      	cmp	r2, r3
1a002392:	d3dc      	bcc.n	1a00234e <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a002394:	4b18      	ldr	r3, [pc, #96]	; (1a0023f8 <xTaskResumeAll+0xe8>)
1a002396:	2201      	movs	r2, #1
1a002398:	601a      	str	r2, [r3, #0]
1a00239a:	e7d8      	b.n	1a00234e <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a00239c:	b10c      	cbz	r4, 1a0023a2 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a00239e:	f7ff fcdb 	bl	1a001d58 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a0023a2:	4b16      	ldr	r3, [pc, #88]	; (1a0023fc <xTaskResumeAll+0xec>)
1a0023a4:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a0023a6:	b154      	cbz	r4, 1a0023be <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a0023a8:	f7ff ff26 	bl	1a0021f8 <xTaskIncrementTick>
1a0023ac:	b110      	cbz	r0, 1a0023b4 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a0023ae:	4b12      	ldr	r3, [pc, #72]	; (1a0023f8 <xTaskResumeAll+0xe8>)
1a0023b0:	2201      	movs	r2, #1
1a0023b2:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a0023b4:	3c01      	subs	r4, #1
1a0023b6:	d1f7      	bne.n	1a0023a8 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a0023b8:	4b10      	ldr	r3, [pc, #64]	; (1a0023fc <xTaskResumeAll+0xec>)
1a0023ba:	2200      	movs	r2, #0
1a0023bc:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a0023be:	4b0e      	ldr	r3, [pc, #56]	; (1a0023f8 <xTaskResumeAll+0xe8>)
1a0023c0:	681b      	ldr	r3, [r3, #0]
1a0023c2:	b15b      	cbz	r3, 1a0023dc <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a0023c4:	4b0e      	ldr	r3, [pc, #56]	; (1a002400 <xTaskResumeAll+0xf0>)
1a0023c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0023ca:	601a      	str	r2, [r3, #0]
1a0023cc:	f3bf 8f4f 	dsb	sy
1a0023d0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a0023d4:	2401      	movs	r4, #1
1a0023d6:	e7b5      	b.n	1a002344 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a0023d8:	2400      	movs	r4, #0
1a0023da:	e7b3      	b.n	1a002344 <xTaskResumeAll+0x34>
1a0023dc:	2400      	movs	r4, #0
1a0023de:	e7b1      	b.n	1a002344 <xTaskResumeAll+0x34>
1a0023e0:	10007704 	.word	0x10007704
1a0023e4:	100076f8 	.word	0x100076f8
1a0023e8:	10007740 	.word	0x10007740
1a0023ec:	1000770c 	.word	0x1000770c
1a0023f0:	1000766c 	.word	0x1000766c
1a0023f4:	10007660 	.word	0x10007660
1a0023f8:	10007784 	.word	0x10007784
1a0023fc:	10007700 	.word	0x10007700
1a002400:	e000ed04 	.word	0xe000ed04

1a002404 <vTaskDelayUntil>:
	{
1a002404:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a002406:	b150      	cbz	r0, 1a00241e <vTaskDelayUntil+0x1a>
1a002408:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a00240a:	b989      	cbnz	r1, 1a002430 <vTaskDelayUntil+0x2c>
1a00240c:	f04f 0320 	mov.w	r3, #32
1a002410:	f383 8811 	msr	BASEPRI, r3
1a002414:	f3bf 8f6f 	isb	sy
1a002418:	f3bf 8f4f 	dsb	sy
1a00241c:	e7fe      	b.n	1a00241c <vTaskDelayUntil+0x18>
1a00241e:	f04f 0320 	mov.w	r3, #32
1a002422:	f383 8811 	msr	BASEPRI, r3
1a002426:	f3bf 8f6f 	isb	sy
1a00242a:	f3bf 8f4f 	dsb	sy
1a00242e:	e7fe      	b.n	1a00242e <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a002430:	4b1a      	ldr	r3, [pc, #104]	; (1a00249c <vTaskDelayUntil+0x98>)
1a002432:	681b      	ldr	r3, [r3, #0]
1a002434:	b143      	cbz	r3, 1a002448 <vTaskDelayUntil+0x44>
1a002436:	f04f 0320 	mov.w	r3, #32
1a00243a:	f383 8811 	msr	BASEPRI, r3
1a00243e:	f3bf 8f6f 	isb	sy
1a002442:	f3bf 8f4f 	dsb	sy
1a002446:	e7fe      	b.n	1a002446 <vTaskDelayUntil+0x42>
1a002448:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a00244a:	f7ff fec7 	bl	1a0021dc <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a00244e:	4b14      	ldr	r3, [pc, #80]	; (1a0024a0 <vTaskDelayUntil+0x9c>)
1a002450:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a002452:	682a      	ldr	r2, [r5, #0]
1a002454:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a002456:	4282      	cmp	r2, r0
1a002458:	d918      	bls.n	1a00248c <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a00245a:	42a2      	cmp	r2, r4
1a00245c:	d80c      	bhi.n	1a002478 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a00245e:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a002460:	f7ff ff56 	bl	1a002310 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a002464:	b938      	cbnz	r0, 1a002476 <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a002466:	4b0f      	ldr	r3, [pc, #60]	; (1a0024a4 <vTaskDelayUntil+0xa0>)
1a002468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00246c:	601a      	str	r2, [r3, #0]
1a00246e:	f3bf 8f4f 	dsb	sy
1a002472:	f3bf 8f6f 	isb	sy
	}
1a002476:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a002478:	42a0      	cmp	r0, r4
1a00247a:	d301      	bcc.n	1a002480 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a00247c:	602c      	str	r4, [r5, #0]
1a00247e:	e7ef      	b.n	1a002460 <vTaskDelayUntil+0x5c>
1a002480:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a002482:	2100      	movs	r1, #0
1a002484:	1a20      	subs	r0, r4, r0
1a002486:	f7ff fda7 	bl	1a001fd8 <prvAddCurrentTaskToDelayedList>
1a00248a:	e7e9      	b.n	1a002460 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a00248c:	42a2      	cmp	r2, r4
1a00248e:	d801      	bhi.n	1a002494 <vTaskDelayUntil+0x90>
1a002490:	42a0      	cmp	r0, r4
1a002492:	d201      	bcs.n	1a002498 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a002494:	602c      	str	r4, [r5, #0]
1a002496:	e7f4      	b.n	1a002482 <vTaskDelayUntil+0x7e>
1a002498:	602c      	str	r4, [r5, #0]
1a00249a:	e7e1      	b.n	1a002460 <vTaskDelayUntil+0x5c>
1a00249c:	10007704 	.word	0x10007704
1a0024a0:	10007780 	.word	0x10007780
1a0024a4:	e000ed04 	.word	0xe000ed04

1a0024a8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a0024a8:	4b2c      	ldr	r3, [pc, #176]	; (1a00255c <vTaskSwitchContext+0xb4>)
1a0024aa:	681b      	ldr	r3, [r3, #0]
1a0024ac:	b11b      	cbz	r3, 1a0024b6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a0024ae:	4b2c      	ldr	r3, [pc, #176]	; (1a002560 <vTaskSwitchContext+0xb8>)
1a0024b0:	2201      	movs	r2, #1
1a0024b2:	601a      	str	r2, [r3, #0]
1a0024b4:	4770      	bx	lr
{
1a0024b6:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a0024b8:	4b29      	ldr	r3, [pc, #164]	; (1a002560 <vTaskSwitchContext+0xb8>)
1a0024ba:	2200      	movs	r2, #0
1a0024bc:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a0024be:	4b29      	ldr	r3, [pc, #164]	; (1a002564 <vTaskSwitchContext+0xbc>)
1a0024c0:	681b      	ldr	r3, [r3, #0]
1a0024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0024c4:	681a      	ldr	r2, [r3, #0]
1a0024c6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0024ca:	d103      	bne.n	1a0024d4 <vTaskSwitchContext+0x2c>
1a0024cc:	685a      	ldr	r2, [r3, #4]
1a0024ce:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0024d2:	d01b      	beq.n	1a00250c <vTaskSwitchContext+0x64>
1a0024d4:	4b23      	ldr	r3, [pc, #140]	; (1a002564 <vTaskSwitchContext+0xbc>)
1a0024d6:	6818      	ldr	r0, [r3, #0]
1a0024d8:	6819      	ldr	r1, [r3, #0]
1a0024da:	3134      	adds	r1, #52	; 0x34
1a0024dc:	f7ff fc2e 	bl	1a001d3c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0024e0:	4b21      	ldr	r3, [pc, #132]	; (1a002568 <vTaskSwitchContext+0xc0>)
1a0024e2:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a0024e4:	fab3 f383 	clz	r3, r3
1a0024e8:	b2db      	uxtb	r3, r3
1a0024ea:	f1c3 031f 	rsb	r3, r3, #31
1a0024ee:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0024f2:	008a      	lsls	r2, r1, #2
1a0024f4:	491d      	ldr	r1, [pc, #116]	; (1a00256c <vTaskSwitchContext+0xc4>)
1a0024f6:	588a      	ldr	r2, [r1, r2]
1a0024f8:	b98a      	cbnz	r2, 1a00251e <vTaskSwitchContext+0x76>
	__asm volatile
1a0024fa:	f04f 0320 	mov.w	r3, #32
1a0024fe:	f383 8811 	msr	BASEPRI, r3
1a002502:	f3bf 8f6f 	isb	sy
1a002506:	f3bf 8f4f 	dsb	sy
1a00250a:	e7fe      	b.n	1a00250a <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a00250c:	689a      	ldr	r2, [r3, #8]
1a00250e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a002512:	d1df      	bne.n	1a0024d4 <vTaskSwitchContext+0x2c>
1a002514:	68db      	ldr	r3, [r3, #12]
1a002516:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a00251a:	d1db      	bne.n	1a0024d4 <vTaskSwitchContext+0x2c>
1a00251c:	e7e0      	b.n	1a0024e0 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00251e:	4813      	ldr	r0, [pc, #76]	; (1a00256c <vTaskSwitchContext+0xc4>)
1a002520:	009a      	lsls	r2, r3, #2
1a002522:	18d4      	adds	r4, r2, r3
1a002524:	00a1      	lsls	r1, r4, #2
1a002526:	4401      	add	r1, r0
1a002528:	684c      	ldr	r4, [r1, #4]
1a00252a:	6864      	ldr	r4, [r4, #4]
1a00252c:	604c      	str	r4, [r1, #4]
1a00252e:	441a      	add	r2, r3
1a002530:	0091      	lsls	r1, r2, #2
1a002532:	3108      	adds	r1, #8
1a002534:	4408      	add	r0, r1
1a002536:	4284      	cmp	r4, r0
1a002538:	d009      	beq.n	1a00254e <vTaskSwitchContext+0xa6>
1a00253a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00253e:	009a      	lsls	r2, r3, #2
1a002540:	4b0a      	ldr	r3, [pc, #40]	; (1a00256c <vTaskSwitchContext+0xc4>)
1a002542:	4413      	add	r3, r2
1a002544:	685b      	ldr	r3, [r3, #4]
1a002546:	68da      	ldr	r2, [r3, #12]
1a002548:	4b06      	ldr	r3, [pc, #24]	; (1a002564 <vTaskSwitchContext+0xbc>)
1a00254a:	601a      	str	r2, [r3, #0]
}
1a00254c:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00254e:	6861      	ldr	r1, [r4, #4]
1a002550:	4806      	ldr	r0, [pc, #24]	; (1a00256c <vTaskSwitchContext+0xc4>)
1a002552:	2214      	movs	r2, #20
1a002554:	fb02 0203 	mla	r2, r2, r3, r0
1a002558:	6051      	str	r1, [r2, #4]
1a00255a:	e7ee      	b.n	1a00253a <vTaskSwitchContext+0x92>
1a00255c:	10007704 	.word	0x10007704
1a002560:	10007784 	.word	0x10007784
1a002564:	10007660 	.word	0x10007660
1a002568:	1000770c 	.word	0x1000770c
1a00256c:	1000766c 	.word	0x1000766c

1a002570 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a002570:	b940      	cbnz	r0, 1a002584 <vTaskPlaceOnEventList+0x14>
1a002572:	f04f 0320 	mov.w	r3, #32
1a002576:	f383 8811 	msr	BASEPRI, r3
1a00257a:	f3bf 8f6f 	isb	sy
1a00257e:	f3bf 8f4f 	dsb	sy
1a002582:	e7fe      	b.n	1a002582 <vTaskPlaceOnEventList+0x12>
{
1a002584:	b510      	push	{r4, lr}
1a002586:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a002588:	4b04      	ldr	r3, [pc, #16]	; (1a00259c <vTaskPlaceOnEventList+0x2c>)
1a00258a:	6819      	ldr	r1, [r3, #0]
1a00258c:	3118      	adds	r1, #24
1a00258e:	f7ff fb6a 	bl	1a001c66 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a002592:	2101      	movs	r1, #1
1a002594:	4620      	mov	r0, r4
1a002596:	f7ff fd1f 	bl	1a001fd8 <prvAddCurrentTaskToDelayedList>
}
1a00259a:	bd10      	pop	{r4, pc}
1a00259c:	10007660 	.word	0x10007660

1a0025a0 <vTaskPlaceOnEventListRestricted>:
	{
1a0025a0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a0025a2:	b940      	cbnz	r0, 1a0025b6 <vTaskPlaceOnEventListRestricted+0x16>
1a0025a4:	f04f 0320 	mov.w	r3, #32
1a0025a8:	f383 8811 	msr	BASEPRI, r3
1a0025ac:	f3bf 8f6f 	isb	sy
1a0025b0:	f3bf 8f4f 	dsb	sy
1a0025b4:	e7fe      	b.n	1a0025b4 <vTaskPlaceOnEventListRestricted+0x14>
1a0025b6:	460c      	mov	r4, r1
1a0025b8:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0025ba:	4a06      	ldr	r2, [pc, #24]	; (1a0025d4 <vTaskPlaceOnEventListRestricted+0x34>)
1a0025bc:	6811      	ldr	r1, [r2, #0]
1a0025be:	3118      	adds	r1, #24
1a0025c0:	f7ff fb45 	bl	1a001c4e <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a0025c4:	b10d      	cbz	r5, 1a0025ca <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a0025c6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a0025ca:	4629      	mov	r1, r5
1a0025cc:	4620      	mov	r0, r4
1a0025ce:	f7ff fd03 	bl	1a001fd8 <prvAddCurrentTaskToDelayedList>
	}
1a0025d2:	bd38      	pop	{r3, r4, r5, pc}
1a0025d4:	10007660 	.word	0x10007660

1a0025d8 <xTaskRemoveFromEventList>:
{
1a0025d8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a0025da:	68c3      	ldr	r3, [r0, #12]
1a0025dc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a0025de:	b944      	cbnz	r4, 1a0025f2 <xTaskRemoveFromEventList+0x1a>
1a0025e0:	f04f 0320 	mov.w	r3, #32
1a0025e4:	f383 8811 	msr	BASEPRI, r3
1a0025e8:	f3bf 8f6f 	isb	sy
1a0025ec:	f3bf 8f4f 	dsb	sy
1a0025f0:	e7fe      	b.n	1a0025f0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a0025f2:	f104 0518 	add.w	r5, r4, #24
1a0025f6:	4628      	mov	r0, r5
1a0025f8:	f7ff fb4f 	bl	1a001c9a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0025fc:	4b13      	ldr	r3, [pc, #76]	; (1a00264c <xTaskRemoveFromEventList+0x74>)
1a0025fe:	681b      	ldr	r3, [r3, #0]
1a002600:	b9e3      	cbnz	r3, 1a00263c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a002602:	1d25      	adds	r5, r4, #4
1a002604:	4628      	mov	r0, r5
1a002606:	f7ff fb48 	bl	1a001c9a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a00260a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00260c:	2201      	movs	r2, #1
1a00260e:	409a      	lsls	r2, r3
1a002610:	490f      	ldr	r1, [pc, #60]	; (1a002650 <xTaskRemoveFromEventList+0x78>)
1a002612:	6808      	ldr	r0, [r1, #0]
1a002614:	4302      	orrs	r2, r0
1a002616:	600a      	str	r2, [r1, #0]
1a002618:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00261c:	009a      	lsls	r2, r3, #2
1a00261e:	4629      	mov	r1, r5
1a002620:	480c      	ldr	r0, [pc, #48]	; (1a002654 <xTaskRemoveFromEventList+0x7c>)
1a002622:	4410      	add	r0, r2
1a002624:	f7ff fb13 	bl	1a001c4e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a002628:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00262a:	4b0b      	ldr	r3, [pc, #44]	; (1a002658 <xTaskRemoveFromEventList+0x80>)
1a00262c:	681b      	ldr	r3, [r3, #0]
1a00262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002630:	429a      	cmp	r2, r3
1a002632:	d908      	bls.n	1a002646 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a002634:	2001      	movs	r0, #1
1a002636:	4b09      	ldr	r3, [pc, #36]	; (1a00265c <xTaskRemoveFromEventList+0x84>)
1a002638:	6018      	str	r0, [r3, #0]
}
1a00263a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a00263c:	4629      	mov	r1, r5
1a00263e:	4808      	ldr	r0, [pc, #32]	; (1a002660 <xTaskRemoveFromEventList+0x88>)
1a002640:	f7ff fb05 	bl	1a001c4e <vListInsertEnd>
1a002644:	e7f0      	b.n	1a002628 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a002646:	2000      	movs	r0, #0
	return xReturn;
1a002648:	e7f7      	b.n	1a00263a <xTaskRemoveFromEventList+0x62>
1a00264a:	bf00      	nop
1a00264c:	10007704 	.word	0x10007704
1a002650:	1000770c 	.word	0x1000770c
1a002654:	1000766c 	.word	0x1000766c
1a002658:	10007660 	.word	0x10007660
1a00265c:	10007784 	.word	0x10007784
1a002660:	10007740 	.word	0x10007740

1a002664 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a002664:	4b03      	ldr	r3, [pc, #12]	; (1a002674 <vTaskInternalSetTimeOutState+0x10>)
1a002666:	681b      	ldr	r3, [r3, #0]
1a002668:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a00266a:	4b03      	ldr	r3, [pc, #12]	; (1a002678 <vTaskInternalSetTimeOutState+0x14>)
1a00266c:	681b      	ldr	r3, [r3, #0]
1a00266e:	6043      	str	r3, [r0, #4]
}
1a002670:	4770      	bx	lr
1a002672:	bf00      	nop
1a002674:	1000773c 	.word	0x1000773c
1a002678:	10007780 	.word	0x10007780

1a00267c <xTaskCheckForTimeOut>:
{
1a00267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a00267e:	b150      	cbz	r0, 1a002696 <xTaskCheckForTimeOut+0x1a>
1a002680:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a002682:	b989      	cbnz	r1, 1a0026a8 <xTaskCheckForTimeOut+0x2c>
1a002684:	f04f 0320 	mov.w	r3, #32
1a002688:	f383 8811 	msr	BASEPRI, r3
1a00268c:	f3bf 8f6f 	isb	sy
1a002690:	f3bf 8f4f 	dsb	sy
1a002694:	e7fe      	b.n	1a002694 <xTaskCheckForTimeOut+0x18>
1a002696:	f04f 0320 	mov.w	r3, #32
1a00269a:	f383 8811 	msr	BASEPRI, r3
1a00269e:	f3bf 8f6f 	isb	sy
1a0026a2:	f3bf 8f4f 	dsb	sy
1a0026a6:	e7fe      	b.n	1a0026a6 <xTaskCheckForTimeOut+0x2a>
1a0026a8:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a0026aa:	f000 fb53 	bl	1a002d54 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a0026ae:	4b11      	ldr	r3, [pc, #68]	; (1a0026f4 <xTaskCheckForTimeOut+0x78>)
1a0026b0:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a0026b2:	6868      	ldr	r0, [r5, #4]
1a0026b4:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a0026b6:	6823      	ldr	r3, [r4, #0]
1a0026b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0026bc:	d016      	beq.n	1a0026ec <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a0026be:	682f      	ldr	r7, [r5, #0]
1a0026c0:	4e0d      	ldr	r6, [pc, #52]	; (1a0026f8 <xTaskCheckForTimeOut+0x7c>)
1a0026c2:	6836      	ldr	r6, [r6, #0]
1a0026c4:	42b7      	cmp	r7, r6
1a0026c6:	d001      	beq.n	1a0026cc <xTaskCheckForTimeOut+0x50>
1a0026c8:	4288      	cmp	r0, r1
1a0026ca:	d911      	bls.n	1a0026f0 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a0026cc:	4293      	cmp	r3, r2
1a0026ce:	d803      	bhi.n	1a0026d8 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a0026d0:	2300      	movs	r3, #0
1a0026d2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a0026d4:	2401      	movs	r4, #1
1a0026d6:	e005      	b.n	1a0026e4 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a0026d8:	1a9b      	subs	r3, r3, r2
1a0026da:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a0026dc:	4628      	mov	r0, r5
1a0026de:	f7ff ffc1 	bl	1a002664 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a0026e2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0026e4:	f000 fb58 	bl	1a002d98 <vPortExitCritical>
}
1a0026e8:	4620      	mov	r0, r4
1a0026ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a0026ec:	2400      	movs	r4, #0
1a0026ee:	e7f9      	b.n	1a0026e4 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a0026f0:	2401      	movs	r4, #1
1a0026f2:	e7f7      	b.n	1a0026e4 <xTaskCheckForTimeOut+0x68>
1a0026f4:	10007780 	.word	0x10007780
1a0026f8:	1000773c 	.word	0x1000773c

1a0026fc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a0026fc:	4b01      	ldr	r3, [pc, #4]	; (1a002704 <vTaskMissedYield+0x8>)
1a0026fe:	2201      	movs	r2, #1
1a002700:	601a      	str	r2, [r3, #0]
}
1a002702:	4770      	bx	lr
1a002704:	10007784 	.word	0x10007784

1a002708 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a002708:	4b05      	ldr	r3, [pc, #20]	; (1a002720 <xTaskGetSchedulerState+0x18>)
1a00270a:	681b      	ldr	r3, [r3, #0]
1a00270c:	b133      	cbz	r3, 1a00271c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00270e:	4b05      	ldr	r3, [pc, #20]	; (1a002724 <xTaskGetSchedulerState+0x1c>)
1a002710:	681b      	ldr	r3, [r3, #0]
1a002712:	b10b      	cbz	r3, 1a002718 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a002714:	2000      	movs	r0, #0
	}
1a002716:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a002718:	2002      	movs	r0, #2
1a00271a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a00271c:	2001      	movs	r0, #1
1a00271e:	4770      	bx	lr
1a002720:	10007754 	.word	0x10007754
1a002724:	10007704 	.word	0x10007704

1a002728 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a002728:	2800      	cmp	r0, #0
1a00272a:	d049      	beq.n	1a0027c0 <xTaskPriorityDisinherit+0x98>
	{
1a00272c:	b538      	push	{r3, r4, r5, lr}
1a00272e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a002730:	4a26      	ldr	r2, [pc, #152]	; (1a0027cc <xTaskPriorityDisinherit+0xa4>)
1a002732:	6812      	ldr	r2, [r2, #0]
1a002734:	4282      	cmp	r2, r0
1a002736:	d008      	beq.n	1a00274a <xTaskPriorityDisinherit+0x22>
1a002738:	f04f 0320 	mov.w	r3, #32
1a00273c:	f383 8811 	msr	BASEPRI, r3
1a002740:	f3bf 8f6f 	isb	sy
1a002744:	f3bf 8f4f 	dsb	sy
1a002748:	e7fe      	b.n	1a002748 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a00274a:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a00274c:	b942      	cbnz	r2, 1a002760 <xTaskPriorityDisinherit+0x38>
1a00274e:	f04f 0320 	mov.w	r3, #32
1a002752:	f383 8811 	msr	BASEPRI, r3
1a002756:	f3bf 8f6f 	isb	sy
1a00275a:	f3bf 8f4f 	dsb	sy
1a00275e:	e7fe      	b.n	1a00275e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a002760:	3a01      	subs	r2, #1
1a002762:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a002764:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a002766:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a002768:	4288      	cmp	r0, r1
1a00276a:	d02b      	beq.n	1a0027c4 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a00276c:	bb62      	cbnz	r2, 1a0027c8 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00276e:	1d25      	adds	r5, r4, #4
1a002770:	4628      	mov	r0, r5
1a002772:	f7ff fa92 	bl	1a001c9a <uxListRemove>
1a002776:	b970      	cbnz	r0, 1a002796 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a002778:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00277a:	2314      	movs	r3, #20
1a00277c:	fb03 f302 	mul.w	r3, r3, r2
1a002780:	4913      	ldr	r1, [pc, #76]	; (1a0027d0 <xTaskPriorityDisinherit+0xa8>)
1a002782:	58cb      	ldr	r3, [r1, r3]
1a002784:	b93b      	cbnz	r3, 1a002796 <xTaskPriorityDisinherit+0x6e>
1a002786:	2301      	movs	r3, #1
1a002788:	fa03 f202 	lsl.w	r2, r3, r2
1a00278c:	4911      	ldr	r1, [pc, #68]	; (1a0027d4 <xTaskPriorityDisinherit+0xac>)
1a00278e:	680b      	ldr	r3, [r1, #0]
1a002790:	ea23 0302 	bic.w	r3, r3, r2
1a002794:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a002796:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a002798:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00279a:	f1c3 0207 	rsb	r2, r3, #7
1a00279e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a0027a0:	2401      	movs	r4, #1
1a0027a2:	fa04 f203 	lsl.w	r2, r4, r3
1a0027a6:	490b      	ldr	r1, [pc, #44]	; (1a0027d4 <xTaskPriorityDisinherit+0xac>)
1a0027a8:	6808      	ldr	r0, [r1, #0]
1a0027aa:	4302      	orrs	r2, r0
1a0027ac:	600a      	str	r2, [r1, #0]
1a0027ae:	4629      	mov	r1, r5
1a0027b0:	4a07      	ldr	r2, [pc, #28]	; (1a0027d0 <xTaskPriorityDisinherit+0xa8>)
1a0027b2:	2014      	movs	r0, #20
1a0027b4:	fb00 2003 	mla	r0, r0, r3, r2
1a0027b8:	f7ff fa49 	bl	1a001c4e <vListInsertEnd>
					xReturn = pdTRUE;
1a0027bc:	4620      	mov	r0, r4
	}
1a0027be:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a0027c0:	2000      	movs	r0, #0
	}
1a0027c2:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a0027c4:	2000      	movs	r0, #0
1a0027c6:	e7fa      	b.n	1a0027be <xTaskPriorityDisinherit+0x96>
1a0027c8:	2000      	movs	r0, #0
		return xReturn;
1a0027ca:	e7f8      	b.n	1a0027be <xTaskPriorityDisinherit+0x96>
1a0027cc:	10007660 	.word	0x10007660
1a0027d0:	1000766c 	.word	0x1000766c
1a0027d4:	1000770c 	.word	0x1000770c

1a0027d8 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a0027d8:	4b06      	ldr	r3, [pc, #24]	; (1a0027f4 <prvGetNextExpireTime+0x1c>)
1a0027da:	681a      	ldr	r2, [r3, #0]
1a0027dc:	6813      	ldr	r3, [r2, #0]
1a0027de:	fab3 f383 	clz	r3, r3
1a0027e2:	095b      	lsrs	r3, r3, #5
1a0027e4:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a0027e6:	b913      	cbnz	r3, 1a0027ee <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0027e8:	68d3      	ldr	r3, [r2, #12]
1a0027ea:	6818      	ldr	r0, [r3, #0]
1a0027ec:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a0027ee:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a0027f0:	4770      	bx	lr
1a0027f2:	bf00      	nop
1a0027f4:	10007788 	.word	0x10007788

1a0027f8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a0027f8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a0027fa:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a0027fc:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a0027fe:	4291      	cmp	r1, r2
1a002800:	d80c      	bhi.n	1a00281c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002802:	1ad2      	subs	r2, r2, r3
1a002804:	6983      	ldr	r3, [r0, #24]
1a002806:	429a      	cmp	r2, r3
1a002808:	d301      	bcc.n	1a00280e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a00280a:	2001      	movs	r0, #1
1a00280c:	e010      	b.n	1a002830 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a00280e:	1d01      	adds	r1, r0, #4
1a002810:	4b09      	ldr	r3, [pc, #36]	; (1a002838 <prvInsertTimerInActiveList+0x40>)
1a002812:	6818      	ldr	r0, [r3, #0]
1a002814:	f7ff fa27 	bl	1a001c66 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002818:	2000      	movs	r0, #0
1a00281a:	e009      	b.n	1a002830 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a00281c:	429a      	cmp	r2, r3
1a00281e:	d201      	bcs.n	1a002824 <prvInsertTimerInActiveList+0x2c>
1a002820:	4299      	cmp	r1, r3
1a002822:	d206      	bcs.n	1a002832 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002824:	1d01      	adds	r1, r0, #4
1a002826:	4b05      	ldr	r3, [pc, #20]	; (1a00283c <prvInsertTimerInActiveList+0x44>)
1a002828:	6818      	ldr	r0, [r3, #0]
1a00282a:	f7ff fa1c 	bl	1a001c66 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a00282e:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a002830:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a002832:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a002834:	e7fc      	b.n	1a002830 <prvInsertTimerInActiveList+0x38>
1a002836:	bf00      	nop
1a002838:	1000778c 	.word	0x1000778c
1a00283c:	10007788 	.word	0x10007788

1a002840 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a002840:	b530      	push	{r4, r5, lr}
1a002842:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a002844:	f000 fa86 	bl	1a002d54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a002848:	4b11      	ldr	r3, [pc, #68]	; (1a002890 <prvCheckForValidListAndQueue+0x50>)
1a00284a:	681b      	ldr	r3, [r3, #0]
1a00284c:	b11b      	cbz	r3, 1a002856 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a00284e:	f000 faa3 	bl	1a002d98 <vPortExitCritical>
}
1a002852:	b003      	add	sp, #12
1a002854:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a002856:	4d0f      	ldr	r5, [pc, #60]	; (1a002894 <prvCheckForValidListAndQueue+0x54>)
1a002858:	4628      	mov	r0, r5
1a00285a:	f7ff f9ea 	bl	1a001c32 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a00285e:	4c0e      	ldr	r4, [pc, #56]	; (1a002898 <prvCheckForValidListAndQueue+0x58>)
1a002860:	4620      	mov	r0, r4
1a002862:	f7ff f9e6 	bl	1a001c32 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a002866:	4b0d      	ldr	r3, [pc, #52]	; (1a00289c <prvCheckForValidListAndQueue+0x5c>)
1a002868:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a00286a:	4b0d      	ldr	r3, [pc, #52]	; (1a0028a0 <prvCheckForValidListAndQueue+0x60>)
1a00286c:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a00286e:	2300      	movs	r3, #0
1a002870:	9300      	str	r3, [sp, #0]
1a002872:	4b0c      	ldr	r3, [pc, #48]	; (1a0028a4 <prvCheckForValidListAndQueue+0x64>)
1a002874:	4a0c      	ldr	r2, [pc, #48]	; (1a0028a8 <prvCheckForValidListAndQueue+0x68>)
1a002876:	2110      	movs	r1, #16
1a002878:	200a      	movs	r0, #10
1a00287a:	f7fe ff5e 	bl	1a00173a <xQueueGenericCreateStatic>
1a00287e:	4b04      	ldr	r3, [pc, #16]	; (1a002890 <prvCheckForValidListAndQueue+0x50>)
1a002880:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a002882:	2800      	cmp	r0, #0
1a002884:	d0e3      	beq.n	1a00284e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a002886:	4909      	ldr	r1, [pc, #36]	; (1a0028ac <prvCheckForValidListAndQueue+0x6c>)
1a002888:	f7ff f996 	bl	1a001bb8 <vQueueAddToRegistry>
1a00288c:	e7df      	b.n	1a00284e <prvCheckForValidListAndQueue+0xe>
1a00288e:	bf00      	nop
1a002890:	100078ac 	.word	0x100078ac
1a002894:	10007830 	.word	0x10007830
1a002898:	10007844 	.word	0x10007844
1a00289c:	10007788 	.word	0x10007788
1a0028a0:	1000778c 	.word	0x1000778c
1a0028a4:	1000785c 	.word	0x1000785c
1a0028a8:	10007790 	.word	0x10007790
1a0028ac:	1a00a6d4 	.word	0x1a00a6d4

1a0028b0 <prvInitialiseNewTimer>:
{
1a0028b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0028b4:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a0028b6:	b941      	cbnz	r1, 1a0028ca <prvInitialiseNewTimer+0x1a>
1a0028b8:	f04f 0320 	mov.w	r3, #32
1a0028bc:	f383 8811 	msr	BASEPRI, r3
1a0028c0:	f3bf 8f6f 	isb	sy
1a0028c4:	f3bf 8f4f 	dsb	sy
1a0028c8:	e7fe      	b.n	1a0028c8 <prvInitialiseNewTimer+0x18>
1a0028ca:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a0028cc:	b174      	cbz	r4, 1a0028ec <prvInitialiseNewTimer+0x3c>
1a0028ce:	461d      	mov	r5, r3
1a0028d0:	4616      	mov	r6, r2
1a0028d2:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a0028d4:	f7ff ffb4 	bl	1a002840 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a0028d8:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a0028dc:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a0028de:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a0028e0:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a0028e2:	9b06      	ldr	r3, [sp, #24]
1a0028e4:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a0028e6:	1d20      	adds	r0, r4, #4
1a0028e8:	f7ff f9ae 	bl	1a001c48 <vListInitialiseItem>
}
1a0028ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a0028f0 <xTimerCreateTimerTask>:
{
1a0028f0:	b510      	push	{r4, lr}
1a0028f2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a0028f4:	f7ff ffa4 	bl	1a002840 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a0028f8:	4b12      	ldr	r3, [pc, #72]	; (1a002944 <xTimerCreateTimerTask+0x54>)
1a0028fa:	681b      	ldr	r3, [r3, #0]
1a0028fc:	b1cb      	cbz	r3, 1a002932 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a0028fe:	2400      	movs	r4, #0
1a002900:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a002902:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a002904:	aa07      	add	r2, sp, #28
1a002906:	a906      	add	r1, sp, #24
1a002908:	a805      	add	r0, sp, #20
1a00290a:	f7ff f9e7 	bl	1a001cdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a00290e:	9b05      	ldr	r3, [sp, #20]
1a002910:	9302      	str	r3, [sp, #8]
1a002912:	9b06      	ldr	r3, [sp, #24]
1a002914:	9301      	str	r3, [sp, #4]
1a002916:	2304      	movs	r3, #4
1a002918:	9300      	str	r3, [sp, #0]
1a00291a:	4623      	mov	r3, r4
1a00291c:	9a07      	ldr	r2, [sp, #28]
1a00291e:	490a      	ldr	r1, [pc, #40]	; (1a002948 <xTimerCreateTimerTask+0x58>)
1a002920:	480a      	ldr	r0, [pc, #40]	; (1a00294c <xTimerCreateTimerTask+0x5c>)
1a002922:	f7ff fba5 	bl	1a002070 <xTaskCreateStatic>
1a002926:	4b0a      	ldr	r3, [pc, #40]	; (1a002950 <xTimerCreateTimerTask+0x60>)
1a002928:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a00292a:	b110      	cbz	r0, 1a002932 <xTimerCreateTimerTask+0x42>
}
1a00292c:	2001      	movs	r0, #1
1a00292e:	b008      	add	sp, #32
1a002930:	bd10      	pop	{r4, pc}
1a002932:	f04f 0320 	mov.w	r3, #32
1a002936:	f383 8811 	msr	BASEPRI, r3
1a00293a:	f3bf 8f6f 	isb	sy
1a00293e:	f3bf 8f4f 	dsb	sy
1a002942:	e7fe      	b.n	1a002942 <xTimerCreateTimerTask+0x52>
1a002944:	100078ac 	.word	0x100078ac
1a002948:	1a00a6dc 	.word	0x1a00a6dc
1a00294c:	1a002c6d 	.word	0x1a002c6d
1a002950:	100078b0 	.word	0x100078b0

1a002954 <xTimerCreate>:
	{
1a002954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002958:	b082      	sub	sp, #8
1a00295a:	4605      	mov	r5, r0
1a00295c:	460e      	mov	r6, r1
1a00295e:	4617      	mov	r7, r2
1a002960:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
1a002962:	2030      	movs	r0, #48	; 0x30
1a002964:	f7fe fd30 	bl	1a0013c8 <pvPortMalloc>
		if( pxNewTimer != NULL )
1a002968:	4604      	mov	r4, r0
1a00296a:	b158      	cbz	r0, 1a002984 <xTimerCreate+0x30>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a00296c:	9001      	str	r0, [sp, #4]
1a00296e:	9b08      	ldr	r3, [sp, #32]
1a002970:	9300      	str	r3, [sp, #0]
1a002972:	4643      	mov	r3, r8
1a002974:	463a      	mov	r2, r7
1a002976:	4631      	mov	r1, r6
1a002978:	4628      	mov	r0, r5
1a00297a:	f7ff ff99 	bl	1a0028b0 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
1a00297e:	2300      	movs	r3, #0
1a002980:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a002984:	4620      	mov	r0, r4
1a002986:	b002      	add	sp, #8
1a002988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a00298c <xTimerGenericCommand>:
	configASSERT( xTimer );
1a00298c:	b1c8      	cbz	r0, 1a0029c2 <xTimerGenericCommand+0x36>
{
1a00298e:	b530      	push	{r4, r5, lr}
1a002990:	b085      	sub	sp, #20
1a002992:	4615      	mov	r5, r2
1a002994:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a002996:	4a17      	ldr	r2, [pc, #92]	; (1a0029f4 <xTimerGenericCommand+0x68>)
1a002998:	6810      	ldr	r0, [r2, #0]
1a00299a:	b340      	cbz	r0, 1a0029ee <xTimerGenericCommand+0x62>
1a00299c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a00299e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a0029a0:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a0029a2:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a0029a4:	2905      	cmp	r1, #5
1a0029a6:	dc1d      	bgt.n	1a0029e4 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a0029a8:	f7ff feae 	bl	1a002708 <xTaskGetSchedulerState>
1a0029ac:	2802      	cmp	r0, #2
1a0029ae:	d011      	beq.n	1a0029d4 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a0029b0:	2300      	movs	r3, #0
1a0029b2:	461a      	mov	r2, r3
1a0029b4:	4669      	mov	r1, sp
1a0029b6:	480f      	ldr	r0, [pc, #60]	; (1a0029f4 <xTimerGenericCommand+0x68>)
1a0029b8:	6800      	ldr	r0, [r0, #0]
1a0029ba:	f7fe ff2d 	bl	1a001818 <xQueueGenericSend>
}
1a0029be:	b005      	add	sp, #20
1a0029c0:	bd30      	pop	{r4, r5, pc}
1a0029c2:	f04f 0320 	mov.w	r3, #32
1a0029c6:	f383 8811 	msr	BASEPRI, r3
1a0029ca:	f3bf 8f6f 	isb	sy
1a0029ce:	f3bf 8f4f 	dsb	sy
1a0029d2:	e7fe      	b.n	1a0029d2 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0029d4:	2300      	movs	r3, #0
1a0029d6:	9a08      	ldr	r2, [sp, #32]
1a0029d8:	4669      	mov	r1, sp
1a0029da:	4806      	ldr	r0, [pc, #24]	; (1a0029f4 <xTimerGenericCommand+0x68>)
1a0029dc:	6800      	ldr	r0, [r0, #0]
1a0029de:	f7fe ff1b 	bl	1a001818 <xQueueGenericSend>
1a0029e2:	e7ec      	b.n	1a0029be <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0029e4:	2300      	movs	r3, #0
1a0029e6:	4669      	mov	r1, sp
1a0029e8:	f7fe ffd4 	bl	1a001994 <xQueueGenericSendFromISR>
1a0029ec:	e7e7      	b.n	1a0029be <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a0029ee:	2000      	movs	r0, #0
	return xReturn;
1a0029f0:	e7e5      	b.n	1a0029be <xTimerGenericCommand+0x32>
1a0029f2:	bf00      	nop
1a0029f4:	100078ac 	.word	0x100078ac

1a0029f8 <prvSwitchTimerLists>:
{
1a0029f8:	b570      	push	{r4, r5, r6, lr}
1a0029fa:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a0029fc:	4b1a      	ldr	r3, [pc, #104]	; (1a002a68 <prvSwitchTimerLists+0x70>)
1a0029fe:	681b      	ldr	r3, [r3, #0]
1a002a00:	681a      	ldr	r2, [r3, #0]
1a002a02:	b352      	cbz	r2, 1a002a5a <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002a04:	68db      	ldr	r3, [r3, #12]
1a002a06:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002a08:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002a0a:	1d25      	adds	r5, r4, #4
1a002a0c:	4628      	mov	r0, r5
1a002a0e:	f7ff f944 	bl	1a001c9a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002a14:	4620      	mov	r0, r4
1a002a16:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002a18:	69e3      	ldr	r3, [r4, #28]
1a002a1a:	2b01      	cmp	r3, #1
1a002a1c:	d1ee      	bne.n	1a0029fc <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a002a1e:	69a3      	ldr	r3, [r4, #24]
1a002a20:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a002a22:	429e      	cmp	r6, r3
1a002a24:	d207      	bcs.n	1a002a36 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a002a26:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002a28:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002a2a:	4629      	mov	r1, r5
1a002a2c:	4b0e      	ldr	r3, [pc, #56]	; (1a002a68 <prvSwitchTimerLists+0x70>)
1a002a2e:	6818      	ldr	r0, [r3, #0]
1a002a30:	f7ff f919 	bl	1a001c66 <vListInsert>
1a002a34:	e7e2      	b.n	1a0029fc <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002a36:	2100      	movs	r1, #0
1a002a38:	9100      	str	r1, [sp, #0]
1a002a3a:	460b      	mov	r3, r1
1a002a3c:	4632      	mov	r2, r6
1a002a3e:	4620      	mov	r0, r4
1a002a40:	f7ff ffa4 	bl	1a00298c <xTimerGenericCommand>
				configASSERT( xResult );
1a002a44:	2800      	cmp	r0, #0
1a002a46:	d1d9      	bne.n	1a0029fc <prvSwitchTimerLists+0x4>
1a002a48:	f04f 0320 	mov.w	r3, #32
1a002a4c:	f383 8811 	msr	BASEPRI, r3
1a002a50:	f3bf 8f6f 	isb	sy
1a002a54:	f3bf 8f4f 	dsb	sy
1a002a58:	e7fe      	b.n	1a002a58 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a002a5a:	4a04      	ldr	r2, [pc, #16]	; (1a002a6c <prvSwitchTimerLists+0x74>)
1a002a5c:	6810      	ldr	r0, [r2, #0]
1a002a5e:	4902      	ldr	r1, [pc, #8]	; (1a002a68 <prvSwitchTimerLists+0x70>)
1a002a60:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a002a62:	6013      	str	r3, [r2, #0]
}
1a002a64:	b002      	add	sp, #8
1a002a66:	bd70      	pop	{r4, r5, r6, pc}
1a002a68:	10007788 	.word	0x10007788
1a002a6c:	1000778c 	.word	0x1000778c

1a002a70 <prvSampleTimeNow>:
{
1a002a70:	b538      	push	{r3, r4, r5, lr}
1a002a72:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a002a74:	f7ff fbba 	bl	1a0021ec <xTaskGetTickCount>
1a002a78:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a002a7a:	4b07      	ldr	r3, [pc, #28]	; (1a002a98 <prvSampleTimeNow+0x28>)
1a002a7c:	681b      	ldr	r3, [r3, #0]
1a002a7e:	4283      	cmp	r3, r0
1a002a80:	d805      	bhi.n	1a002a8e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a002a82:	2300      	movs	r3, #0
1a002a84:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a002a86:	4b04      	ldr	r3, [pc, #16]	; (1a002a98 <prvSampleTimeNow+0x28>)
1a002a88:	601c      	str	r4, [r3, #0]
}
1a002a8a:	4620      	mov	r0, r4
1a002a8c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a002a8e:	f7ff ffb3 	bl	1a0029f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a002a92:	2301      	movs	r3, #1
1a002a94:	602b      	str	r3, [r5, #0]
1a002a96:	e7f6      	b.n	1a002a86 <prvSampleTimeNow+0x16>
1a002a98:	10007858 	.word	0x10007858

1a002a9c <prvProcessExpiredTimer>:
{
1a002a9c:	b570      	push	{r4, r5, r6, lr}
1a002a9e:	b082      	sub	sp, #8
1a002aa0:	4605      	mov	r5, r0
1a002aa2:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002aa4:	4b14      	ldr	r3, [pc, #80]	; (1a002af8 <prvProcessExpiredTimer+0x5c>)
1a002aa6:	681b      	ldr	r3, [r3, #0]
1a002aa8:	68db      	ldr	r3, [r3, #12]
1a002aaa:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002aac:	1d20      	adds	r0, r4, #4
1a002aae:	f7ff f8f4 	bl	1a001c9a <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002ab2:	69e3      	ldr	r3, [r4, #28]
1a002ab4:	2b01      	cmp	r3, #1
1a002ab6:	d004      	beq.n	1a002ac2 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002ab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002aba:	4620      	mov	r0, r4
1a002abc:	4798      	blx	r3
}
1a002abe:	b002      	add	sp, #8
1a002ac0:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a002ac2:	69a1      	ldr	r1, [r4, #24]
1a002ac4:	462b      	mov	r3, r5
1a002ac6:	4632      	mov	r2, r6
1a002ac8:	4429      	add	r1, r5
1a002aca:	4620      	mov	r0, r4
1a002acc:	f7ff fe94 	bl	1a0027f8 <prvInsertTimerInActiveList>
1a002ad0:	2800      	cmp	r0, #0
1a002ad2:	d0f1      	beq.n	1a002ab8 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002ad4:	2100      	movs	r1, #0
1a002ad6:	9100      	str	r1, [sp, #0]
1a002ad8:	460b      	mov	r3, r1
1a002ada:	462a      	mov	r2, r5
1a002adc:	4620      	mov	r0, r4
1a002ade:	f7ff ff55 	bl	1a00298c <xTimerGenericCommand>
			configASSERT( xResult );
1a002ae2:	2800      	cmp	r0, #0
1a002ae4:	d1e8      	bne.n	1a002ab8 <prvProcessExpiredTimer+0x1c>
1a002ae6:	f04f 0320 	mov.w	r3, #32
1a002aea:	f383 8811 	msr	BASEPRI, r3
1a002aee:	f3bf 8f6f 	isb	sy
1a002af2:	f3bf 8f4f 	dsb	sy
1a002af6:	e7fe      	b.n	1a002af6 <prvProcessExpiredTimer+0x5a>
1a002af8:	10007788 	.word	0x10007788

1a002afc <prvProcessTimerOrBlockTask>:
{
1a002afc:	b570      	push	{r4, r5, r6, lr}
1a002afe:	b082      	sub	sp, #8
1a002b00:	4606      	mov	r6, r0
1a002b02:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a002b04:	f7ff fb6a 	bl	1a0021dc <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002b08:	a801      	add	r0, sp, #4
1a002b0a:	f7ff ffb1 	bl	1a002a70 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a002b0e:	9b01      	ldr	r3, [sp, #4]
1a002b10:	bb1b      	cbnz	r3, 1a002b5a <prvProcessTimerOrBlockTask+0x5e>
1a002b12:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002b14:	b90c      	cbnz	r4, 1a002b1a <prvProcessTimerOrBlockTask+0x1e>
1a002b16:	42b0      	cmp	r0, r6
1a002b18:	d218      	bcs.n	1a002b4c <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a002b1a:	b12c      	cbz	r4, 1a002b28 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002b1c:	4b11      	ldr	r3, [pc, #68]	; (1a002b64 <prvProcessTimerOrBlockTask+0x68>)
1a002b1e:	681b      	ldr	r3, [r3, #0]
1a002b20:	681c      	ldr	r4, [r3, #0]
1a002b22:	fab4 f484 	clz	r4, r4
1a002b26:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002b28:	4622      	mov	r2, r4
1a002b2a:	1b71      	subs	r1, r6, r5
1a002b2c:	4b0e      	ldr	r3, [pc, #56]	; (1a002b68 <prvProcessTimerOrBlockTask+0x6c>)
1a002b2e:	6818      	ldr	r0, [r3, #0]
1a002b30:	f7ff f856 	bl	1a001be0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002b34:	f7ff fbec 	bl	1a002310 <xTaskResumeAll>
1a002b38:	b988      	cbnz	r0, 1a002b5e <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a002b3a:	4b0c      	ldr	r3, [pc, #48]	; (1a002b6c <prvProcessTimerOrBlockTask+0x70>)
1a002b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002b40:	601a      	str	r2, [r3, #0]
1a002b42:	f3bf 8f4f 	dsb	sy
1a002b46:	f3bf 8f6f 	isb	sy
1a002b4a:	e008      	b.n	1a002b5e <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002b4c:	f7ff fbe0 	bl	1a002310 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002b50:	4629      	mov	r1, r5
1a002b52:	4630      	mov	r0, r6
1a002b54:	f7ff ffa2 	bl	1a002a9c <prvProcessExpiredTimer>
1a002b58:	e001      	b.n	1a002b5e <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a002b5a:	f7ff fbd9 	bl	1a002310 <xTaskResumeAll>
}
1a002b5e:	b002      	add	sp, #8
1a002b60:	bd70      	pop	{r4, r5, r6, pc}
1a002b62:	bf00      	nop
1a002b64:	1000778c 	.word	0x1000778c
1a002b68:	100078ac 	.word	0x100078ac
1a002b6c:	e000ed04 	.word	0xe000ed04

1a002b70 <prvProcessReceivedCommands>:
{
1a002b70:	b530      	push	{r4, r5, lr}
1a002b72:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002b74:	e002      	b.n	1a002b7c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a002b76:	9b04      	ldr	r3, [sp, #16]
1a002b78:	2b00      	cmp	r3, #0
1a002b7a:	da0f      	bge.n	1a002b9c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002b7c:	2200      	movs	r2, #0
1a002b7e:	a904      	add	r1, sp, #16
1a002b80:	4b39      	ldr	r3, [pc, #228]	; (1a002c68 <prvProcessReceivedCommands+0xf8>)
1a002b82:	6818      	ldr	r0, [r3, #0]
1a002b84:	f7fe ff6c 	bl	1a001a60 <xQueueReceive>
1a002b88:	2800      	cmp	r0, #0
1a002b8a:	d06a      	beq.n	1a002c62 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002b8c:	9b04      	ldr	r3, [sp, #16]
1a002b8e:	2b00      	cmp	r3, #0
1a002b90:	daf1      	bge.n	1a002b76 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a002b92:	9907      	ldr	r1, [sp, #28]
1a002b94:	9806      	ldr	r0, [sp, #24]
1a002b96:	9b05      	ldr	r3, [sp, #20]
1a002b98:	4798      	blx	r3
1a002b9a:	e7ec      	b.n	1a002b76 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a002b9c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a002b9e:	6963      	ldr	r3, [r4, #20]
1a002ba0:	b113      	cbz	r3, 1a002ba8 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002ba2:	1d20      	adds	r0, r4, #4
1a002ba4:	f7ff f879 	bl	1a001c9a <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002ba8:	a803      	add	r0, sp, #12
1a002baa:	f7ff ff61 	bl	1a002a70 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a002bae:	9b04      	ldr	r3, [sp, #16]
1a002bb0:	2b09      	cmp	r3, #9
1a002bb2:	d8e3      	bhi.n	1a002b7c <prvProcessReceivedCommands+0xc>
1a002bb4:	a201      	add	r2, pc, #4	; (adr r2, 1a002bbc <prvProcessReceivedCommands+0x4c>)
1a002bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a002bba:	bf00      	nop
1a002bbc:	1a002be5 	.word	0x1a002be5
1a002bc0:	1a002be5 	.word	0x1a002be5
1a002bc4:	1a002be5 	.word	0x1a002be5
1a002bc8:	1a002b7d 	.word	0x1a002b7d
1a002bcc:	1a002c2d 	.word	0x1a002c2d
1a002bd0:	1a002c53 	.word	0x1a002c53
1a002bd4:	1a002be5 	.word	0x1a002be5
1a002bd8:	1a002be5 	.word	0x1a002be5
1a002bdc:	1a002b7d 	.word	0x1a002b7d
1a002be0:	1a002c2d 	.word	0x1a002c2d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a002be4:	9905      	ldr	r1, [sp, #20]
1a002be6:	69a5      	ldr	r5, [r4, #24]
1a002be8:	460b      	mov	r3, r1
1a002bea:	4602      	mov	r2, r0
1a002bec:	4429      	add	r1, r5
1a002bee:	4620      	mov	r0, r4
1a002bf0:	f7ff fe02 	bl	1a0027f8 <prvInsertTimerInActiveList>
1a002bf4:	2800      	cmp	r0, #0
1a002bf6:	d0c1      	beq.n	1a002b7c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002bf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002bfa:	4620      	mov	r0, r4
1a002bfc:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002bfe:	69e3      	ldr	r3, [r4, #28]
1a002c00:	2b01      	cmp	r3, #1
1a002c02:	d1bb      	bne.n	1a002b7c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002c04:	69a2      	ldr	r2, [r4, #24]
1a002c06:	2100      	movs	r1, #0
1a002c08:	9100      	str	r1, [sp, #0]
1a002c0a:	460b      	mov	r3, r1
1a002c0c:	9805      	ldr	r0, [sp, #20]
1a002c0e:	4402      	add	r2, r0
1a002c10:	4620      	mov	r0, r4
1a002c12:	f7ff febb 	bl	1a00298c <xTimerGenericCommand>
							configASSERT( xResult );
1a002c16:	2800      	cmp	r0, #0
1a002c18:	d1b0      	bne.n	1a002b7c <prvProcessReceivedCommands+0xc>
1a002c1a:	f04f 0320 	mov.w	r3, #32
1a002c1e:	f383 8811 	msr	BASEPRI, r3
1a002c22:	f3bf 8f6f 	isb	sy
1a002c26:	f3bf 8f4f 	dsb	sy
1a002c2a:	e7fe      	b.n	1a002c2a <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002c2c:	9905      	ldr	r1, [sp, #20]
1a002c2e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002c30:	b131      	cbz	r1, 1a002c40 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002c32:	4603      	mov	r3, r0
1a002c34:	4602      	mov	r2, r0
1a002c36:	4401      	add	r1, r0
1a002c38:	4620      	mov	r0, r4
1a002c3a:	f7ff fddd 	bl	1a0027f8 <prvInsertTimerInActiveList>
					break;
1a002c3e:	e79d      	b.n	1a002b7c <prvProcessReceivedCommands+0xc>
1a002c40:	f04f 0320 	mov.w	r3, #32
1a002c44:	f383 8811 	msr	BASEPRI, r3
1a002c48:	f3bf 8f6f 	isb	sy
1a002c4c:	f3bf 8f4f 	dsb	sy
1a002c50:	e7fe      	b.n	1a002c50 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a002c52:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002c56:	2b00      	cmp	r3, #0
1a002c58:	d190      	bne.n	1a002b7c <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a002c5a:	4620      	mov	r0, r4
1a002c5c:	f7fe fc42 	bl	1a0014e4 <vPortFree>
1a002c60:	e78c      	b.n	1a002b7c <prvProcessReceivedCommands+0xc>
}
1a002c62:	b009      	add	sp, #36	; 0x24
1a002c64:	bd30      	pop	{r4, r5, pc}
1a002c66:	bf00      	nop
1a002c68:	100078ac 	.word	0x100078ac

1a002c6c <prvTimerTask>:
{
1a002c6c:	b500      	push	{lr}
1a002c6e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002c70:	a801      	add	r0, sp, #4
1a002c72:	f7ff fdb1 	bl	1a0027d8 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a002c76:	9901      	ldr	r1, [sp, #4]
1a002c78:	f7ff ff40 	bl	1a002afc <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002c7c:	f7ff ff78 	bl	1a002b70 <prvProcessReceivedCommands>
1a002c80:	e7f6      	b.n	1a002c70 <prvTimerTask+0x4>
1a002c82:	Address 0x000000001a002c82 is out of bounds.


1a002c84 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002c84:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a002c86:	2300      	movs	r3, #0
1a002c88:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002c8a:	4b0d      	ldr	r3, [pc, #52]	; (1a002cc0 <prvTaskExitError+0x3c>)
1a002c8c:	681b      	ldr	r3, [r3, #0]
1a002c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002c92:	d008      	beq.n	1a002ca6 <prvTaskExitError+0x22>
1a002c94:	f04f 0320 	mov.w	r3, #32
1a002c98:	f383 8811 	msr	BASEPRI, r3
1a002c9c:	f3bf 8f6f 	isb	sy
1a002ca0:	f3bf 8f4f 	dsb	sy
1a002ca4:	e7fe      	b.n	1a002ca4 <prvTaskExitError+0x20>
1a002ca6:	f04f 0320 	mov.w	r3, #32
1a002caa:	f383 8811 	msr	BASEPRI, r3
1a002cae:	f3bf 8f6f 	isb	sy
1a002cb2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a002cb6:	9b01      	ldr	r3, [sp, #4]
1a002cb8:	2b00      	cmp	r3, #0
1a002cba:	d0fc      	beq.n	1a002cb6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002cbc:	b002      	add	sp, #8
1a002cbe:	4770      	bx	lr
1a002cc0:	10000004 	.word	0x10000004

1a002cc4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002cc4:	4808      	ldr	r0, [pc, #32]	; (1a002ce8 <prvPortStartFirstTask+0x24>)
1a002cc6:	6800      	ldr	r0, [r0, #0]
1a002cc8:	6800      	ldr	r0, [r0, #0]
1a002cca:	f380 8808 	msr	MSP, r0
1a002cce:	f04f 0000 	mov.w	r0, #0
1a002cd2:	f380 8814 	msr	CONTROL, r0
1a002cd6:	b662      	cpsie	i
1a002cd8:	b661      	cpsie	f
1a002cda:	f3bf 8f4f 	dsb	sy
1a002cde:	f3bf 8f6f 	isb	sy
1a002ce2:	df00      	svc	0
1a002ce4:	bf00      	nop
1a002ce6:	0000      	.short	0x0000
1a002ce8:	e000ed08 	.word	0xe000ed08

1a002cec <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a002cec:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002cfc <vPortEnableVFP+0x10>
1a002cf0:	6801      	ldr	r1, [r0, #0]
1a002cf2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002cf6:	6001      	str	r1, [r0, #0]
1a002cf8:	4770      	bx	lr
1a002cfa:	0000      	.short	0x0000
1a002cfc:	e000ed88 	.word	0xe000ed88

1a002d00 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002d00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002d04:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002d08:	f021 0101 	bic.w	r1, r1, #1
1a002d0c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002d10:	4b05      	ldr	r3, [pc, #20]	; (1a002d28 <pxPortInitialiseStack+0x28>)
1a002d12:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002d16:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002d1a:	f06f 0302 	mvn.w	r3, #2
1a002d1e:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a002d22:	3844      	subs	r0, #68	; 0x44
1a002d24:	4770      	bx	lr
1a002d26:	bf00      	nop
1a002d28:	1a002c85 	.word	0x1a002c85
1a002d2c:	ffffffff 	.word	0xffffffff

1a002d30 <SVC_Handler>:
	__asm volatile (
1a002d30:	4b07      	ldr	r3, [pc, #28]	; (1a002d50 <pxCurrentTCBConst2>)
1a002d32:	6819      	ldr	r1, [r3, #0]
1a002d34:	6808      	ldr	r0, [r1, #0]
1a002d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002d3a:	f380 8809 	msr	PSP, r0
1a002d3e:	f3bf 8f6f 	isb	sy
1a002d42:	f04f 0000 	mov.w	r0, #0
1a002d46:	f380 8811 	msr	BASEPRI, r0
1a002d4a:	4770      	bx	lr
1a002d4c:	f3af 8000 	nop.w

1a002d50 <pxCurrentTCBConst2>:
1a002d50:	10007660 	.word	0x10007660

1a002d54 <vPortEnterCritical>:
1a002d54:	f04f 0320 	mov.w	r3, #32
1a002d58:	f383 8811 	msr	BASEPRI, r3
1a002d5c:	f3bf 8f6f 	isb	sy
1a002d60:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002d64:	4a0a      	ldr	r2, [pc, #40]	; (1a002d90 <vPortEnterCritical+0x3c>)
1a002d66:	6813      	ldr	r3, [r2, #0]
1a002d68:	3301      	adds	r3, #1
1a002d6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a002d6c:	2b01      	cmp	r3, #1
1a002d6e:	d000      	beq.n	1a002d72 <vPortEnterCritical+0x1e>
}
1a002d70:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002d72:	4b08      	ldr	r3, [pc, #32]	; (1a002d94 <vPortEnterCritical+0x40>)
1a002d74:	681b      	ldr	r3, [r3, #0]
1a002d76:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002d7a:	d0f9      	beq.n	1a002d70 <vPortEnterCritical+0x1c>
1a002d7c:	f04f 0320 	mov.w	r3, #32
1a002d80:	f383 8811 	msr	BASEPRI, r3
1a002d84:	f3bf 8f6f 	isb	sy
1a002d88:	f3bf 8f4f 	dsb	sy
1a002d8c:	e7fe      	b.n	1a002d8c <vPortEnterCritical+0x38>
1a002d8e:	bf00      	nop
1a002d90:	10000004 	.word	0x10000004
1a002d94:	e000ed04 	.word	0xe000ed04

1a002d98 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002d98:	4b09      	ldr	r3, [pc, #36]	; (1a002dc0 <vPortExitCritical+0x28>)
1a002d9a:	681b      	ldr	r3, [r3, #0]
1a002d9c:	b943      	cbnz	r3, 1a002db0 <vPortExitCritical+0x18>
1a002d9e:	f04f 0320 	mov.w	r3, #32
1a002da2:	f383 8811 	msr	BASEPRI, r3
1a002da6:	f3bf 8f6f 	isb	sy
1a002daa:	f3bf 8f4f 	dsb	sy
1a002dae:	e7fe      	b.n	1a002dae <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002db0:	3b01      	subs	r3, #1
1a002db2:	4a03      	ldr	r2, [pc, #12]	; (1a002dc0 <vPortExitCritical+0x28>)
1a002db4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002db6:	b90b      	cbnz	r3, 1a002dbc <vPortExitCritical+0x24>
	__asm volatile
1a002db8:	f383 8811 	msr	BASEPRI, r3
}
1a002dbc:	4770      	bx	lr
1a002dbe:	bf00      	nop
1a002dc0:	10000004 	.word	0x10000004
1a002dc4:	ffffffff 	.word	0xffffffff
1a002dc8:	ffffffff 	.word	0xffffffff
1a002dcc:	ffffffff 	.word	0xffffffff

1a002dd0 <PendSV_Handler>:
	__asm volatile
1a002dd0:	f3ef 8009 	mrs	r0, PSP
1a002dd4:	f3bf 8f6f 	isb	sy
1a002dd8:	4b15      	ldr	r3, [pc, #84]	; (1a002e30 <pxCurrentTCBConst>)
1a002dda:	681a      	ldr	r2, [r3, #0]
1a002ddc:	f01e 0f10 	tst.w	lr, #16
1a002de0:	bf08      	it	eq
1a002de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002dea:	6010      	str	r0, [r2, #0]
1a002dec:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002df0:	f04f 0020 	mov.w	r0, #32
1a002df4:	f380 8811 	msr	BASEPRI, r0
1a002df8:	f3bf 8f4f 	dsb	sy
1a002dfc:	f3bf 8f6f 	isb	sy
1a002e00:	f7ff fb52 	bl	1a0024a8 <vTaskSwitchContext>
1a002e04:	f04f 0000 	mov.w	r0, #0
1a002e08:	f380 8811 	msr	BASEPRI, r0
1a002e0c:	bc09      	pop	{r0, r3}
1a002e0e:	6819      	ldr	r1, [r3, #0]
1a002e10:	6808      	ldr	r0, [r1, #0]
1a002e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002e16:	f01e 0f10 	tst.w	lr, #16
1a002e1a:	bf08      	it	eq
1a002e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002e20:	f380 8809 	msr	PSP, r0
1a002e24:	f3bf 8f6f 	isb	sy
1a002e28:	4770      	bx	lr
1a002e2a:	bf00      	nop
1a002e2c:	f3af 8000 	nop.w

1a002e30 <pxCurrentTCBConst>:
1a002e30:	10007660 	.word	0x10007660

1a002e34 <SysTick_Handler>:
{
1a002e34:	b508      	push	{r3, lr}
	__asm volatile
1a002e36:	f04f 0320 	mov.w	r3, #32
1a002e3a:	f383 8811 	msr	BASEPRI, r3
1a002e3e:	f3bf 8f6f 	isb	sy
1a002e42:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002e46:	f7ff f9d7 	bl	1a0021f8 <xTaskIncrementTick>
1a002e4a:	b118      	cbz	r0, 1a002e54 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a002e4c:	4b03      	ldr	r3, [pc, #12]	; (1a002e5c <SysTick_Handler+0x28>)
1a002e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002e52:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002e54:	2300      	movs	r3, #0
1a002e56:	f383 8811 	msr	BASEPRI, r3
}
1a002e5a:	bd08      	pop	{r3, pc}
1a002e5c:	e000ed04 	.word	0xe000ed04

1a002e60 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002e60:	4a08      	ldr	r2, [pc, #32]	; (1a002e84 <vPortSetupTimerInterrupt+0x24>)
1a002e62:	2300      	movs	r3, #0
1a002e64:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002e66:	4908      	ldr	r1, [pc, #32]	; (1a002e88 <vPortSetupTimerInterrupt+0x28>)
1a002e68:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a002e6a:	4b08      	ldr	r3, [pc, #32]	; (1a002e8c <vPortSetupTimerInterrupt+0x2c>)
1a002e6c:	681b      	ldr	r3, [r3, #0]
1a002e6e:	4908      	ldr	r1, [pc, #32]	; (1a002e90 <vPortSetupTimerInterrupt+0x30>)
1a002e70:	fba1 1303 	umull	r1, r3, r1, r3
1a002e74:	099b      	lsrs	r3, r3, #6
1a002e76:	3b01      	subs	r3, #1
1a002e78:	4906      	ldr	r1, [pc, #24]	; (1a002e94 <vPortSetupTimerInterrupt+0x34>)
1a002e7a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a002e7c:	2307      	movs	r3, #7
1a002e7e:	6013      	str	r3, [r2, #0]
}
1a002e80:	4770      	bx	lr
1a002e82:	bf00      	nop
1a002e84:	e000e010 	.word	0xe000e010
1a002e88:	e000e018 	.word	0xe000e018
1a002e8c:	100079fc 	.word	0x100079fc
1a002e90:	10624dd3 	.word	0x10624dd3
1a002e94:	e000e014 	.word	0xe000e014

1a002e98 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002e98:	4b3a      	ldr	r3, [pc, #232]	; (1a002f84 <xPortStartScheduler+0xec>)
1a002e9a:	681a      	ldr	r2, [r3, #0]
1a002e9c:	4b3a      	ldr	r3, [pc, #232]	; (1a002f88 <xPortStartScheduler+0xf0>)
1a002e9e:	429a      	cmp	r2, r3
1a002ea0:	d00d      	beq.n	1a002ebe <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002ea2:	4b38      	ldr	r3, [pc, #224]	; (1a002f84 <xPortStartScheduler+0xec>)
1a002ea4:	681a      	ldr	r2, [r3, #0]
1a002ea6:	4b39      	ldr	r3, [pc, #228]	; (1a002f8c <xPortStartScheduler+0xf4>)
1a002ea8:	429a      	cmp	r2, r3
1a002eaa:	d111      	bne.n	1a002ed0 <xPortStartScheduler+0x38>
	__asm volatile
1a002eac:	f04f 0320 	mov.w	r3, #32
1a002eb0:	f383 8811 	msr	BASEPRI, r3
1a002eb4:	f3bf 8f6f 	isb	sy
1a002eb8:	f3bf 8f4f 	dsb	sy
1a002ebc:	e7fe      	b.n	1a002ebc <xPortStartScheduler+0x24>
1a002ebe:	f04f 0320 	mov.w	r3, #32
1a002ec2:	f383 8811 	msr	BASEPRI, r3
1a002ec6:	f3bf 8f6f 	isb	sy
1a002eca:	f3bf 8f4f 	dsb	sy
1a002ece:	e7fe      	b.n	1a002ece <xPortStartScheduler+0x36>
{
1a002ed0:	b510      	push	{r4, lr}
1a002ed2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002ed4:	4b2e      	ldr	r3, [pc, #184]	; (1a002f90 <xPortStartScheduler+0xf8>)
1a002ed6:	781a      	ldrb	r2, [r3, #0]
1a002ed8:	b2d2      	uxtb	r2, r2
1a002eda:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a002edc:	22ff      	movs	r2, #255	; 0xff
1a002ede:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002ee0:	781b      	ldrb	r3, [r3, #0]
1a002ee2:	b2db      	uxtb	r3, r3
1a002ee4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002ee8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002eec:	f003 0320 	and.w	r3, r3, #32
1a002ef0:	4a28      	ldr	r2, [pc, #160]	; (1a002f94 <xPortStartScheduler+0xfc>)
1a002ef2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002ef4:	4b28      	ldr	r3, [pc, #160]	; (1a002f98 <xPortStartScheduler+0x100>)
1a002ef6:	2207      	movs	r2, #7
1a002ef8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002efa:	e009      	b.n	1a002f10 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a002efc:	4a26      	ldr	r2, [pc, #152]	; (1a002f98 <xPortStartScheduler+0x100>)
1a002efe:	6813      	ldr	r3, [r2, #0]
1a002f00:	3b01      	subs	r3, #1
1a002f02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002f04:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002f08:	005b      	lsls	r3, r3, #1
1a002f0a:	b2db      	uxtb	r3, r3
1a002f0c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002f10:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002f14:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002f18:	d1f0      	bne.n	1a002efc <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a002f1a:	4b1f      	ldr	r3, [pc, #124]	; (1a002f98 <xPortStartScheduler+0x100>)
1a002f1c:	681b      	ldr	r3, [r3, #0]
1a002f1e:	2b04      	cmp	r3, #4
1a002f20:	d008      	beq.n	1a002f34 <xPortStartScheduler+0x9c>
1a002f22:	f04f 0320 	mov.w	r3, #32
1a002f26:	f383 8811 	msr	BASEPRI, r3
1a002f2a:	f3bf 8f6f 	isb	sy
1a002f2e:	f3bf 8f4f 	dsb	sy
1a002f32:	e7fe      	b.n	1a002f32 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002f34:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002f36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002f3a:	4a17      	ldr	r2, [pc, #92]	; (1a002f98 <xPortStartScheduler+0x100>)
1a002f3c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a002f3e:	9b01      	ldr	r3, [sp, #4]
1a002f40:	b2db      	uxtb	r3, r3
1a002f42:	4a13      	ldr	r2, [pc, #76]	; (1a002f90 <xPortStartScheduler+0xf8>)
1a002f44:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002f46:	4b15      	ldr	r3, [pc, #84]	; (1a002f9c <xPortStartScheduler+0x104>)
1a002f48:	681a      	ldr	r2, [r3, #0]
1a002f4a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a002f4e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002f50:	681a      	ldr	r2, [r3, #0]
1a002f52:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002f56:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002f58:	f7ff ff82 	bl	1a002e60 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a002f5c:	2400      	movs	r4, #0
1a002f5e:	4b10      	ldr	r3, [pc, #64]	; (1a002fa0 <xPortStartScheduler+0x108>)
1a002f60:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002f62:	f7ff fec3 	bl	1a002cec <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002f66:	4a0f      	ldr	r2, [pc, #60]	; (1a002fa4 <xPortStartScheduler+0x10c>)
1a002f68:	6813      	ldr	r3, [r2, #0]
1a002f6a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a002f6e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002f70:	f7ff fea8 	bl	1a002cc4 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002f74:	f7ff fa98 	bl	1a0024a8 <vTaskSwitchContext>
	prvTaskExitError();
1a002f78:	f7ff fe84 	bl	1a002c84 <prvTaskExitError>
}
1a002f7c:	4620      	mov	r0, r4
1a002f7e:	b002      	add	sp, #8
1a002f80:	bd10      	pop	{r4, pc}
1a002f82:	bf00      	nop
1a002f84:	e000ed00 	.word	0xe000ed00
1a002f88:	410fc271 	.word	0x410fc271
1a002f8c:	410fc270 	.word	0x410fc270
1a002f90:	e000e400 	.word	0xe000e400
1a002f94:	100078b4 	.word	0x100078b4
1a002f98:	100078b8 	.word	0x100078b8
1a002f9c:	e000ed20 	.word	0xe000ed20
1a002fa0:	10000004 	.word	0x10000004
1a002fa4:	e000ef34 	.word	0xe000ef34

1a002fa8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002fa8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a002fac:	2b0f      	cmp	r3, #15
1a002fae:	d90f      	bls.n	1a002fd0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002fb0:	4a10      	ldr	r2, [pc, #64]	; (1a002ff4 <vPortValidateInterruptPriority+0x4c>)
1a002fb2:	5c9b      	ldrb	r3, [r3, r2]
1a002fb4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002fb6:	4a10      	ldr	r2, [pc, #64]	; (1a002ff8 <vPortValidateInterruptPriority+0x50>)
1a002fb8:	7812      	ldrb	r2, [r2, #0]
1a002fba:	429a      	cmp	r2, r3
1a002fbc:	d908      	bls.n	1a002fd0 <vPortValidateInterruptPriority+0x28>
1a002fbe:	f04f 0320 	mov.w	r3, #32
1a002fc2:	f383 8811 	msr	BASEPRI, r3
1a002fc6:	f3bf 8f6f 	isb	sy
1a002fca:	f3bf 8f4f 	dsb	sy
1a002fce:	e7fe      	b.n	1a002fce <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002fd0:	4b0a      	ldr	r3, [pc, #40]	; (1a002ffc <vPortValidateInterruptPriority+0x54>)
1a002fd2:	681b      	ldr	r3, [r3, #0]
1a002fd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002fd8:	4a09      	ldr	r2, [pc, #36]	; (1a003000 <vPortValidateInterruptPriority+0x58>)
1a002fda:	6812      	ldr	r2, [r2, #0]
1a002fdc:	4293      	cmp	r3, r2
1a002fde:	d908      	bls.n	1a002ff2 <vPortValidateInterruptPriority+0x4a>
1a002fe0:	f04f 0320 	mov.w	r3, #32
1a002fe4:	f383 8811 	msr	BASEPRI, r3
1a002fe8:	f3bf 8f6f 	isb	sy
1a002fec:	f3bf 8f4f 	dsb	sy
1a002ff0:	e7fe      	b.n	1a002ff0 <vPortValidateInterruptPriority+0x48>
	}
1a002ff2:	4770      	bx	lr
1a002ff4:	e000e3f0 	.word	0xe000e3f0
1a002ff8:	100078b4 	.word	0x100078b4
1a002ffc:	e000ed0c 	.word	0xe000ed0c
1a003000:	100078b8 	.word	0x100078b8

1a003004 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a003004:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a003006:	4b05      	ldr	r3, [pc, #20]	; (1a00301c <DAC_IRQHandler+0x18>)
1a003008:	2201      	movs	r2, #1
1a00300a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a00300e:	4b04      	ldr	r3, [pc, #16]	; (1a003020 <DAC_IRQHandler+0x1c>)
1a003010:	681b      	ldr	r3, [r3, #0]
1a003012:	b113      	cbz	r3, 1a00301a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a003014:	4b02      	ldr	r3, [pc, #8]	; (1a003020 <DAC_IRQHandler+0x1c>)
1a003016:	681b      	ldr	r3, [r3, #0]
1a003018:	4798      	blx	r3
   }
}
1a00301a:	bd08      	pop	{r3, pc}
1a00301c:	e000e100 	.word	0xe000e100
1a003020:	100078bc 	.word	0x100078bc

1a003024 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003024:	2200      	movs	r2, #0
1a003026:	2a05      	cmp	r2, #5
1a003028:	d819      	bhi.n	1a00305e <Board_LED_Init+0x3a>
{
1a00302a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00302c:	490c      	ldr	r1, [pc, #48]	; (1a003060 <Board_LED_Init+0x3c>)
1a00302e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a003032:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a003036:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a003038:	4b0a      	ldr	r3, [pc, #40]	; (1a003064 <Board_LED_Init+0x40>)
1a00303a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00303e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a003042:	2001      	movs	r0, #1
1a003044:	40a0      	lsls	r0, r4
1a003046:	4301      	orrs	r1, r0
1a003048:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00304c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a003050:	2100      	movs	r1, #0
1a003052:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003054:	3201      	adds	r2, #1
1a003056:	2a05      	cmp	r2, #5
1a003058:	d9e8      	bls.n	1a00302c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00305a:	bc70      	pop	{r4, r5, r6}
1a00305c:	4770      	bx	lr
1a00305e:	4770      	bx	lr
1a003060:	1a00a6f0 	.word	0x1a00a6f0
1a003064:	400f4000 	.word	0x400f4000

1a003068 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a003068:	2300      	movs	r3, #0
1a00306a:	2b03      	cmp	r3, #3
1a00306c:	d816      	bhi.n	1a00309c <Board_TEC_Init+0x34>
{
1a00306e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a003070:	490b      	ldr	r1, [pc, #44]	; (1a0030a0 <Board_TEC_Init+0x38>)
1a003072:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a003076:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00307a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00307c:	4c09      	ldr	r4, [pc, #36]	; (1a0030a4 <Board_TEC_Init+0x3c>)
1a00307e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003082:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a003086:	2001      	movs	r0, #1
1a003088:	40a8      	lsls	r0, r5
1a00308a:	ea21 0100 	bic.w	r1, r1, r0
1a00308e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a003092:	3301      	adds	r3, #1
1a003094:	2b03      	cmp	r3, #3
1a003096:	d9eb      	bls.n	1a003070 <Board_TEC_Init+0x8>
   }
}
1a003098:	bc30      	pop	{r4, r5}
1a00309a:	4770      	bx	lr
1a00309c:	4770      	bx	lr
1a00309e:	bf00      	nop
1a0030a0:	1a00a6e8 	.word	0x1a00a6e8
1a0030a4:	400f4000 	.word	0x400f4000

1a0030a8 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0030a8:	2300      	movs	r3, #0
1a0030aa:	2b08      	cmp	r3, #8
1a0030ac:	d816      	bhi.n	1a0030dc <Board_GPIO_Init+0x34>
{
1a0030ae:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0030b0:	490b      	ldr	r1, [pc, #44]	; (1a0030e0 <Board_GPIO_Init+0x38>)
1a0030b2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0030b6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0030ba:	784d      	ldrb	r5, [r1, #1]
1a0030bc:	4c09      	ldr	r4, [pc, #36]	; (1a0030e4 <Board_GPIO_Init+0x3c>)
1a0030be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0030c2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0030c6:	2001      	movs	r0, #1
1a0030c8:	40a8      	lsls	r0, r5
1a0030ca:	ea21 0100 	bic.w	r1, r1, r0
1a0030ce:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0030d2:	3301      	adds	r3, #1
1a0030d4:	2b08      	cmp	r3, #8
1a0030d6:	d9eb      	bls.n	1a0030b0 <Board_GPIO_Init+0x8>
   }
}
1a0030d8:	bc30      	pop	{r4, r5}
1a0030da:	4770      	bx	lr
1a0030dc:	4770      	bx	lr
1a0030de:	bf00      	nop
1a0030e0:	1a00a6fc 	.word	0x1a00a6fc
1a0030e4:	400f4000 	.word	0x400f4000

1a0030e8 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0030e8:	b510      	push	{r4, lr}
1a0030ea:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a0030ec:	4c08      	ldr	r4, [pc, #32]	; (1a003110 <Board_ADC_Init+0x28>)
1a0030ee:	4669      	mov	r1, sp
1a0030f0:	4620      	mov	r0, r4
1a0030f2:	f000 fa2f 	bl	1a003554 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0030f6:	4a07      	ldr	r2, [pc, #28]	; (1a003114 <Board_ADC_Init+0x2c>)
1a0030f8:	4669      	mov	r1, sp
1a0030fa:	4620      	mov	r0, r4
1a0030fc:	f000 fa94 	bl	1a003628 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a003100:	2200      	movs	r2, #0
1a003102:	4669      	mov	r1, sp
1a003104:	4620      	mov	r0, r4
1a003106:	f000 faa8 	bl	1a00365a <Chip_ADC_SetResolution>
}
1a00310a:	b002      	add	sp, #8
1a00310c:	bd10      	pop	{r4, pc}
1a00310e:	bf00      	nop
1a003110:	400e3000 	.word	0x400e3000
1a003114:	00061a80 	.word	0x00061a80

1a003118 <Board_SPI_Init>:
{
1a003118:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00311a:	4c0b      	ldr	r4, [pc, #44]	; (1a003148 <Board_SPI_Init+0x30>)
1a00311c:	4620      	mov	r0, r4
1a00311e:	f000 fe9d 	bl	1a003e5c <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003122:	6863      	ldr	r3, [r4, #4]
1a003124:	f023 0304 	bic.w	r3, r3, #4
1a003128:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00312a:	6823      	ldr	r3, [r4, #0]
1a00312c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003130:	f043 0307 	orr.w	r3, r3, #7
1a003134:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a003136:	4905      	ldr	r1, [pc, #20]	; (1a00314c <Board_SPI_Init+0x34>)
1a003138:	4620      	mov	r0, r4
1a00313a:	f000 fe70 	bl	1a003e1e <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00313e:	6863      	ldr	r3, [r4, #4]
1a003140:	f043 0302 	orr.w	r3, r3, #2
1a003144:	6063      	str	r3, [r4, #4]
}
1a003146:	bd10      	pop	{r4, pc}
1a003148:	400c5000 	.word	0x400c5000
1a00314c:	000186a0 	.word	0x000186a0

1a003150 <Board_I2C_Init>:
{
1a003150:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a003152:	2000      	movs	r0, #0
1a003154:	f000 f8c6 	bl	1a0032e4 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a003158:	4b04      	ldr	r3, [pc, #16]	; (1a00316c <Board_I2C_Init+0x1c>)
1a00315a:	f640 0208 	movw	r2, #2056	; 0x808
1a00315e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a003162:	4903      	ldr	r1, [pc, #12]	; (1a003170 <Board_I2C_Init+0x20>)
1a003164:	2000      	movs	r0, #0
1a003166:	f000 f8cf 	bl	1a003308 <Chip_I2C_SetClockRate>
}
1a00316a:	bd08      	pop	{r3, pc}
1a00316c:	40086000 	.word	0x40086000
1a003170:	000f4240 	.word	0x000f4240

1a003174 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a003174:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a003176:	4c07      	ldr	r4, [pc, #28]	; (1a003194 <Board_Debug_Init+0x20>)
1a003178:	4620      	mov	r0, r4
1a00317a:	f000 f8f7 	bl	1a00336c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00317e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a003182:	4620      	mov	r0, r4
1a003184:	f000 f93c 	bl	1a003400 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a003188:	2303      	movs	r3, #3
1a00318a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00318c:	2301      	movs	r3, #1
1a00318e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a003190:	bd10      	pop	{r4, pc}
1a003192:	bf00      	nop
1a003194:	400c1000 	.word	0x400c1000

1a003198 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a003198:	4b03      	ldr	r3, [pc, #12]	; (1a0031a8 <Board_UARTPutChar+0x10>)
1a00319a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a00319c:	f013 0f20 	tst.w	r3, #32
1a0031a0:	d0fa      	beq.n	1a003198 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0031a2:	4b01      	ldr	r3, [pc, #4]	; (1a0031a8 <Board_UARTPutChar+0x10>)
1a0031a4:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0031a6:	4770      	bx	lr
1a0031a8:	400c1000 	.word	0x400c1000

1a0031ac <Board_UARTGetChar>:
	return pUART->LSR;
1a0031ac:	4b05      	ldr	r3, [pc, #20]	; (1a0031c4 <Board_UARTGetChar+0x18>)
1a0031ae:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0031b0:	f013 0f01 	tst.w	r3, #1
1a0031b4:	d003      	beq.n	1a0031be <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0031b6:	4b03      	ldr	r3, [pc, #12]	; (1a0031c4 <Board_UARTGetChar+0x18>)
1a0031b8:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a0031ba:	b2c0      	uxtb	r0, r0
1a0031bc:	4770      	bx	lr
   }
   return EOF;
1a0031be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0031c2:	4770      	bx	lr
1a0031c4:	400c1000 	.word	0x400c1000

1a0031c8 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0031c8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0031ca:	f7ff ffd3 	bl	1a003174 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0031ce:	4809      	ldr	r0, [pc, #36]	; (1a0031f4 <Board_Init+0x2c>)
1a0031d0:	f000 fe04 	bl	1a003ddc <Chip_GPIO_Init>

   Board_GPIO_Init();
1a0031d4:	f7ff ff68 	bl	1a0030a8 <Board_GPIO_Init>
   Board_ADC_Init();
1a0031d8:	f7ff ff86 	bl	1a0030e8 <Board_ADC_Init>
   Board_SPI_Init();
1a0031dc:	f7ff ff9c 	bl	1a003118 <Board_SPI_Init>
   Board_I2C_Init();
1a0031e0:	f7ff ffb6 	bl	1a003150 <Board_I2C_Init>

   Board_LED_Init();
1a0031e4:	f7ff ff1e 	bl	1a003024 <Board_LED_Init>
   Board_TEC_Init();
1a0031e8:	f7ff ff3e 	bl	1a003068 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a0031ec:	f000 fd42 	bl	1a003c74 <SystemCoreClockUpdate>
}
1a0031f0:	bd08      	pop	{r3, pc}
1a0031f2:	bf00      	nop
1a0031f4:	400f4000 	.word	0x400f4000

1a0031f8 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a0031f8:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a0031fa:	b2c0      	uxtb	r0, r0
1a0031fc:	f7ff ffcc 	bl	1a003198 <Board_UARTPutChar>
}
1a003200:	bd08      	pop	{r3, pc}

1a003202 <__stdio_getchar>:

int __stdio_getchar()
{
1a003202:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a003204:	f7ff ffd2 	bl	1a0031ac <Board_UARTGetChar>
}
1a003208:	bd08      	pop	{r3, pc}

1a00320a <__stdio_init>:

void __stdio_init()
{
1a00320a:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00320c:	f7ff ffb2 	bl	1a003174 <Board_Debug_Init>
1a003210:	bd08      	pop	{r3, pc}
1a003212:	Address 0x000000001a003212 is out of bounds.


1a003214 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003214:	2300      	movs	r3, #0
1a003216:	2b1c      	cmp	r3, #28
1a003218:	d812      	bhi.n	1a003240 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00321a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00321c:	4a09      	ldr	r2, [pc, #36]	; (1a003244 <Board_SetupMuxing+0x30>)
1a00321e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a003222:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a003226:	784a      	ldrb	r2, [r1, #1]
1a003228:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00322a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00322e:	4906      	ldr	r1, [pc, #24]	; (1a003248 <Board_SetupMuxing+0x34>)
1a003230:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003234:	3301      	adds	r3, #1
1a003236:	2b1c      	cmp	r3, #28
1a003238:	d9f0      	bls.n	1a00321c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00323a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00323e:	4770      	bx	lr
1a003240:	4770      	bx	lr
1a003242:	bf00      	nop
1a003244:	1a00a718 	.word	0x1a00a718
1a003248:	40086000 	.word	0x40086000

1a00324c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00324c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00324e:	4a17      	ldr	r2, [pc, #92]	; (1a0032ac <Board_SetupClocking+0x60>)
1a003250:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a003254:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003258:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00325c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a003260:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a003264:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003268:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00326c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a003270:	2201      	movs	r2, #1
1a003272:	490f      	ldr	r1, [pc, #60]	; (1a0032b0 <Board_SetupClocking+0x64>)
1a003274:	2006      	movs	r0, #6
1a003276:	f000 fd07 	bl	1a003c88 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00327a:	2400      	movs	r4, #0
1a00327c:	b14c      	cbz	r4, 1a003292 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00327e:	4b0b      	ldr	r3, [pc, #44]	; (1a0032ac <Board_SetupClocking+0x60>)
1a003280:	685a      	ldr	r2, [r3, #4]
1a003282:	f022 020c 	bic.w	r2, r2, #12
1a003286:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a003288:	685a      	ldr	r2, [r3, #4]
1a00328a:	f042 0203 	orr.w	r2, r2, #3
1a00328e:	605a      	str	r2, [r3, #4]
}
1a003290:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a003292:	4808      	ldr	r0, [pc, #32]	; (1a0032b4 <Board_SetupClocking+0x68>)
1a003294:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003298:	2301      	movs	r3, #1
1a00329a:	788a      	ldrb	r2, [r1, #2]
1a00329c:	7849      	ldrb	r1, [r1, #1]
1a00329e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0032a2:	f000 fc29 	bl	1a003af8 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0032a6:	3401      	adds	r4, #1
1a0032a8:	e7e8      	b.n	1a00327c <Board_SetupClocking+0x30>
1a0032aa:	bf00      	nop
1a0032ac:	40043000 	.word	0x40043000
1a0032b0:	0c28cb00 	.word	0x0c28cb00
1a0032b4:	1a00a714 	.word	0x1a00a714

1a0032b8 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0032b8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0032ba:	f7ff ffab 	bl	1a003214 <Board_SetupMuxing>
    Board_SetupClocking();
1a0032be:	f7ff ffc5 	bl	1a00324c <Board_SetupClocking>
}
1a0032c2:	bd08      	pop	{r3, pc}

1a0032c4 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0032c4:	2901      	cmp	r1, #1
1a0032c6:	d000      	beq.n	1a0032ca <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a0032c8:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a0032ca:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0032ce:	0082      	lsls	r2, r0, #2
1a0032d0:	4b03      	ldr	r3, [pc, #12]	; (1a0032e0 <Chip_I2C_EventHandler+0x1c>)
1a0032d2:	4413      	add	r3, r2
1a0032d4:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a0032d6:	7d13      	ldrb	r3, [r2, #20]
1a0032d8:	b2db      	uxtb	r3, r3
1a0032da:	2b04      	cmp	r3, #4
1a0032dc:	d0fb      	beq.n	1a0032d6 <Chip_I2C_EventHandler+0x12>
1a0032de:	e7f3      	b.n	1a0032c8 <Chip_I2C_EventHandler+0x4>
1a0032e0:	10000008 	.word	0x10000008

1a0032e4 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0032e4:	b570      	push	{r4, r5, r6, lr}
1a0032e6:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0032e8:	4e06      	ldr	r6, [pc, #24]	; (1a003304 <Chip_I2C_Init+0x20>)
1a0032ea:	00c4      	lsls	r4, r0, #3
1a0032ec:	1a22      	subs	r2, r4, r0
1a0032ee:	0093      	lsls	r3, r2, #2
1a0032f0:	4433      	add	r3, r6
1a0032f2:	8898      	ldrh	r0, [r3, #4]
1a0032f4:	f000 fc64 	bl	1a003bc0 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0032f8:	1b64      	subs	r4, r4, r5
1a0032fa:	00a3      	lsls	r3, r4, #2
1a0032fc:	58f3      	ldr	r3, [r6, r3]
1a0032fe:	226c      	movs	r2, #108	; 0x6c
1a003300:	619a      	str	r2, [r3, #24]
}
1a003302:	bd70      	pop	{r4, r5, r6, pc}
1a003304:	10000008 	.word	0x10000008

1a003308 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00330c:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00330e:	4e0b      	ldr	r6, [pc, #44]	; (1a00333c <Chip_I2C_SetClockRate+0x34>)
1a003310:	00c5      	lsls	r5, r0, #3
1a003312:	1a2b      	subs	r3, r5, r0
1a003314:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a003318:	eb06 0308 	add.w	r3, r6, r8
1a00331c:	8898      	ldrh	r0, [r3, #4]
1a00331e:	f000 fc83 	bl	1a003c28 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a003322:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003326:	f856 3008 	ldr.w	r3, [r6, r8]
1a00332a:	0842      	lsrs	r2, r0, #1
1a00332c:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00332e:	f856 3008 	ldr.w	r3, [r6, r8]
1a003332:	691a      	ldr	r2, [r3, #16]
1a003334:	1a80      	subs	r0, r0, r2
1a003336:	6158      	str	r0, [r3, #20]
}
1a003338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00333c:	10000008 	.word	0x10000008

1a003340 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a003340:	4b09      	ldr	r3, [pc, #36]	; (1a003368 <Chip_UART_GetIndex+0x28>)
1a003342:	4298      	cmp	r0, r3
1a003344:	d009      	beq.n	1a00335a <Chip_UART_GetIndex+0x1a>
1a003346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00334a:	4298      	cmp	r0, r3
1a00334c:	d007      	beq.n	1a00335e <Chip_UART_GetIndex+0x1e>
1a00334e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a003352:	4298      	cmp	r0, r3
1a003354:	d005      	beq.n	1a003362 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a003356:	2000      	movs	r0, #0
1a003358:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00335a:	2002      	movs	r0, #2
1a00335c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00335e:	2003      	movs	r0, #3
1a003360:	4770      	bx	lr
			return 1;
1a003362:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a003364:	4770      	bx	lr
1a003366:	bf00      	nop
1a003368:	400c1000 	.word	0x400c1000

1a00336c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00336c:	b530      	push	{r4, r5, lr}
1a00336e:	b083      	sub	sp, #12
1a003370:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a003372:	f7ff ffe5 	bl	1a003340 <Chip_UART_GetIndex>
1a003376:	2301      	movs	r3, #1
1a003378:	461a      	mov	r2, r3
1a00337a:	4619      	mov	r1, r3
1a00337c:	4d0e      	ldr	r5, [pc, #56]	; (1a0033b8 <Chip_UART_Init+0x4c>)
1a00337e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a003382:	f000 fbff 	bl	1a003b84 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a003386:	2307      	movs	r3, #7
1a003388:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00338a:	2300      	movs	r3, #0
1a00338c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00338e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a003390:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a003392:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a003394:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a003396:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a003398:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00339a:	4b08      	ldr	r3, [pc, #32]	; (1a0033bc <Chip_UART_Init+0x50>)
1a00339c:	429c      	cmp	r4, r3
1a00339e:	d006      	beq.n	1a0033ae <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0033a0:	2303      	movs	r3, #3
1a0033a2:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0033a4:	2310      	movs	r3, #16
1a0033a6:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0033a8:	9b01      	ldr	r3, [sp, #4]
}
1a0033aa:	b003      	add	sp, #12
1a0033ac:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0033ae:	2300      	movs	r3, #0
1a0033b0:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0033b2:	69a3      	ldr	r3, [r4, #24]
1a0033b4:	9301      	str	r3, [sp, #4]
1a0033b6:	e7f3      	b.n	1a0033a0 <Chip_UART_Init+0x34>
1a0033b8:	1a00a794 	.word	0x1a00a794
1a0033bc:	40082000 	.word	0x40082000

1a0033c0 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0033c0:	b538      	push	{r3, r4, r5, lr}
1a0033c2:	4605      	mov	r5, r0
1a0033c4:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0033c6:	f7ff ffbb 	bl	1a003340 <Chip_UART_GetIndex>
1a0033ca:	4b0c      	ldr	r3, [pc, #48]	; (1a0033fc <Chip_UART_SetBaud+0x3c>)
1a0033cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0033d0:	f000 fc2a 	bl	1a003c28 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0033d4:	0123      	lsls	r3, r4, #4
1a0033d6:	fbb0 f3f3 	udiv	r3, r0, r3
1a0033da:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0033dc:	68ea      	ldr	r2, [r5, #12]
1a0033de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0033e2:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a0033e4:	6029      	str	r1, [r5, #0]
1a0033e6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0033ea:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0033ec:	68ea      	ldr	r2, [r5, #12]
1a0033ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0033f2:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0033f4:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0033f8:	0900      	lsrs	r0, r0, #4
1a0033fa:	bd38      	pop	{r3, r4, r5, pc}
1a0033fc:	1a00a78c 	.word	0x1a00a78c

1a003400 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a003400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003404:	b083      	sub	sp, #12
1a003406:	4683      	mov	fp, r0
1a003408:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00340a:	f7ff ff99 	bl	1a003340 <Chip_UART_GetIndex>
1a00340e:	4b35      	ldr	r3, [pc, #212]	; (1a0034e4 <Chip_UART_SetBaudFDR+0xe4>)
1a003410:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003414:	f000 fc08 	bl	1a003c28 <Chip_Clock_GetRate>
1a003418:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00341a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00341e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a003420:	2300      	movs	r3, #0
1a003422:	9301      	str	r3, [sp, #4]
1a003424:	46a2      	mov	sl, r4
1a003426:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a003428:	e02a      	b.n	1a003480 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00342a:	4242      	negs	r2, r0
				div ++;
1a00342c:	1c4b      	adds	r3, r1, #1
1a00342e:	e017      	b.n	1a003460 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a003430:	b30a      	cbz	r2, 1a003476 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a003432:	4617      	mov	r7, r2
			sd = d;
1a003434:	9501      	str	r5, [sp, #4]
			sm = m;
1a003436:	46a2      	mov	sl, r4
			sdiv = div;
1a003438:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00343a:	3501      	adds	r5, #1
1a00343c:	42ac      	cmp	r4, r5
1a00343e:	d91e      	bls.n	1a00347e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a003440:	0933      	lsrs	r3, r6, #4
1a003442:	0730      	lsls	r0, r6, #28
1a003444:	fba4 0100 	umull	r0, r1, r4, r0
1a003448:	fb04 1103 	mla	r1, r4, r3, r1
1a00344c:	1962      	adds	r2, r4, r5
1a00344e:	fb08 f202 	mul.w	r2, r8, r2
1a003452:	2300      	movs	r3, #0
1a003454:	f001 fe76 	bl	1a005144 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a003458:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00345a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00345c:	2800      	cmp	r0, #0
1a00345e:	dbe4      	blt.n	1a00342a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a003460:	4297      	cmp	r7, r2
1a003462:	d3ea      	bcc.n	1a00343a <Chip_UART_SetBaudFDR+0x3a>
1a003464:	2b00      	cmp	r3, #0
1a003466:	d0e8      	beq.n	1a00343a <Chip_UART_SetBaudFDR+0x3a>
1a003468:	0c19      	lsrs	r1, r3, #16
1a00346a:	d1e6      	bne.n	1a00343a <Chip_UART_SetBaudFDR+0x3a>
1a00346c:	2b02      	cmp	r3, #2
1a00346e:	d8df      	bhi.n	1a003430 <Chip_UART_SetBaudFDR+0x30>
1a003470:	2d00      	cmp	r5, #0
1a003472:	d0dd      	beq.n	1a003430 <Chip_UART_SetBaudFDR+0x30>
1a003474:	e7e1      	b.n	1a00343a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a003476:	4617      	mov	r7, r2
			sd = d;
1a003478:	9501      	str	r5, [sp, #4]
			sm = m;
1a00347a:	46a2      	mov	sl, r4
			sdiv = div;
1a00347c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00347e:	3401      	adds	r4, #1
1a003480:	b11f      	cbz	r7, 1a00348a <Chip_UART_SetBaudFDR+0x8a>
1a003482:	2c0f      	cmp	r4, #15
1a003484:	d801      	bhi.n	1a00348a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a003486:	2500      	movs	r5, #0
1a003488:	e7d8      	b.n	1a00343c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00348a:	f1b9 0f00 	cmp.w	r9, #0
1a00348e:	d024      	beq.n	1a0034da <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003490:	f8db 300c 	ldr.w	r3, [fp, #12]
1a003494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003498:	f8cb 300c 	str.w	r3, [fp, #12]
1a00349c:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a0034a0:	f8cb 3000 	str.w	r3, [fp]
1a0034a4:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0034a8:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0034ac:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0034b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0034b4:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0034b8:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0034bc:	b2db      	uxtb	r3, r3
1a0034be:	9901      	ldr	r1, [sp, #4]
1a0034c0:	f001 020f 	and.w	r2, r1, #15
1a0034c4:	4313      	orrs	r3, r2
1a0034c6:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0034ca:	0933      	lsrs	r3, r6, #4
1a0034cc:	fb0a f303 	mul.w	r3, sl, r3
1a0034d0:	448a      	add	sl, r1
1a0034d2:	fb09 f90a 	mul.w	r9, r9, sl
1a0034d6:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0034da:	4648      	mov	r0, r9
1a0034dc:	b003      	add	sp, #12
1a0034de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0034e2:	bf00      	nop
1a0034e4:	1a00a78c 	.word	0x1a00a78c

1a0034e8 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0034e8:	4b03      	ldr	r3, [pc, #12]	; (1a0034f8 <Chip_ADC_GetClockIndex+0x10>)
1a0034ea:	4298      	cmp	r0, r3
1a0034ec:	d001      	beq.n	1a0034f2 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0034ee:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0034f0:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0034f2:	2004      	movs	r0, #4
1a0034f4:	4770      	bx	lr
1a0034f6:	bf00      	nop
1a0034f8:	400e4000 	.word	0x400e4000

1a0034fc <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0034fc:	b570      	push	{r4, r5, r6, lr}
1a0034fe:	460d      	mov	r5, r1
1a003500:	4614      	mov	r4, r2
1a003502:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a003504:	f7ff fff0 	bl	1a0034e8 <Chip_ADC_GetClockIndex>
1a003508:	f000 fb8e 	bl	1a003c28 <Chip_Clock_GetRate>
	if (burstMode) {
1a00350c:	b965      	cbnz	r5, 1a003528 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a00350e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a003512:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a003516:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00351a:	0064      	lsls	r4, r4, #1
1a00351c:	fbb0 f0f4 	udiv	r0, r0, r4
1a003520:	b2c0      	uxtb	r0, r0
1a003522:	3801      	subs	r0, #1
	return div;
}
1a003524:	b2c0      	uxtb	r0, r0
1a003526:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a003528:	fb04 f406 	mul.w	r4, r4, r6
1a00352c:	e7f3      	b.n	1a003516 <getClkDiv+0x1a>

1a00352e <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a00352e:	6803      	ldr	r3, [r0, #0]
1a003530:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a003534:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a003538:	6001      	str	r1, [r0, #0]
}
1a00353a:	4770      	bx	lr

1a00353c <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
1a00353c:	3104      	adds	r1, #4
1a00353e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
	if (!ADC_DR_DONE(temp)) {
1a003542:	2b00      	cmp	r3, #0
1a003544:	db01      	blt.n	1a00354a <readAdcVal+0xe>
		return ERROR;
1a003546:	2000      	movs	r0, #0
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
	return SUCCESS;
}
1a003548:	4770      	bx	lr
	*data = (uint16_t) ADC_DR_RESULT(temp);
1a00354a:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a00354e:	8013      	strh	r3, [r2, #0]
	return SUCCESS;
1a003550:	2001      	movs	r0, #1
1a003552:	4770      	bx	lr

1a003554 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a003554:	b538      	push	{r3, r4, r5, lr}
1a003556:	4605      	mov	r5, r0
1a003558:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00355a:	f7ff ffc5 	bl	1a0034e8 <Chip_ADC_GetClockIndex>
1a00355e:	2301      	movs	r3, #1
1a003560:	461a      	mov	r2, r3
1a003562:	4619      	mov	r1, r3
1a003564:	f000 fb0e 	bl	1a003b84 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a003568:	2100      	movs	r1, #0
1a00356a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a00356c:	4a08      	ldr	r2, [pc, #32]	; (1a003590 <Chip_ADC_Init+0x3c>)
1a00356e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a003570:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a003572:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a003574:	230b      	movs	r3, #11
1a003576:	4628      	mov	r0, r5
1a003578:	f7ff ffc0 	bl	1a0034fc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00357c:	0200      	lsls	r0, r0, #8
1a00357e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003582:	7920      	ldrb	r0, [r4, #4]
1a003584:	0440      	lsls	r0, r0, #17
1a003586:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00358a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a00358c:	6028      	str	r0, [r5, #0]
}
1a00358e:	bd38      	pop	{r3, r4, r5, pc}
1a003590:	00061a80 	.word	0x00061a80

1a003594 <Chip_ADC_DeInit>:

/* Shutdown ADC */
void Chip_ADC_DeInit(LPC_ADC_T *pADC)
{
1a003594:	b508      	push	{r3, lr}
	pADC->INTEN = 0x00000100;
1a003596:	f44f 7280 	mov.w	r2, #256	; 0x100
1a00359a:	60c2      	str	r2, [r0, #12]
	pADC->CR = 0;
1a00359c:	2200      	movs	r2, #0
1a00359e:	6002      	str	r2, [r0, #0]
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
1a0035a0:	f7ff ffa2 	bl	1a0034e8 <Chip_ADC_GetClockIndex>
1a0035a4:	f000 fb26 	bl	1a003bf4 <Chip_Clock_Disable>
}
1a0035a8:	bd08      	pop	{r3, pc}

1a0035aa <Chip_ADC_ReadValue>:

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a0035aa:	b508      	push	{r3, lr}
	return readAdcVal(pADC, channel, data);
1a0035ac:	f7ff ffc6 	bl	1a00353c <readAdcVal>
}
1a0035b0:	bd08      	pop	{r3, pc}

1a0035b2 <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
	switch (StatusType) {
1a0035b2:	2a01      	cmp	r2, #1
1a0035b4:	d00a      	beq.n	1a0035cc <Chip_ADC_ReadStatus+0x1a>
1a0035b6:	b11a      	cbz	r2, 1a0035c0 <Chip_ADC_ReadStatus+0xe>
1a0035b8:	2a02      	cmp	r2, #2
1a0035ba:	d00f      	beq.n	1a0035dc <Chip_ADC_ReadStatus+0x2a>
		return pADC->STAT >> 16 ? SET : RESET;

	default:
		break;
	}
	return RESET;
1a0035bc:	2000      	movs	r0, #0
}
1a0035be:	4770      	bx	lr
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a0035c0:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0035c2:	40c8      	lsrs	r0, r1
1a0035c4:	f000 0001 	and.w	r0, r0, #1
1a0035c8:	b2c0      	uxtb	r0, r0
1a0035ca:	4770      	bx	lr
		channel += 8;
1a0035cc:	3108      	adds	r1, #8
1a0035ce:	b2c9      	uxtb	r1, r1
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a0035d0:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0035d2:	40c8      	lsrs	r0, r1
1a0035d4:	f000 0001 	and.w	r0, r0, #1
1a0035d8:	b2c0      	uxtb	r0, r0
1a0035da:	4770      	bx	lr
		return pADC->STAT >> 16 ? SET : RESET;
1a0035dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a0035de:	0c1b      	lsrs	r3, r3, #16
1a0035e0:	bf14      	ite	ne
1a0035e2:	2001      	movne	r0, #1
1a0035e4:	2000      	moveq	r0, #0
1a0035e6:	4770      	bx	lr

1a0035e8 <Chip_ADC_Int_SetChannelCmd>:

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a0035e8:	2a01      	cmp	r2, #1
1a0035ea:	d007      	beq.n	1a0035fc <Chip_ADC_Int_SetChannelCmd+0x14>
		pADC->INTEN |= (1UL << channel);
	}
	else {
		pADC->INTEN &= (~(1UL << channel));
1a0035ec:	68c3      	ldr	r3, [r0, #12]
1a0035ee:	2201      	movs	r2, #1
1a0035f0:	fa02 f101 	lsl.w	r1, r2, r1
1a0035f4:	ea23 0101 	bic.w	r1, r3, r1
1a0035f8:	60c1      	str	r1, [r0, #12]
	}
}
1a0035fa:	4770      	bx	lr
		pADC->INTEN |= (1UL << channel);
1a0035fc:	68c3      	ldr	r3, [r0, #12]
1a0035fe:	fa02 f101 	lsl.w	r1, r2, r1
1a003602:	4319      	orrs	r1, r3
1a003604:	60c1      	str	r1, [r0, #12]
1a003606:	4770      	bx	lr

1a003608 <Chip_ADC_SetStartMode>:

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a003608:	b508      	push	{r3, lr}
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a00360a:	2901      	cmp	r1, #1
1a00360c:	d904      	bls.n	1a003618 <Chip_ADC_SetStartMode+0x10>
		if (EdgeOption) {
1a00360e:	b932      	cbnz	r2, 1a00361e <Chip_ADC_SetStartMode+0x16>
			pADC->CR |= ADC_CR_EDGE;
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
1a003610:	6803      	ldr	r3, [r0, #0]
1a003612:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a003616:	6003      	str	r3, [r0, #0]
		}
	}
	setStartMode(pADC, (uint8_t) mode);
1a003618:	f7ff ff89 	bl	1a00352e <setStartMode>
}
1a00361c:	bd08      	pop	{r3, pc}
			pADC->CR |= ADC_CR_EDGE;
1a00361e:	6803      	ldr	r3, [r0, #0]
1a003620:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a003624:	6003      	str	r3, [r0, #0]
1a003626:	e7f7      	b.n	1a003618 <Chip_ADC_SetStartMode+0x10>

1a003628 <Chip_ADC_SetSampleRate>:

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a003628:	b570      	push	{r4, r5, r6, lr}
1a00362a:	4605      	mov	r5, r0
1a00362c:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00362e:	6804      	ldr	r4, [r0, #0]
1a003630:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a003634:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a003638:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00363a:	790b      	ldrb	r3, [r1, #4]
1a00363c:	f1c3 030b 	rsb	r3, r3, #11
1a003640:	b2db      	uxtb	r3, r3
1a003642:	7949      	ldrb	r1, [r1, #5]
1a003644:	f7ff ff5a 	bl	1a0034fc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003648:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00364c:	7930      	ldrb	r0, [r6, #4]
1a00364e:	0440      	lsls	r0, r0, #17
1a003650:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a003654:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a003656:	6028      	str	r0, [r5, #0]
}
1a003658:	bd70      	pop	{r4, r5, r6, pc}

1a00365a <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00365a:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a00365c:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00365e:	680a      	ldr	r2, [r1, #0]
1a003660:	f7ff ffe2 	bl	1a003628 <Chip_ADC_SetSampleRate>
}
1a003664:	bd08      	pop	{r3, pc}

1a003666 <Chip_ADC_EnableChannel>:

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a003666:	2a01      	cmp	r2, #1
1a003668:	d00b      	beq.n	1a003682 <Chip_ADC_EnableChannel+0x1c>
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a00366a:	6803      	ldr	r3, [r0, #0]
1a00366c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
1a003670:	6003      	str	r3, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a003672:	6803      	ldr	r3, [r0, #0]
1a003674:	2201      	movs	r2, #1
1a003676:	fa02 f101 	lsl.w	r1, r2, r1
1a00367a:	ea23 0101 	bic.w	r1, r3, r1
1a00367e:	6001      	str	r1, [r0, #0]
	}
}
1a003680:	4770      	bx	lr
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a003682:	6803      	ldr	r3, [r0, #0]
1a003684:	fa02 f101 	lsl.w	r1, r2, r1
1a003688:	4319      	orrs	r1, r3
1a00368a:	6001      	str	r1, [r0, #0]
1a00368c:	4770      	bx	lr

1a00368e <Chip_ADC_SetBurstCmd>:

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a00368e:	b538      	push	{r3, r4, r5, lr}
1a003690:	4604      	mov	r4, r0
1a003692:	460d      	mov	r5, r1
	setStartMode(pADC, ADC_NO_START);
1a003694:	2100      	movs	r1, #0
1a003696:	f7ff ff4a 	bl	1a00352e <setStartMode>
	
    if (NewState == DISABLE) {
1a00369a:	b125      	cbz	r5, 1a0036a6 <Chip_ADC_SetBurstCmd+0x18>
		pADC->CR &= ~ADC_CR_BURST;
	}
	else {
		pADC->CR |= ADC_CR_BURST;
1a00369c:	6823      	ldr	r3, [r4, #0]
1a00369e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a0036a2:	6023      	str	r3, [r4, #0]
	}
}
1a0036a4:	bd38      	pop	{r3, r4, r5, pc}
		pADC->CR &= ~ADC_CR_BURST;
1a0036a6:	6823      	ldr	r3, [r4, #0]
1a0036a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a0036ac:	6023      	str	r3, [r4, #0]
1a0036ae:	e7f9      	b.n	1a0036a4 <Chip_ADC_SetBurstCmd+0x16>

1a0036b0 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0036b0:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0036b2:	680b      	ldr	r3, [r1, #0]
1a0036b4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0036b8:	d002      	beq.n	1a0036c0 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0036ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0036be:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0036c0:	4607      	mov	r7, r0
1a0036c2:	2501      	movs	r5, #1
1a0036c4:	e03b      	b.n	1a00373e <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0036c6:	694b      	ldr	r3, [r1, #20]
1a0036c8:	fb03 f302 	mul.w	r3, r3, r2
1a0036cc:	fbb3 f3f5 	udiv	r3, r3, r5
1a0036d0:	e014      	b.n	1a0036fc <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0036d2:	461c      	mov	r4, r3
1a0036d4:	e020      	b.n	1a003718 <pll_calc_divs+0x68>
		return -val;
1a0036d6:	f1cc 0c00 	rsb	ip, ip, #0
1a0036da:	e020      	b.n	1a00371e <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a0036dc:	3201      	adds	r2, #1
1a0036de:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0036e2:	dc26      	bgt.n	1a003732 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a0036e4:	680c      	ldr	r4, [r1, #0]
1a0036e6:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0036ea:	d0ec      	beq.n	1a0036c6 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0036ec:	1c73      	adds	r3, r6, #1
1a0036ee:	fa02 fc03 	lsl.w	ip, r2, r3
1a0036f2:	694b      	ldr	r3, [r1, #20]
1a0036f4:	fb03 f30c 	mul.w	r3, r3, ip
1a0036f8:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0036fc:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a00374c <pll_calc_divs+0x9c>
1a003700:	4563      	cmp	r3, ip
1a003702:	d9eb      	bls.n	1a0036dc <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a003704:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a003750 <pll_calc_divs+0xa0>
1a003708:	4563      	cmp	r3, ip
1a00370a:	d812      	bhi.n	1a003732 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a00370c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003710:	d1df      	bne.n	1a0036d2 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a003712:	1c74      	adds	r4, r6, #1
1a003714:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a003718:	ebb0 0c04 	subs.w	ip, r0, r4
1a00371c:	d4db      	bmi.n	1a0036d6 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a00371e:	4567      	cmp	r7, ip
1a003720:	d9dc      	bls.n	1a0036dc <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a003722:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a003724:	1c77      	adds	r7, r6, #1
1a003726:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a003728:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00372a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a00372c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a00372e:	4667      	mov	r7, ip
1a003730:	e7d4      	b.n	1a0036dc <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a003732:	3601      	adds	r6, #1
1a003734:	2e03      	cmp	r6, #3
1a003736:	dc01      	bgt.n	1a00373c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a003738:	2201      	movs	r2, #1
1a00373a:	e7d0      	b.n	1a0036de <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a00373c:	3501      	adds	r5, #1
1a00373e:	2d04      	cmp	r5, #4
1a003740:	dc01      	bgt.n	1a003746 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a003742:	2600      	movs	r6, #0
1a003744:	e7f6      	b.n	1a003734 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a003746:	bcf0      	pop	{r4, r5, r6, r7}
1a003748:	4770      	bx	lr
1a00374a:	bf00      	nop
1a00374c:	094c5eff 	.word	0x094c5eff
1a003750:	1312d000 	.word	0x1312d000

1a003754 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003754:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003756:	b099      	sub	sp, #100	; 0x64
1a003758:	4605      	mov	r5, r0
1a00375a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a00375c:	225c      	movs	r2, #92	; 0x5c
1a00375e:	2100      	movs	r1, #0
1a003760:	a801      	add	r0, sp, #4
1a003762:	f002 fd11 	bl	1a006188 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a003766:	2380      	movs	r3, #128	; 0x80
1a003768:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00376a:	6963      	ldr	r3, [r4, #20]
1a00376c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00376e:	7923      	ldrb	r3, [r4, #4]
1a003770:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a003774:	4669      	mov	r1, sp
1a003776:	4628      	mov	r0, r5
1a003778:	f7ff ff9a 	bl	1a0036b0 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a00377c:	9b06      	ldr	r3, [sp, #24]
1a00377e:	42ab      	cmp	r3, r5
1a003780:	d027      	beq.n	1a0037d2 <pll_get_frac+0x7e>
	if (val < 0)
1a003782:	1aeb      	subs	r3, r5, r3
1a003784:	d42e      	bmi.n	1a0037e4 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a003786:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a003788:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00378a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00378e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a003790:	6963      	ldr	r3, [r4, #20]
1a003792:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a003794:	7923      	ldrb	r3, [r4, #4]
1a003796:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00379a:	a910      	add	r1, sp, #64	; 0x40
1a00379c:	4628      	mov	r0, r5
1a00379e:	f7ff ff87 	bl	1a0036b0 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0037a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0037a4:	42ab      	cmp	r3, r5
1a0037a6:	d01f      	beq.n	1a0037e8 <pll_get_frac+0x94>
	if (val < 0)
1a0037a8:	1aeb      	subs	r3, r5, r3
1a0037aa:	d425      	bmi.n	1a0037f8 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0037ac:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0037ae:	4b2b      	ldr	r3, [pc, #172]	; (1a00385c <pll_get_frac+0x108>)
1a0037b0:	429d      	cmp	r5, r3
1a0037b2:	d923      	bls.n	1a0037fc <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0037b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0037b6:	1aed      	subs	r5, r5, r3
1a0037b8:	d433      	bmi.n	1a003822 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0037ba:	42ae      	cmp	r6, r5
1a0037bc:	dc3b      	bgt.n	1a003836 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0037be:	42be      	cmp	r6, r7
1a0037c0:	dc31      	bgt.n	1a003826 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0037c2:	466d      	mov	r5, sp
1a0037c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0037c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0037c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0037cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0037d0:	e006      	b.n	1a0037e0 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0037d2:	466d      	mov	r5, sp
1a0037d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0037d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0037d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0037dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0037e0:	b019      	add	sp, #100	; 0x64
1a0037e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0037e4:	425b      	negs	r3, r3
1a0037e6:	e7ce      	b.n	1a003786 <pll_get_frac+0x32>
		*ppll = pll[2];
1a0037e8:	ad10      	add	r5, sp, #64	; 0x40
1a0037ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0037ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0037ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0037f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0037f6:	e7f3      	b.n	1a0037e0 <pll_get_frac+0x8c>
		return -val;
1a0037f8:	425b      	negs	r3, r3
1a0037fa:	e7d7      	b.n	1a0037ac <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0037fc:	2340      	movs	r3, #64	; 0x40
1a0037fe:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a003800:	6963      	ldr	r3, [r4, #20]
1a003802:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a003804:	a908      	add	r1, sp, #32
1a003806:	4628      	mov	r0, r5
1a003808:	f7ff ff52 	bl	1a0036b0 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a00380c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00380e:	42ab      	cmp	r3, r5
1a003810:	d1d0      	bne.n	1a0037b4 <pll_get_frac+0x60>
			*ppll = pll[1];
1a003812:	ad08      	add	r5, sp, #32
1a003814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003818:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00381c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a003820:	e7de      	b.n	1a0037e0 <pll_get_frac+0x8c>
		return -val;
1a003822:	426d      	negs	r5, r5
1a003824:	e7c9      	b.n	1a0037ba <pll_get_frac+0x66>
			*ppll = pll[2];
1a003826:	ad10      	add	r5, sp, #64	; 0x40
1a003828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00382a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00382c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003830:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003834:	e7d4      	b.n	1a0037e0 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a003836:	42af      	cmp	r7, r5
1a003838:	db07      	blt.n	1a00384a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00383a:	ad08      	add	r5, sp, #32
1a00383c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00383e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003840:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003848:	e7ca      	b.n	1a0037e0 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00384a:	ad10      	add	r5, sp, #64	; 0x40
1a00384c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00384e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003850:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003854:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003858:	e7c2      	b.n	1a0037e0 <pll_get_frac+0x8c>
1a00385a:	bf00      	nop
1a00385c:	068e7780 	.word	0x068e7780

1a003860 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a003860:	b430      	push	{r4, r5}
1a003862:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a003864:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a003866:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003868:	e000      	b.n	1a00386c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00386a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00386c:	281c      	cmp	r0, #28
1a00386e:	d118      	bne.n	1a0038a2 <Chip_Clock_FindBaseClock+0x42>
1a003870:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003874:	0051      	lsls	r1, r2, #1
1a003876:	4a0c      	ldr	r2, [pc, #48]	; (1a0038a8 <Chip_Clock_FindBaseClock+0x48>)
1a003878:	440a      	add	r2, r1
1a00387a:	7914      	ldrb	r4, [r2, #4]
1a00387c:	4284      	cmp	r4, r0
1a00387e:	d010      	beq.n	1a0038a2 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a003880:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a003884:	004a      	lsls	r2, r1, #1
1a003886:	4908      	ldr	r1, [pc, #32]	; (1a0038a8 <Chip_Clock_FindBaseClock+0x48>)
1a003888:	5a8a      	ldrh	r2, [r1, r2]
1a00388a:	42aa      	cmp	r2, r5
1a00388c:	d8ed      	bhi.n	1a00386a <Chip_Clock_FindBaseClock+0xa>
1a00388e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003892:	0051      	lsls	r1, r2, #1
1a003894:	4a04      	ldr	r2, [pc, #16]	; (1a0038a8 <Chip_Clock_FindBaseClock+0x48>)
1a003896:	440a      	add	r2, r1
1a003898:	8852      	ldrh	r2, [r2, #2]
1a00389a:	42aa      	cmp	r2, r5
1a00389c:	d3e5      	bcc.n	1a00386a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00389e:	4620      	mov	r0, r4
1a0038a0:	e7e4      	b.n	1a00386c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0038a2:	bc30      	pop	{r4, r5}
1a0038a4:	4770      	bx	lr
1a0038a6:	bf00      	nop
1a0038a8:	1a00a7a8 	.word	0x1a00a7a8

1a0038ac <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0038ac:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0038ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0038b2:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0038b4:	4a0d      	ldr	r2, [pc, #52]	; (1a0038ec <Chip_Clock_EnableCrystal+0x40>)
1a0038b6:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0038b8:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0038bc:	6992      	ldr	r2, [r2, #24]
1a0038be:	428a      	cmp	r2, r1
1a0038c0:	d001      	beq.n	1a0038c6 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0038c2:	4a0a      	ldr	r2, [pc, #40]	; (1a0038ec <Chip_Clock_EnableCrystal+0x40>)
1a0038c4:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0038c6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0038ca:	4a09      	ldr	r2, [pc, #36]	; (1a0038f0 <Chip_Clock_EnableCrystal+0x44>)
1a0038cc:	6811      	ldr	r1, [r2, #0]
1a0038ce:	4a09      	ldr	r2, [pc, #36]	; (1a0038f4 <Chip_Clock_EnableCrystal+0x48>)
1a0038d0:	4291      	cmp	r1, r2
1a0038d2:	d901      	bls.n	1a0038d8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0038d4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0038d8:	4a04      	ldr	r2, [pc, #16]	; (1a0038ec <Chip_Clock_EnableCrystal+0x40>)
1a0038da:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0038dc:	9b01      	ldr	r3, [sp, #4]
1a0038de:	1e5a      	subs	r2, r3, #1
1a0038e0:	9201      	str	r2, [sp, #4]
1a0038e2:	2b00      	cmp	r3, #0
1a0038e4:	d1fa      	bne.n	1a0038dc <Chip_Clock_EnableCrystal+0x30>
}
1a0038e6:	b002      	add	sp, #8
1a0038e8:	4770      	bx	lr
1a0038ea:	bf00      	nop
1a0038ec:	40050000 	.word	0x40050000
1a0038f0:	1a00a710 	.word	0x1a00a710
1a0038f4:	01312cff 	.word	0x01312cff

1a0038f8 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0038f8:	3012      	adds	r0, #18
1a0038fa:	4b05      	ldr	r3, [pc, #20]	; (1a003910 <Chip_Clock_GetDividerSource+0x18>)
1a0038fc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a003900:	f010 0f01 	tst.w	r0, #1
1a003904:	d102      	bne.n	1a00390c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003906:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00390a:	4770      	bx	lr
		return CLKINPUT_PD;
1a00390c:	2011      	movs	r0, #17
}
1a00390e:	4770      	bx	lr
1a003910:	40050000 	.word	0x40050000

1a003914 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a003914:	f100 0212 	add.w	r2, r0, #18
1a003918:	4b03      	ldr	r3, [pc, #12]	; (1a003928 <Chip_Clock_GetDividerDivisor+0x14>)
1a00391a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00391e:	4b03      	ldr	r3, [pc, #12]	; (1a00392c <Chip_Clock_GetDividerDivisor+0x18>)
1a003920:	5c18      	ldrb	r0, [r3, r0]
}
1a003922:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a003926:	4770      	bx	lr
1a003928:	40050000 	.word	0x40050000
1a00392c:	1a00a7a0 	.word	0x1a00a7a0

1a003930 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003930:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003932:	2810      	cmp	r0, #16
1a003934:	d80a      	bhi.n	1a00394c <Chip_Clock_GetClockInputHz+0x1c>
1a003936:	e8df f000 	tbb	[pc, r0]
1a00393a:	0b42      	.short	0x0b42
1a00393c:	091f160d 	.word	0x091f160d
1a003940:	2b282522 	.word	0x2b282522
1a003944:	322e0909 	.word	0x322e0909
1a003948:	3a36      	.short	0x3a36
1a00394a:	3e          	.byte	0x3e
1a00394b:	00          	.byte	0x00
	uint32_t rate = 0;
1a00394c:	2000      	movs	r0, #0
1a00394e:	e038      	b.n	1a0039c2 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003950:	481e      	ldr	r0, [pc, #120]	; (1a0039cc <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003952:	e036      	b.n	1a0039c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003954:	4b1e      	ldr	r3, [pc, #120]	; (1a0039d0 <Chip_Clock_GetClockInputHz+0xa0>)
1a003956:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00395a:	f003 0307 	and.w	r3, r3, #7
1a00395e:	2b04      	cmp	r3, #4
1a003960:	d130      	bne.n	1a0039c4 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a003962:	2000      	movs	r0, #0
1a003964:	e02d      	b.n	1a0039c2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003966:	4b1a      	ldr	r3, [pc, #104]	; (1a0039d0 <Chip_Clock_GetClockInputHz+0xa0>)
1a003968:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00396c:	f003 0307 	and.w	r3, r3, #7
1a003970:	2b04      	cmp	r3, #4
1a003972:	d029      	beq.n	1a0039c8 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a003974:	4817      	ldr	r0, [pc, #92]	; (1a0039d4 <Chip_Clock_GetClockInputHz+0xa4>)
1a003976:	e024      	b.n	1a0039c2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a003978:	4b17      	ldr	r3, [pc, #92]	; (1a0039d8 <Chip_Clock_GetClockInputHz+0xa8>)
1a00397a:	6818      	ldr	r0, [r3, #0]
		break;
1a00397c:	e021      	b.n	1a0039c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00397e:	4b17      	ldr	r3, [pc, #92]	; (1a0039dc <Chip_Clock_GetClockInputHz+0xac>)
1a003980:	6818      	ldr	r0, [r3, #0]
		break;
1a003982:	e01e      	b.n	1a0039c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a003984:	4b16      	ldr	r3, [pc, #88]	; (1a0039e0 <Chip_Clock_GetClockInputHz+0xb0>)
1a003986:	6818      	ldr	r0, [r3, #0]
		break;
1a003988:	e01b      	b.n	1a0039c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00398a:	4b15      	ldr	r3, [pc, #84]	; (1a0039e0 <Chip_Clock_GetClockInputHz+0xb0>)
1a00398c:	6858      	ldr	r0, [r3, #4]
		break;
1a00398e:	e018      	b.n	1a0039c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a003990:	f000 f86a 	bl	1a003a68 <Chip_Clock_GetMainPLLHz>
		break;
1a003994:	e015      	b.n	1a0039c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a003996:	2100      	movs	r1, #0
1a003998:	f000 f89c 	bl	1a003ad4 <Chip_Clock_GetDivRate>
		break;
1a00399c:	e011      	b.n	1a0039c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00399e:	2101      	movs	r1, #1
1a0039a0:	f000 f898 	bl	1a003ad4 <Chip_Clock_GetDivRate>
		break;
1a0039a4:	e00d      	b.n	1a0039c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0039a6:	2102      	movs	r1, #2
1a0039a8:	f000 f894 	bl	1a003ad4 <Chip_Clock_GetDivRate>
		break;
1a0039ac:	e009      	b.n	1a0039c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0039ae:	2103      	movs	r1, #3
1a0039b0:	f000 f890 	bl	1a003ad4 <Chip_Clock_GetDivRate>
		break;
1a0039b4:	e005      	b.n	1a0039c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0039b6:	2104      	movs	r1, #4
1a0039b8:	f000 f88c 	bl	1a003ad4 <Chip_Clock_GetDivRate>
		break;
1a0039bc:	e001      	b.n	1a0039c2 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a0039be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0039c2:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a0039c4:	4803      	ldr	r0, [pc, #12]	; (1a0039d4 <Chip_Clock_GetClockInputHz+0xa4>)
1a0039c6:	e7fc      	b.n	1a0039c2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a0039c8:	4806      	ldr	r0, [pc, #24]	; (1a0039e4 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a0039ca:	e7fa      	b.n	1a0039c2 <Chip_Clock_GetClockInputHz+0x92>
1a0039cc:	00b71b00 	.word	0x00b71b00
1a0039d0:	40043000 	.word	0x40043000
1a0039d4:	017d7840 	.word	0x017d7840
1a0039d8:	1a00a6e4 	.word	0x1a00a6e4
1a0039dc:	1a00a710 	.word	0x1a00a710
1a0039e0:	100078c0 	.word	0x100078c0
1a0039e4:	02faf080 	.word	0x02faf080

1a0039e8 <Chip_Clock_CalcMainPLLValue>:
{
1a0039e8:	b538      	push	{r3, r4, r5, lr}
1a0039ea:	4605      	mov	r5, r0
1a0039ec:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0039ee:	7908      	ldrb	r0, [r1, #4]
1a0039f0:	f7ff ff9e 	bl	1a003930 <Chip_Clock_GetClockInputHz>
1a0039f4:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0039f6:	4b19      	ldr	r3, [pc, #100]	; (1a003a5c <Chip_Clock_CalcMainPLLValue+0x74>)
1a0039f8:	442b      	add	r3, r5
1a0039fa:	4a19      	ldr	r2, [pc, #100]	; (1a003a60 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0039fc:	4293      	cmp	r3, r2
1a0039fe:	d821      	bhi.n	1a003a44 <Chip_Clock_CalcMainPLLValue+0x5c>
1a003a00:	b318      	cbz	r0, 1a003a4a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a003a02:	2380      	movs	r3, #128	; 0x80
1a003a04:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a003a06:	2300      	movs	r3, #0
1a003a08:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a003a0a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a003a0c:	fbb5 f3f0 	udiv	r3, r5, r0
1a003a10:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a003a12:	4a14      	ldr	r2, [pc, #80]	; (1a003a64 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a003a14:	4295      	cmp	r5, r2
1a003a16:	d903      	bls.n	1a003a20 <Chip_Clock_CalcMainPLLValue+0x38>
1a003a18:	fb03 f000 	mul.w	r0, r3, r0
1a003a1c:	42a8      	cmp	r0, r5
1a003a1e:	d007      	beq.n	1a003a30 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003a20:	4621      	mov	r1, r4
1a003a22:	4628      	mov	r0, r5
1a003a24:	f7ff fe96 	bl	1a003754 <pll_get_frac>
		if (!ppll->nsel) {
1a003a28:	68a3      	ldr	r3, [r4, #8]
1a003a2a:	b18b      	cbz	r3, 1a003a50 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a003a2c:	3b01      	subs	r3, #1
1a003a2e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a003a30:	6923      	ldr	r3, [r4, #16]
1a003a32:	b183      	cbz	r3, 1a003a56 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a003a34:	68e2      	ldr	r2, [r4, #12]
1a003a36:	b10a      	cbz	r2, 1a003a3c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a003a38:	3a01      	subs	r2, #1
1a003a3a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a003a3c:	3b01      	subs	r3, #1
1a003a3e:	6123      	str	r3, [r4, #16]
	return 0;
1a003a40:	2000      	movs	r0, #0
}
1a003a42:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a003a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003a48:	e7fb      	b.n	1a003a42 <Chip_Clock_CalcMainPLLValue+0x5a>
1a003a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003a4e:	e7f8      	b.n	1a003a42 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a003a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003a54:	e7f5      	b.n	1a003a42 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a003a56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003a5a:	e7f2      	b.n	1a003a42 <Chip_Clock_CalcMainPLLValue+0x5a>
1a003a5c:	ff6b3a10 	.word	0xff6b3a10
1a003a60:	0b940510 	.word	0x0b940510
1a003a64:	094c5eff 	.word	0x094c5eff

1a003a68 <Chip_Clock_GetMainPLLHz>:
{
1a003a68:	b530      	push	{r4, r5, lr}
1a003a6a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a003a6c:	4d17      	ldr	r5, [pc, #92]	; (1a003acc <Chip_Clock_GetMainPLLHz+0x64>)
1a003a6e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a003a70:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a003a74:	f7ff ff5c 	bl	1a003930 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a003a78:	4b15      	ldr	r3, [pc, #84]	; (1a003ad0 <Chip_Clock_GetMainPLLHz+0x68>)
1a003a7a:	681b      	ldr	r3, [r3, #0]
1a003a7c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a003a7e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a003a80:	f013 0f01 	tst.w	r3, #1
1a003a84:	d01f      	beq.n	1a003ac6 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a003a86:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a003a8a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a003a8e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a003a92:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a003a96:	3301      	adds	r3, #1
	n = nsel + 1;
1a003a98:	3201      	adds	r2, #1
	p = ptab[psel];
1a003a9a:	f10d 0c08 	add.w	ip, sp, #8
1a003a9e:	4461      	add	r1, ip
1a003aa0:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a003aa4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003aa8:	d108      	bne.n	1a003abc <Chip_Clock_GetMainPLLHz+0x54>
1a003aaa:	b93d      	cbnz	r5, 1a003abc <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a003aac:	0049      	lsls	r1, r1, #1
1a003aae:	fbb3 f3f1 	udiv	r3, r3, r1
1a003ab2:	fbb0 f0f2 	udiv	r0, r0, r2
1a003ab6:	fb00 f003 	mul.w	r0, r0, r3
1a003aba:	e005      	b.n	1a003ac8 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a003abc:	fbb0 f0f2 	udiv	r0, r0, r2
1a003ac0:	fb03 f000 	mul.w	r0, r3, r0
1a003ac4:	e000      	b.n	1a003ac8 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a003ac6:	2000      	movs	r0, #0
}
1a003ac8:	b003      	add	sp, #12
1a003aca:	bd30      	pop	{r4, r5, pc}
1a003acc:	40050000 	.word	0x40050000
1a003ad0:	1a00a79c 	.word	0x1a00a79c

1a003ad4 <Chip_Clock_GetDivRate>:
{
1a003ad4:	b538      	push	{r3, r4, r5, lr}
1a003ad6:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a003ad8:	4608      	mov	r0, r1
1a003ada:	f7ff ff0d 	bl	1a0038f8 <Chip_Clock_GetDividerSource>
1a003ade:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a003ae0:	4620      	mov	r0, r4
1a003ae2:	f7ff ff17 	bl	1a003914 <Chip_Clock_GetDividerDivisor>
1a003ae6:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a003ae8:	4628      	mov	r0, r5
1a003aea:	f7ff ff21 	bl	1a003930 <Chip_Clock_GetClockInputHz>
1a003aee:	3401      	adds	r4, #1
}
1a003af0:	fbb0 f0f4 	udiv	r0, r0, r4
1a003af4:	bd38      	pop	{r3, r4, r5, pc}
1a003af6:	Address 0x000000001a003af6 is out of bounds.


1a003af8 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a003af8:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a003afa:	f100 0416 	add.w	r4, r0, #22
1a003afe:	00a4      	lsls	r4, r4, #2
1a003b00:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a003b04:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a003b08:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a003b0a:	281b      	cmp	r0, #27
1a003b0c:	d813      	bhi.n	1a003b36 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a003b0e:	2911      	cmp	r1, #17
1a003b10:	d01a      	beq.n	1a003b48 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a003b12:	4d0e      	ldr	r5, [pc, #56]	; (1a003b4c <Chip_Clock_SetBaseClock+0x54>)
1a003b14:	4025      	ands	r5, r4

			if (autoblocken) {
1a003b16:	b10a      	cbz	r2, 1a003b1c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a003b18:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a003b1c:	b10b      	cbz	r3, 1a003b22 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a003b1e:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a003b22:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a003b26:	3016      	adds	r0, #22
1a003b28:	0080      	lsls	r0, r0, #2
1a003b2a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003b2e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003b32:	6045      	str	r5, [r0, #4]
1a003b34:	e008      	b.n	1a003b48 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a003b36:	f044 0401 	orr.w	r4, r4, #1
1a003b3a:	3016      	adds	r0, #22
1a003b3c:	0080      	lsls	r0, r0, #2
1a003b3e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003b42:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003b46:	6044      	str	r4, [r0, #4]
	}
}
1a003b48:	bc30      	pop	{r4, r5}
1a003b4a:	4770      	bx	lr
1a003b4c:	e0fff7fe 	.word	0xe0fff7fe

1a003b50 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003b50:	281b      	cmp	r0, #27
1a003b52:	d80c      	bhi.n	1a003b6e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003b54:	3016      	adds	r0, #22
1a003b56:	0080      	lsls	r0, r0, #2
1a003b58:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003b5c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003b60:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a003b62:	f010 0f01 	tst.w	r0, #1
1a003b66:	d104      	bne.n	1a003b72 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003b68:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003b6c:	4770      	bx	lr
		return CLKINPUT_PD;
1a003b6e:	2011      	movs	r0, #17
1a003b70:	4770      	bx	lr
		return CLKINPUT_PD;
1a003b72:	2011      	movs	r0, #17
}
1a003b74:	4770      	bx	lr

1a003b76 <Chip_Clock_GetBaseClocktHz>:
{
1a003b76:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003b78:	f7ff ffea 	bl	1a003b50 <Chip_Clock_GetBaseClock>
1a003b7c:	f7ff fed8 	bl	1a003930 <Chip_Clock_GetClockInputHz>
}
1a003b80:	bd08      	pop	{r3, pc}
1a003b82:	Address 0x000000001a003b82 is out of bounds.


1a003b84 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003b84:	b969      	cbnz	r1, 1a003ba2 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a003b86:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a003b88:	b10a      	cbz	r2, 1a003b8e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a003b8a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a003b8e:	2b02      	cmp	r3, #2
1a003b90:	d009      	beq.n	1a003ba6 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003b92:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003b96:	d209      	bcs.n	1a003bac <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003b98:	3020      	adds	r0, #32
1a003b9a:	4b07      	ldr	r3, [pc, #28]	; (1a003bb8 <Chip_Clock_EnableOpts+0x34>)
1a003b9c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a003ba0:	4770      	bx	lr
		reg |= (1 << 1);
1a003ba2:	2103      	movs	r1, #3
1a003ba4:	e7f0      	b.n	1a003b88 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a003ba6:	f041 0120 	orr.w	r1, r1, #32
1a003baa:	e7f2      	b.n	1a003b92 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a003bac:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003bb0:	4b02      	ldr	r3, [pc, #8]	; (1a003bbc <Chip_Clock_EnableOpts+0x38>)
1a003bb2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003bb6:	4770      	bx	lr
1a003bb8:	40051000 	.word	0x40051000
1a003bbc:	40052000 	.word	0x40052000

1a003bc0 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003bc0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003bc4:	d208      	bcs.n	1a003bd8 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a003bc6:	4a09      	ldr	r2, [pc, #36]	; (1a003bec <Chip_Clock_Enable+0x2c>)
1a003bc8:	3020      	adds	r0, #32
1a003bca:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003bce:	f043 0301 	orr.w	r3, r3, #1
1a003bd2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a003bd6:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a003bd8:	4a05      	ldr	r2, [pc, #20]	; (1a003bf0 <Chip_Clock_Enable+0x30>)
1a003bda:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003bde:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003be2:	f043 0301 	orr.w	r3, r3, #1
1a003be6:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003bea:	4770      	bx	lr
1a003bec:	40051000 	.word	0x40051000
1a003bf0:	40052000 	.word	0x40052000

1a003bf4 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a003bf4:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003bf8:	d208      	bcs.n	1a003c0c <Chip_Clock_Disable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a003bfa:	4a09      	ldr	r2, [pc, #36]	; (1a003c20 <Chip_Clock_Disable+0x2c>)
1a003bfc:	3020      	adds	r0, #32
1a003bfe:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003c02:	f023 0301 	bic.w	r3, r3, #1
1a003c06:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a003c0a:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a003c0c:	4a05      	ldr	r2, [pc, #20]	; (1a003c24 <Chip_Clock_Disable+0x30>)
1a003c0e:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003c12:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003c16:	f023 0301 	bic.w	r3, r3, #1
1a003c1a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003c1e:	4770      	bx	lr
1a003c20:	40051000 	.word	0x40051000
1a003c24:	40052000 	.word	0x40052000

1a003c28 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003c28:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a003c2a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003c2e:	d309      	bcc.n	1a003c44 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003c30:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003c34:	4a0d      	ldr	r2, [pc, #52]	; (1a003c6c <Chip_Clock_GetRate+0x44>)
1a003c36:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a003c3a:	f014 0f01 	tst.w	r4, #1
1a003c3e:	d107      	bne.n	1a003c50 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a003c40:	2000      	movs	r0, #0
	}

	return rate;
}
1a003c42:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003c44:	f100 0320 	add.w	r3, r0, #32
1a003c48:	4a09      	ldr	r2, [pc, #36]	; (1a003c70 <Chip_Clock_GetRate+0x48>)
1a003c4a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a003c4e:	e7f4      	b.n	1a003c3a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003c50:	f7ff fe06 	bl	1a003860 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003c54:	f7ff ff8f 	bl	1a003b76 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a003c58:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003c5c:	d103      	bne.n	1a003c66 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a003c5e:	2301      	movs	r3, #1
		rate = rate / div;
1a003c60:	fbb0 f0f3 	udiv	r0, r0, r3
1a003c64:	e7ed      	b.n	1a003c42 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a003c66:	2302      	movs	r3, #2
1a003c68:	e7fa      	b.n	1a003c60 <Chip_Clock_GetRate+0x38>
1a003c6a:	bf00      	nop
1a003c6c:	40052000 	.word	0x40052000
1a003c70:	40051000 	.word	0x40051000

1a003c74 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a003c74:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a003c76:	2069      	movs	r0, #105	; 0x69
1a003c78:	f7ff ffd6 	bl	1a003c28 <Chip_Clock_GetRate>
1a003c7c:	4b01      	ldr	r3, [pc, #4]	; (1a003c84 <SystemCoreClockUpdate+0x10>)
1a003c7e:	6018      	str	r0, [r3, #0]
}
1a003c80:	bd08      	pop	{r3, pc}
1a003c82:	bf00      	nop
1a003c84:	100079fc 	.word	0x100079fc

1a003c88 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003c88:	b570      	push	{r4, r5, r6, lr}
1a003c8a:	b08a      	sub	sp, #40	; 0x28
1a003c8c:	4605      	mov	r5, r0
1a003c8e:	460e      	mov	r6, r1
1a003c90:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a003c92:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003c96:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003c98:	2806      	cmp	r0, #6
1a003c9a:	d018      	beq.n	1a003cce <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003c9c:	2300      	movs	r3, #0
1a003c9e:	2201      	movs	r2, #1
1a003ca0:	4629      	mov	r1, r5
1a003ca2:	2004      	movs	r0, #4
1a003ca4:	f7ff ff28 	bl	1a003af8 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003ca8:	4a49      	ldr	r2, [pc, #292]	; (1a003dd0 <Chip_SetupCoreClock+0x148>)
1a003caa:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003cac:	f043 0301 	orr.w	r3, r3, #1
1a003cb0:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003cb2:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003cb6:	a901      	add	r1, sp, #4
1a003cb8:	4630      	mov	r0, r6
1a003cba:	f7ff fe95 	bl	1a0039e8 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a003cbe:	4b45      	ldr	r3, [pc, #276]	; (1a003dd4 <Chip_SetupCoreClock+0x14c>)
1a003cc0:	429e      	cmp	r6, r3
1a003cc2:	d916      	bls.n	1a003cf2 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003cc4:	9b01      	ldr	r3, [sp, #4]
1a003cc6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003cca:	d003      	beq.n	1a003cd4 <Chip_SetupCoreClock+0x4c>
1a003ccc:	e7fe      	b.n	1a003ccc <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a003cce:	f7ff fded 	bl	1a0038ac <Chip_Clock_EnableCrystal>
1a003cd2:	e7e3      	b.n	1a003c9c <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a003cd4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003cd8:	d005      	beq.n	1a003ce6 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003cde:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003ce0:	2500      	movs	r5, #0
			direct = 1;
1a003ce2:	2601      	movs	r6, #1
1a003ce4:	e007      	b.n	1a003cf6 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a003ce6:	9b04      	ldr	r3, [sp, #16]
1a003ce8:	3301      	adds	r3, #1
1a003cea:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a003cec:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a003cee:	2600      	movs	r6, #0
1a003cf0:	e001      	b.n	1a003cf6 <Chip_SetupCoreClock+0x6e>
1a003cf2:	2500      	movs	r5, #0
1a003cf4:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003cf6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003cfa:	9b01      	ldr	r3, [sp, #4]
1a003cfc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003d00:	9a05      	ldr	r2, [sp, #20]
1a003d02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003d06:	9a03      	ldr	r2, [sp, #12]
1a003d08:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003d0c:	9a04      	ldr	r2, [sp, #16]
1a003d0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003d12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003d16:	4a2e      	ldr	r2, [pc, #184]	; (1a003dd0 <Chip_SetupCoreClock+0x148>)
1a003d18:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003d1a:	4b2d      	ldr	r3, [pc, #180]	; (1a003dd0 <Chip_SetupCoreClock+0x148>)
1a003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003d1e:	f013 0f01 	tst.w	r3, #1
1a003d22:	d0fa      	beq.n	1a003d1a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003d24:	2300      	movs	r3, #0
1a003d26:	2201      	movs	r2, #1
1a003d28:	2109      	movs	r1, #9
1a003d2a:	2004      	movs	r0, #4
1a003d2c:	f7ff fee4 	bl	1a003af8 <Chip_Clock_SetBaseClock>

	if (direct) {
1a003d30:	b1fe      	cbz	r6, 1a003d72 <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003d32:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003d36:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003d3a:	1e5a      	subs	r2, r3, #1
1a003d3c:	9209      	str	r2, [sp, #36]	; 0x24
1a003d3e:	2b00      	cmp	r3, #0
1a003d40:	d1fa      	bne.n	1a003d38 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a003d42:	9b01      	ldr	r3, [sp, #4]
1a003d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003d48:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003d4a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003d4e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003d52:	9a05      	ldr	r2, [sp, #20]
1a003d54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003d58:	9a03      	ldr	r2, [sp, #12]
1a003d5a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003d5e:	9a04      	ldr	r2, [sp, #16]
1a003d60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003d64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003d68:	4a19      	ldr	r2, [pc, #100]	; (1a003dd0 <Chip_SetupCoreClock+0x148>)
1a003d6a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003d6c:	b36c      	cbz	r4, 1a003dca <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003d6e:	2400      	movs	r4, #0
1a003d70:	e029      	b.n	1a003dc6 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a003d72:	2d00      	cmp	r5, #0
1a003d74:	d0fa      	beq.n	1a003d6c <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003d76:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003d7a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003d7e:	1e5a      	subs	r2, r3, #1
1a003d80:	9209      	str	r2, [sp, #36]	; 0x24
1a003d82:	2b00      	cmp	r3, #0
1a003d84:	d1fa      	bne.n	1a003d7c <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a003d86:	9b04      	ldr	r3, [sp, #16]
1a003d88:	1e5a      	subs	r2, r3, #1
1a003d8a:	9204      	str	r2, [sp, #16]
1a003d8c:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a003d90:	9b01      	ldr	r3, [sp, #4]
1a003d92:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a003d96:	9905      	ldr	r1, [sp, #20]
1a003d98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003d9c:	9903      	ldr	r1, [sp, #12]
1a003d9e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a003da2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003da6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003daa:	4a09      	ldr	r2, [pc, #36]	; (1a003dd0 <Chip_SetupCoreClock+0x148>)
1a003dac:	6453      	str	r3, [r2, #68]	; 0x44
1a003dae:	e7dd      	b.n	1a003d6c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003db0:	4809      	ldr	r0, [pc, #36]	; (1a003dd8 <Chip_SetupCoreClock+0x150>)
1a003db2:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003db6:	78cb      	ldrb	r3, [r1, #3]
1a003db8:	788a      	ldrb	r2, [r1, #2]
1a003dba:	7849      	ldrb	r1, [r1, #1]
1a003dbc:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003dc0:	f7ff fe9a 	bl	1a003af8 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003dc4:	3401      	adds	r4, #1
1a003dc6:	2c11      	cmp	r4, #17
1a003dc8:	d9f2      	bls.n	1a003db0 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003dca:	b00a      	add	sp, #40	; 0x28
1a003dcc:	bd70      	pop	{r4, r5, r6, pc}
1a003dce:	bf00      	nop
1a003dd0:	40050000 	.word	0x40050000
1a003dd4:	068e7780 	.word	0x068e7780
1a003dd8:	1a00a814 	.word	0x1a00a814

1a003ddc <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a003ddc:	4770      	bx	lr
1a003dde:	Address 0x000000001a003dde is out of bounds.


1a003de0 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003de0:	4b03      	ldr	r3, [pc, #12]	; (1a003df0 <Chip_SSP_GetClockIndex+0x10>)
1a003de2:	4298      	cmp	r0, r3
1a003de4:	d001      	beq.n	1a003dea <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003de6:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003de8:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a003dea:	20a5      	movs	r0, #165	; 0xa5
1a003dec:	4770      	bx	lr
1a003dee:	bf00      	nop
1a003df0:	400c5000 	.word	0x400c5000

1a003df4 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003df4:	4b04      	ldr	r3, [pc, #16]	; (1a003e08 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003df6:	4298      	cmp	r0, r3
1a003df8:	d002      	beq.n	1a003e00 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003dfa:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a003dfe:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a003e00:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003e04:	4770      	bx	lr
1a003e06:	bf00      	nop
1a003e08:	400c5000 	.word	0x400c5000

1a003e0c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003e0c:	6803      	ldr	r3, [r0, #0]
1a003e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a003e12:	0209      	lsls	r1, r1, #8
1a003e14:	b289      	uxth	r1, r1
1a003e16:	4319      	orrs	r1, r3
1a003e18:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a003e1a:	6102      	str	r2, [r0, #16]
}
1a003e1c:	4770      	bx	lr

1a003e1e <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a003e1e:	b570      	push	{r4, r5, r6, lr}
1a003e20:	4606      	mov	r6, r0
1a003e22:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003e24:	f7ff ffe6 	bl	1a003df4 <Chip_SSP_GetPeriphClockIndex>
1a003e28:	f7ff fefe 	bl	1a003c28 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003e2c:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a003e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a003e32:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003e34:	e000      	b.n	1a003e38 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003e36:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003e38:	42ab      	cmp	r3, r5
1a003e3a:	d90b      	bls.n	1a003e54 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003e3c:	1c4c      	adds	r4, r1, #1
1a003e3e:	fb02 f304 	mul.w	r3, r2, r4
1a003e42:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003e46:	429d      	cmp	r5, r3
1a003e48:	d2f6      	bcs.n	1a003e38 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003e4a:	2cff      	cmp	r4, #255	; 0xff
1a003e4c:	d9f3      	bls.n	1a003e36 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a003e4e:	3202      	adds	r2, #2
				cr0_div = 0;
1a003e50:	2100      	movs	r1, #0
1a003e52:	e7f1      	b.n	1a003e38 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003e54:	4630      	mov	r0, r6
1a003e56:	f7ff ffd9 	bl	1a003e0c <Chip_SSP_SetClockRate>
}
1a003e5a:	bd70      	pop	{r4, r5, r6, pc}

1a003e5c <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003e5c:	b510      	push	{r4, lr}
1a003e5e:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003e60:	f7ff ffbe 	bl	1a003de0 <Chip_SSP_GetClockIndex>
1a003e64:	f7ff feac 	bl	1a003bc0 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003e68:	4620      	mov	r0, r4
1a003e6a:	f7ff ffc3 	bl	1a003df4 <Chip_SSP_GetPeriphClockIndex>
1a003e6e:	f7ff fea7 	bl	1a003bc0 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003e72:	6863      	ldr	r3, [r4, #4]
1a003e74:	f023 0304 	bic.w	r3, r3, #4
1a003e78:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003e7a:	6823      	ldr	r3, [r4, #0]
1a003e7c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003e80:	f043 0307 	orr.w	r3, r3, #7
1a003e84:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003e86:	4902      	ldr	r1, [pc, #8]	; (1a003e90 <Chip_SSP_Init+0x34>)
1a003e88:	4620      	mov	r0, r4
1a003e8a:	f7ff ffc8 	bl	1a003e1e <Chip_SSP_SetBitRate>
}
1a003e8e:	bd10      	pop	{r4, pc}
1a003e90:	000186a0 	.word	0x000186a0

1a003e94 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a003e94:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a003e96:	4a0b      	ldr	r2, [pc, #44]	; (1a003ec4 <SystemInit+0x30>)
1a003e98:	4b0b      	ldr	r3, [pc, #44]	; (1a003ec8 <SystemInit+0x34>)
1a003e9a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003e9c:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003ea0:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a003ea2:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a003ea6:	2b20      	cmp	r3, #32
1a003ea8:	d004      	beq.n	1a003eb4 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a003eaa:	f7ff fa05 	bl	1a0032b8 <Board_SystemInit>
   Board_Init();
1a003eae:	f7ff f98b 	bl	1a0031c8 <Board_Init>
}
1a003eb2:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003eb4:	4a04      	ldr	r2, [pc, #16]	; (1a003ec8 <SystemInit+0x34>)
1a003eb6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003eba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003ebe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a003ec2:	e7f2      	b.n	1a003eaa <SystemInit+0x16>
1a003ec4:	1a000000 	.word	0x1a000000
1a003ec8:	e000ed00 	.word	0xe000ed00

1a003ecc <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a003ecc:	4b04      	ldr	r3, [pc, #16]	; (1a003ee0 <cyclesCounterInit+0x14>)
1a003ece:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a003ed0:	4a04      	ldr	r2, [pc, #16]	; (1a003ee4 <cyclesCounterInit+0x18>)
1a003ed2:	6813      	ldr	r3, [r2, #0]
1a003ed4:	f043 0301 	orr.w	r3, r3, #1
1a003ed8:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a003eda:	2001      	movs	r0, #1
1a003edc:	4770      	bx	lr
1a003ede:	bf00      	nop
1a003ee0:	10000040 	.word	0x10000040
1a003ee4:	e0001000 	.word	0xe0001000

1a003ee8 <uartProcessIRQ>:
{
1a003ee8:	b570      	push	{r4, r5, r6, lr}
1a003eea:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a003eec:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a003ef0:	0093      	lsls	r3, r2, #2
1a003ef2:	4a22      	ldr	r2, [pc, #136]	; (1a003f7c <uartProcessIRQ+0x94>)
1a003ef4:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a003ef6:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a003ef8:	b2ed      	uxtb	r5, r5
1a003efa:	f015 0f01 	tst.w	r5, #1
1a003efe:	d00a      	beq.n	1a003f16 <uartProcessIRQ+0x2e>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a003f00:	b928      	cbnz	r0, 1a003f0e <uartProcessIRQ+0x26>
1a003f02:	4b1f      	ldr	r3, [pc, #124]	; (1a003f80 <uartProcessIRQ+0x98>)
1a003f04:	681b      	ldr	r3, [r3, #0]
1a003f06:	b113      	cbz	r3, 1a003f0e <uartProcessIRQ+0x26>
         (*rxIsrCallbackUART0)(rxIsrCallbackUART0Params);
1a003f08:	4a1e      	ldr	r2, [pc, #120]	; (1a003f84 <uartProcessIRQ+0x9c>)
1a003f0a:	6810      	ldr	r0, [r2, #0]
1a003f0c:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a003f0e:	2c03      	cmp	r4, #3
1a003f10:	d014      	beq.n	1a003f3c <uartProcessIRQ+0x54>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a003f12:	2c05      	cmp	r4, #5
1a003f14:	d01a      	beq.n	1a003f4c <uartProcessIRQ+0x64>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a003f16:	f015 0f20 	tst.w	r5, #32
1a003f1a:	d00e      	beq.n	1a003f3a <uartProcessIRQ+0x52>
	return pUART->IER;
1a003f1c:	6873      	ldr	r3, [r6, #4]
1a003f1e:	f013 0f02 	tst.w	r3, #2
1a003f22:	d00a      	beq.n	1a003f3a <uartProcessIRQ+0x52>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a003f24:	b92c      	cbnz	r4, 1a003f32 <uartProcessIRQ+0x4a>
1a003f26:	4b18      	ldr	r3, [pc, #96]	; (1a003f88 <uartProcessIRQ+0xa0>)
1a003f28:	681b      	ldr	r3, [r3, #0]
1a003f2a:	b113      	cbz	r3, 1a003f32 <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART0)(txIsrCallbackUART0Params);
1a003f2c:	4a17      	ldr	r2, [pc, #92]	; (1a003f8c <uartProcessIRQ+0xa4>)
1a003f2e:	6810      	ldr	r0, [r2, #0]
1a003f30:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003f32:	2c03      	cmp	r4, #3
1a003f34:	d012      	beq.n	1a003f5c <uartProcessIRQ+0x74>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003f36:	2c05      	cmp	r4, #5
1a003f38:	d018      	beq.n	1a003f6c <uartProcessIRQ+0x84>
}
1a003f3a:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a003f3c:	4b14      	ldr	r3, [pc, #80]	; (1a003f90 <uartProcessIRQ+0xa8>)
1a003f3e:	681b      	ldr	r3, [r3, #0]
1a003f40:	2b00      	cmp	r3, #0
1a003f42:	d0e6      	beq.n	1a003f12 <uartProcessIRQ+0x2a>
         (*rxIsrCallbackUART2)(rxIsrCallbackUART2Params);
1a003f44:	4a13      	ldr	r2, [pc, #76]	; (1a003f94 <uartProcessIRQ+0xac>)
1a003f46:	6810      	ldr	r0, [r2, #0]
1a003f48:	4798      	blx	r3
1a003f4a:	e7e2      	b.n	1a003f12 <uartProcessIRQ+0x2a>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a003f4c:	4b12      	ldr	r3, [pc, #72]	; (1a003f98 <uartProcessIRQ+0xb0>)
1a003f4e:	681b      	ldr	r3, [r3, #0]
1a003f50:	2b00      	cmp	r3, #0
1a003f52:	d0e0      	beq.n	1a003f16 <uartProcessIRQ+0x2e>
         (*rxIsrCallbackUART3)(rxIsrCallbackUART3Params);
1a003f54:	4a11      	ldr	r2, [pc, #68]	; (1a003f9c <uartProcessIRQ+0xb4>)
1a003f56:	6810      	ldr	r0, [r2, #0]
1a003f58:	4798      	blx	r3
1a003f5a:	e7dc      	b.n	1a003f16 <uartProcessIRQ+0x2e>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003f5c:	4b10      	ldr	r3, [pc, #64]	; (1a003fa0 <uartProcessIRQ+0xb8>)
1a003f5e:	681b      	ldr	r3, [r3, #0]
1a003f60:	2b00      	cmp	r3, #0
1a003f62:	d0e8      	beq.n	1a003f36 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART2)(txIsrCallbackUART2Params);
1a003f64:	4a0f      	ldr	r2, [pc, #60]	; (1a003fa4 <uartProcessIRQ+0xbc>)
1a003f66:	6810      	ldr	r0, [r2, #0]
1a003f68:	4798      	blx	r3
1a003f6a:	e7e4      	b.n	1a003f36 <uartProcessIRQ+0x4e>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003f6c:	4b0e      	ldr	r3, [pc, #56]	; (1a003fa8 <uartProcessIRQ+0xc0>)
1a003f6e:	681b      	ldr	r3, [r3, #0]
1a003f70:	2b00      	cmp	r3, #0
1a003f72:	d0e2      	beq.n	1a003f3a <uartProcessIRQ+0x52>
         (*txIsrCallbackUART3)(txIsrCallbackUART3Params);
1a003f74:	4a0d      	ldr	r2, [pc, #52]	; (1a003fac <uartProcessIRQ+0xc4>)
1a003f76:	6810      	ldr	r0, [r2, #0]
1a003f78:	4798      	blx	r3
}
1a003f7a:	e7de      	b.n	1a003f3a <uartProcessIRQ+0x52>
1a003f7c:	1a00a85c 	.word	0x1a00a85c
1a003f80:	100078c8 	.word	0x100078c8
1a003f84:	100078cc 	.word	0x100078cc
1a003f88:	100078e0 	.word	0x100078e0
1a003f8c:	100078e4 	.word	0x100078e4
1a003f90:	100078d0 	.word	0x100078d0
1a003f94:	100078d4 	.word	0x100078d4
1a003f98:	100078d8 	.word	0x100078d8
1a003f9c:	100078dc 	.word	0x100078dc
1a003fa0:	100078e8 	.word	0x100078e8
1a003fa4:	100078ec 	.word	0x100078ec
1a003fa8:	100078f0 	.word	0x100078f0
1a003fac:	100078f4 	.word	0x100078f4

1a003fb0 <uartInterrupt>:
   if( enable ) {
1a003fb0:	b341      	cbz	r1, 1a004004 <uartInterrupt+0x54>
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, mas baja prioridad)
1a003fb2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a003fb6:	009a      	lsls	r2, r3, #2
1a003fb8:	4b1e      	ldr	r3, [pc, #120]	; (1a004034 <uartInterrupt+0x84>)
1a003fba:	4413      	add	r3, r2
1a003fbc:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003fc0:	2b00      	cmp	r3, #0
1a003fc2:	db18      	blt.n	1a003ff6 <uartInterrupt+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a003fc4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a003fc8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a003fcc:	22a0      	movs	r2, #160	; 0xa0
1a003fce:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a003fd2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003fd6:	0082      	lsls	r2, r0, #2
1a003fd8:	4b16      	ldr	r3, [pc, #88]	; (1a004034 <uartInterrupt+0x84>)
1a003fda:	4413      	add	r3, r2
1a003fdc:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003fe0:	2b00      	cmp	r3, #0
1a003fe2:	db25      	blt.n	1a004030 <uartInterrupt+0x80>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a003fe4:	f003 011f 	and.w	r1, r3, #31
1a003fe8:	095b      	lsrs	r3, r3, #5
1a003fea:	2201      	movs	r2, #1
1a003fec:	408a      	lsls	r2, r1
1a003fee:	4912      	ldr	r1, [pc, #72]	; (1a004038 <uartInterrupt+0x88>)
1a003ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a003ff4:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a003ff6:	f003 030f 	and.w	r3, r3, #15
1a003ffa:	4a10      	ldr	r2, [pc, #64]	; (1a00403c <uartInterrupt+0x8c>)
1a003ffc:	441a      	add	r2, r3
1a003ffe:	23a0      	movs	r3, #160	; 0xa0
1a004000:	7613      	strb	r3, [r2, #24]
1a004002:	e7e6      	b.n	1a003fd2 <uartInterrupt+0x22>
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a004004:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004008:	0082      	lsls	r2, r0, #2
1a00400a:	4b0a      	ldr	r3, [pc, #40]	; (1a004034 <uartInterrupt+0x84>)
1a00400c:	4413      	add	r3, r2
1a00400e:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a004012:	2b00      	cmp	r3, #0
1a004014:	db0c      	blt.n	1a004030 <uartInterrupt+0x80>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a004016:	f003 011f 	and.w	r1, r3, #31
1a00401a:	095b      	lsrs	r3, r3, #5
1a00401c:	2201      	movs	r2, #1
1a00401e:	408a      	lsls	r2, r1
1a004020:	3320      	adds	r3, #32
1a004022:	4905      	ldr	r1, [pc, #20]	; (1a004038 <uartInterrupt+0x88>)
1a004024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a004028:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a00402c:	f3bf 8f6f 	isb	sy
}
1a004030:	4770      	bx	lr
1a004032:	bf00      	nop
1a004034:	1a00a85c 	.word	0x1a00a85c
1a004038:	e000e100 	.word	0xe000e100
1a00403c:	e000ecfc 	.word	0xe000ecfc

1a004040 <uartCallbackSet>:
{   
1a004040:	b410      	push	{r4}
   switch(event){
1a004042:	b161      	cbz	r1, 1a00405e <uartCallbackSet+0x1e>
1a004044:	2901      	cmp	r1, #1
1a004046:	d11c      	bne.n	1a004082 <uartCallbackSet+0x42>
         if( callbackFunc != 0 ) {
1a004048:	b1da      	cbz	r2, 1a004082 <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a00404a:	2801      	cmp	r0, #1
1a00404c:	d92c      	bls.n	1a0040a8 <uartCallbackSet+0x68>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a00404e:	1ec1      	subs	r1, r0, #3
1a004050:	b2c9      	uxtb	r1, r1
1a004052:	2901      	cmp	r1, #1
1a004054:	d92d      	bls.n	1a0040b2 <uartCallbackSet+0x72>
            if( uart == UART_232 ){
1a004056:	2805      	cmp	r0, #5
1a004058:	d030      	beq.n	1a0040bc <uartCallbackSet+0x7c>
         intMask = UART_IER_THREINT;
1a00405a:	2302      	movs	r3, #2
1a00405c:	e009      	b.n	1a004072 <uartCallbackSet+0x32>
         if( callbackFunc != 0 ) {
1a00405e:	b182      	cbz	r2, 1a004082 <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a004060:	2801      	cmp	r0, #1
1a004062:	d911      	bls.n	1a004088 <uartCallbackSet+0x48>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a004064:	1ec1      	subs	r1, r0, #3
1a004066:	b2c9      	uxtb	r1, r1
1a004068:	2901      	cmp	r1, #1
1a00406a:	d912      	bls.n	1a004092 <uartCallbackSet+0x52>
            if( uart == UART_232 ){
1a00406c:	2805      	cmp	r0, #5
1a00406e:	d015      	beq.n	1a00409c <uartCallbackSet+0x5c>
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a004070:	2305      	movs	r3, #5
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a004072:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004076:	0082      	lsls	r2, r0, #2
1a004078:	4913      	ldr	r1, [pc, #76]	; (1a0040c8 <uartCallbackSet+0x88>)
1a00407a:	588a      	ldr	r2, [r1, r2]
	pUART->IER |= intMask;
1a00407c:	6851      	ldr	r1, [r2, #4]
1a00407e:	430b      	orrs	r3, r1
1a004080:	6053      	str	r3, [r2, #4]
}
1a004082:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004086:	4770      	bx	lr
               rxIsrCallbackUART0 = callbackFunc;
1a004088:	4910      	ldr	r1, [pc, #64]	; (1a0040cc <uartCallbackSet+0x8c>)
1a00408a:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART0Params = callbackParam;
1a00408c:	4910      	ldr	r1, [pc, #64]	; (1a0040d0 <uartCallbackSet+0x90>)
1a00408e:	600b      	str	r3, [r1, #0]
1a004090:	e7e8      	b.n	1a004064 <uartCallbackSet+0x24>
               rxIsrCallbackUART2 = callbackFunc;
1a004092:	4910      	ldr	r1, [pc, #64]	; (1a0040d4 <uartCallbackSet+0x94>)
1a004094:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART2Params = callbackParam;
1a004096:	4910      	ldr	r1, [pc, #64]	; (1a0040d8 <uartCallbackSet+0x98>)
1a004098:	600b      	str	r3, [r1, #0]
1a00409a:	e7e7      	b.n	1a00406c <uartCallbackSet+0x2c>
               rxIsrCallbackUART3 = callbackFunc;
1a00409c:	490f      	ldr	r1, [pc, #60]	; (1a0040dc <uartCallbackSet+0x9c>)
1a00409e:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART3Params = callbackParam;
1a0040a0:	4a0f      	ldr	r2, [pc, #60]	; (1a0040e0 <uartCallbackSet+0xa0>)
1a0040a2:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a0040a4:	2305      	movs	r3, #5
1a0040a6:	e7e4      	b.n	1a004072 <uartCallbackSet+0x32>
               txIsrCallbackUART0 = callbackFunc;
1a0040a8:	490e      	ldr	r1, [pc, #56]	; (1a0040e4 <uartCallbackSet+0xa4>)
1a0040aa:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART0Params = callbackParam;
1a0040ac:	490e      	ldr	r1, [pc, #56]	; (1a0040e8 <uartCallbackSet+0xa8>)
1a0040ae:	600b      	str	r3, [r1, #0]
1a0040b0:	e7cd      	b.n	1a00404e <uartCallbackSet+0xe>
               txIsrCallbackUART2 = callbackFunc;
1a0040b2:	490e      	ldr	r1, [pc, #56]	; (1a0040ec <uartCallbackSet+0xac>)
1a0040b4:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART2Params = callbackParam;
1a0040b6:	490e      	ldr	r1, [pc, #56]	; (1a0040f0 <uartCallbackSet+0xb0>)
1a0040b8:	600b      	str	r3, [r1, #0]
1a0040ba:	e7cc      	b.n	1a004056 <uartCallbackSet+0x16>
               txIsrCallbackUART3 = callbackFunc;
1a0040bc:	490d      	ldr	r1, [pc, #52]	; (1a0040f4 <uartCallbackSet+0xb4>)
1a0040be:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART3Params = callbackParam;
1a0040c0:	4a0d      	ldr	r2, [pc, #52]	; (1a0040f8 <uartCallbackSet+0xb8>)
1a0040c2:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_THREINT;
1a0040c4:	2302      	movs	r3, #2
1a0040c6:	e7d4      	b.n	1a004072 <uartCallbackSet+0x32>
1a0040c8:	1a00a85c 	.word	0x1a00a85c
1a0040cc:	100078c8 	.word	0x100078c8
1a0040d0:	100078cc 	.word	0x100078cc
1a0040d4:	100078d0 	.word	0x100078d0
1a0040d8:	100078d4 	.word	0x100078d4
1a0040dc:	100078d8 	.word	0x100078d8
1a0040e0:	100078dc 	.word	0x100078dc
1a0040e4:	100078e0 	.word	0x100078e0
1a0040e8:	100078e4 	.word	0x100078e4
1a0040ec:	100078e8 	.word	0x100078e8
1a0040f0:	100078ec 	.word	0x100078ec
1a0040f4:	100078f0 	.word	0x100078f0
1a0040f8:	100078f4 	.word	0x100078f4

1a0040fc <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0040fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004100:	0083      	lsls	r3, r0, #2
1a004102:	4a03      	ldr	r2, [pc, #12]	; (1a004110 <uartTxReady+0x14>)
1a004104:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a004106:	6958      	ldr	r0, [r3, #20]
}
1a004108:	f000 0020 	and.w	r0, r0, #32
1a00410c:	4770      	bx	lr
1a00410e:	bf00      	nop
1a004110:	1a00a85c 	.word	0x1a00a85c

1a004114 <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a004114:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004118:	0083      	lsls	r3, r0, #2
1a00411a:	4a02      	ldr	r2, [pc, #8]	; (1a004124 <uartRxRead+0x10>)
1a00411c:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00411e:	6818      	ldr	r0, [r3, #0]
}
1a004120:	b2c0      	uxtb	r0, r0
1a004122:	4770      	bx	lr
1a004124:	1a00a85c 	.word	0x1a00a85c

1a004128 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a004128:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00412c:	0083      	lsls	r3, r0, #2
1a00412e:	4a02      	ldr	r2, [pc, #8]	; (1a004138 <uartTxWrite+0x10>)
1a004130:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a004132:	6019      	str	r1, [r3, #0]
}
1a004134:	4770      	bx	lr
1a004136:	bf00      	nop
1a004138:	1a00a85c 	.word	0x1a00a85c

1a00413c <uartInit>:
{
1a00413c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004140:	4680      	mov	r8, r0
1a004142:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a004144:	4c19      	ldr	r4, [pc, #100]	; (1a0041ac <uartInit+0x70>)
1a004146:	0045      	lsls	r5, r0, #1
1a004148:	182a      	adds	r2, r5, r0
1a00414a:	0093      	lsls	r3, r2, #2
1a00414c:	18e6      	adds	r6, r4, r3
1a00414e:	58e7      	ldr	r7, [r4, r3]
1a004150:	4638      	mov	r0, r7
1a004152:	f7ff f90b 	bl	1a00336c <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a004156:	4649      	mov	r1, r9
1a004158:	4638      	mov	r0, r7
1a00415a:	f7ff f931 	bl	1a0033c0 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a00415e:	2307      	movs	r3, #7
1a004160:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a004162:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a004164:	2301      	movs	r3, #1
1a004166:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a004168:	7930      	ldrb	r0, [r6, #4]
1a00416a:	7973      	ldrb	r3, [r6, #5]
1a00416c:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00416e:	f042 0218 	orr.w	r2, r2, #24
1a004172:	490f      	ldr	r1, [pc, #60]	; (1a0041b0 <uartInit+0x74>)
1a004174:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a004178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a00417c:	79f0      	ldrb	r0, [r6, #7]
1a00417e:	7a33      	ldrb	r3, [r6, #8]
1a004180:	7a72      	ldrb	r2, [r6, #9]
1a004182:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a004186:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00418a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a00418e:	f1b8 0f01 	cmp.w	r8, #1
1a004192:	d001      	beq.n	1a004198 <uartInit+0x5c>
}
1a004194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a004198:	4a06      	ldr	r2, [pc, #24]	; (1a0041b4 <uartInit+0x78>)
1a00419a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a00419c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a0041a0:	64d3      	str	r3, [r2, #76]	; 0x4c
1a0041a2:	221a      	movs	r2, #26
1a0041a4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a0041a8:	e7f4      	b.n	1a004194 <uartInit+0x58>
1a0041aa:	bf00      	nop
1a0041ac:	1a00a85c 	.word	0x1a00a85c
1a0041b0:	40086000 	.word	0x40086000
1a0041b4:	40081000 	.word	0x40081000

1a0041b8 <uartWriteByte>:
{
1a0041b8:	b538      	push	{r3, r4, r5, lr}
1a0041ba:	4604      	mov	r4, r0
1a0041bc:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a0041be:	4620      	mov	r0, r4
1a0041c0:	f7ff ff9c 	bl	1a0040fc <uartTxReady>
1a0041c4:	2800      	cmp	r0, #0
1a0041c6:	d0fa      	beq.n	1a0041be <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a0041c8:	4629      	mov	r1, r5
1a0041ca:	4620      	mov	r0, r4
1a0041cc:	f7ff ffac 	bl	1a004128 <uartTxWrite>
}
1a0041d0:	bd38      	pop	{r3, r4, r5, pc}

1a0041d2 <uartWriteString>:
{
1a0041d2:	b538      	push	{r3, r4, r5, lr}
1a0041d4:	4605      	mov	r5, r0
1a0041d6:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a0041d8:	e003      	b.n	1a0041e2 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a0041da:	4628      	mov	r0, r5
1a0041dc:	f7ff ffec 	bl	1a0041b8 <uartWriteByte>
      str++;
1a0041e0:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a0041e2:	7821      	ldrb	r1, [r4, #0]
1a0041e4:	2900      	cmp	r1, #0
1a0041e6:	d1f8      	bne.n	1a0041da <uartWriteString+0x8>
}
1a0041e8:	bd38      	pop	{r3, r4, r5, pc}

1a0041ea <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a0041ea:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a0041ec:	2003      	movs	r0, #3
1a0041ee:	f7ff fe7b 	bl	1a003ee8 <uartProcessIRQ>
}
1a0041f2:	bd08      	pop	{r3, pc}

1a0041f4 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a0041f4:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a0041f6:	2005      	movs	r0, #5
1a0041f8:	f7ff fe76 	bl	1a003ee8 <uartProcessIRQ>
}
1a0041fc:	bd08      	pop	{r3, pc}

1a0041fe <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a0041fe:	e7fe      	b.n	1a0041fe <errorOcurred>

1a004200 <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a004200:	4770      	bx	lr
1a004202:	Address 0x000000001a004202 is out of bounds.


1a004204 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a004204:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004206:	2400      	movs	r4, #0
1a004208:	e001      	b.n	1a00420e <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00420a:	3401      	adds	r4, #1
1a00420c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00420e:	2c03      	cmp	r4, #3
1a004210:	d812      	bhi.n	1a004238 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a004212:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a004214:	4b09      	ldr	r3, [pc, #36]	; (1a00423c <TIMER0_IRQHandler+0x38>)
1a004216:	681a      	ldr	r2, [r3, #0]
1a004218:	f004 010f 	and.w	r1, r4, #15
1a00421c:	2301      	movs	r3, #1
1a00421e:	408b      	lsls	r3, r1
1a004220:	421a      	tst	r2, r3
1a004222:	d0f2      	beq.n	1a00420a <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a004224:	4b06      	ldr	r3, [pc, #24]	; (1a004240 <TIMER0_IRQHandler+0x3c>)
1a004226:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a00422a:	2000      	movs	r0, #0
1a00422c:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00422e:	2301      	movs	r3, #1
1a004230:	40ab      	lsls	r3, r5
1a004232:	4a02      	ldr	r2, [pc, #8]	; (1a00423c <TIMER0_IRQHandler+0x38>)
1a004234:	6013      	str	r3, [r2, #0]
1a004236:	e7e8      	b.n	1a00420a <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a004238:	bd38      	pop	{r3, r4, r5, pc}
1a00423a:	bf00      	nop
1a00423c:	40084000 	.word	0x40084000
1a004240:	10000044 	.word	0x10000044

1a004244 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a004244:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004246:	2400      	movs	r4, #0
1a004248:	e001      	b.n	1a00424e <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00424a:	3401      	adds	r4, #1
1a00424c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00424e:	2c03      	cmp	r4, #3
1a004250:	d813      	bhi.n	1a00427a <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a004252:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a004254:	4b09      	ldr	r3, [pc, #36]	; (1a00427c <TIMER1_IRQHandler+0x38>)
1a004256:	681a      	ldr	r2, [r3, #0]
1a004258:	f004 010f 	and.w	r1, r4, #15
1a00425c:	2301      	movs	r3, #1
1a00425e:	408b      	lsls	r3, r1
1a004260:	421a      	tst	r2, r3
1a004262:	d0f2      	beq.n	1a00424a <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a004264:	1d23      	adds	r3, r4, #4
1a004266:	4a06      	ldr	r2, [pc, #24]	; (1a004280 <TIMER1_IRQHandler+0x3c>)
1a004268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00426c:	2000      	movs	r0, #0
1a00426e:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a004270:	2301      	movs	r3, #1
1a004272:	40ab      	lsls	r3, r5
1a004274:	4a01      	ldr	r2, [pc, #4]	; (1a00427c <TIMER1_IRQHandler+0x38>)
1a004276:	6013      	str	r3, [r2, #0]
1a004278:	e7e7      	b.n	1a00424a <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a00427a:	bd38      	pop	{r3, r4, r5, pc}
1a00427c:	40085000 	.word	0x40085000
1a004280:	10000044 	.word	0x10000044

1a004284 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a004284:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004286:	2400      	movs	r4, #0
1a004288:	e001      	b.n	1a00428e <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00428a:	3401      	adds	r4, #1
1a00428c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00428e:	2c03      	cmp	r4, #3
1a004290:	d814      	bhi.n	1a0042bc <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a004292:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a004294:	4b0a      	ldr	r3, [pc, #40]	; (1a0042c0 <TIMER2_IRQHandler+0x3c>)
1a004296:	681a      	ldr	r2, [r3, #0]
1a004298:	f004 010f 	and.w	r1, r4, #15
1a00429c:	2301      	movs	r3, #1
1a00429e:	408b      	lsls	r3, r1
1a0042a0:	421a      	tst	r2, r3
1a0042a2:	d0f2      	beq.n	1a00428a <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0042a4:	f104 0308 	add.w	r3, r4, #8
1a0042a8:	4a06      	ldr	r2, [pc, #24]	; (1a0042c4 <TIMER2_IRQHandler+0x40>)
1a0042aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0042ae:	2000      	movs	r0, #0
1a0042b0:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0042b2:	2301      	movs	r3, #1
1a0042b4:	40ab      	lsls	r3, r5
1a0042b6:	4a02      	ldr	r2, [pc, #8]	; (1a0042c0 <TIMER2_IRQHandler+0x3c>)
1a0042b8:	6013      	str	r3, [r2, #0]
1a0042ba:	e7e6      	b.n	1a00428a <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0042bc:	bd38      	pop	{r3, r4, r5, pc}
1a0042be:	bf00      	nop
1a0042c0:	400c3000 	.word	0x400c3000
1a0042c4:	10000044 	.word	0x10000044

1a0042c8 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0042c8:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0042ca:	2400      	movs	r4, #0
1a0042cc:	e001      	b.n	1a0042d2 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0042ce:	3401      	adds	r4, #1
1a0042d0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0042d2:	2c03      	cmp	r4, #3
1a0042d4:	d814      	bhi.n	1a004300 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0042d6:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0042d8:	4b0a      	ldr	r3, [pc, #40]	; (1a004304 <TIMER3_IRQHandler+0x3c>)
1a0042da:	681a      	ldr	r2, [r3, #0]
1a0042dc:	f004 010f 	and.w	r1, r4, #15
1a0042e0:	2301      	movs	r3, #1
1a0042e2:	408b      	lsls	r3, r1
1a0042e4:	421a      	tst	r2, r3
1a0042e6:	d0f2      	beq.n	1a0042ce <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0042e8:	f104 030c 	add.w	r3, r4, #12
1a0042ec:	4a06      	ldr	r2, [pc, #24]	; (1a004308 <TIMER3_IRQHandler+0x40>)
1a0042ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0042f2:	2000      	movs	r0, #0
1a0042f4:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0042f6:	2301      	movs	r3, #1
1a0042f8:	40ab      	lsls	r3, r5
1a0042fa:	4a02      	ldr	r2, [pc, #8]	; (1a004304 <TIMER3_IRQHandler+0x3c>)
1a0042fc:	6013      	str	r3, [r2, #0]
1a0042fe:	e7e6      	b.n	1a0042ce <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a004300:	bd38      	pop	{r3, r4, r5, pc}
1a004302:	bf00      	nop
1a004304:	400c4000 	.word	0x400c4000
1a004308:	10000044 	.word	0x10000044

1a00430c <adcInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  ADC_ENABLE, ADC_DISABLE
 * @return: none
*/
void adcInit( adcInit_t config )
{
1a00430c:	b530      	push	{r4, r5, lr}
1a00430e:	b083      	sub	sp, #12
   T_FIL3  ---- 7   ADC0_0 (ANALOG_SEL)
   T_COL1  ---- 132 ADC0_4 (ANALOG_SEL)
   ENET_MDC --- 140 ADC1_6 (ANALOG_SEL)
   */
   
   switch(config) {
1a004310:	b118      	cbz	r0, 1a00431a <adcInit+0xe>
1a004312:	2801      	cmp	r0, #1
1a004314:	d04a      	beq.n	1a0043ac <adcInit+0xa0>
         /* Disable ADC peripheral */
         Chip_ADC_DeInit( LPC_ADC0 );
         break;
      }

}
1a004316:	b003      	add	sp, #12
1a004318:	bd30      	pop	{r4, r5, pc}
         ADC_CLOCK_SETUP_T ADCSetup = {
1a00431a:	4b26      	ldr	r3, [pc, #152]	; (1a0043b4 <adcInit+0xa8>)
1a00431c:	466d      	mov	r5, sp
1a00431e:	e893 0003 	ldmia.w	r3, {r0, r1}
1a004322:	e885 0003 	stmia.w	r5, {r0, r1}
         Chip_ADC_Init( LPC_ADC0, &ADCSetup );
1a004326:	4c24      	ldr	r4, [pc, #144]	; (1a0043b8 <adcInit+0xac>)
1a004328:	4629      	mov	r1, r5
1a00432a:	4620      	mov	r0, r4
1a00432c:	f7ff f912 	bl	1a003554 <Chip_ADC_Init>
         Chip_ADC_SetBurstCmd( LPC_ADC0, DISABLE );
1a004330:	2100      	movs	r1, #0
1a004332:	4620      	mov	r0, r4
1a004334:	f7ff f9ab 	bl	1a00368e <Chip_ADC_SetBurstCmd>
         Chip_ADC_SetSampleRate( LPC_ADC0, &ADCSetup, ADC_MAX_SAMPLE_RATE/2 );
1a004338:	4a20      	ldr	r2, [pc, #128]	; (1a0043bc <adcInit+0xb0>)
1a00433a:	4629      	mov	r1, r5
1a00433c:	4620      	mov	r0, r4
1a00433e:	f7ff f973 	bl	1a003628 <Chip_ADC_SetSampleRate>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH1, DISABLE );
1a004342:	2200      	movs	r2, #0
1a004344:	2101      	movs	r1, #1
1a004346:	4620      	mov	r0, r4
1a004348:	f7ff f98d 	bl	1a003666 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH1, DISABLE );
1a00434c:	2200      	movs	r2, #0
1a00434e:	2101      	movs	r1, #1
1a004350:	4620      	mov	r0, r4
1a004352:	f7ff f949 	bl	1a0035e8 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH2, DISABLE );
1a004356:	2200      	movs	r2, #0
1a004358:	2102      	movs	r1, #2
1a00435a:	4620      	mov	r0, r4
1a00435c:	f7ff f983 	bl	1a003666 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH2, DISABLE );
1a004360:	2200      	movs	r2, #0
1a004362:	2102      	movs	r1, #2
1a004364:	4620      	mov	r0, r4
1a004366:	f7ff f93f 	bl	1a0035e8 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH3, DISABLE );
1a00436a:	2200      	movs	r2, #0
1a00436c:	2103      	movs	r1, #3
1a00436e:	4620      	mov	r0, r4
1a004370:	f7ff f979 	bl	1a003666 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH3, DISABLE );
1a004374:	2200      	movs	r2, #0
1a004376:	2103      	movs	r1, #3
1a004378:	4620      	mov	r0, r4
1a00437a:	f7ff f935 	bl	1a0035e8 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH4, DISABLE );
1a00437e:	2200      	movs	r2, #0
1a004380:	2104      	movs	r1, #4
1a004382:	4620      	mov	r0, r4
1a004384:	f7ff f96f 	bl	1a003666 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH4, DISABLE );
1a004388:	2200      	movs	r2, #0
1a00438a:	2104      	movs	r1, #4
1a00438c:	4620      	mov	r0, r4
1a00438e:	f7ff f92b 	bl	1a0035e8 <Chip_ADC_Int_SetChannelCmd>
	LPC_SCU->ENAIO[ADC_ID] |= 1UL << channel;
1a004392:	4a0b      	ldr	r2, [pc, #44]	; (1a0043c0 <adcInit+0xb4>)
1a004394:	f8d2 3c88 	ldr.w	r3, [r2, #3208]	; 0xc88
1a004398:	f043 0310 	orr.w	r3, r3, #16
1a00439c:	f8c2 3c88 	str.w	r3, [r2, #3208]	; 0xc88
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH5, DISABLE ); // Revisar codigo
1a0043a0:	2200      	movs	r2, #0
1a0043a2:	2105      	movs	r1, #5
1a0043a4:	4620      	mov	r0, r4
1a0043a6:	f7ff f91f 	bl	1a0035e8 <Chip_ADC_Int_SetChannelCmd>
      break;
1a0043aa:	e7b4      	b.n	1a004316 <adcInit+0xa>
         Chip_ADC_DeInit( LPC_ADC0 );
1a0043ac:	4802      	ldr	r0, [pc, #8]	; (1a0043b8 <adcInit+0xac>)
1a0043ae:	f7ff f8f1 	bl	1a003594 <Chip_ADC_DeInit>
}
1a0043b2:	e7b0      	b.n	1a004316 <adcInit+0xa>
1a0043b4:	1a00a8a4 	.word	0x1a00a8a4
1a0043b8:	400e3000 	.word	0x400e3000
1a0043bc:	00030d40 	.word	0x00030d40
1a0043c0:	40086000 	.word	0x40086000

1a0043c4 <adcRead>:
 * @brief   Get the value of one ADC channel. Mode: BLOCKING
 * @param   AI0 ... AIn
 * @return  analog value
 */
uint16_t adcRead( adcMap_t analogInput )
{
1a0043c4:	b570      	push	{r4, r5, r6, lr}
1a0043c6:	b082      	sub	sp, #8
   uint8_t lpcAdcChannel = analogInput + 1;
1a0043c8:	3001      	adds	r0, #1
1a0043ca:	b2c4      	uxtb	r4, r0
   uint16_t analogValue = 0;
1a0043cc:	2600      	movs	r6, #0
1a0043ce:	f8ad 6006 	strh.w	r6, [sp, #6]

   // Enable channel
   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
1a0043d2:	4d11      	ldr	r5, [pc, #68]	; (1a004418 <adcRead+0x54>)
1a0043d4:	2201      	movs	r2, #1
1a0043d6:	4621      	mov	r1, r4
1a0043d8:	4628      	mov	r0, r5
1a0043da:	f7ff f944 	bl	1a003666 <Chip_ADC_EnableChannel>

   // Start conversion
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
1a0043de:	4632      	mov	r2, r6
1a0043e0:	2101      	movs	r1, #1
1a0043e2:	4628      	mov	r0, r5
1a0043e4:	f7ff f910 	bl	1a003608 <Chip_ADC_SetStartMode>

   // Wait for conversion complete
   while(
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
1a0043e8:	2200      	movs	r2, #0
1a0043ea:	4621      	mov	r1, r4
1a0043ec:	480a      	ldr	r0, [pc, #40]	; (1a004418 <adcRead+0x54>)
1a0043ee:	f7ff f8e0 	bl	1a0035b2 <Chip_ADC_ReadStatus>
   while(
1a0043f2:	2801      	cmp	r0, #1
1a0043f4:	d1f8      	bne.n	1a0043e8 <adcRead+0x24>
   );

   // Enable Read value
   Chip_ADC_ReadValue( LPC_ADC0, lpcAdcChannel, &analogValue );
1a0043f6:	4d08      	ldr	r5, [pc, #32]	; (1a004418 <adcRead+0x54>)
1a0043f8:	f10d 0206 	add.w	r2, sp, #6
1a0043fc:	4621      	mov	r1, r4
1a0043fe:	4628      	mov	r0, r5
1a004400:	f7ff f8d3 	bl	1a0035aa <Chip_ADC_ReadValue>

   // Disable channel
   Chip_ADC_EnableChannel( LPC_ADC0, lpcAdcChannel, DISABLE );
1a004404:	2200      	movs	r2, #0
1a004406:	4621      	mov	r1, r4
1a004408:	4628      	mov	r0, r5
1a00440a:	f7ff f92c 	bl	1a003666 <Chip_ADC_EnableChannel>

   return analogValue;
}
1a00440e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a004412:	b002      	add	sp, #8
1a004414:	bd70      	pop	{r4, r5, r6, pc}
1a004416:	bf00      	nop
1a004418:	400e3000 	.word	0x400e3000

1a00441c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a00441c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00441e:	4d0b      	ldr	r5, [pc, #44]	; (1a00444c <gpioObtainPinInit+0x30>)
1a004420:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a004424:	182c      	adds	r4, r5, r0
1a004426:	5628      	ldrsb	r0, [r5, r0]
1a004428:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00442a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00442e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a004430:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a004434:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a004436:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00443a:	9b02      	ldr	r3, [sp, #8]
1a00443c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00443e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a004442:	9b03      	ldr	r3, [sp, #12]
1a004444:	701a      	strb	r2, [r3, #0]
}
1a004446:	bc30      	pop	{r4, r5}
1a004448:	4770      	bx	lr
1a00444a:	bf00      	nop
1a00444c:	1a00a8ac 	.word	0x1a00a8ac

1a004450 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a004450:	f110 0f02 	cmn.w	r0, #2
1a004454:	f000 80c7 	beq.w	1a0045e6 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a004458:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00445c:	f000 80c5 	beq.w	1a0045ea <gpioInit+0x19a>
{
1a004460:	b570      	push	{r4, r5, r6, lr}
1a004462:	b084      	sub	sp, #16
1a004464:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a004466:	2300      	movs	r3, #0
1a004468:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00446c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004470:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a004474:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a004478:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00447c:	f10d 030b 	add.w	r3, sp, #11
1a004480:	9301      	str	r3, [sp, #4]
1a004482:	ab03      	add	r3, sp, #12
1a004484:	9300      	str	r3, [sp, #0]
1a004486:	f10d 030d 	add.w	r3, sp, #13
1a00448a:	f10d 020e 	add.w	r2, sp, #14
1a00448e:	f10d 010f 	add.w	r1, sp, #15
1a004492:	f7ff ffc3 	bl	1a00441c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a004496:	2c05      	cmp	r4, #5
1a004498:	f200 80a9 	bhi.w	1a0045ee <gpioInit+0x19e>
1a00449c:	e8df f004 	tbb	[pc, r4]
1a0044a0:	45278109 	.word	0x45278109
1a0044a4:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0044a6:	4853      	ldr	r0, [pc, #332]	; (1a0045f4 <gpioInit+0x1a4>)
1a0044a8:	f7ff fc98 	bl	1a003ddc <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0044ac:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0044ae:	b004      	add	sp, #16
1a0044b0:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0044b2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0044b6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0044ba:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0044be:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0044c2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0044c6:	494c      	ldr	r1, [pc, #304]	; (1a0045f8 <gpioInit+0x1a8>)
1a0044c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0044cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0044d0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0044d4:	2001      	movs	r0, #1
1a0044d6:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0044da:	4c46      	ldr	r4, [pc, #280]	; (1a0045f4 <gpioInit+0x1a4>)
1a0044dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0044e0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0044e4:	ea22 0201 	bic.w	r2, r2, r1
1a0044e8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0044ec:	e7df      	b.n	1a0044ae <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0044ee:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0044f2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0044f6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0044fa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0044fe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004502:	493d      	ldr	r1, [pc, #244]	; (1a0045f8 <gpioInit+0x1a8>)
1a004504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004508:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00450c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004510:	2001      	movs	r0, #1
1a004512:	fa00 f102 	lsl.w	r1, r0, r2
1a004516:	4c37      	ldr	r4, [pc, #220]	; (1a0045f4 <gpioInit+0x1a4>)
1a004518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00451c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004520:	ea22 0201 	bic.w	r2, r2, r1
1a004524:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004528:	e7c1      	b.n	1a0044ae <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00452a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00452e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004532:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004536:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00453a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00453e:	492e      	ldr	r1, [pc, #184]	; (1a0045f8 <gpioInit+0x1a8>)
1a004540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004544:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004548:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00454c:	2001      	movs	r0, #1
1a00454e:	fa00 f102 	lsl.w	r1, r0, r2
1a004552:	4c28      	ldr	r4, [pc, #160]	; (1a0045f4 <gpioInit+0x1a4>)
1a004554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004558:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00455c:	ea22 0201 	bic.w	r2, r2, r1
1a004560:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004564:	e7a3      	b.n	1a0044ae <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a004566:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00456a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00456e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004572:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a004576:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00457a:	491f      	ldr	r1, [pc, #124]	; (1a0045f8 <gpioInit+0x1a8>)
1a00457c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004580:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004584:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004588:	2001      	movs	r0, #1
1a00458a:	fa00 f102 	lsl.w	r1, r0, r2
1a00458e:	4c19      	ldr	r4, [pc, #100]	; (1a0045f4 <gpioInit+0x1a4>)
1a004590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004594:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004598:	ea22 0201 	bic.w	r2, r2, r1
1a00459c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0045a0:	e785      	b.n	1a0044ae <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0045a2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0045a6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0045aa:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0045ae:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0045b2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0045b6:	4910      	ldr	r1, [pc, #64]	; (1a0045f8 <gpioInit+0x1a8>)
1a0045b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0045bc:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0045c0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0045c4:	2001      	movs	r0, #1
1a0045c6:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0045ca:	4b0a      	ldr	r3, [pc, #40]	; (1a0045f4 <gpioInit+0x1a4>)
1a0045cc:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0045d0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0045d4:	4331      	orrs	r1, r6
1a0045d6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0045da:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0045dc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0045e0:	2100      	movs	r1, #0
1a0045e2:	5499      	strb	r1, [r3, r2]
1a0045e4:	e763      	b.n	1a0044ae <gpioInit+0x5e>
	  return FALSE;
1a0045e6:	2000      	movs	r0, #0
1a0045e8:	4770      	bx	lr
	  return FALSE;
1a0045ea:	2000      	movs	r0, #0
}
1a0045ec:	4770      	bx	lr
      ret_val = 0;
1a0045ee:	2000      	movs	r0, #0
1a0045f0:	e75d      	b.n	1a0044ae <gpioInit+0x5e>
1a0045f2:	bf00      	nop
1a0045f4:	400f4000 	.word	0x400f4000
1a0045f8:	40086000 	.word	0x40086000

1a0045fc <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0045fc:	f110 0f02 	cmn.w	r0, #2
1a004600:	d02d      	beq.n	1a00465e <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a004602:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004606:	d02c      	beq.n	1a004662 <gpioWrite+0x66>
{
1a004608:	b510      	push	{r4, lr}
1a00460a:	b084      	sub	sp, #16
1a00460c:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00460e:	2300      	movs	r3, #0
1a004610:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a004614:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004618:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00461c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a004620:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a004624:	f10d 030b 	add.w	r3, sp, #11
1a004628:	9301      	str	r3, [sp, #4]
1a00462a:	ab03      	add	r3, sp, #12
1a00462c:	9300      	str	r3, [sp, #0]
1a00462e:	f10d 030d 	add.w	r3, sp, #13
1a004632:	f10d 020e 	add.w	r2, sp, #14
1a004636:	f10d 010f 	add.w	r1, sp, #15
1a00463a:	f7ff feef 	bl	1a00441c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00463e:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004642:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a004646:	1c21      	adds	r1, r4, #0
1a004648:	bf18      	it	ne
1a00464a:	2101      	movne	r1, #1
1a00464c:	015b      	lsls	r3, r3, #5
1a00464e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a004652:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a004656:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a004658:	2001      	movs	r0, #1
}
1a00465a:	b004      	add	sp, #16
1a00465c:	bd10      	pop	{r4, pc}
	  return FALSE;
1a00465e:	2000      	movs	r0, #0
1a004660:	4770      	bx	lr
	  return FALSE;
1a004662:	2000      	movs	r0, #0
}
1a004664:	4770      	bx	lr

1a004666 <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a004666:	f110 0f02 	cmn.w	r0, #2
1a00466a:	d02c      	beq.n	1a0046c6 <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a00466c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004670:	d02b      	beq.n	1a0046ca <gpioRead+0x64>
{
1a004672:	b500      	push	{lr}
1a004674:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a004676:	2300      	movs	r3, #0
1a004678:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00467c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004680:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a004684:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a004688:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00468c:	f10d 030b 	add.w	r3, sp, #11
1a004690:	9301      	str	r3, [sp, #4]
1a004692:	ab03      	add	r3, sp, #12
1a004694:	9300      	str	r3, [sp, #0]
1a004696:	f10d 030d 	add.w	r3, sp, #13
1a00469a:	f10d 020e 	add.w	r2, sp, #14
1a00469e:	f10d 010f 	add.w	r1, sp, #15
1a0046a2:	f7ff febb 	bl	1a00441c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0046a6:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0046aa:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0046ae:	015b      	lsls	r3, r3, #5
1a0046b0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0046b4:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0046b8:	5c98      	ldrb	r0, [r3, r2]
1a0046ba:	3000      	adds	r0, #0
1a0046bc:	bf18      	it	ne
1a0046be:	2001      	movne	r0, #1

   return ret_val;
}
1a0046c0:	b005      	add	sp, #20
1a0046c2:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a0046c6:	2001      	movs	r0, #1
1a0046c8:	4770      	bx	lr
      return FALSE;
1a0046ca:	2000      	movs	r0, #0
}
1a0046cc:	4770      	bx	lr

1a0046ce <gpioToggle>:
{
1a0046ce:	b510      	push	{r4, lr}
1a0046d0:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a0046d2:	f7ff ffc8 	bl	1a004666 <gpioRead>
1a0046d6:	fab0 f180 	clz	r1, r0
1a0046da:	0949      	lsrs	r1, r1, #5
1a0046dc:	4620      	mov	r0, r4
1a0046de:	f7ff ff8d 	bl	1a0045fc <gpioWrite>
}
1a0046e2:	bd10      	pop	{r4, pc}

1a0046e4 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0046e4:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0046e6:	4b04      	ldr	r3, [pc, #16]	; (1a0046f8 <USB0_IRQHandler+0x14>)
1a0046e8:	681b      	ldr	r3, [r3, #0]
1a0046ea:	681b      	ldr	r3, [r3, #0]
1a0046ec:	68db      	ldr	r3, [r3, #12]
1a0046ee:	4a03      	ldr	r2, [pc, #12]	; (1a0046fc <USB0_IRQHandler+0x18>)
1a0046f0:	6810      	ldr	r0, [r2, #0]
1a0046f2:	4798      	blx	r3
}
1a0046f4:	bd08      	pop	{r3, pc}
1a0046f6:	bf00      	nop
1a0046f8:	10007a00 	.word	0x10007a00
1a0046fc:	100078f8 	.word	0x100078f8

1a004700 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a004700:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a004702:	f7ff fab7 	bl	1a003c74 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a004706:	4b18      	ldr	r3, [pc, #96]	; (1a004768 <boardInit+0x68>)
1a004708:	6818      	ldr	r0, [r3, #0]
1a00470a:	f7ff fbdf 	bl	1a003ecc <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a00470e:	2105      	movs	r1, #5
1a004710:	2000      	movs	r0, #0
1a004712:	f7ff fe9d 	bl	1a004450 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a004716:	2100      	movs	r1, #0
1a004718:	2024      	movs	r0, #36	; 0x24
1a00471a:	f7ff fe99 	bl	1a004450 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a00471e:	2100      	movs	r1, #0
1a004720:	2025      	movs	r0, #37	; 0x25
1a004722:	f7ff fe95 	bl	1a004450 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a004726:	2100      	movs	r1, #0
1a004728:	2026      	movs	r0, #38	; 0x26
1a00472a:	f7ff fe91 	bl	1a004450 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a00472e:	2100      	movs	r1, #0
1a004730:	2027      	movs	r0, #39	; 0x27
1a004732:	f7ff fe8d 	bl	1a004450 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a004736:	2101      	movs	r1, #1
1a004738:	2028      	movs	r0, #40	; 0x28
1a00473a:	f7ff fe89 	bl	1a004450 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a00473e:	2101      	movs	r1, #1
1a004740:	2029      	movs	r0, #41	; 0x29
1a004742:	f7ff fe85 	bl	1a004450 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a004746:	2101      	movs	r1, #1
1a004748:	202a      	movs	r0, #42	; 0x2a
1a00474a:	f7ff fe81 	bl	1a004450 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a00474e:	2101      	movs	r1, #1
1a004750:	202b      	movs	r0, #43	; 0x2b
1a004752:	f7ff fe7d 	bl	1a004450 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a004756:	2101      	movs	r1, #1
1a004758:	202c      	movs	r0, #44	; 0x2c
1a00475a:	f7ff fe79 	bl	1a004450 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a00475e:	2101      	movs	r1, #1
1a004760:	202d      	movs	r0, #45	; 0x2d
1a004762:	f7ff fe75 	bl	1a004450 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a004766:	bd08      	pop	{r3, pc}
1a004768:	100079fc 	.word	0x100079fc

1a00476c <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a00476c:	2301      	movs	r3, #1
1a00476e:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a004772:	4b01      	ldr	r3, [pc, #4]	; (1a004778 <clearInterrupt+0xc>)
1a004774:	6258      	str	r0, [r3, #36]	; 0x24
}
1a004776:	4770      	bx	lr
1a004778:	40087000 	.word	0x40087000

1a00477c <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a00477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a00477e:	4b12      	ldr	r3, [pc, #72]	; (1a0047c8 <serveInterrupt+0x4c>)
1a004780:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a004782:	4b12      	ldr	r3, [pc, #72]	; (1a0047cc <serveInterrupt+0x50>)
1a004784:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a004786:	2301      	movs	r3, #1
1a004788:	4083      	lsls	r3, r0
1a00478a:	420b      	tst	r3, r1
1a00478c:	d111      	bne.n	1a0047b2 <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a00478e:	4910      	ldr	r1, [pc, #64]	; (1a0047d0 <serveInterrupt+0x54>)
1a004790:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a004792:	4d10      	ldr	r5, [pc, #64]	; (1a0047d4 <serveInterrupt+0x58>)
1a004794:	0051      	lsls	r1, r2, #1
1a004796:	188f      	adds	r7, r1, r2
1a004798:	00fc      	lsls	r4, r7, #3
1a00479a:	4627      	mov	r7, r4
1a00479c:	442c      	add	r4, r5
1a00479e:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0047a0:	6864      	ldr	r4, [r4, #4]
1a0047a2:	1b36      	subs	r6, r6, r4
1a0047a4:	443d      	add	r5, r7
1a0047a6:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a0047a8:	4a08      	ldr	r2, [pc, #32]	; (1a0047cc <serveInterrupt+0x50>)
1a0047aa:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0047ac:	f7ff ffde 	bl	1a00476c <clearInterrupt>
}
1a0047b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0047b2:	4907      	ldr	r1, [pc, #28]	; (1a0047d0 <serveInterrupt+0x54>)
1a0047b4:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0047b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a0047ba:	00d1      	lsls	r1, r2, #3
1a0047bc:	4a05      	ldr	r2, [pc, #20]	; (1a0047d4 <serveInterrupt+0x58>)
1a0047be:	440a      	add	r2, r1
1a0047c0:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a0047c2:	4a02      	ldr	r2, [pc, #8]	; (1a0047cc <serveInterrupt+0x50>)
1a0047c4:	61d3      	str	r3, [r2, #28]
1a0047c6:	e7f1      	b.n	1a0047ac <serveInterrupt+0x30>
1a0047c8:	1a00a994 	.word	0x1a00a994
1a0047cc:	40087000 	.word	0x40087000
1a0047d0:	40084000 	.word	0x40084000
1a0047d4:	10000084 	.word	0x10000084

1a0047d8 <GPIO0_IRQHandler>:
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifdef SAPI_USE_INTERRUPTS
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a0047d8:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0047da:	2000      	movs	r0, #0
1a0047dc:	f7ff ffce 	bl	1a00477c <serveInterrupt>
}
1a0047e0:	bd08      	pop	{r3, pc}

1a0047e2 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a0047e2:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0047e4:	2001      	movs	r0, #1
1a0047e6:	f7ff ffc9 	bl	1a00477c <serveInterrupt>
}
1a0047ea:	bd08      	pop	{r3, pc}

1a0047ec <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a0047ec:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a0047ee:	2002      	movs	r0, #2
1a0047f0:	f7ff ffc4 	bl	1a00477c <serveInterrupt>
}
1a0047f4:	bd08      	pop	{r3, pc}
1a0047f6:	Address 0x000000001a0047f6 is out of bounds.


1a0047f8 <__aeabi_drsub>:
1a0047f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a0047fc:	e002      	b.n	1a004804 <__adddf3>
1a0047fe:	bf00      	nop

1a004800 <__aeabi_dsub>:
1a004800:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a004804 <__adddf3>:
1a004804:	b530      	push	{r4, r5, lr}
1a004806:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a00480a:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a00480e:	ea94 0f05 	teq	r4, r5
1a004812:	bf08      	it	eq
1a004814:	ea90 0f02 	teqeq	r0, r2
1a004818:	bf1f      	itttt	ne
1a00481a:	ea54 0c00 	orrsne.w	ip, r4, r0
1a00481e:	ea55 0c02 	orrsne.w	ip, r5, r2
1a004822:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a004826:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00482a:	f000 80e2 	beq.w	1a0049f2 <__adddf3+0x1ee>
1a00482e:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a004832:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a004836:	bfb8      	it	lt
1a004838:	426d      	neglt	r5, r5
1a00483a:	dd0c      	ble.n	1a004856 <__adddf3+0x52>
1a00483c:	442c      	add	r4, r5
1a00483e:	ea80 0202 	eor.w	r2, r0, r2
1a004842:	ea81 0303 	eor.w	r3, r1, r3
1a004846:	ea82 0000 	eor.w	r0, r2, r0
1a00484a:	ea83 0101 	eor.w	r1, r3, r1
1a00484e:	ea80 0202 	eor.w	r2, r0, r2
1a004852:	ea81 0303 	eor.w	r3, r1, r3
1a004856:	2d36      	cmp	r5, #54	; 0x36
1a004858:	bf88      	it	hi
1a00485a:	bd30      	pophi	{r4, r5, pc}
1a00485c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a004860:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a004864:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a004868:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a00486c:	d002      	beq.n	1a004874 <__adddf3+0x70>
1a00486e:	4240      	negs	r0, r0
1a004870:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004874:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a004878:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a00487c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a004880:	d002      	beq.n	1a004888 <__adddf3+0x84>
1a004882:	4252      	negs	r2, r2
1a004884:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a004888:	ea94 0f05 	teq	r4, r5
1a00488c:	f000 80a7 	beq.w	1a0049de <__adddf3+0x1da>
1a004890:	f1a4 0401 	sub.w	r4, r4, #1
1a004894:	f1d5 0e20 	rsbs	lr, r5, #32
1a004898:	db0d      	blt.n	1a0048b6 <__adddf3+0xb2>
1a00489a:	fa02 fc0e 	lsl.w	ip, r2, lr
1a00489e:	fa22 f205 	lsr.w	r2, r2, r5
1a0048a2:	1880      	adds	r0, r0, r2
1a0048a4:	f141 0100 	adc.w	r1, r1, #0
1a0048a8:	fa03 f20e 	lsl.w	r2, r3, lr
1a0048ac:	1880      	adds	r0, r0, r2
1a0048ae:	fa43 f305 	asr.w	r3, r3, r5
1a0048b2:	4159      	adcs	r1, r3
1a0048b4:	e00e      	b.n	1a0048d4 <__adddf3+0xd0>
1a0048b6:	f1a5 0520 	sub.w	r5, r5, #32
1a0048ba:	f10e 0e20 	add.w	lr, lr, #32
1a0048be:	2a01      	cmp	r2, #1
1a0048c0:	fa03 fc0e 	lsl.w	ip, r3, lr
1a0048c4:	bf28      	it	cs
1a0048c6:	f04c 0c02 	orrcs.w	ip, ip, #2
1a0048ca:	fa43 f305 	asr.w	r3, r3, r5
1a0048ce:	18c0      	adds	r0, r0, r3
1a0048d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a0048d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0048d8:	d507      	bpl.n	1a0048ea <__adddf3+0xe6>
1a0048da:	f04f 0e00 	mov.w	lr, #0
1a0048de:	f1dc 0c00 	rsbs	ip, ip, #0
1a0048e2:	eb7e 0000 	sbcs.w	r0, lr, r0
1a0048e6:	eb6e 0101 	sbc.w	r1, lr, r1
1a0048ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a0048ee:	d31b      	bcc.n	1a004928 <__adddf3+0x124>
1a0048f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a0048f4:	d30c      	bcc.n	1a004910 <__adddf3+0x10c>
1a0048f6:	0849      	lsrs	r1, r1, #1
1a0048f8:	ea5f 0030 	movs.w	r0, r0, rrx
1a0048fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a004900:	f104 0401 	add.w	r4, r4, #1
1a004904:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a004908:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a00490c:	f080 809a 	bcs.w	1a004a44 <__adddf3+0x240>
1a004910:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a004914:	bf08      	it	eq
1a004916:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00491a:	f150 0000 	adcs.w	r0, r0, #0
1a00491e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a004922:	ea41 0105 	orr.w	r1, r1, r5
1a004926:	bd30      	pop	{r4, r5, pc}
1a004928:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a00492c:	4140      	adcs	r0, r0
1a00492e:	eb41 0101 	adc.w	r1, r1, r1
1a004932:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004936:	f1a4 0401 	sub.w	r4, r4, #1
1a00493a:	d1e9      	bne.n	1a004910 <__adddf3+0x10c>
1a00493c:	f091 0f00 	teq	r1, #0
1a004940:	bf04      	itt	eq
1a004942:	4601      	moveq	r1, r0
1a004944:	2000      	moveq	r0, #0
1a004946:	fab1 f381 	clz	r3, r1
1a00494a:	bf08      	it	eq
1a00494c:	3320      	addeq	r3, #32
1a00494e:	f1a3 030b 	sub.w	r3, r3, #11
1a004952:	f1b3 0220 	subs.w	r2, r3, #32
1a004956:	da0c      	bge.n	1a004972 <__adddf3+0x16e>
1a004958:	320c      	adds	r2, #12
1a00495a:	dd08      	ble.n	1a00496e <__adddf3+0x16a>
1a00495c:	f102 0c14 	add.w	ip, r2, #20
1a004960:	f1c2 020c 	rsb	r2, r2, #12
1a004964:	fa01 f00c 	lsl.w	r0, r1, ip
1a004968:	fa21 f102 	lsr.w	r1, r1, r2
1a00496c:	e00c      	b.n	1a004988 <__adddf3+0x184>
1a00496e:	f102 0214 	add.w	r2, r2, #20
1a004972:	bfd8      	it	le
1a004974:	f1c2 0c20 	rsble	ip, r2, #32
1a004978:	fa01 f102 	lsl.w	r1, r1, r2
1a00497c:	fa20 fc0c 	lsr.w	ip, r0, ip
1a004980:	bfdc      	itt	le
1a004982:	ea41 010c 	orrle.w	r1, r1, ip
1a004986:	4090      	lslle	r0, r2
1a004988:	1ae4      	subs	r4, r4, r3
1a00498a:	bfa2      	ittt	ge
1a00498c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a004990:	4329      	orrge	r1, r5
1a004992:	bd30      	popge	{r4, r5, pc}
1a004994:	ea6f 0404 	mvn.w	r4, r4
1a004998:	3c1f      	subs	r4, #31
1a00499a:	da1c      	bge.n	1a0049d6 <__adddf3+0x1d2>
1a00499c:	340c      	adds	r4, #12
1a00499e:	dc0e      	bgt.n	1a0049be <__adddf3+0x1ba>
1a0049a0:	f104 0414 	add.w	r4, r4, #20
1a0049a4:	f1c4 0220 	rsb	r2, r4, #32
1a0049a8:	fa20 f004 	lsr.w	r0, r0, r4
1a0049ac:	fa01 f302 	lsl.w	r3, r1, r2
1a0049b0:	ea40 0003 	orr.w	r0, r0, r3
1a0049b4:	fa21 f304 	lsr.w	r3, r1, r4
1a0049b8:	ea45 0103 	orr.w	r1, r5, r3
1a0049bc:	bd30      	pop	{r4, r5, pc}
1a0049be:	f1c4 040c 	rsb	r4, r4, #12
1a0049c2:	f1c4 0220 	rsb	r2, r4, #32
1a0049c6:	fa20 f002 	lsr.w	r0, r0, r2
1a0049ca:	fa01 f304 	lsl.w	r3, r1, r4
1a0049ce:	ea40 0003 	orr.w	r0, r0, r3
1a0049d2:	4629      	mov	r1, r5
1a0049d4:	bd30      	pop	{r4, r5, pc}
1a0049d6:	fa21 f004 	lsr.w	r0, r1, r4
1a0049da:	4629      	mov	r1, r5
1a0049dc:	bd30      	pop	{r4, r5, pc}
1a0049de:	f094 0f00 	teq	r4, #0
1a0049e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a0049e6:	bf06      	itte	eq
1a0049e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a0049ec:	3401      	addeq	r4, #1
1a0049ee:	3d01      	subne	r5, #1
1a0049f0:	e74e      	b.n	1a004890 <__adddf3+0x8c>
1a0049f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0049f6:	bf18      	it	ne
1a0049f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a0049fc:	d029      	beq.n	1a004a52 <__adddf3+0x24e>
1a0049fe:	ea94 0f05 	teq	r4, r5
1a004a02:	bf08      	it	eq
1a004a04:	ea90 0f02 	teqeq	r0, r2
1a004a08:	d005      	beq.n	1a004a16 <__adddf3+0x212>
1a004a0a:	ea54 0c00 	orrs.w	ip, r4, r0
1a004a0e:	bf04      	itt	eq
1a004a10:	4619      	moveq	r1, r3
1a004a12:	4610      	moveq	r0, r2
1a004a14:	bd30      	pop	{r4, r5, pc}
1a004a16:	ea91 0f03 	teq	r1, r3
1a004a1a:	bf1e      	ittt	ne
1a004a1c:	2100      	movne	r1, #0
1a004a1e:	2000      	movne	r0, #0
1a004a20:	bd30      	popne	{r4, r5, pc}
1a004a22:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a004a26:	d105      	bne.n	1a004a34 <__adddf3+0x230>
1a004a28:	0040      	lsls	r0, r0, #1
1a004a2a:	4149      	adcs	r1, r1
1a004a2c:	bf28      	it	cs
1a004a2e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a004a32:	bd30      	pop	{r4, r5, pc}
1a004a34:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a004a38:	bf3c      	itt	cc
1a004a3a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a004a3e:	bd30      	popcc	{r4, r5, pc}
1a004a40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a004a44:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a004a48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a004a4c:	f04f 0000 	mov.w	r0, #0
1a004a50:	bd30      	pop	{r4, r5, pc}
1a004a52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a004a56:	bf1a      	itte	ne
1a004a58:	4619      	movne	r1, r3
1a004a5a:	4610      	movne	r0, r2
1a004a5c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a004a60:	bf1c      	itt	ne
1a004a62:	460b      	movne	r3, r1
1a004a64:	4602      	movne	r2, r0
1a004a66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a004a6a:	bf06      	itte	eq
1a004a6c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a004a70:	ea91 0f03 	teqeq	r1, r3
1a004a74:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a004a78:	bd30      	pop	{r4, r5, pc}
1a004a7a:	bf00      	nop

1a004a7c <__aeabi_ui2d>:
1a004a7c:	f090 0f00 	teq	r0, #0
1a004a80:	bf04      	itt	eq
1a004a82:	2100      	moveq	r1, #0
1a004a84:	4770      	bxeq	lr
1a004a86:	b530      	push	{r4, r5, lr}
1a004a88:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004a8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004a90:	f04f 0500 	mov.w	r5, #0
1a004a94:	f04f 0100 	mov.w	r1, #0
1a004a98:	e750      	b.n	1a00493c <__adddf3+0x138>
1a004a9a:	bf00      	nop

1a004a9c <__aeabi_i2d>:
1a004a9c:	f090 0f00 	teq	r0, #0
1a004aa0:	bf04      	itt	eq
1a004aa2:	2100      	moveq	r1, #0
1a004aa4:	4770      	bxeq	lr
1a004aa6:	b530      	push	{r4, r5, lr}
1a004aa8:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004aac:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004ab0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a004ab4:	bf48      	it	mi
1a004ab6:	4240      	negmi	r0, r0
1a004ab8:	f04f 0100 	mov.w	r1, #0
1a004abc:	e73e      	b.n	1a00493c <__adddf3+0x138>
1a004abe:	bf00      	nop

1a004ac0 <__aeabi_f2d>:
1a004ac0:	0042      	lsls	r2, r0, #1
1a004ac2:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a004ac6:	ea4f 0131 	mov.w	r1, r1, rrx
1a004aca:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a004ace:	bf1f      	itttt	ne
1a004ad0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a004ad4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a004ad8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a004adc:	4770      	bxne	lr
1a004ade:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a004ae2:	bf08      	it	eq
1a004ae4:	4770      	bxeq	lr
1a004ae6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a004aea:	bf04      	itt	eq
1a004aec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a004af0:	4770      	bxeq	lr
1a004af2:	b530      	push	{r4, r5, lr}
1a004af4:	f44f 7460 	mov.w	r4, #896	; 0x380
1a004af8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a004afc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a004b00:	e71c      	b.n	1a00493c <__adddf3+0x138>
1a004b02:	bf00      	nop

1a004b04 <__aeabi_ul2d>:
1a004b04:	ea50 0201 	orrs.w	r2, r0, r1
1a004b08:	bf08      	it	eq
1a004b0a:	4770      	bxeq	lr
1a004b0c:	b530      	push	{r4, r5, lr}
1a004b0e:	f04f 0500 	mov.w	r5, #0
1a004b12:	e00a      	b.n	1a004b2a <__aeabi_l2d+0x16>

1a004b14 <__aeabi_l2d>:
1a004b14:	ea50 0201 	orrs.w	r2, r0, r1
1a004b18:	bf08      	it	eq
1a004b1a:	4770      	bxeq	lr
1a004b1c:	b530      	push	{r4, r5, lr}
1a004b1e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a004b22:	d502      	bpl.n	1a004b2a <__aeabi_l2d+0x16>
1a004b24:	4240      	negs	r0, r0
1a004b26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004b2a:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004b2e:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004b32:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a004b36:	f43f aed8 	beq.w	1a0048ea <__adddf3+0xe6>
1a004b3a:	f04f 0203 	mov.w	r2, #3
1a004b3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a004b42:	bf18      	it	ne
1a004b44:	3203      	addne	r2, #3
1a004b46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a004b4a:	bf18      	it	ne
1a004b4c:	3203      	addne	r2, #3
1a004b4e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a004b52:	f1c2 0320 	rsb	r3, r2, #32
1a004b56:	fa00 fc03 	lsl.w	ip, r0, r3
1a004b5a:	fa20 f002 	lsr.w	r0, r0, r2
1a004b5e:	fa01 fe03 	lsl.w	lr, r1, r3
1a004b62:	ea40 000e 	orr.w	r0, r0, lr
1a004b66:	fa21 f102 	lsr.w	r1, r1, r2
1a004b6a:	4414      	add	r4, r2
1a004b6c:	e6bd      	b.n	1a0048ea <__adddf3+0xe6>
1a004b6e:	bf00      	nop

1a004b70 <__aeabi_dmul>:
1a004b70:	b570      	push	{r4, r5, r6, lr}
1a004b72:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a004b76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a004b7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a004b7e:	bf1d      	ittte	ne
1a004b80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a004b84:	ea94 0f0c 	teqne	r4, ip
1a004b88:	ea95 0f0c 	teqne	r5, ip
1a004b8c:	f000 f8de 	bleq	1a004d4c <__aeabi_dmul+0x1dc>
1a004b90:	442c      	add	r4, r5
1a004b92:	ea81 0603 	eor.w	r6, r1, r3
1a004b96:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a004b9a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a004b9e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a004ba2:	bf18      	it	ne
1a004ba4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a004ba8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004bac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a004bb0:	d038      	beq.n	1a004c24 <__aeabi_dmul+0xb4>
1a004bb2:	fba0 ce02 	umull	ip, lr, r0, r2
1a004bb6:	f04f 0500 	mov.w	r5, #0
1a004bba:	fbe1 e502 	umlal	lr, r5, r1, r2
1a004bbe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a004bc2:	fbe0 e503 	umlal	lr, r5, r0, r3
1a004bc6:	f04f 0600 	mov.w	r6, #0
1a004bca:	fbe1 5603 	umlal	r5, r6, r1, r3
1a004bce:	f09c 0f00 	teq	ip, #0
1a004bd2:	bf18      	it	ne
1a004bd4:	f04e 0e01 	orrne.w	lr, lr, #1
1a004bd8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a004bdc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a004be0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a004be4:	d204      	bcs.n	1a004bf0 <__aeabi_dmul+0x80>
1a004be6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a004bea:	416d      	adcs	r5, r5
1a004bec:	eb46 0606 	adc.w	r6, r6, r6
1a004bf0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a004bf4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a004bf8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a004bfc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a004c00:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a004c04:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a004c08:	bf88      	it	hi
1a004c0a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a004c0e:	d81e      	bhi.n	1a004c4e <__aeabi_dmul+0xde>
1a004c10:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a004c14:	bf08      	it	eq
1a004c16:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a004c1a:	f150 0000 	adcs.w	r0, r0, #0
1a004c1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a004c22:	bd70      	pop	{r4, r5, r6, pc}
1a004c24:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a004c28:	ea46 0101 	orr.w	r1, r6, r1
1a004c2c:	ea40 0002 	orr.w	r0, r0, r2
1a004c30:	ea81 0103 	eor.w	r1, r1, r3
1a004c34:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a004c38:	bfc2      	ittt	gt
1a004c3a:	ebd4 050c 	rsbsgt	r5, r4, ip
1a004c3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a004c42:	bd70      	popgt	{r4, r5, r6, pc}
1a004c44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004c48:	f04f 0e00 	mov.w	lr, #0
1a004c4c:	3c01      	subs	r4, #1
1a004c4e:	f300 80ab 	bgt.w	1a004da8 <__aeabi_dmul+0x238>
1a004c52:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a004c56:	bfde      	ittt	le
1a004c58:	2000      	movle	r0, #0
1a004c5a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a004c5e:	bd70      	pople	{r4, r5, r6, pc}
1a004c60:	f1c4 0400 	rsb	r4, r4, #0
1a004c64:	3c20      	subs	r4, #32
1a004c66:	da35      	bge.n	1a004cd4 <__aeabi_dmul+0x164>
1a004c68:	340c      	adds	r4, #12
1a004c6a:	dc1b      	bgt.n	1a004ca4 <__aeabi_dmul+0x134>
1a004c6c:	f104 0414 	add.w	r4, r4, #20
1a004c70:	f1c4 0520 	rsb	r5, r4, #32
1a004c74:	fa00 f305 	lsl.w	r3, r0, r5
1a004c78:	fa20 f004 	lsr.w	r0, r0, r4
1a004c7c:	fa01 f205 	lsl.w	r2, r1, r5
1a004c80:	ea40 0002 	orr.w	r0, r0, r2
1a004c84:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a004c88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a004c8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a004c90:	fa21 f604 	lsr.w	r6, r1, r4
1a004c94:	eb42 0106 	adc.w	r1, r2, r6
1a004c98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a004c9c:	bf08      	it	eq
1a004c9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a004ca2:	bd70      	pop	{r4, r5, r6, pc}
1a004ca4:	f1c4 040c 	rsb	r4, r4, #12
1a004ca8:	f1c4 0520 	rsb	r5, r4, #32
1a004cac:	fa00 f304 	lsl.w	r3, r0, r4
1a004cb0:	fa20 f005 	lsr.w	r0, r0, r5
1a004cb4:	fa01 f204 	lsl.w	r2, r1, r4
1a004cb8:	ea40 0002 	orr.w	r0, r0, r2
1a004cbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004cc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a004cc4:	f141 0100 	adc.w	r1, r1, #0
1a004cc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a004ccc:	bf08      	it	eq
1a004cce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a004cd2:	bd70      	pop	{r4, r5, r6, pc}
1a004cd4:	f1c4 0520 	rsb	r5, r4, #32
1a004cd8:	fa00 f205 	lsl.w	r2, r0, r5
1a004cdc:	ea4e 0e02 	orr.w	lr, lr, r2
1a004ce0:	fa20 f304 	lsr.w	r3, r0, r4
1a004ce4:	fa01 f205 	lsl.w	r2, r1, r5
1a004ce8:	ea43 0302 	orr.w	r3, r3, r2
1a004cec:	fa21 f004 	lsr.w	r0, r1, r4
1a004cf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004cf4:	fa21 f204 	lsr.w	r2, r1, r4
1a004cf8:	ea20 0002 	bic.w	r0, r0, r2
1a004cfc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a004d00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a004d04:	bf08      	it	eq
1a004d06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a004d0a:	bd70      	pop	{r4, r5, r6, pc}
1a004d0c:	f094 0f00 	teq	r4, #0
1a004d10:	d10f      	bne.n	1a004d32 <__aeabi_dmul+0x1c2>
1a004d12:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a004d16:	0040      	lsls	r0, r0, #1
1a004d18:	eb41 0101 	adc.w	r1, r1, r1
1a004d1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004d20:	bf08      	it	eq
1a004d22:	3c01      	subeq	r4, #1
1a004d24:	d0f7      	beq.n	1a004d16 <__aeabi_dmul+0x1a6>
1a004d26:	ea41 0106 	orr.w	r1, r1, r6
1a004d2a:	f095 0f00 	teq	r5, #0
1a004d2e:	bf18      	it	ne
1a004d30:	4770      	bxne	lr
1a004d32:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a004d36:	0052      	lsls	r2, r2, #1
1a004d38:	eb43 0303 	adc.w	r3, r3, r3
1a004d3c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a004d40:	bf08      	it	eq
1a004d42:	3d01      	subeq	r5, #1
1a004d44:	d0f7      	beq.n	1a004d36 <__aeabi_dmul+0x1c6>
1a004d46:	ea43 0306 	orr.w	r3, r3, r6
1a004d4a:	4770      	bx	lr
1a004d4c:	ea94 0f0c 	teq	r4, ip
1a004d50:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a004d54:	bf18      	it	ne
1a004d56:	ea95 0f0c 	teqne	r5, ip
1a004d5a:	d00c      	beq.n	1a004d76 <__aeabi_dmul+0x206>
1a004d5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a004d60:	bf18      	it	ne
1a004d62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a004d66:	d1d1      	bne.n	1a004d0c <__aeabi_dmul+0x19c>
1a004d68:	ea81 0103 	eor.w	r1, r1, r3
1a004d6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004d70:	f04f 0000 	mov.w	r0, #0
1a004d74:	bd70      	pop	{r4, r5, r6, pc}
1a004d76:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a004d7a:	bf06      	itte	eq
1a004d7c:	4610      	moveq	r0, r2
1a004d7e:	4619      	moveq	r1, r3
1a004d80:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a004d84:	d019      	beq.n	1a004dba <__aeabi_dmul+0x24a>
1a004d86:	ea94 0f0c 	teq	r4, ip
1a004d8a:	d102      	bne.n	1a004d92 <__aeabi_dmul+0x222>
1a004d8c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a004d90:	d113      	bne.n	1a004dba <__aeabi_dmul+0x24a>
1a004d92:	ea95 0f0c 	teq	r5, ip
1a004d96:	d105      	bne.n	1a004da4 <__aeabi_dmul+0x234>
1a004d98:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a004d9c:	bf1c      	itt	ne
1a004d9e:	4610      	movne	r0, r2
1a004da0:	4619      	movne	r1, r3
1a004da2:	d10a      	bne.n	1a004dba <__aeabi_dmul+0x24a>
1a004da4:	ea81 0103 	eor.w	r1, r1, r3
1a004da8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004dac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a004db0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a004db4:	f04f 0000 	mov.w	r0, #0
1a004db8:	bd70      	pop	{r4, r5, r6, pc}
1a004dba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a004dbe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a004dc2:	bd70      	pop	{r4, r5, r6, pc}

1a004dc4 <__aeabi_ddiv>:
1a004dc4:	b570      	push	{r4, r5, r6, lr}
1a004dc6:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a004dca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a004dce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a004dd2:	bf1d      	ittte	ne
1a004dd4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a004dd8:	ea94 0f0c 	teqne	r4, ip
1a004ddc:	ea95 0f0c 	teqne	r5, ip
1a004de0:	f000 f8a7 	bleq	1a004f32 <__aeabi_ddiv+0x16e>
1a004de4:	eba4 0405 	sub.w	r4, r4, r5
1a004de8:	ea81 0e03 	eor.w	lr, r1, r3
1a004dec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a004df0:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a004df4:	f000 8088 	beq.w	1a004f08 <__aeabi_ddiv+0x144>
1a004df8:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a004dfc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a004e00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a004e04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a004e08:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a004e0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a004e10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a004e14:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a004e18:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a004e1c:	429d      	cmp	r5, r3
1a004e1e:	bf08      	it	eq
1a004e20:	4296      	cmpeq	r6, r2
1a004e22:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a004e26:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a004e2a:	d202      	bcs.n	1a004e32 <__aeabi_ddiv+0x6e>
1a004e2c:	085b      	lsrs	r3, r3, #1
1a004e2e:	ea4f 0232 	mov.w	r2, r2, rrx
1a004e32:	1ab6      	subs	r6, r6, r2
1a004e34:	eb65 0503 	sbc.w	r5, r5, r3
1a004e38:	085b      	lsrs	r3, r3, #1
1a004e3a:	ea4f 0232 	mov.w	r2, r2, rrx
1a004e3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a004e42:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a004e46:	ebb6 0e02 	subs.w	lr, r6, r2
1a004e4a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a004e4e:	bf22      	ittt	cs
1a004e50:	1ab6      	subcs	r6, r6, r2
1a004e52:	4675      	movcs	r5, lr
1a004e54:	ea40 000c 	orrcs.w	r0, r0, ip
1a004e58:	085b      	lsrs	r3, r3, #1
1a004e5a:	ea4f 0232 	mov.w	r2, r2, rrx
1a004e5e:	ebb6 0e02 	subs.w	lr, r6, r2
1a004e62:	eb75 0e03 	sbcs.w	lr, r5, r3
1a004e66:	bf22      	ittt	cs
1a004e68:	1ab6      	subcs	r6, r6, r2
1a004e6a:	4675      	movcs	r5, lr
1a004e6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a004e70:	085b      	lsrs	r3, r3, #1
1a004e72:	ea4f 0232 	mov.w	r2, r2, rrx
1a004e76:	ebb6 0e02 	subs.w	lr, r6, r2
1a004e7a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a004e7e:	bf22      	ittt	cs
1a004e80:	1ab6      	subcs	r6, r6, r2
1a004e82:	4675      	movcs	r5, lr
1a004e84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a004e88:	085b      	lsrs	r3, r3, #1
1a004e8a:	ea4f 0232 	mov.w	r2, r2, rrx
1a004e8e:	ebb6 0e02 	subs.w	lr, r6, r2
1a004e92:	eb75 0e03 	sbcs.w	lr, r5, r3
1a004e96:	bf22      	ittt	cs
1a004e98:	1ab6      	subcs	r6, r6, r2
1a004e9a:	4675      	movcs	r5, lr
1a004e9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a004ea0:	ea55 0e06 	orrs.w	lr, r5, r6
1a004ea4:	d018      	beq.n	1a004ed8 <__aeabi_ddiv+0x114>
1a004ea6:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a004eaa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a004eae:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a004eb2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a004eb6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a004eba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a004ebe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a004ec2:	d1c0      	bne.n	1a004e46 <__aeabi_ddiv+0x82>
1a004ec4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004ec8:	d10b      	bne.n	1a004ee2 <__aeabi_ddiv+0x11e>
1a004eca:	ea41 0100 	orr.w	r1, r1, r0
1a004ece:	f04f 0000 	mov.w	r0, #0
1a004ed2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a004ed6:	e7b6      	b.n	1a004e46 <__aeabi_ddiv+0x82>
1a004ed8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004edc:	bf04      	itt	eq
1a004ede:	4301      	orreq	r1, r0
1a004ee0:	2000      	moveq	r0, #0
1a004ee2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a004ee6:	bf88      	it	hi
1a004ee8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a004eec:	f63f aeaf 	bhi.w	1a004c4e <__aeabi_dmul+0xde>
1a004ef0:	ebb5 0c03 	subs.w	ip, r5, r3
1a004ef4:	bf04      	itt	eq
1a004ef6:	ebb6 0c02 	subseq.w	ip, r6, r2
1a004efa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a004efe:	f150 0000 	adcs.w	r0, r0, #0
1a004f02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a004f06:	bd70      	pop	{r4, r5, r6, pc}
1a004f08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a004f0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a004f10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a004f14:	bfc2      	ittt	gt
1a004f16:	ebd4 050c 	rsbsgt	r5, r4, ip
1a004f1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a004f1e:	bd70      	popgt	{r4, r5, r6, pc}
1a004f20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004f24:	f04f 0e00 	mov.w	lr, #0
1a004f28:	3c01      	subs	r4, #1
1a004f2a:	e690      	b.n	1a004c4e <__aeabi_dmul+0xde>
1a004f2c:	ea45 0e06 	orr.w	lr, r5, r6
1a004f30:	e68d      	b.n	1a004c4e <__aeabi_dmul+0xde>
1a004f32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a004f36:	ea94 0f0c 	teq	r4, ip
1a004f3a:	bf08      	it	eq
1a004f3c:	ea95 0f0c 	teqeq	r5, ip
1a004f40:	f43f af3b 	beq.w	1a004dba <__aeabi_dmul+0x24a>
1a004f44:	ea94 0f0c 	teq	r4, ip
1a004f48:	d10a      	bne.n	1a004f60 <__aeabi_ddiv+0x19c>
1a004f4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a004f4e:	f47f af34 	bne.w	1a004dba <__aeabi_dmul+0x24a>
1a004f52:	ea95 0f0c 	teq	r5, ip
1a004f56:	f47f af25 	bne.w	1a004da4 <__aeabi_dmul+0x234>
1a004f5a:	4610      	mov	r0, r2
1a004f5c:	4619      	mov	r1, r3
1a004f5e:	e72c      	b.n	1a004dba <__aeabi_dmul+0x24a>
1a004f60:	ea95 0f0c 	teq	r5, ip
1a004f64:	d106      	bne.n	1a004f74 <__aeabi_ddiv+0x1b0>
1a004f66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a004f6a:	f43f aefd 	beq.w	1a004d68 <__aeabi_dmul+0x1f8>
1a004f6e:	4610      	mov	r0, r2
1a004f70:	4619      	mov	r1, r3
1a004f72:	e722      	b.n	1a004dba <__aeabi_dmul+0x24a>
1a004f74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a004f78:	bf18      	it	ne
1a004f7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a004f7e:	f47f aec5 	bne.w	1a004d0c <__aeabi_dmul+0x19c>
1a004f82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a004f86:	f47f af0d 	bne.w	1a004da4 <__aeabi_dmul+0x234>
1a004f8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a004f8e:	f47f aeeb 	bne.w	1a004d68 <__aeabi_dmul+0x1f8>
1a004f92:	e712      	b.n	1a004dba <__aeabi_dmul+0x24a>

1a004f94 <__gedf2>:
1a004f94:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a004f98:	e006      	b.n	1a004fa8 <__cmpdf2+0x4>
1a004f9a:	bf00      	nop

1a004f9c <__ledf2>:
1a004f9c:	f04f 0c01 	mov.w	ip, #1
1a004fa0:	e002      	b.n	1a004fa8 <__cmpdf2+0x4>
1a004fa2:	bf00      	nop

1a004fa4 <__cmpdf2>:
1a004fa4:	f04f 0c01 	mov.w	ip, #1
1a004fa8:	f84d cd04 	str.w	ip, [sp, #-4]!
1a004fac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a004fb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a004fb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a004fb8:	bf18      	it	ne
1a004fba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a004fbe:	d01b      	beq.n	1a004ff8 <__cmpdf2+0x54>
1a004fc0:	b001      	add	sp, #4
1a004fc2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a004fc6:	bf0c      	ite	eq
1a004fc8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a004fcc:	ea91 0f03 	teqne	r1, r3
1a004fd0:	bf02      	ittt	eq
1a004fd2:	ea90 0f02 	teqeq	r0, r2
1a004fd6:	2000      	moveq	r0, #0
1a004fd8:	4770      	bxeq	lr
1a004fda:	f110 0f00 	cmn.w	r0, #0
1a004fde:	ea91 0f03 	teq	r1, r3
1a004fe2:	bf58      	it	pl
1a004fe4:	4299      	cmppl	r1, r3
1a004fe6:	bf08      	it	eq
1a004fe8:	4290      	cmpeq	r0, r2
1a004fea:	bf2c      	ite	cs
1a004fec:	17d8      	asrcs	r0, r3, #31
1a004fee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a004ff2:	f040 0001 	orr.w	r0, r0, #1
1a004ff6:	4770      	bx	lr
1a004ff8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a004ffc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a005000:	d102      	bne.n	1a005008 <__cmpdf2+0x64>
1a005002:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a005006:	d107      	bne.n	1a005018 <__cmpdf2+0x74>
1a005008:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a00500c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a005010:	d1d6      	bne.n	1a004fc0 <__cmpdf2+0x1c>
1a005012:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a005016:	d0d3      	beq.n	1a004fc0 <__cmpdf2+0x1c>
1a005018:	f85d 0b04 	ldr.w	r0, [sp], #4
1a00501c:	4770      	bx	lr
1a00501e:	bf00      	nop

1a005020 <__aeabi_cdrcmple>:
1a005020:	4684      	mov	ip, r0
1a005022:	4610      	mov	r0, r2
1a005024:	4662      	mov	r2, ip
1a005026:	468c      	mov	ip, r1
1a005028:	4619      	mov	r1, r3
1a00502a:	4663      	mov	r3, ip
1a00502c:	e000      	b.n	1a005030 <__aeabi_cdcmpeq>
1a00502e:	bf00      	nop

1a005030 <__aeabi_cdcmpeq>:
1a005030:	b501      	push	{r0, lr}
1a005032:	f7ff ffb7 	bl	1a004fa4 <__cmpdf2>
1a005036:	2800      	cmp	r0, #0
1a005038:	bf48      	it	mi
1a00503a:	f110 0f00 	cmnmi.w	r0, #0
1a00503e:	bd01      	pop	{r0, pc}

1a005040 <__aeabi_dcmpeq>:
1a005040:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005044:	f7ff fff4 	bl	1a005030 <__aeabi_cdcmpeq>
1a005048:	bf0c      	ite	eq
1a00504a:	2001      	moveq	r0, #1
1a00504c:	2000      	movne	r0, #0
1a00504e:	f85d fb08 	ldr.w	pc, [sp], #8
1a005052:	bf00      	nop

1a005054 <__aeabi_dcmplt>:
1a005054:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005058:	f7ff ffea 	bl	1a005030 <__aeabi_cdcmpeq>
1a00505c:	bf34      	ite	cc
1a00505e:	2001      	movcc	r0, #1
1a005060:	2000      	movcs	r0, #0
1a005062:	f85d fb08 	ldr.w	pc, [sp], #8
1a005066:	bf00      	nop

1a005068 <__aeabi_dcmple>:
1a005068:	f84d ed08 	str.w	lr, [sp, #-8]!
1a00506c:	f7ff ffe0 	bl	1a005030 <__aeabi_cdcmpeq>
1a005070:	bf94      	ite	ls
1a005072:	2001      	movls	r0, #1
1a005074:	2000      	movhi	r0, #0
1a005076:	f85d fb08 	ldr.w	pc, [sp], #8
1a00507a:	bf00      	nop

1a00507c <__aeabi_dcmpge>:
1a00507c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005080:	f7ff ffce 	bl	1a005020 <__aeabi_cdrcmple>
1a005084:	bf94      	ite	ls
1a005086:	2001      	movls	r0, #1
1a005088:	2000      	movhi	r0, #0
1a00508a:	f85d fb08 	ldr.w	pc, [sp], #8
1a00508e:	bf00      	nop

1a005090 <__aeabi_dcmpgt>:
1a005090:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005094:	f7ff ffc4 	bl	1a005020 <__aeabi_cdrcmple>
1a005098:	bf34      	ite	cc
1a00509a:	2001      	movcc	r0, #1
1a00509c:	2000      	movcs	r0, #0
1a00509e:	f85d fb08 	ldr.w	pc, [sp], #8
1a0050a2:	bf00      	nop

1a0050a4 <__aeabi_d2f>:
1a0050a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a0050a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a0050ac:	bf24      	itt	cs
1a0050ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a0050b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a0050b6:	d90d      	bls.n	1a0050d4 <__aeabi_d2f+0x30>
1a0050b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a0050bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a0050c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a0050c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a0050c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a0050cc:	bf08      	it	eq
1a0050ce:	f020 0001 	biceq.w	r0, r0, #1
1a0050d2:	4770      	bx	lr
1a0050d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a0050d8:	d121      	bne.n	1a00511e <__aeabi_d2f+0x7a>
1a0050da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a0050de:	bfbc      	itt	lt
1a0050e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a0050e4:	4770      	bxlt	lr
1a0050e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0050ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a0050ee:	f1c2 0218 	rsb	r2, r2, #24
1a0050f2:	f1c2 0c20 	rsb	ip, r2, #32
1a0050f6:	fa10 f30c 	lsls.w	r3, r0, ip
1a0050fa:	fa20 f002 	lsr.w	r0, r0, r2
1a0050fe:	bf18      	it	ne
1a005100:	f040 0001 	orrne.w	r0, r0, #1
1a005104:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a005108:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a00510c:	fa03 fc0c 	lsl.w	ip, r3, ip
1a005110:	ea40 000c 	orr.w	r0, r0, ip
1a005114:	fa23 f302 	lsr.w	r3, r3, r2
1a005118:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a00511c:	e7cc      	b.n	1a0050b8 <__aeabi_d2f+0x14>
1a00511e:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a005122:	d107      	bne.n	1a005134 <__aeabi_d2f+0x90>
1a005124:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a005128:	bf1e      	ittt	ne
1a00512a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a00512e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a005132:	4770      	bxne	lr
1a005134:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a005138:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a00513c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a005140:	4770      	bx	lr
1a005142:	bf00      	nop

1a005144 <__aeabi_uldivmod>:
1a005144:	b953      	cbnz	r3, 1a00515c <__aeabi_uldivmod+0x18>
1a005146:	b94a      	cbnz	r2, 1a00515c <__aeabi_uldivmod+0x18>
1a005148:	2900      	cmp	r1, #0
1a00514a:	bf08      	it	eq
1a00514c:	2800      	cmpeq	r0, #0
1a00514e:	bf1c      	itt	ne
1a005150:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a005154:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a005158:	f000 b972 	b.w	1a005440 <__aeabi_idiv0>
1a00515c:	f1ad 0c08 	sub.w	ip, sp, #8
1a005160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a005164:	f000 f806 	bl	1a005174 <__udivmoddi4>
1a005168:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00516c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a005170:	b004      	add	sp, #16
1a005172:	4770      	bx	lr

1a005174 <__udivmoddi4>:
1a005174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a005178:	9e08      	ldr	r6, [sp, #32]
1a00517a:	4604      	mov	r4, r0
1a00517c:	4688      	mov	r8, r1
1a00517e:	2b00      	cmp	r3, #0
1a005180:	d14b      	bne.n	1a00521a <__udivmoddi4+0xa6>
1a005182:	428a      	cmp	r2, r1
1a005184:	4615      	mov	r5, r2
1a005186:	d967      	bls.n	1a005258 <__udivmoddi4+0xe4>
1a005188:	fab2 f282 	clz	r2, r2
1a00518c:	b14a      	cbz	r2, 1a0051a2 <__udivmoddi4+0x2e>
1a00518e:	f1c2 0720 	rsb	r7, r2, #32
1a005192:	fa01 f302 	lsl.w	r3, r1, r2
1a005196:	fa20 f707 	lsr.w	r7, r0, r7
1a00519a:	4095      	lsls	r5, r2
1a00519c:	ea47 0803 	orr.w	r8, r7, r3
1a0051a0:	4094      	lsls	r4, r2
1a0051a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0051a6:	0c23      	lsrs	r3, r4, #16
1a0051a8:	fbb8 f7fe 	udiv	r7, r8, lr
1a0051ac:	fa1f fc85 	uxth.w	ip, r5
1a0051b0:	fb0e 8817 	mls	r8, lr, r7, r8
1a0051b4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0051b8:	fb07 f10c 	mul.w	r1, r7, ip
1a0051bc:	4299      	cmp	r1, r3
1a0051be:	d909      	bls.n	1a0051d4 <__udivmoddi4+0x60>
1a0051c0:	18eb      	adds	r3, r5, r3
1a0051c2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0051c6:	f080 811b 	bcs.w	1a005400 <__udivmoddi4+0x28c>
1a0051ca:	4299      	cmp	r1, r3
1a0051cc:	f240 8118 	bls.w	1a005400 <__udivmoddi4+0x28c>
1a0051d0:	3f02      	subs	r7, #2
1a0051d2:	442b      	add	r3, r5
1a0051d4:	1a5b      	subs	r3, r3, r1
1a0051d6:	b2a4      	uxth	r4, r4
1a0051d8:	fbb3 f0fe 	udiv	r0, r3, lr
1a0051dc:	fb0e 3310 	mls	r3, lr, r0, r3
1a0051e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0051e4:	fb00 fc0c 	mul.w	ip, r0, ip
1a0051e8:	45a4      	cmp	ip, r4
1a0051ea:	d909      	bls.n	1a005200 <__udivmoddi4+0x8c>
1a0051ec:	192c      	adds	r4, r5, r4
1a0051ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0051f2:	f080 8107 	bcs.w	1a005404 <__udivmoddi4+0x290>
1a0051f6:	45a4      	cmp	ip, r4
1a0051f8:	f240 8104 	bls.w	1a005404 <__udivmoddi4+0x290>
1a0051fc:	3802      	subs	r0, #2
1a0051fe:	442c      	add	r4, r5
1a005200:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a005204:	eba4 040c 	sub.w	r4, r4, ip
1a005208:	2700      	movs	r7, #0
1a00520a:	b11e      	cbz	r6, 1a005214 <__udivmoddi4+0xa0>
1a00520c:	40d4      	lsrs	r4, r2
1a00520e:	2300      	movs	r3, #0
1a005210:	e9c6 4300 	strd	r4, r3, [r6]
1a005214:	4639      	mov	r1, r7
1a005216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00521a:	428b      	cmp	r3, r1
1a00521c:	d909      	bls.n	1a005232 <__udivmoddi4+0xbe>
1a00521e:	2e00      	cmp	r6, #0
1a005220:	f000 80eb 	beq.w	1a0053fa <__udivmoddi4+0x286>
1a005224:	2700      	movs	r7, #0
1a005226:	e9c6 0100 	strd	r0, r1, [r6]
1a00522a:	4638      	mov	r0, r7
1a00522c:	4639      	mov	r1, r7
1a00522e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a005232:	fab3 f783 	clz	r7, r3
1a005236:	2f00      	cmp	r7, #0
1a005238:	d147      	bne.n	1a0052ca <__udivmoddi4+0x156>
1a00523a:	428b      	cmp	r3, r1
1a00523c:	d302      	bcc.n	1a005244 <__udivmoddi4+0xd0>
1a00523e:	4282      	cmp	r2, r0
1a005240:	f200 80fa 	bhi.w	1a005438 <__udivmoddi4+0x2c4>
1a005244:	1a84      	subs	r4, r0, r2
1a005246:	eb61 0303 	sbc.w	r3, r1, r3
1a00524a:	2001      	movs	r0, #1
1a00524c:	4698      	mov	r8, r3
1a00524e:	2e00      	cmp	r6, #0
1a005250:	d0e0      	beq.n	1a005214 <__udivmoddi4+0xa0>
1a005252:	e9c6 4800 	strd	r4, r8, [r6]
1a005256:	e7dd      	b.n	1a005214 <__udivmoddi4+0xa0>
1a005258:	b902      	cbnz	r2, 1a00525c <__udivmoddi4+0xe8>
1a00525a:	deff      	udf	#255	; 0xff
1a00525c:	fab2 f282 	clz	r2, r2
1a005260:	2a00      	cmp	r2, #0
1a005262:	f040 808f 	bne.w	1a005384 <__udivmoddi4+0x210>
1a005266:	1b49      	subs	r1, r1, r5
1a005268:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00526c:	fa1f f885 	uxth.w	r8, r5
1a005270:	2701      	movs	r7, #1
1a005272:	fbb1 fcfe 	udiv	ip, r1, lr
1a005276:	0c23      	lsrs	r3, r4, #16
1a005278:	fb0e 111c 	mls	r1, lr, ip, r1
1a00527c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a005280:	fb08 f10c 	mul.w	r1, r8, ip
1a005284:	4299      	cmp	r1, r3
1a005286:	d907      	bls.n	1a005298 <__udivmoddi4+0x124>
1a005288:	18eb      	adds	r3, r5, r3
1a00528a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a00528e:	d202      	bcs.n	1a005296 <__udivmoddi4+0x122>
1a005290:	4299      	cmp	r1, r3
1a005292:	f200 80cd 	bhi.w	1a005430 <__udivmoddi4+0x2bc>
1a005296:	4684      	mov	ip, r0
1a005298:	1a59      	subs	r1, r3, r1
1a00529a:	b2a3      	uxth	r3, r4
1a00529c:	fbb1 f0fe 	udiv	r0, r1, lr
1a0052a0:	fb0e 1410 	mls	r4, lr, r0, r1
1a0052a4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0052a8:	fb08 f800 	mul.w	r8, r8, r0
1a0052ac:	45a0      	cmp	r8, r4
1a0052ae:	d907      	bls.n	1a0052c0 <__udivmoddi4+0x14c>
1a0052b0:	192c      	adds	r4, r5, r4
1a0052b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0052b6:	d202      	bcs.n	1a0052be <__udivmoddi4+0x14a>
1a0052b8:	45a0      	cmp	r8, r4
1a0052ba:	f200 80b6 	bhi.w	1a00542a <__udivmoddi4+0x2b6>
1a0052be:	4618      	mov	r0, r3
1a0052c0:	eba4 0408 	sub.w	r4, r4, r8
1a0052c4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0052c8:	e79f      	b.n	1a00520a <__udivmoddi4+0x96>
1a0052ca:	f1c7 0c20 	rsb	ip, r7, #32
1a0052ce:	40bb      	lsls	r3, r7
1a0052d0:	fa22 fe0c 	lsr.w	lr, r2, ip
1a0052d4:	ea4e 0e03 	orr.w	lr, lr, r3
1a0052d8:	fa01 f407 	lsl.w	r4, r1, r7
1a0052dc:	fa20 f50c 	lsr.w	r5, r0, ip
1a0052e0:	fa21 f30c 	lsr.w	r3, r1, ip
1a0052e4:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a0052e8:	4325      	orrs	r5, r4
1a0052ea:	fbb3 f9f8 	udiv	r9, r3, r8
1a0052ee:	0c2c      	lsrs	r4, r5, #16
1a0052f0:	fb08 3319 	mls	r3, r8, r9, r3
1a0052f4:	fa1f fa8e 	uxth.w	sl, lr
1a0052f8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a0052fc:	fb09 f40a 	mul.w	r4, r9, sl
1a005300:	429c      	cmp	r4, r3
1a005302:	fa02 f207 	lsl.w	r2, r2, r7
1a005306:	fa00 f107 	lsl.w	r1, r0, r7
1a00530a:	d90b      	bls.n	1a005324 <__udivmoddi4+0x1b0>
1a00530c:	eb1e 0303 	adds.w	r3, lr, r3
1a005310:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a005314:	f080 8087 	bcs.w	1a005426 <__udivmoddi4+0x2b2>
1a005318:	429c      	cmp	r4, r3
1a00531a:	f240 8084 	bls.w	1a005426 <__udivmoddi4+0x2b2>
1a00531e:	f1a9 0902 	sub.w	r9, r9, #2
1a005322:	4473      	add	r3, lr
1a005324:	1b1b      	subs	r3, r3, r4
1a005326:	b2ad      	uxth	r5, r5
1a005328:	fbb3 f0f8 	udiv	r0, r3, r8
1a00532c:	fb08 3310 	mls	r3, r8, r0, r3
1a005330:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a005334:	fb00 fa0a 	mul.w	sl, r0, sl
1a005338:	45a2      	cmp	sl, r4
1a00533a:	d908      	bls.n	1a00534e <__udivmoddi4+0x1da>
1a00533c:	eb1e 0404 	adds.w	r4, lr, r4
1a005340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005344:	d26b      	bcs.n	1a00541e <__udivmoddi4+0x2aa>
1a005346:	45a2      	cmp	sl, r4
1a005348:	d969      	bls.n	1a00541e <__udivmoddi4+0x2aa>
1a00534a:	3802      	subs	r0, #2
1a00534c:	4474      	add	r4, lr
1a00534e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a005352:	fba0 8902 	umull	r8, r9, r0, r2
1a005356:	eba4 040a 	sub.w	r4, r4, sl
1a00535a:	454c      	cmp	r4, r9
1a00535c:	46c2      	mov	sl, r8
1a00535e:	464b      	mov	r3, r9
1a005360:	d354      	bcc.n	1a00540c <__udivmoddi4+0x298>
1a005362:	d051      	beq.n	1a005408 <__udivmoddi4+0x294>
1a005364:	2e00      	cmp	r6, #0
1a005366:	d069      	beq.n	1a00543c <__udivmoddi4+0x2c8>
1a005368:	ebb1 050a 	subs.w	r5, r1, sl
1a00536c:	eb64 0403 	sbc.w	r4, r4, r3
1a005370:	fa04 fc0c 	lsl.w	ip, r4, ip
1a005374:	40fd      	lsrs	r5, r7
1a005376:	40fc      	lsrs	r4, r7
1a005378:	ea4c 0505 	orr.w	r5, ip, r5
1a00537c:	e9c6 5400 	strd	r5, r4, [r6]
1a005380:	2700      	movs	r7, #0
1a005382:	e747      	b.n	1a005214 <__udivmoddi4+0xa0>
1a005384:	f1c2 0320 	rsb	r3, r2, #32
1a005388:	fa20 f703 	lsr.w	r7, r0, r3
1a00538c:	4095      	lsls	r5, r2
1a00538e:	fa01 f002 	lsl.w	r0, r1, r2
1a005392:	fa21 f303 	lsr.w	r3, r1, r3
1a005396:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00539a:	4338      	orrs	r0, r7
1a00539c:	0c01      	lsrs	r1, r0, #16
1a00539e:	fbb3 f7fe 	udiv	r7, r3, lr
1a0053a2:	fa1f f885 	uxth.w	r8, r5
1a0053a6:	fb0e 3317 	mls	r3, lr, r7, r3
1a0053aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0053ae:	fb07 f308 	mul.w	r3, r7, r8
1a0053b2:	428b      	cmp	r3, r1
1a0053b4:	fa04 f402 	lsl.w	r4, r4, r2
1a0053b8:	d907      	bls.n	1a0053ca <__udivmoddi4+0x256>
1a0053ba:	1869      	adds	r1, r5, r1
1a0053bc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0053c0:	d22f      	bcs.n	1a005422 <__udivmoddi4+0x2ae>
1a0053c2:	428b      	cmp	r3, r1
1a0053c4:	d92d      	bls.n	1a005422 <__udivmoddi4+0x2ae>
1a0053c6:	3f02      	subs	r7, #2
1a0053c8:	4429      	add	r1, r5
1a0053ca:	1acb      	subs	r3, r1, r3
1a0053cc:	b281      	uxth	r1, r0
1a0053ce:	fbb3 f0fe 	udiv	r0, r3, lr
1a0053d2:	fb0e 3310 	mls	r3, lr, r0, r3
1a0053d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0053da:	fb00 f308 	mul.w	r3, r0, r8
1a0053de:	428b      	cmp	r3, r1
1a0053e0:	d907      	bls.n	1a0053f2 <__udivmoddi4+0x27e>
1a0053e2:	1869      	adds	r1, r5, r1
1a0053e4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0053e8:	d217      	bcs.n	1a00541a <__udivmoddi4+0x2a6>
1a0053ea:	428b      	cmp	r3, r1
1a0053ec:	d915      	bls.n	1a00541a <__udivmoddi4+0x2a6>
1a0053ee:	3802      	subs	r0, #2
1a0053f0:	4429      	add	r1, r5
1a0053f2:	1ac9      	subs	r1, r1, r3
1a0053f4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0053f8:	e73b      	b.n	1a005272 <__udivmoddi4+0xfe>
1a0053fa:	4637      	mov	r7, r6
1a0053fc:	4630      	mov	r0, r6
1a0053fe:	e709      	b.n	1a005214 <__udivmoddi4+0xa0>
1a005400:	4607      	mov	r7, r0
1a005402:	e6e7      	b.n	1a0051d4 <__udivmoddi4+0x60>
1a005404:	4618      	mov	r0, r3
1a005406:	e6fb      	b.n	1a005200 <__udivmoddi4+0x8c>
1a005408:	4541      	cmp	r1, r8
1a00540a:	d2ab      	bcs.n	1a005364 <__udivmoddi4+0x1f0>
1a00540c:	ebb8 0a02 	subs.w	sl, r8, r2
1a005410:	eb69 020e 	sbc.w	r2, r9, lr
1a005414:	3801      	subs	r0, #1
1a005416:	4613      	mov	r3, r2
1a005418:	e7a4      	b.n	1a005364 <__udivmoddi4+0x1f0>
1a00541a:	4660      	mov	r0, ip
1a00541c:	e7e9      	b.n	1a0053f2 <__udivmoddi4+0x27e>
1a00541e:	4618      	mov	r0, r3
1a005420:	e795      	b.n	1a00534e <__udivmoddi4+0x1da>
1a005422:	4667      	mov	r7, ip
1a005424:	e7d1      	b.n	1a0053ca <__udivmoddi4+0x256>
1a005426:	4681      	mov	r9, r0
1a005428:	e77c      	b.n	1a005324 <__udivmoddi4+0x1b0>
1a00542a:	3802      	subs	r0, #2
1a00542c:	442c      	add	r4, r5
1a00542e:	e747      	b.n	1a0052c0 <__udivmoddi4+0x14c>
1a005430:	f1ac 0c02 	sub.w	ip, ip, #2
1a005434:	442b      	add	r3, r5
1a005436:	e72f      	b.n	1a005298 <__udivmoddi4+0x124>
1a005438:	4638      	mov	r0, r7
1a00543a:	e708      	b.n	1a00524e <__udivmoddi4+0xda>
1a00543c:	4637      	mov	r7, r6
1a00543e:	e6e9      	b.n	1a005214 <__udivmoddi4+0xa0>

1a005440 <__aeabi_idiv0>:
1a005440:	4770      	bx	lr
1a005442:	bf00      	nop

1a005444 <_fclose_r>:
1a005444:	b570      	push	{r4, r5, r6, lr}
1a005446:	2900      	cmp	r1, #0
1a005448:	d048      	beq.n	1a0054dc <_fclose_r+0x98>
1a00544a:	4605      	mov	r5, r0
1a00544c:	460c      	mov	r4, r1
1a00544e:	b110      	cbz	r0, 1a005456 <_fclose_r+0x12>
1a005450:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a005452:	2b00      	cmp	r3, #0
1a005454:	d048      	beq.n	1a0054e8 <_fclose_r+0xa4>
1a005456:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a005458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00545c:	07d0      	lsls	r0, r2, #31
1a00545e:	d440      	bmi.n	1a0054e2 <_fclose_r+0x9e>
1a005460:	0599      	lsls	r1, r3, #22
1a005462:	d530      	bpl.n	1a0054c6 <_fclose_r+0x82>
1a005464:	4621      	mov	r1, r4
1a005466:	4628      	mov	r0, r5
1a005468:	f000 f854 	bl	1a005514 <__sflush_r>
1a00546c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00546e:	4606      	mov	r6, r0
1a005470:	b133      	cbz	r3, 1a005480 <_fclose_r+0x3c>
1a005472:	69e1      	ldr	r1, [r4, #28]
1a005474:	4628      	mov	r0, r5
1a005476:	4798      	blx	r3
1a005478:	2800      	cmp	r0, #0
1a00547a:	bfb8      	it	lt
1a00547c:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
1a005480:	89a3      	ldrh	r3, [r4, #12]
1a005482:	061a      	lsls	r2, r3, #24
1a005484:	d43c      	bmi.n	1a005500 <_fclose_r+0xbc>
1a005486:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a005488:	b141      	cbz	r1, 1a00549c <_fclose_r+0x58>
1a00548a:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a00548e:	4299      	cmp	r1, r3
1a005490:	d002      	beq.n	1a005498 <_fclose_r+0x54>
1a005492:	4628      	mov	r0, r5
1a005494:	f000 f9cc 	bl	1a005830 <_free_r>
1a005498:	2300      	movs	r3, #0
1a00549a:	6323      	str	r3, [r4, #48]	; 0x30
1a00549c:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a00549e:	b121      	cbz	r1, 1a0054aa <_fclose_r+0x66>
1a0054a0:	4628      	mov	r0, r5
1a0054a2:	f000 f9c5 	bl	1a005830 <_free_r>
1a0054a6:	2300      	movs	r3, #0
1a0054a8:	6463      	str	r3, [r4, #68]	; 0x44
1a0054aa:	f000 f965 	bl	1a005778 <__sfp_lock_acquire>
1a0054ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0054b0:	2200      	movs	r2, #0
1a0054b2:	07db      	lsls	r3, r3, #31
1a0054b4:	81a2      	strh	r2, [r4, #12]
1a0054b6:	d51f      	bpl.n	1a0054f8 <_fclose_r+0xb4>
1a0054b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0054ba:	f000 fb0b 	bl	1a005ad4 <__retarget_lock_close_recursive>
1a0054be:	f000 f961 	bl	1a005784 <__sfp_lock_release>
1a0054c2:	4630      	mov	r0, r6
1a0054c4:	bd70      	pop	{r4, r5, r6, pc}
1a0054c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0054c8:	f000 fb06 	bl	1a005ad8 <__retarget_lock_acquire_recursive>
1a0054cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0054d0:	2b00      	cmp	r3, #0
1a0054d2:	d1c7      	bne.n	1a005464 <_fclose_r+0x20>
1a0054d4:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a0054d6:	f016 0601 	ands.w	r6, r6, #1
1a0054da:	d016      	beq.n	1a00550a <_fclose_r+0xc6>
1a0054dc:	2600      	movs	r6, #0
1a0054de:	4630      	mov	r0, r6
1a0054e0:	bd70      	pop	{r4, r5, r6, pc}
1a0054e2:	2b00      	cmp	r3, #0
1a0054e4:	d0fa      	beq.n	1a0054dc <_fclose_r+0x98>
1a0054e6:	e7bd      	b.n	1a005464 <_fclose_r+0x20>
1a0054e8:	f000 f91a 	bl	1a005720 <__sinit>
1a0054ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a0054ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0054f2:	07d0      	lsls	r0, r2, #31
1a0054f4:	d4f5      	bmi.n	1a0054e2 <_fclose_r+0x9e>
1a0054f6:	e7b3      	b.n	1a005460 <_fclose_r+0x1c>
1a0054f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0054fa:	f000 faef 	bl	1a005adc <__retarget_lock_release_recursive>
1a0054fe:	e7db      	b.n	1a0054b8 <_fclose_r+0x74>
1a005500:	6921      	ldr	r1, [r4, #16]
1a005502:	4628      	mov	r0, r5
1a005504:	f000 f994 	bl	1a005830 <_free_r>
1a005508:	e7bd      	b.n	1a005486 <_fclose_r+0x42>
1a00550a:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00550c:	f000 fae6 	bl	1a005adc <__retarget_lock_release_recursive>
1a005510:	4630      	mov	r0, r6
1a005512:	bd70      	pop	{r4, r5, r6, pc}

1a005514 <__sflush_r>:
1a005514:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a005518:	b29a      	uxth	r2, r3
1a00551a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00551e:	460c      	mov	r4, r1
1a005520:	0711      	lsls	r1, r2, #28
1a005522:	4680      	mov	r8, r0
1a005524:	d444      	bmi.n	1a0055b0 <__sflush_r+0x9c>
1a005526:	6862      	ldr	r2, [r4, #4]
1a005528:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00552c:	2a00      	cmp	r2, #0
1a00552e:	81a3      	strh	r3, [r4, #12]
1a005530:	dd59      	ble.n	1a0055e6 <__sflush_r+0xd2>
1a005532:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a005534:	2d00      	cmp	r5, #0
1a005536:	d053      	beq.n	1a0055e0 <__sflush_r+0xcc>
1a005538:	2200      	movs	r2, #0
1a00553a:	b29b      	uxth	r3, r3
1a00553c:	f8d8 6000 	ldr.w	r6, [r8]
1a005540:	69e1      	ldr	r1, [r4, #28]
1a005542:	f8c8 2000 	str.w	r2, [r8]
1a005546:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1a00554a:	f040 8083 	bne.w	1a005654 <__sflush_r+0x140>
1a00554e:	2301      	movs	r3, #1
1a005550:	4640      	mov	r0, r8
1a005552:	47a8      	blx	r5
1a005554:	1c42      	adds	r2, r0, #1
1a005556:	d04a      	beq.n	1a0055ee <__sflush_r+0xda>
1a005558:	89a3      	ldrh	r3, [r4, #12]
1a00555a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a00555c:	69e1      	ldr	r1, [r4, #28]
1a00555e:	075b      	lsls	r3, r3, #29
1a005560:	d505      	bpl.n	1a00556e <__sflush_r+0x5a>
1a005562:	6862      	ldr	r2, [r4, #4]
1a005564:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a005566:	1a80      	subs	r0, r0, r2
1a005568:	b10b      	cbz	r3, 1a00556e <__sflush_r+0x5a>
1a00556a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00556c:	1ac0      	subs	r0, r0, r3
1a00556e:	4602      	mov	r2, r0
1a005570:	2300      	movs	r3, #0
1a005572:	4640      	mov	r0, r8
1a005574:	47a8      	blx	r5
1a005576:	1c47      	adds	r7, r0, #1
1a005578:	d045      	beq.n	1a005606 <__sflush_r+0xf2>
1a00557a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00557e:	6922      	ldr	r2, [r4, #16]
1a005580:	6022      	str	r2, [r4, #0]
1a005582:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a005586:	2200      	movs	r2, #0
1a005588:	81a3      	strh	r3, [r4, #12]
1a00558a:	04db      	lsls	r3, r3, #19
1a00558c:	6062      	str	r2, [r4, #4]
1a00558e:	d500      	bpl.n	1a005592 <__sflush_r+0x7e>
1a005590:	6520      	str	r0, [r4, #80]	; 0x50
1a005592:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a005594:	f8c8 6000 	str.w	r6, [r8]
1a005598:	b311      	cbz	r1, 1a0055e0 <__sflush_r+0xcc>
1a00559a:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a00559e:	4299      	cmp	r1, r3
1a0055a0:	d002      	beq.n	1a0055a8 <__sflush_r+0x94>
1a0055a2:	4640      	mov	r0, r8
1a0055a4:	f000 f944 	bl	1a005830 <_free_r>
1a0055a8:	2000      	movs	r0, #0
1a0055aa:	6320      	str	r0, [r4, #48]	; 0x30
1a0055ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0055b0:	6926      	ldr	r6, [r4, #16]
1a0055b2:	b1ae      	cbz	r6, 1a0055e0 <__sflush_r+0xcc>
1a0055b4:	6825      	ldr	r5, [r4, #0]
1a0055b6:	6026      	str	r6, [r4, #0]
1a0055b8:	0792      	lsls	r2, r2, #30
1a0055ba:	bf0c      	ite	eq
1a0055bc:	6963      	ldreq	r3, [r4, #20]
1a0055be:	2300      	movne	r3, #0
1a0055c0:	1bad      	subs	r5, r5, r6
1a0055c2:	60a3      	str	r3, [r4, #8]
1a0055c4:	e00a      	b.n	1a0055dc <__sflush_r+0xc8>
1a0055c6:	462b      	mov	r3, r5
1a0055c8:	4632      	mov	r2, r6
1a0055ca:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a0055cc:	69e1      	ldr	r1, [r4, #28]
1a0055ce:	4640      	mov	r0, r8
1a0055d0:	47b8      	blx	r7
1a0055d2:	2800      	cmp	r0, #0
1a0055d4:	eba5 0500 	sub.w	r5, r5, r0
1a0055d8:	4406      	add	r6, r0
1a0055da:	dd2b      	ble.n	1a005634 <__sflush_r+0x120>
1a0055dc:	2d00      	cmp	r5, #0
1a0055de:	dcf2      	bgt.n	1a0055c6 <__sflush_r+0xb2>
1a0055e0:	2000      	movs	r0, #0
1a0055e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0055e6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0055e8:	2a00      	cmp	r2, #0
1a0055ea:	dca2      	bgt.n	1a005532 <__sflush_r+0x1e>
1a0055ec:	e7f8      	b.n	1a0055e0 <__sflush_r+0xcc>
1a0055ee:	f8d8 3000 	ldr.w	r3, [r8]
1a0055f2:	2b00      	cmp	r3, #0
1a0055f4:	d0b0      	beq.n	1a005558 <__sflush_r+0x44>
1a0055f6:	2b1d      	cmp	r3, #29
1a0055f8:	d001      	beq.n	1a0055fe <__sflush_r+0xea>
1a0055fa:	2b16      	cmp	r3, #22
1a0055fc:	d12c      	bne.n	1a005658 <__sflush_r+0x144>
1a0055fe:	f8c8 6000 	str.w	r6, [r8]
1a005602:	2000      	movs	r0, #0
1a005604:	e7ed      	b.n	1a0055e2 <__sflush_r+0xce>
1a005606:	f8d8 1000 	ldr.w	r1, [r8]
1a00560a:	291d      	cmp	r1, #29
1a00560c:	d81a      	bhi.n	1a005644 <__sflush_r+0x130>
1a00560e:	4b15      	ldr	r3, [pc, #84]	; (1a005664 <__sflush_r+0x150>)
1a005610:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a005614:	40cb      	lsrs	r3, r1
1a005616:	43db      	mvns	r3, r3
1a005618:	f013 0301 	ands.w	r3, r3, #1
1a00561c:	d114      	bne.n	1a005648 <__sflush_r+0x134>
1a00561e:	6925      	ldr	r5, [r4, #16]
1a005620:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
1a005624:	e9c4 5300 	strd	r5, r3, [r4]
1a005628:	04d5      	lsls	r5, r2, #19
1a00562a:	81a2      	strh	r2, [r4, #12]
1a00562c:	d5b1      	bpl.n	1a005592 <__sflush_r+0x7e>
1a00562e:	2900      	cmp	r1, #0
1a005630:	d1af      	bne.n	1a005592 <__sflush_r+0x7e>
1a005632:	e7ad      	b.n	1a005590 <__sflush_r+0x7c>
1a005634:	89a3      	ldrh	r3, [r4, #12]
1a005636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00563a:	81a3      	strh	r3, [r4, #12]
1a00563c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005644:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a005648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a00564c:	81a2      	strh	r2, [r4, #12]
1a00564e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005652:	e7c6      	b.n	1a0055e2 <__sflush_r+0xce>
1a005654:	6d20      	ldr	r0, [r4, #80]	; 0x50
1a005656:	e782      	b.n	1a00555e <__sflush_r+0x4a>
1a005658:	89a3      	ldrh	r3, [r4, #12]
1a00565a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00565e:	81a3      	strh	r3, [r4, #12]
1a005660:	e7bf      	b.n	1a0055e2 <__sflush_r+0xce>
1a005662:	bf00      	nop
1a005664:	20400001 	.word	0x20400001

1a005668 <_fflush_r>:
1a005668:	b538      	push	{r3, r4, r5, lr}
1a00566a:	460d      	mov	r5, r1
1a00566c:	4604      	mov	r4, r0
1a00566e:	b108      	cbz	r0, 1a005674 <_fflush_r+0xc>
1a005670:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a005672:	b1a3      	cbz	r3, 1a00569e <_fflush_r+0x36>
1a005674:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a005678:	b1b8      	cbz	r0, 1a0056aa <_fflush_r+0x42>
1a00567a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a00567c:	07db      	lsls	r3, r3, #31
1a00567e:	d401      	bmi.n	1a005684 <_fflush_r+0x1c>
1a005680:	0581      	lsls	r1, r0, #22
1a005682:	d51a      	bpl.n	1a0056ba <_fflush_r+0x52>
1a005684:	4620      	mov	r0, r4
1a005686:	4629      	mov	r1, r5
1a005688:	f7ff ff44 	bl	1a005514 <__sflush_r>
1a00568c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a00568e:	07da      	lsls	r2, r3, #31
1a005690:	4604      	mov	r4, r0
1a005692:	d402      	bmi.n	1a00569a <_fflush_r+0x32>
1a005694:	89ab      	ldrh	r3, [r5, #12]
1a005696:	059b      	lsls	r3, r3, #22
1a005698:	d50a      	bpl.n	1a0056b0 <_fflush_r+0x48>
1a00569a:	4620      	mov	r0, r4
1a00569c:	bd38      	pop	{r3, r4, r5, pc}
1a00569e:	f000 f83f 	bl	1a005720 <__sinit>
1a0056a2:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a0056a6:	2800      	cmp	r0, #0
1a0056a8:	d1e7      	bne.n	1a00567a <_fflush_r+0x12>
1a0056aa:	4604      	mov	r4, r0
1a0056ac:	4620      	mov	r0, r4
1a0056ae:	bd38      	pop	{r3, r4, r5, pc}
1a0056b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0056b2:	f000 fa13 	bl	1a005adc <__retarget_lock_release_recursive>
1a0056b6:	4620      	mov	r0, r4
1a0056b8:	bd38      	pop	{r3, r4, r5, pc}
1a0056ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0056bc:	f000 fa0c 	bl	1a005ad8 <__retarget_lock_acquire_recursive>
1a0056c0:	e7e0      	b.n	1a005684 <_fflush_r+0x1c>
1a0056c2:	bf00      	nop

1a0056c4 <std>:
1a0056c4:	b510      	push	{r4, lr}
1a0056c6:	2300      	movs	r3, #0
1a0056c8:	4604      	mov	r4, r0
1a0056ca:	8181      	strh	r1, [r0, #12]
1a0056cc:	81c2      	strh	r2, [r0, #14]
1a0056ce:	e9c0 3300 	strd	r3, r3, [r0]
1a0056d2:	6083      	str	r3, [r0, #8]
1a0056d4:	6643      	str	r3, [r0, #100]	; 0x64
1a0056d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0056da:	6183      	str	r3, [r0, #24]
1a0056dc:	4619      	mov	r1, r3
1a0056de:	2208      	movs	r2, #8
1a0056e0:	305c      	adds	r0, #92	; 0x5c
1a0056e2:	f000 fd51 	bl	1a006188 <memset>
1a0056e6:	4807      	ldr	r0, [pc, #28]	; (1a005704 <std+0x40>)
1a0056e8:	4907      	ldr	r1, [pc, #28]	; (1a005708 <std+0x44>)
1a0056ea:	4a08      	ldr	r2, [pc, #32]	; (1a00570c <std+0x48>)
1a0056ec:	4b08      	ldr	r3, [pc, #32]	; (1a005710 <std+0x4c>)
1a0056ee:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0056f0:	e9c4 4007 	strd	r4, r0, [r4, #28]
1a0056f4:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
1a0056f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a0056fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a005700:	f000 b9e6 	b.w	1a005ad0 <__retarget_lock_init_recursive>
1a005704:	1a006309 	.word	0x1a006309
1a005708:	1a00632d 	.word	0x1a00632d
1a00570c:	1a006369 	.word	0x1a006369
1a005710:	1a006389 	.word	0x1a006389

1a005714 <_cleanup_r>:
1a005714:	4901      	ldr	r1, [pc, #4]	; (1a00571c <_cleanup_r+0x8>)
1a005716:	f000 b97f 	b.w	1a005a18 <_fwalk_reent>
1a00571a:	bf00      	nop
1a00571c:	1a005445 	.word	0x1a005445

1a005720 <__sinit>:
1a005720:	b510      	push	{r4, lr}
1a005722:	4604      	mov	r4, r0
1a005724:	4812      	ldr	r0, [pc, #72]	; (1a005770 <__sinit+0x50>)
1a005726:	f000 f9d7 	bl	1a005ad8 <__retarget_lock_acquire_recursive>
1a00572a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00572c:	b9d2      	cbnz	r2, 1a005764 <__sinit+0x44>
1a00572e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
1a005732:	4810      	ldr	r0, [pc, #64]	; (1a005774 <__sinit+0x54>)
1a005734:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
1a005738:	2103      	movs	r1, #3
1a00573a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
1a00573e:	63e0      	str	r0, [r4, #60]	; 0x3c
1a005740:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
1a005744:	6860      	ldr	r0, [r4, #4]
1a005746:	2104      	movs	r1, #4
1a005748:	f7ff ffbc 	bl	1a0056c4 <std>
1a00574c:	2201      	movs	r2, #1
1a00574e:	2109      	movs	r1, #9
1a005750:	68a0      	ldr	r0, [r4, #8]
1a005752:	f7ff ffb7 	bl	1a0056c4 <std>
1a005756:	2202      	movs	r2, #2
1a005758:	2112      	movs	r1, #18
1a00575a:	68e0      	ldr	r0, [r4, #12]
1a00575c:	f7ff ffb2 	bl	1a0056c4 <std>
1a005760:	2301      	movs	r3, #1
1a005762:	63a3      	str	r3, [r4, #56]	; 0x38
1a005764:	4802      	ldr	r0, [pc, #8]	; (1a005770 <__sinit+0x50>)
1a005766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a00576a:	f000 b9b7 	b.w	1a005adc <__retarget_lock_release_recursive>
1a00576e:	bf00      	nop
1a005770:	10007a10 	.word	0x10007a10
1a005774:	1a005715 	.word	0x1a005715

1a005778 <__sfp_lock_acquire>:
1a005778:	4801      	ldr	r0, [pc, #4]	; (1a005780 <__sfp_lock_acquire+0x8>)
1a00577a:	f000 b9ad 	b.w	1a005ad8 <__retarget_lock_acquire_recursive>
1a00577e:	bf00      	nop
1a005780:	10007a24 	.word	0x10007a24

1a005784 <__sfp_lock_release>:
1a005784:	4801      	ldr	r0, [pc, #4]	; (1a00578c <__sfp_lock_release+0x8>)
1a005786:	f000 b9a9 	b.w	1a005adc <__retarget_lock_release_recursive>
1a00578a:	bf00      	nop
1a00578c:	10007a24 	.word	0x10007a24

1a005790 <_malloc_trim_r>:
1a005790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005792:	4f24      	ldr	r7, [pc, #144]	; (1a005824 <_malloc_trim_r+0x94>)
1a005794:	460c      	mov	r4, r1
1a005796:	4606      	mov	r6, r0
1a005798:	f000 fd40 	bl	1a00621c <__malloc_lock>
1a00579c:	68bb      	ldr	r3, [r7, #8]
1a00579e:	685d      	ldr	r5, [r3, #4]
1a0057a0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1a0057a4:	310f      	adds	r1, #15
1a0057a6:	f025 0503 	bic.w	r5, r5, #3
1a0057aa:	4429      	add	r1, r5
1a0057ac:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a0057b0:	f021 010f 	bic.w	r1, r1, #15
1a0057b4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a0057b8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a0057bc:	db07      	blt.n	1a0057ce <_malloc_trim_r+0x3e>
1a0057be:	2100      	movs	r1, #0
1a0057c0:	4630      	mov	r0, r6
1a0057c2:	f7fb fd93 	bl	1a0012ec <_sbrk_r>
1a0057c6:	68bb      	ldr	r3, [r7, #8]
1a0057c8:	442b      	add	r3, r5
1a0057ca:	4298      	cmp	r0, r3
1a0057cc:	d004      	beq.n	1a0057d8 <_malloc_trim_r+0x48>
1a0057ce:	4630      	mov	r0, r6
1a0057d0:	f000 fd2a 	bl	1a006228 <__malloc_unlock>
1a0057d4:	2000      	movs	r0, #0
1a0057d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0057d8:	4261      	negs	r1, r4
1a0057da:	4630      	mov	r0, r6
1a0057dc:	f7fb fd86 	bl	1a0012ec <_sbrk_r>
1a0057e0:	3001      	adds	r0, #1
1a0057e2:	d00d      	beq.n	1a005800 <_malloc_trim_r+0x70>
1a0057e4:	4b10      	ldr	r3, [pc, #64]	; (1a005828 <_malloc_trim_r+0x98>)
1a0057e6:	68ba      	ldr	r2, [r7, #8]
1a0057e8:	6819      	ldr	r1, [r3, #0]
1a0057ea:	1b2d      	subs	r5, r5, r4
1a0057ec:	f045 0501 	orr.w	r5, r5, #1
1a0057f0:	4630      	mov	r0, r6
1a0057f2:	1b09      	subs	r1, r1, r4
1a0057f4:	6055      	str	r5, [r2, #4]
1a0057f6:	6019      	str	r1, [r3, #0]
1a0057f8:	f000 fd16 	bl	1a006228 <__malloc_unlock>
1a0057fc:	2001      	movs	r0, #1
1a0057fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a005800:	2100      	movs	r1, #0
1a005802:	4630      	mov	r0, r6
1a005804:	f7fb fd72 	bl	1a0012ec <_sbrk_r>
1a005808:	68ba      	ldr	r2, [r7, #8]
1a00580a:	1a83      	subs	r3, r0, r2
1a00580c:	2b0f      	cmp	r3, #15
1a00580e:	ddde      	ble.n	1a0057ce <_malloc_trim_r+0x3e>
1a005810:	4c06      	ldr	r4, [pc, #24]	; (1a00582c <_malloc_trim_r+0x9c>)
1a005812:	4905      	ldr	r1, [pc, #20]	; (1a005828 <_malloc_trim_r+0x98>)
1a005814:	6824      	ldr	r4, [r4, #0]
1a005816:	f043 0301 	orr.w	r3, r3, #1
1a00581a:	1b00      	subs	r0, r0, r4
1a00581c:	6053      	str	r3, [r2, #4]
1a00581e:	6008      	str	r0, [r1, #0]
1a005820:	e7d5      	b.n	1a0057ce <_malloc_trim_r+0x3e>
1a005822:	bf00      	nop
1a005824:	10000664 	.word	0x10000664
1a005828:	100078fc 	.word	0x100078fc
1a00582c:	10000a6c 	.word	0x10000a6c

1a005830 <_free_r>:
1a005830:	2900      	cmp	r1, #0
1a005832:	d053      	beq.n	1a0058dc <_free_r+0xac>
1a005834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005836:	460c      	mov	r4, r1
1a005838:	4606      	mov	r6, r0
1a00583a:	f000 fcef 	bl	1a00621c <__malloc_lock>
1a00583e:	f854 cc04 	ldr.w	ip, [r4, #-4]
1a005842:	4f71      	ldr	r7, [pc, #452]	; (1a005a08 <_free_r+0x1d8>)
1a005844:	f02c 0101 	bic.w	r1, ip, #1
1a005848:	f1a4 0508 	sub.w	r5, r4, #8
1a00584c:	186b      	adds	r3, r5, r1
1a00584e:	68b8      	ldr	r0, [r7, #8]
1a005850:	685a      	ldr	r2, [r3, #4]
1a005852:	4298      	cmp	r0, r3
1a005854:	f022 0203 	bic.w	r2, r2, #3
1a005858:	d053      	beq.n	1a005902 <_free_r+0xd2>
1a00585a:	f01c 0f01 	tst.w	ip, #1
1a00585e:	605a      	str	r2, [r3, #4]
1a005860:	eb03 0002 	add.w	r0, r3, r2
1a005864:	d13b      	bne.n	1a0058de <_free_r+0xae>
1a005866:	f854 cc08 	ldr.w	ip, [r4, #-8]
1a00586a:	6840      	ldr	r0, [r0, #4]
1a00586c:	eba5 050c 	sub.w	r5, r5, ip
1a005870:	f107 0e08 	add.w	lr, r7, #8
1a005874:	68ac      	ldr	r4, [r5, #8]
1a005876:	4574      	cmp	r4, lr
1a005878:	4461      	add	r1, ip
1a00587a:	f000 0001 	and.w	r0, r0, #1
1a00587e:	d075      	beq.n	1a00596c <_free_r+0x13c>
1a005880:	f8d5 c00c 	ldr.w	ip, [r5, #12]
1a005884:	f8c4 c00c 	str.w	ip, [r4, #12]
1a005888:	f8cc 4008 	str.w	r4, [ip, #8]
1a00588c:	b360      	cbz	r0, 1a0058e8 <_free_r+0xb8>
1a00588e:	f041 0301 	orr.w	r3, r1, #1
1a005892:	606b      	str	r3, [r5, #4]
1a005894:	5069      	str	r1, [r5, r1]
1a005896:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
1a00589a:	d350      	bcc.n	1a00593e <_free_r+0x10e>
1a00589c:	0a4b      	lsrs	r3, r1, #9
1a00589e:	2b04      	cmp	r3, #4
1a0058a0:	d870      	bhi.n	1a005984 <_free_r+0x154>
1a0058a2:	098b      	lsrs	r3, r1, #6
1a0058a4:	f103 0439 	add.w	r4, r3, #57	; 0x39
1a0058a8:	00e4      	lsls	r4, r4, #3
1a0058aa:	f103 0238 	add.w	r2, r3, #56	; 0x38
1a0058ae:	1938      	adds	r0, r7, r4
1a0058b0:	593b      	ldr	r3, [r7, r4]
1a0058b2:	3808      	subs	r0, #8
1a0058b4:	4298      	cmp	r0, r3
1a0058b6:	d078      	beq.n	1a0059aa <_free_r+0x17a>
1a0058b8:	685a      	ldr	r2, [r3, #4]
1a0058ba:	f022 0203 	bic.w	r2, r2, #3
1a0058be:	428a      	cmp	r2, r1
1a0058c0:	d971      	bls.n	1a0059a6 <_free_r+0x176>
1a0058c2:	689b      	ldr	r3, [r3, #8]
1a0058c4:	4298      	cmp	r0, r3
1a0058c6:	d1f7      	bne.n	1a0058b8 <_free_r+0x88>
1a0058c8:	68c3      	ldr	r3, [r0, #12]
1a0058ca:	e9c5 0302 	strd	r0, r3, [r5, #8]
1a0058ce:	609d      	str	r5, [r3, #8]
1a0058d0:	60c5      	str	r5, [r0, #12]
1a0058d2:	4630      	mov	r0, r6
1a0058d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a0058d8:	f000 bca6 	b.w	1a006228 <__malloc_unlock>
1a0058dc:	4770      	bx	lr
1a0058de:	6840      	ldr	r0, [r0, #4]
1a0058e0:	f000 0001 	and.w	r0, r0, #1
1a0058e4:	2800      	cmp	r0, #0
1a0058e6:	d1d2      	bne.n	1a00588e <_free_r+0x5e>
1a0058e8:	6898      	ldr	r0, [r3, #8]
1a0058ea:	4c48      	ldr	r4, [pc, #288]	; (1a005a0c <_free_r+0x1dc>)
1a0058ec:	4411      	add	r1, r2
1a0058ee:	42a0      	cmp	r0, r4
1a0058f0:	f041 0201 	orr.w	r2, r1, #1
1a0058f4:	d062      	beq.n	1a0059bc <_free_r+0x18c>
1a0058f6:	68db      	ldr	r3, [r3, #12]
1a0058f8:	60c3      	str	r3, [r0, #12]
1a0058fa:	6098      	str	r0, [r3, #8]
1a0058fc:	606a      	str	r2, [r5, #4]
1a0058fe:	5069      	str	r1, [r5, r1]
1a005900:	e7c9      	b.n	1a005896 <_free_r+0x66>
1a005902:	f01c 0f01 	tst.w	ip, #1
1a005906:	440a      	add	r2, r1
1a005908:	d107      	bne.n	1a00591a <_free_r+0xea>
1a00590a:	f854 3c08 	ldr.w	r3, [r4, #-8]
1a00590e:	1aed      	subs	r5, r5, r3
1a005910:	441a      	add	r2, r3
1a005912:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
1a005916:	60cb      	str	r3, [r1, #12]
1a005918:	6099      	str	r1, [r3, #8]
1a00591a:	4b3d      	ldr	r3, [pc, #244]	; (1a005a10 <_free_r+0x1e0>)
1a00591c:	681b      	ldr	r3, [r3, #0]
1a00591e:	f042 0101 	orr.w	r1, r2, #1
1a005922:	4293      	cmp	r3, r2
1a005924:	6069      	str	r1, [r5, #4]
1a005926:	60bd      	str	r5, [r7, #8]
1a005928:	d804      	bhi.n	1a005934 <_free_r+0x104>
1a00592a:	4b3a      	ldr	r3, [pc, #232]	; (1a005a14 <_free_r+0x1e4>)
1a00592c:	4630      	mov	r0, r6
1a00592e:	6819      	ldr	r1, [r3, #0]
1a005930:	f7ff ff2e 	bl	1a005790 <_malloc_trim_r>
1a005934:	4630      	mov	r0, r6
1a005936:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a00593a:	f000 bc75 	b.w	1a006228 <__malloc_unlock>
1a00593e:	08c9      	lsrs	r1, r1, #3
1a005940:	6878      	ldr	r0, [r7, #4]
1a005942:	1c4a      	adds	r2, r1, #1
1a005944:	2301      	movs	r3, #1
1a005946:	1089      	asrs	r1, r1, #2
1a005948:	408b      	lsls	r3, r1
1a00594a:	4303      	orrs	r3, r0
1a00594c:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
1a005950:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
1a005954:	607b      	str	r3, [r7, #4]
1a005956:	3908      	subs	r1, #8
1a005958:	e9c5 0102 	strd	r0, r1, [r5, #8]
1a00595c:	f847 5032 	str.w	r5, [r7, r2, lsl #3]
1a005960:	60c5      	str	r5, [r0, #12]
1a005962:	4630      	mov	r0, r6
1a005964:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a005968:	f000 bc5e 	b.w	1a006228 <__malloc_unlock>
1a00596c:	2800      	cmp	r0, #0
1a00596e:	d145      	bne.n	1a0059fc <_free_r+0x1cc>
1a005970:	440a      	add	r2, r1
1a005972:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
1a005976:	f042 0001 	orr.w	r0, r2, #1
1a00597a:	60cb      	str	r3, [r1, #12]
1a00597c:	6099      	str	r1, [r3, #8]
1a00597e:	6068      	str	r0, [r5, #4]
1a005980:	50aa      	str	r2, [r5, r2]
1a005982:	e7d7      	b.n	1a005934 <_free_r+0x104>
1a005984:	2b14      	cmp	r3, #20
1a005986:	d908      	bls.n	1a00599a <_free_r+0x16a>
1a005988:	2b54      	cmp	r3, #84	; 0x54
1a00598a:	d81e      	bhi.n	1a0059ca <_free_r+0x19a>
1a00598c:	0b0b      	lsrs	r3, r1, #12
1a00598e:	f103 046f 	add.w	r4, r3, #111	; 0x6f
1a005992:	00e4      	lsls	r4, r4, #3
1a005994:	f103 026e 	add.w	r2, r3, #110	; 0x6e
1a005998:	e789      	b.n	1a0058ae <_free_r+0x7e>
1a00599a:	f103 045c 	add.w	r4, r3, #92	; 0x5c
1a00599e:	00e4      	lsls	r4, r4, #3
1a0059a0:	f103 025b 	add.w	r2, r3, #91	; 0x5b
1a0059a4:	e783      	b.n	1a0058ae <_free_r+0x7e>
1a0059a6:	4618      	mov	r0, r3
1a0059a8:	e78e      	b.n	1a0058c8 <_free_r+0x98>
1a0059aa:	1093      	asrs	r3, r2, #2
1a0059ac:	6879      	ldr	r1, [r7, #4]
1a0059ae:	2201      	movs	r2, #1
1a0059b0:	fa02 f303 	lsl.w	r3, r2, r3
1a0059b4:	430b      	orrs	r3, r1
1a0059b6:	607b      	str	r3, [r7, #4]
1a0059b8:	4603      	mov	r3, r0
1a0059ba:	e786      	b.n	1a0058ca <_free_r+0x9a>
1a0059bc:	e9c7 5504 	strd	r5, r5, [r7, #16]
1a0059c0:	e9c5 0002 	strd	r0, r0, [r5, #8]
1a0059c4:	606a      	str	r2, [r5, #4]
1a0059c6:	5069      	str	r1, [r5, r1]
1a0059c8:	e7b4      	b.n	1a005934 <_free_r+0x104>
1a0059ca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a0059ce:	d806      	bhi.n	1a0059de <_free_r+0x1ae>
1a0059d0:	0bcb      	lsrs	r3, r1, #15
1a0059d2:	f103 0478 	add.w	r4, r3, #120	; 0x78
1a0059d6:	00e4      	lsls	r4, r4, #3
1a0059d8:	f103 0277 	add.w	r2, r3, #119	; 0x77
1a0059dc:	e767      	b.n	1a0058ae <_free_r+0x7e>
1a0059de:	f240 5254 	movw	r2, #1364	; 0x554
1a0059e2:	4293      	cmp	r3, r2
1a0059e4:	d806      	bhi.n	1a0059f4 <_free_r+0x1c4>
1a0059e6:	0c8b      	lsrs	r3, r1, #18
1a0059e8:	f103 047d 	add.w	r4, r3, #125	; 0x7d
1a0059ec:	00e4      	lsls	r4, r4, #3
1a0059ee:	f103 027c 	add.w	r2, r3, #124	; 0x7c
1a0059f2:	e75c      	b.n	1a0058ae <_free_r+0x7e>
1a0059f4:	f44f 747e 	mov.w	r4, #1016	; 0x3f8
1a0059f8:	227e      	movs	r2, #126	; 0x7e
1a0059fa:	e758      	b.n	1a0058ae <_free_r+0x7e>
1a0059fc:	f041 0201 	orr.w	r2, r1, #1
1a005a00:	606a      	str	r2, [r5, #4]
1a005a02:	6019      	str	r1, [r3, #0]
1a005a04:	e796      	b.n	1a005934 <_free_r+0x104>
1a005a06:	bf00      	nop
1a005a08:	10000664 	.word	0x10000664
1a005a0c:	1000066c 	.word	0x1000066c
1a005a10:	10000a70 	.word	0x10000a70
1a005a14:	1000792c 	.word	0x1000792c

1a005a18 <_fwalk_reent>:
1a005a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a005a1c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1a005a20:	d01f      	beq.n	1a005a62 <_fwalk_reent+0x4a>
1a005a22:	4688      	mov	r8, r1
1a005a24:	4606      	mov	r6, r0
1a005a26:	f04f 0900 	mov.w	r9, #0
1a005a2a:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
1a005a2e:	3d01      	subs	r5, #1
1a005a30:	d411      	bmi.n	1a005a56 <_fwalk_reent+0x3e>
1a005a32:	89a3      	ldrh	r3, [r4, #12]
1a005a34:	2b01      	cmp	r3, #1
1a005a36:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a005a3a:	4621      	mov	r1, r4
1a005a3c:	4630      	mov	r0, r6
1a005a3e:	d906      	bls.n	1a005a4e <_fwalk_reent+0x36>
1a005a40:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a005a44:	3301      	adds	r3, #1
1a005a46:	d002      	beq.n	1a005a4e <_fwalk_reent+0x36>
1a005a48:	47c0      	blx	r8
1a005a4a:	ea49 0900 	orr.w	r9, r9, r0
1a005a4e:	1c6b      	adds	r3, r5, #1
1a005a50:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a005a54:	d1ed      	bne.n	1a005a32 <_fwalk_reent+0x1a>
1a005a56:	683f      	ldr	r7, [r7, #0]
1a005a58:	2f00      	cmp	r7, #0
1a005a5a:	d1e6      	bne.n	1a005a2a <_fwalk_reent+0x12>
1a005a5c:	4648      	mov	r0, r9
1a005a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a005a62:	46b9      	mov	r9, r7
1a005a64:	4648      	mov	r0, r9
1a005a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a005a6a:	bf00      	nop

1a005a6c <__libc_init_array>:
1a005a6c:	b570      	push	{r4, r5, r6, lr}
1a005a6e:	4e0d      	ldr	r6, [pc, #52]	; (1a005aa4 <__libc_init_array+0x38>)
1a005a70:	4d0d      	ldr	r5, [pc, #52]	; (1a005aa8 <__libc_init_array+0x3c>)
1a005a72:	1b76      	subs	r6, r6, r5
1a005a74:	10b6      	asrs	r6, r6, #2
1a005a76:	d006      	beq.n	1a005a86 <__libc_init_array+0x1a>
1a005a78:	2400      	movs	r4, #0
1a005a7a:	3401      	adds	r4, #1
1a005a7c:	f855 3b04 	ldr.w	r3, [r5], #4
1a005a80:	4798      	blx	r3
1a005a82:	42a6      	cmp	r6, r4
1a005a84:	d1f9      	bne.n	1a005a7a <__libc_init_array+0xe>
1a005a86:	4e09      	ldr	r6, [pc, #36]	; (1a005aac <__libc_init_array+0x40>)
1a005a88:	4d09      	ldr	r5, [pc, #36]	; (1a005ab0 <__libc_init_array+0x44>)
1a005a8a:	1b76      	subs	r6, r6, r5
1a005a8c:	f7fb fbd9 	bl	1a001242 <_init>
1a005a90:	10b6      	asrs	r6, r6, #2
1a005a92:	d006      	beq.n	1a005aa2 <__libc_init_array+0x36>
1a005a94:	2400      	movs	r4, #0
1a005a96:	3401      	adds	r4, #1
1a005a98:	f855 3b04 	ldr.w	r3, [r5], #4
1a005a9c:	4798      	blx	r3
1a005a9e:	42a6      	cmp	r6, r4
1a005aa0:	d1f9      	bne.n	1a005a96 <__libc_init_array+0x2a>
1a005aa2:	bd70      	pop	{r4, r5, r6, pc}
1a005aa4:	1a00ac1c 	.word	0x1a00ac1c
1a005aa8:	1a00ac1c 	.word	0x1a00ac1c
1a005aac:	1a00ac20 	.word	0x1a00ac20
1a005ab0:	1a00ac1c 	.word	0x1a00ac1c

1a005ab4 <__locale_mb_cur_max>:
1a005ab4:	4b04      	ldr	r3, [pc, #16]	; (1a005ac8 <__locale_mb_cur_max+0x14>)
1a005ab6:	4a05      	ldr	r2, [pc, #20]	; (1a005acc <__locale_mb_cur_max+0x18>)
1a005ab8:	681b      	ldr	r3, [r3, #0]
1a005aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a005abc:	2b00      	cmp	r3, #0
1a005abe:	bf08      	it	eq
1a005ac0:	4613      	moveq	r3, r2
1a005ac2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
1a005ac6:	4770      	bx	lr
1a005ac8:	100000cc 	.word	0x100000cc
1a005acc:	100004f8 	.word	0x100004f8

1a005ad0 <__retarget_lock_init_recursive>:
1a005ad0:	4770      	bx	lr
1a005ad2:	bf00      	nop

1a005ad4 <__retarget_lock_close_recursive>:
1a005ad4:	4770      	bx	lr
1a005ad6:	bf00      	nop

1a005ad8 <__retarget_lock_acquire_recursive>:
1a005ad8:	4770      	bx	lr
1a005ada:	bf00      	nop

1a005adc <__retarget_lock_release_recursive>:
1a005adc:	4770      	bx	lr
1a005ade:	bf00      	nop

1a005ae0 <_malloc_r>:
1a005ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005ae4:	f101 050b 	add.w	r5, r1, #11
1a005ae8:	2d16      	cmp	r5, #22
1a005aea:	b083      	sub	sp, #12
1a005aec:	4606      	mov	r6, r0
1a005aee:	d823      	bhi.n	1a005b38 <_malloc_r+0x58>
1a005af0:	2910      	cmp	r1, #16
1a005af2:	f200 80b9 	bhi.w	1a005c68 <_malloc_r+0x188>
1a005af6:	f000 fb91 	bl	1a00621c <__malloc_lock>
1a005afa:	2510      	movs	r5, #16
1a005afc:	2318      	movs	r3, #24
1a005afe:	2002      	movs	r0, #2
1a005b00:	4fc5      	ldr	r7, [pc, #788]	; (1a005e18 <_malloc_r+0x338>)
1a005b02:	443b      	add	r3, r7
1a005b04:	f1a3 0208 	sub.w	r2, r3, #8
1a005b08:	685c      	ldr	r4, [r3, #4]
1a005b0a:	4294      	cmp	r4, r2
1a005b0c:	f000 8166 	beq.w	1a005ddc <_malloc_r+0x2fc>
1a005b10:	6863      	ldr	r3, [r4, #4]
1a005b12:	f023 0303 	bic.w	r3, r3, #3
1a005b16:	4423      	add	r3, r4
1a005b18:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
1a005b1c:	685a      	ldr	r2, [r3, #4]
1a005b1e:	60e9      	str	r1, [r5, #12]
1a005b20:	f042 0201 	orr.w	r2, r2, #1
1a005b24:	608d      	str	r5, [r1, #8]
1a005b26:	4630      	mov	r0, r6
1a005b28:	605a      	str	r2, [r3, #4]
1a005b2a:	f000 fb7d 	bl	1a006228 <__malloc_unlock>
1a005b2e:	3408      	adds	r4, #8
1a005b30:	4620      	mov	r0, r4
1a005b32:	b003      	add	sp, #12
1a005b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005b38:	f035 0507 	bics.w	r5, r5, #7
1a005b3c:	f100 8094 	bmi.w	1a005c68 <_malloc_r+0x188>
1a005b40:	42a9      	cmp	r1, r5
1a005b42:	f200 8091 	bhi.w	1a005c68 <_malloc_r+0x188>
1a005b46:	f000 fb69 	bl	1a00621c <__malloc_lock>
1a005b4a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a005b4e:	f0c0 8183 	bcc.w	1a005e58 <_malloc_r+0x378>
1a005b52:	0a6b      	lsrs	r3, r5, #9
1a005b54:	f000 808f 	beq.w	1a005c76 <_malloc_r+0x196>
1a005b58:	2b04      	cmp	r3, #4
1a005b5a:	f200 8146 	bhi.w	1a005dea <_malloc_r+0x30a>
1a005b5e:	09ab      	lsrs	r3, r5, #6
1a005b60:	f103 0039 	add.w	r0, r3, #57	; 0x39
1a005b64:	f103 0c38 	add.w	ip, r3, #56	; 0x38
1a005b68:	00c3      	lsls	r3, r0, #3
1a005b6a:	4fab      	ldr	r7, [pc, #684]	; (1a005e18 <_malloc_r+0x338>)
1a005b6c:	443b      	add	r3, r7
1a005b6e:	f1a3 0108 	sub.w	r1, r3, #8
1a005b72:	685c      	ldr	r4, [r3, #4]
1a005b74:	42a1      	cmp	r1, r4
1a005b76:	d106      	bne.n	1a005b86 <_malloc_r+0xa6>
1a005b78:	e00c      	b.n	1a005b94 <_malloc_r+0xb4>
1a005b7a:	2a00      	cmp	r2, #0
1a005b7c:	f280 811d 	bge.w	1a005dba <_malloc_r+0x2da>
1a005b80:	68e4      	ldr	r4, [r4, #12]
1a005b82:	42a1      	cmp	r1, r4
1a005b84:	d006      	beq.n	1a005b94 <_malloc_r+0xb4>
1a005b86:	6863      	ldr	r3, [r4, #4]
1a005b88:	f023 0303 	bic.w	r3, r3, #3
1a005b8c:	1b5a      	subs	r2, r3, r5
1a005b8e:	2a0f      	cmp	r2, #15
1a005b90:	ddf3      	ble.n	1a005b7a <_malloc_r+0x9a>
1a005b92:	4660      	mov	r0, ip
1a005b94:	693c      	ldr	r4, [r7, #16]
1a005b96:	f8df c294 	ldr.w	ip, [pc, #660]	; 1a005e2c <_malloc_r+0x34c>
1a005b9a:	4564      	cmp	r4, ip
1a005b9c:	d071      	beq.n	1a005c82 <_malloc_r+0x1a2>
1a005b9e:	6863      	ldr	r3, [r4, #4]
1a005ba0:	f023 0303 	bic.w	r3, r3, #3
1a005ba4:	1b5a      	subs	r2, r3, r5
1a005ba6:	2a0f      	cmp	r2, #15
1a005ba8:	f300 8144 	bgt.w	1a005e34 <_malloc_r+0x354>
1a005bac:	2a00      	cmp	r2, #0
1a005bae:	e9c7 cc04 	strd	ip, ip, [r7, #16]
1a005bb2:	f280 8126 	bge.w	1a005e02 <_malloc_r+0x322>
1a005bb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a005bba:	f080 8169 	bcs.w	1a005e90 <_malloc_r+0x3b0>
1a005bbe:	08db      	lsrs	r3, r3, #3
1a005bc0:	1c59      	adds	r1, r3, #1
1a005bc2:	687a      	ldr	r2, [r7, #4]
1a005bc4:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
1a005bc8:	f8c4 8008 	str.w	r8, [r4, #8]
1a005bcc:	f04f 0e01 	mov.w	lr, #1
1a005bd0:	109b      	asrs	r3, r3, #2
1a005bd2:	fa0e f303 	lsl.w	r3, lr, r3
1a005bd6:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
1a005bda:	4313      	orrs	r3, r2
1a005bdc:	f1ae 0208 	sub.w	r2, lr, #8
1a005be0:	60e2      	str	r2, [r4, #12]
1a005be2:	607b      	str	r3, [r7, #4]
1a005be4:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1a005be8:	f8c8 400c 	str.w	r4, [r8, #12]
1a005bec:	1082      	asrs	r2, r0, #2
1a005bee:	2401      	movs	r4, #1
1a005bf0:	4094      	lsls	r4, r2
1a005bf2:	429c      	cmp	r4, r3
1a005bf4:	d84b      	bhi.n	1a005c8e <_malloc_r+0x1ae>
1a005bf6:	421c      	tst	r4, r3
1a005bf8:	d106      	bne.n	1a005c08 <_malloc_r+0x128>
1a005bfa:	f020 0003 	bic.w	r0, r0, #3
1a005bfe:	0064      	lsls	r4, r4, #1
1a005c00:	421c      	tst	r4, r3
1a005c02:	f100 0004 	add.w	r0, r0, #4
1a005c06:	d0fa      	beq.n	1a005bfe <_malloc_r+0x11e>
1a005c08:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1a005c0c:	46ce      	mov	lr, r9
1a005c0e:	4680      	mov	r8, r0
1a005c10:	f8de 300c 	ldr.w	r3, [lr, #12]
1a005c14:	459e      	cmp	lr, r3
1a005c16:	d107      	bne.n	1a005c28 <_malloc_r+0x148>
1a005c18:	e122      	b.n	1a005e60 <_malloc_r+0x380>
1a005c1a:	2a00      	cmp	r2, #0
1a005c1c:	f280 8129 	bge.w	1a005e72 <_malloc_r+0x392>
1a005c20:	68db      	ldr	r3, [r3, #12]
1a005c22:	459e      	cmp	lr, r3
1a005c24:	f000 811c 	beq.w	1a005e60 <_malloc_r+0x380>
1a005c28:	6859      	ldr	r1, [r3, #4]
1a005c2a:	f021 0103 	bic.w	r1, r1, #3
1a005c2e:	1b4a      	subs	r2, r1, r5
1a005c30:	2a0f      	cmp	r2, #15
1a005c32:	ddf2      	ble.n	1a005c1a <_malloc_r+0x13a>
1a005c34:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
1a005c38:	195c      	adds	r4, r3, r5
1a005c3a:	f045 0501 	orr.w	r5, r5, #1
1a005c3e:	605d      	str	r5, [r3, #4]
1a005c40:	f042 0501 	orr.w	r5, r2, #1
1a005c44:	f8c8 e00c 	str.w	lr, [r8, #12]
1a005c48:	4630      	mov	r0, r6
1a005c4a:	f8ce 8008 	str.w	r8, [lr, #8]
1a005c4e:	e9c7 4404 	strd	r4, r4, [r7, #16]
1a005c52:	e9c4 cc02 	strd	ip, ip, [r4, #8]
1a005c56:	6065      	str	r5, [r4, #4]
1a005c58:	505a      	str	r2, [r3, r1]
1a005c5a:	9301      	str	r3, [sp, #4]
1a005c5c:	f000 fae4 	bl	1a006228 <__malloc_unlock>
1a005c60:	9b01      	ldr	r3, [sp, #4]
1a005c62:	f103 0408 	add.w	r4, r3, #8
1a005c66:	e763      	b.n	1a005b30 <_malloc_r+0x50>
1a005c68:	2400      	movs	r4, #0
1a005c6a:	230c      	movs	r3, #12
1a005c6c:	4620      	mov	r0, r4
1a005c6e:	6033      	str	r3, [r6, #0]
1a005c70:	b003      	add	sp, #12
1a005c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005c76:	f44f 7300 	mov.w	r3, #512	; 0x200
1a005c7a:	2040      	movs	r0, #64	; 0x40
1a005c7c:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
1a005c80:	e773      	b.n	1a005b6a <_malloc_r+0x8a>
1a005c82:	687b      	ldr	r3, [r7, #4]
1a005c84:	1082      	asrs	r2, r0, #2
1a005c86:	2401      	movs	r4, #1
1a005c88:	4094      	lsls	r4, r2
1a005c8a:	429c      	cmp	r4, r3
1a005c8c:	d9b3      	bls.n	1a005bf6 <_malloc_r+0x116>
1a005c8e:	68bc      	ldr	r4, [r7, #8]
1a005c90:	6863      	ldr	r3, [r4, #4]
1a005c92:	f023 0903 	bic.w	r9, r3, #3
1a005c96:	45a9      	cmp	r9, r5
1a005c98:	d303      	bcc.n	1a005ca2 <_malloc_r+0x1c2>
1a005c9a:	eba9 0305 	sub.w	r3, r9, r5
1a005c9e:	2b0f      	cmp	r3, #15
1a005ca0:	dc7b      	bgt.n	1a005d9a <_malloc_r+0x2ba>
1a005ca2:	4b5e      	ldr	r3, [pc, #376]	; (1a005e1c <_malloc_r+0x33c>)
1a005ca4:	f8df a188 	ldr.w	sl, [pc, #392]	; 1a005e30 <_malloc_r+0x350>
1a005ca8:	681a      	ldr	r2, [r3, #0]
1a005caa:	f8da 3000 	ldr.w	r3, [sl]
1a005cae:	3301      	adds	r3, #1
1a005cb0:	eb05 0802 	add.w	r8, r5, r2
1a005cb4:	f000 8148 	beq.w	1a005f48 <_malloc_r+0x468>
1a005cb8:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
1a005cbc:	f108 080f 	add.w	r8, r8, #15
1a005cc0:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
1a005cc4:	f028 080f 	bic.w	r8, r8, #15
1a005cc8:	4641      	mov	r1, r8
1a005cca:	4630      	mov	r0, r6
1a005ccc:	f7fb fb0e 	bl	1a0012ec <_sbrk_r>
1a005cd0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a005cd4:	4683      	mov	fp, r0
1a005cd6:	f000 8104 	beq.w	1a005ee2 <_malloc_r+0x402>
1a005cda:	eb04 0009 	add.w	r0, r4, r9
1a005cde:	4558      	cmp	r0, fp
1a005ce0:	f200 80fd 	bhi.w	1a005ede <_malloc_r+0x3fe>
1a005ce4:	4a4e      	ldr	r2, [pc, #312]	; (1a005e20 <_malloc_r+0x340>)
1a005ce6:	6813      	ldr	r3, [r2, #0]
1a005ce8:	4443      	add	r3, r8
1a005cea:	6013      	str	r3, [r2, #0]
1a005cec:	f000 814d 	beq.w	1a005f8a <_malloc_r+0x4aa>
1a005cf0:	f8da 1000 	ldr.w	r1, [sl]
1a005cf4:	3101      	adds	r1, #1
1a005cf6:	bf1b      	ittet	ne
1a005cf8:	ebab 0000 	subne.w	r0, fp, r0
1a005cfc:	181b      	addne	r3, r3, r0
1a005cfe:	f8ca b000 	streq.w	fp, [sl]
1a005d02:	6013      	strne	r3, [r2, #0]
1a005d04:	f01b 0307 	ands.w	r3, fp, #7
1a005d08:	f000 8134 	beq.w	1a005f74 <_malloc_r+0x494>
1a005d0c:	f1c3 0108 	rsb	r1, r3, #8
1a005d10:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
1a005d14:	448b      	add	fp, r1
1a005d16:	3308      	adds	r3, #8
1a005d18:	44d8      	add	r8, fp
1a005d1a:	f3c8 080b 	ubfx	r8, r8, #0, #12
1a005d1e:	eba3 0808 	sub.w	r8, r3, r8
1a005d22:	4641      	mov	r1, r8
1a005d24:	4630      	mov	r0, r6
1a005d26:	9201      	str	r2, [sp, #4]
1a005d28:	f7fb fae0 	bl	1a0012ec <_sbrk_r>
1a005d2c:	1c43      	adds	r3, r0, #1
1a005d2e:	9a01      	ldr	r2, [sp, #4]
1a005d30:	f000 8146 	beq.w	1a005fc0 <_malloc_r+0x4e0>
1a005d34:	eba0 010b 	sub.w	r1, r0, fp
1a005d38:	4441      	add	r1, r8
1a005d3a:	f041 0101 	orr.w	r1, r1, #1
1a005d3e:	6813      	ldr	r3, [r2, #0]
1a005d40:	f8c7 b008 	str.w	fp, [r7, #8]
1a005d44:	4443      	add	r3, r8
1a005d46:	42bc      	cmp	r4, r7
1a005d48:	f8cb 1004 	str.w	r1, [fp, #4]
1a005d4c:	6013      	str	r3, [r2, #0]
1a005d4e:	d015      	beq.n	1a005d7c <_malloc_r+0x29c>
1a005d50:	f1b9 0f0f 	cmp.w	r9, #15
1a005d54:	f240 8130 	bls.w	1a005fb8 <_malloc_r+0x4d8>
1a005d58:	6860      	ldr	r0, [r4, #4]
1a005d5a:	f1a9 010c 	sub.w	r1, r9, #12
1a005d5e:	f021 0107 	bic.w	r1, r1, #7
1a005d62:	f000 0001 	and.w	r0, r0, #1
1a005d66:	eb04 0c01 	add.w	ip, r4, r1
1a005d6a:	4308      	orrs	r0, r1
1a005d6c:	f04f 0e05 	mov.w	lr, #5
1a005d70:	290f      	cmp	r1, #15
1a005d72:	6060      	str	r0, [r4, #4]
1a005d74:	e9cc ee01 	strd	lr, lr, [ip, #4]
1a005d78:	f200 813a 	bhi.w	1a005ff0 <_malloc_r+0x510>
1a005d7c:	4a29      	ldr	r2, [pc, #164]	; (1a005e24 <_malloc_r+0x344>)
1a005d7e:	482a      	ldr	r0, [pc, #168]	; (1a005e28 <_malloc_r+0x348>)
1a005d80:	6811      	ldr	r1, [r2, #0]
1a005d82:	68bc      	ldr	r4, [r7, #8]
1a005d84:	428b      	cmp	r3, r1
1a005d86:	6801      	ldr	r1, [r0, #0]
1a005d88:	bf88      	it	hi
1a005d8a:	6013      	strhi	r3, [r2, #0]
1a005d8c:	6862      	ldr	r2, [r4, #4]
1a005d8e:	428b      	cmp	r3, r1
1a005d90:	f022 0203 	bic.w	r2, r2, #3
1a005d94:	bf88      	it	hi
1a005d96:	6003      	strhi	r3, [r0, #0]
1a005d98:	e0a7      	b.n	1a005eea <_malloc_r+0x40a>
1a005d9a:	1962      	adds	r2, r4, r5
1a005d9c:	f043 0301 	orr.w	r3, r3, #1
1a005da0:	f045 0501 	orr.w	r5, r5, #1
1a005da4:	6065      	str	r5, [r4, #4]
1a005da6:	4630      	mov	r0, r6
1a005da8:	60ba      	str	r2, [r7, #8]
1a005daa:	6053      	str	r3, [r2, #4]
1a005dac:	f000 fa3c 	bl	1a006228 <__malloc_unlock>
1a005db0:	3408      	adds	r4, #8
1a005db2:	4620      	mov	r0, r4
1a005db4:	b003      	add	sp, #12
1a005db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005dba:	4423      	add	r3, r4
1a005dbc:	68e1      	ldr	r1, [r4, #12]
1a005dbe:	685a      	ldr	r2, [r3, #4]
1a005dc0:	68a5      	ldr	r5, [r4, #8]
1a005dc2:	f042 0201 	orr.w	r2, r2, #1
1a005dc6:	60e9      	str	r1, [r5, #12]
1a005dc8:	4630      	mov	r0, r6
1a005dca:	608d      	str	r5, [r1, #8]
1a005dcc:	605a      	str	r2, [r3, #4]
1a005dce:	f000 fa2b 	bl	1a006228 <__malloc_unlock>
1a005dd2:	3408      	adds	r4, #8
1a005dd4:	4620      	mov	r0, r4
1a005dd6:	b003      	add	sp, #12
1a005dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005ddc:	68dc      	ldr	r4, [r3, #12]
1a005dde:	42a3      	cmp	r3, r4
1a005de0:	bf08      	it	eq
1a005de2:	3002      	addeq	r0, #2
1a005de4:	f43f aed6 	beq.w	1a005b94 <_malloc_r+0xb4>
1a005de8:	e692      	b.n	1a005b10 <_malloc_r+0x30>
1a005dea:	2b14      	cmp	r3, #20
1a005dec:	d971      	bls.n	1a005ed2 <_malloc_r+0x3f2>
1a005dee:	2b54      	cmp	r3, #84	; 0x54
1a005df0:	f200 80ad 	bhi.w	1a005f4e <_malloc_r+0x46e>
1a005df4:	0b2b      	lsrs	r3, r5, #12
1a005df6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1a005dfa:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
1a005dfe:	00c3      	lsls	r3, r0, #3
1a005e00:	e6b3      	b.n	1a005b6a <_malloc_r+0x8a>
1a005e02:	4423      	add	r3, r4
1a005e04:	4630      	mov	r0, r6
1a005e06:	685a      	ldr	r2, [r3, #4]
1a005e08:	f042 0201 	orr.w	r2, r2, #1
1a005e0c:	605a      	str	r2, [r3, #4]
1a005e0e:	3408      	adds	r4, #8
1a005e10:	f000 fa0a 	bl	1a006228 <__malloc_unlock>
1a005e14:	e68c      	b.n	1a005b30 <_malloc_r+0x50>
1a005e16:	bf00      	nop
1a005e18:	10000664 	.word	0x10000664
1a005e1c:	1000792c 	.word	0x1000792c
1a005e20:	100078fc 	.word	0x100078fc
1a005e24:	10007924 	.word	0x10007924
1a005e28:	10007928 	.word	0x10007928
1a005e2c:	1000066c 	.word	0x1000066c
1a005e30:	10000a6c 	.word	0x10000a6c
1a005e34:	1961      	adds	r1, r4, r5
1a005e36:	f045 0e01 	orr.w	lr, r5, #1
1a005e3a:	f042 0501 	orr.w	r5, r2, #1
1a005e3e:	f8c4 e004 	str.w	lr, [r4, #4]
1a005e42:	4630      	mov	r0, r6
1a005e44:	e9c7 1104 	strd	r1, r1, [r7, #16]
1a005e48:	e9c1 cc02 	strd	ip, ip, [r1, #8]
1a005e4c:	604d      	str	r5, [r1, #4]
1a005e4e:	50e2      	str	r2, [r4, r3]
1a005e50:	f000 f9ea 	bl	1a006228 <__malloc_unlock>
1a005e54:	3408      	adds	r4, #8
1a005e56:	e66b      	b.n	1a005b30 <_malloc_r+0x50>
1a005e58:	08e8      	lsrs	r0, r5, #3
1a005e5a:	f105 0308 	add.w	r3, r5, #8
1a005e5e:	e64f      	b.n	1a005b00 <_malloc_r+0x20>
1a005e60:	f108 0801 	add.w	r8, r8, #1
1a005e64:	f018 0f03 	tst.w	r8, #3
1a005e68:	f10e 0e08 	add.w	lr, lr, #8
1a005e6c:	f47f aed0 	bne.w	1a005c10 <_malloc_r+0x130>
1a005e70:	e052      	b.n	1a005f18 <_malloc_r+0x438>
1a005e72:	4419      	add	r1, r3
1a005e74:	461c      	mov	r4, r3
1a005e76:	684a      	ldr	r2, [r1, #4]
1a005e78:	68db      	ldr	r3, [r3, #12]
1a005e7a:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a005e7e:	f042 0201 	orr.w	r2, r2, #1
1a005e82:	604a      	str	r2, [r1, #4]
1a005e84:	4630      	mov	r0, r6
1a005e86:	60eb      	str	r3, [r5, #12]
1a005e88:	609d      	str	r5, [r3, #8]
1a005e8a:	f000 f9cd 	bl	1a006228 <__malloc_unlock>
1a005e8e:	e64f      	b.n	1a005b30 <_malloc_r+0x50>
1a005e90:	0a5a      	lsrs	r2, r3, #9
1a005e92:	2a04      	cmp	r2, #4
1a005e94:	d935      	bls.n	1a005f02 <_malloc_r+0x422>
1a005e96:	2a14      	cmp	r2, #20
1a005e98:	d86f      	bhi.n	1a005f7a <_malloc_r+0x49a>
1a005e9a:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1a005e9e:	00c9      	lsls	r1, r1, #3
1a005ea0:	325b      	adds	r2, #91	; 0x5b
1a005ea2:	eb07 0e01 	add.w	lr, r7, r1
1a005ea6:	5879      	ldr	r1, [r7, r1]
1a005ea8:	f1ae 0e08 	sub.w	lr, lr, #8
1a005eac:	458e      	cmp	lr, r1
1a005eae:	d058      	beq.n	1a005f62 <_malloc_r+0x482>
1a005eb0:	684a      	ldr	r2, [r1, #4]
1a005eb2:	f022 0203 	bic.w	r2, r2, #3
1a005eb6:	429a      	cmp	r2, r3
1a005eb8:	d902      	bls.n	1a005ec0 <_malloc_r+0x3e0>
1a005eba:	6889      	ldr	r1, [r1, #8]
1a005ebc:	458e      	cmp	lr, r1
1a005ebe:	d1f7      	bne.n	1a005eb0 <_malloc_r+0x3d0>
1a005ec0:	f8d1 e00c 	ldr.w	lr, [r1, #12]
1a005ec4:	687b      	ldr	r3, [r7, #4]
1a005ec6:	e9c4 1e02 	strd	r1, lr, [r4, #8]
1a005eca:	f8ce 4008 	str.w	r4, [lr, #8]
1a005ece:	60cc      	str	r4, [r1, #12]
1a005ed0:	e68c      	b.n	1a005bec <_malloc_r+0x10c>
1a005ed2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1a005ed6:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
1a005eda:	00c3      	lsls	r3, r0, #3
1a005edc:	e645      	b.n	1a005b6a <_malloc_r+0x8a>
1a005ede:	42bc      	cmp	r4, r7
1a005ee0:	d072      	beq.n	1a005fc8 <_malloc_r+0x4e8>
1a005ee2:	68bc      	ldr	r4, [r7, #8]
1a005ee4:	6862      	ldr	r2, [r4, #4]
1a005ee6:	f022 0203 	bic.w	r2, r2, #3
1a005eea:	4295      	cmp	r5, r2
1a005eec:	eba2 0305 	sub.w	r3, r2, r5
1a005ef0:	d802      	bhi.n	1a005ef8 <_malloc_r+0x418>
1a005ef2:	2b0f      	cmp	r3, #15
1a005ef4:	f73f af51 	bgt.w	1a005d9a <_malloc_r+0x2ba>
1a005ef8:	4630      	mov	r0, r6
1a005efa:	f000 f995 	bl	1a006228 <__malloc_unlock>
1a005efe:	2400      	movs	r4, #0
1a005f00:	e616      	b.n	1a005b30 <_malloc_r+0x50>
1a005f02:	099a      	lsrs	r2, r3, #6
1a005f04:	f102 0139 	add.w	r1, r2, #57	; 0x39
1a005f08:	00c9      	lsls	r1, r1, #3
1a005f0a:	3238      	adds	r2, #56	; 0x38
1a005f0c:	e7c9      	b.n	1a005ea2 <_malloc_r+0x3c2>
1a005f0e:	f8d9 9000 	ldr.w	r9, [r9]
1a005f12:	4599      	cmp	r9, r3
1a005f14:	f040 8083 	bne.w	1a00601e <_malloc_r+0x53e>
1a005f18:	f010 0f03 	tst.w	r0, #3
1a005f1c:	f1a9 0308 	sub.w	r3, r9, #8
1a005f20:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
1a005f24:	d1f3      	bne.n	1a005f0e <_malloc_r+0x42e>
1a005f26:	687b      	ldr	r3, [r7, #4]
1a005f28:	ea23 0304 	bic.w	r3, r3, r4
1a005f2c:	607b      	str	r3, [r7, #4]
1a005f2e:	0064      	lsls	r4, r4, #1
1a005f30:	429c      	cmp	r4, r3
1a005f32:	f63f aeac 	bhi.w	1a005c8e <_malloc_r+0x1ae>
1a005f36:	b91c      	cbnz	r4, 1a005f40 <_malloc_r+0x460>
1a005f38:	e6a9      	b.n	1a005c8e <_malloc_r+0x1ae>
1a005f3a:	0064      	lsls	r4, r4, #1
1a005f3c:	f108 0804 	add.w	r8, r8, #4
1a005f40:	421c      	tst	r4, r3
1a005f42:	d0fa      	beq.n	1a005f3a <_malloc_r+0x45a>
1a005f44:	4640      	mov	r0, r8
1a005f46:	e65f      	b.n	1a005c08 <_malloc_r+0x128>
1a005f48:	f108 0810 	add.w	r8, r8, #16
1a005f4c:	e6bc      	b.n	1a005cc8 <_malloc_r+0x1e8>
1a005f4e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a005f52:	d826      	bhi.n	1a005fa2 <_malloc_r+0x4c2>
1a005f54:	0beb      	lsrs	r3, r5, #15
1a005f56:	f103 0078 	add.w	r0, r3, #120	; 0x78
1a005f5a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
1a005f5e:	00c3      	lsls	r3, r0, #3
1a005f60:	e603      	b.n	1a005b6a <_malloc_r+0x8a>
1a005f62:	687b      	ldr	r3, [r7, #4]
1a005f64:	1092      	asrs	r2, r2, #2
1a005f66:	f04f 0801 	mov.w	r8, #1
1a005f6a:	fa08 f202 	lsl.w	r2, r8, r2
1a005f6e:	4313      	orrs	r3, r2
1a005f70:	607b      	str	r3, [r7, #4]
1a005f72:	e7a8      	b.n	1a005ec6 <_malloc_r+0x3e6>
1a005f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
1a005f78:	e6ce      	b.n	1a005d18 <_malloc_r+0x238>
1a005f7a:	2a54      	cmp	r2, #84	; 0x54
1a005f7c:	d829      	bhi.n	1a005fd2 <_malloc_r+0x4f2>
1a005f7e:	0b1a      	lsrs	r2, r3, #12
1a005f80:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1a005f84:	00c9      	lsls	r1, r1, #3
1a005f86:	326e      	adds	r2, #110	; 0x6e
1a005f88:	e78b      	b.n	1a005ea2 <_malloc_r+0x3c2>
1a005f8a:	f3c0 010b 	ubfx	r1, r0, #0, #12
1a005f8e:	2900      	cmp	r1, #0
1a005f90:	f47f aeae 	bne.w	1a005cf0 <_malloc_r+0x210>
1a005f94:	eb09 0208 	add.w	r2, r9, r8
1a005f98:	68b9      	ldr	r1, [r7, #8]
1a005f9a:	f042 0201 	orr.w	r2, r2, #1
1a005f9e:	604a      	str	r2, [r1, #4]
1a005fa0:	e6ec      	b.n	1a005d7c <_malloc_r+0x29c>
1a005fa2:	f240 5254 	movw	r2, #1364	; 0x554
1a005fa6:	4293      	cmp	r3, r2
1a005fa8:	d81c      	bhi.n	1a005fe4 <_malloc_r+0x504>
1a005faa:	0cab      	lsrs	r3, r5, #18
1a005fac:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1a005fb0:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
1a005fb4:	00c3      	lsls	r3, r0, #3
1a005fb6:	e5d8      	b.n	1a005b6a <_malloc_r+0x8a>
1a005fb8:	2301      	movs	r3, #1
1a005fba:	f8cb 3004 	str.w	r3, [fp, #4]
1a005fbe:	e79b      	b.n	1a005ef8 <_malloc_r+0x418>
1a005fc0:	2101      	movs	r1, #1
1a005fc2:	f04f 0800 	mov.w	r8, #0
1a005fc6:	e6ba      	b.n	1a005d3e <_malloc_r+0x25e>
1a005fc8:	4a16      	ldr	r2, [pc, #88]	; (1a006024 <_malloc_r+0x544>)
1a005fca:	6813      	ldr	r3, [r2, #0]
1a005fcc:	4443      	add	r3, r8
1a005fce:	6013      	str	r3, [r2, #0]
1a005fd0:	e68e      	b.n	1a005cf0 <_malloc_r+0x210>
1a005fd2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a005fd6:	d814      	bhi.n	1a006002 <_malloc_r+0x522>
1a005fd8:	0bda      	lsrs	r2, r3, #15
1a005fda:	f102 0178 	add.w	r1, r2, #120	; 0x78
1a005fde:	00c9      	lsls	r1, r1, #3
1a005fe0:	3277      	adds	r2, #119	; 0x77
1a005fe2:	e75e      	b.n	1a005ea2 <_malloc_r+0x3c2>
1a005fe4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1a005fe8:	207f      	movs	r0, #127	; 0x7f
1a005fea:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
1a005fee:	e5bc      	b.n	1a005b6a <_malloc_r+0x8a>
1a005ff0:	f104 0108 	add.w	r1, r4, #8
1a005ff4:	4630      	mov	r0, r6
1a005ff6:	9201      	str	r2, [sp, #4]
1a005ff8:	f7ff fc1a 	bl	1a005830 <_free_r>
1a005ffc:	9a01      	ldr	r2, [sp, #4]
1a005ffe:	6813      	ldr	r3, [r2, #0]
1a006000:	e6bc      	b.n	1a005d7c <_malloc_r+0x29c>
1a006002:	f240 5154 	movw	r1, #1364	; 0x554
1a006006:	428a      	cmp	r2, r1
1a006008:	d805      	bhi.n	1a006016 <_malloc_r+0x536>
1a00600a:	0c9a      	lsrs	r2, r3, #18
1a00600c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1a006010:	00c9      	lsls	r1, r1, #3
1a006012:	327c      	adds	r2, #124	; 0x7c
1a006014:	e745      	b.n	1a005ea2 <_malloc_r+0x3c2>
1a006016:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1a00601a:	227e      	movs	r2, #126	; 0x7e
1a00601c:	e741      	b.n	1a005ea2 <_malloc_r+0x3c2>
1a00601e:	687b      	ldr	r3, [r7, #4]
1a006020:	e785      	b.n	1a005f2e <_malloc_r+0x44e>
1a006022:	bf00      	nop
1a006024:	100078fc 	.word	0x100078fc

1a006028 <__ascii_mbtowc>:
1a006028:	b082      	sub	sp, #8
1a00602a:	b149      	cbz	r1, 1a006040 <__ascii_mbtowc+0x18>
1a00602c:	b15a      	cbz	r2, 1a006046 <__ascii_mbtowc+0x1e>
1a00602e:	b16b      	cbz	r3, 1a00604c <__ascii_mbtowc+0x24>
1a006030:	7813      	ldrb	r3, [r2, #0]
1a006032:	600b      	str	r3, [r1, #0]
1a006034:	7812      	ldrb	r2, [r2, #0]
1a006036:	1c10      	adds	r0, r2, #0
1a006038:	bf18      	it	ne
1a00603a:	2001      	movne	r0, #1
1a00603c:	b002      	add	sp, #8
1a00603e:	4770      	bx	lr
1a006040:	a901      	add	r1, sp, #4
1a006042:	2a00      	cmp	r2, #0
1a006044:	d1f3      	bne.n	1a00602e <__ascii_mbtowc+0x6>
1a006046:	4610      	mov	r0, r2
1a006048:	b002      	add	sp, #8
1a00604a:	4770      	bx	lr
1a00604c:	f06f 0001 	mvn.w	r0, #1
1a006050:	e7f4      	b.n	1a00603c <__ascii_mbtowc+0x14>
1a006052:	bf00      	nop

1a006054 <memcpy>:
1a006054:	4684      	mov	ip, r0
1a006056:	ea41 0300 	orr.w	r3, r1, r0
1a00605a:	f013 0303 	ands.w	r3, r3, #3
1a00605e:	d16d      	bne.n	1a00613c <memcpy+0xe8>
1a006060:	3a40      	subs	r2, #64	; 0x40
1a006062:	d341      	bcc.n	1a0060e8 <memcpy+0x94>
1a006064:	f851 3b04 	ldr.w	r3, [r1], #4
1a006068:	f840 3b04 	str.w	r3, [r0], #4
1a00606c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006070:	f840 3b04 	str.w	r3, [r0], #4
1a006074:	f851 3b04 	ldr.w	r3, [r1], #4
1a006078:	f840 3b04 	str.w	r3, [r0], #4
1a00607c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006080:	f840 3b04 	str.w	r3, [r0], #4
1a006084:	f851 3b04 	ldr.w	r3, [r1], #4
1a006088:	f840 3b04 	str.w	r3, [r0], #4
1a00608c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006090:	f840 3b04 	str.w	r3, [r0], #4
1a006094:	f851 3b04 	ldr.w	r3, [r1], #4
1a006098:	f840 3b04 	str.w	r3, [r0], #4
1a00609c:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060a0:	f840 3b04 	str.w	r3, [r0], #4
1a0060a4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060a8:	f840 3b04 	str.w	r3, [r0], #4
1a0060ac:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060b0:	f840 3b04 	str.w	r3, [r0], #4
1a0060b4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060b8:	f840 3b04 	str.w	r3, [r0], #4
1a0060bc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060c0:	f840 3b04 	str.w	r3, [r0], #4
1a0060c4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060c8:	f840 3b04 	str.w	r3, [r0], #4
1a0060cc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060d0:	f840 3b04 	str.w	r3, [r0], #4
1a0060d4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060d8:	f840 3b04 	str.w	r3, [r0], #4
1a0060dc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060e0:	f840 3b04 	str.w	r3, [r0], #4
1a0060e4:	3a40      	subs	r2, #64	; 0x40
1a0060e6:	d2bd      	bcs.n	1a006064 <memcpy+0x10>
1a0060e8:	3230      	adds	r2, #48	; 0x30
1a0060ea:	d311      	bcc.n	1a006110 <memcpy+0xbc>
1a0060ec:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060f0:	f840 3b04 	str.w	r3, [r0], #4
1a0060f4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0060f8:	f840 3b04 	str.w	r3, [r0], #4
1a0060fc:	f851 3b04 	ldr.w	r3, [r1], #4
1a006100:	f840 3b04 	str.w	r3, [r0], #4
1a006104:	f851 3b04 	ldr.w	r3, [r1], #4
1a006108:	f840 3b04 	str.w	r3, [r0], #4
1a00610c:	3a10      	subs	r2, #16
1a00610e:	d2ed      	bcs.n	1a0060ec <memcpy+0x98>
1a006110:	320c      	adds	r2, #12
1a006112:	d305      	bcc.n	1a006120 <memcpy+0xcc>
1a006114:	f851 3b04 	ldr.w	r3, [r1], #4
1a006118:	f840 3b04 	str.w	r3, [r0], #4
1a00611c:	3a04      	subs	r2, #4
1a00611e:	d2f9      	bcs.n	1a006114 <memcpy+0xc0>
1a006120:	3204      	adds	r2, #4
1a006122:	d008      	beq.n	1a006136 <memcpy+0xe2>
1a006124:	07d2      	lsls	r2, r2, #31
1a006126:	bf1c      	itt	ne
1a006128:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a00612c:	f800 3b01 	strbne.w	r3, [r0], #1
1a006130:	d301      	bcc.n	1a006136 <memcpy+0xe2>
1a006132:	880b      	ldrh	r3, [r1, #0]
1a006134:	8003      	strh	r3, [r0, #0]
1a006136:	4660      	mov	r0, ip
1a006138:	4770      	bx	lr
1a00613a:	bf00      	nop
1a00613c:	2a08      	cmp	r2, #8
1a00613e:	d313      	bcc.n	1a006168 <memcpy+0x114>
1a006140:	078b      	lsls	r3, r1, #30
1a006142:	d08d      	beq.n	1a006060 <memcpy+0xc>
1a006144:	f010 0303 	ands.w	r3, r0, #3
1a006148:	d08a      	beq.n	1a006060 <memcpy+0xc>
1a00614a:	f1c3 0304 	rsb	r3, r3, #4
1a00614e:	1ad2      	subs	r2, r2, r3
1a006150:	07db      	lsls	r3, r3, #31
1a006152:	bf1c      	itt	ne
1a006154:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a006158:	f800 3b01 	strbne.w	r3, [r0], #1
1a00615c:	d380      	bcc.n	1a006060 <memcpy+0xc>
1a00615e:	f831 3b02 	ldrh.w	r3, [r1], #2
1a006162:	f820 3b02 	strh.w	r3, [r0], #2
1a006166:	e77b      	b.n	1a006060 <memcpy+0xc>
1a006168:	3a04      	subs	r2, #4
1a00616a:	d3d9      	bcc.n	1a006120 <memcpy+0xcc>
1a00616c:	3a01      	subs	r2, #1
1a00616e:	f811 3b01 	ldrb.w	r3, [r1], #1
1a006172:	f800 3b01 	strb.w	r3, [r0], #1
1a006176:	d2f9      	bcs.n	1a00616c <memcpy+0x118>
1a006178:	780b      	ldrb	r3, [r1, #0]
1a00617a:	7003      	strb	r3, [r0, #0]
1a00617c:	784b      	ldrb	r3, [r1, #1]
1a00617e:	7043      	strb	r3, [r0, #1]
1a006180:	788b      	ldrb	r3, [r1, #2]
1a006182:	7083      	strb	r3, [r0, #2]
1a006184:	4660      	mov	r0, ip
1a006186:	4770      	bx	lr

1a006188 <memset>:
1a006188:	b4f0      	push	{r4, r5, r6, r7}
1a00618a:	0786      	lsls	r6, r0, #30
1a00618c:	d043      	beq.n	1a006216 <memset+0x8e>
1a00618e:	1e54      	subs	r4, r2, #1
1a006190:	2a00      	cmp	r2, #0
1a006192:	d03e      	beq.n	1a006212 <memset+0x8a>
1a006194:	b2ca      	uxtb	r2, r1
1a006196:	4603      	mov	r3, r0
1a006198:	e002      	b.n	1a0061a0 <memset+0x18>
1a00619a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a00619e:	d338      	bcc.n	1a006212 <memset+0x8a>
1a0061a0:	f803 2b01 	strb.w	r2, [r3], #1
1a0061a4:	079d      	lsls	r5, r3, #30
1a0061a6:	d1f8      	bne.n	1a00619a <memset+0x12>
1a0061a8:	2c03      	cmp	r4, #3
1a0061aa:	d92b      	bls.n	1a006204 <memset+0x7c>
1a0061ac:	b2cd      	uxtb	r5, r1
1a0061ae:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a0061b2:	2c0f      	cmp	r4, #15
1a0061b4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a0061b8:	d916      	bls.n	1a0061e8 <memset+0x60>
1a0061ba:	f1a4 0710 	sub.w	r7, r4, #16
1a0061be:	093f      	lsrs	r7, r7, #4
1a0061c0:	f103 0620 	add.w	r6, r3, #32
1a0061c4:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a0061c8:	f103 0210 	add.w	r2, r3, #16
1a0061cc:	e942 5504 	strd	r5, r5, [r2, #-16]
1a0061d0:	e942 5502 	strd	r5, r5, [r2, #-8]
1a0061d4:	3210      	adds	r2, #16
1a0061d6:	42b2      	cmp	r2, r6
1a0061d8:	d1f8      	bne.n	1a0061cc <memset+0x44>
1a0061da:	f004 040f 	and.w	r4, r4, #15
1a0061de:	3701      	adds	r7, #1
1a0061e0:	2c03      	cmp	r4, #3
1a0061e2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
1a0061e6:	d90d      	bls.n	1a006204 <memset+0x7c>
1a0061e8:	461e      	mov	r6, r3
1a0061ea:	4622      	mov	r2, r4
1a0061ec:	3a04      	subs	r2, #4
1a0061ee:	2a03      	cmp	r2, #3
1a0061f0:	f846 5b04 	str.w	r5, [r6], #4
1a0061f4:	d8fa      	bhi.n	1a0061ec <memset+0x64>
1a0061f6:	1f22      	subs	r2, r4, #4
1a0061f8:	f022 0203 	bic.w	r2, r2, #3
1a0061fc:	3204      	adds	r2, #4
1a0061fe:	4413      	add	r3, r2
1a006200:	f004 0403 	and.w	r4, r4, #3
1a006204:	b12c      	cbz	r4, 1a006212 <memset+0x8a>
1a006206:	b2c9      	uxtb	r1, r1
1a006208:	441c      	add	r4, r3
1a00620a:	f803 1b01 	strb.w	r1, [r3], #1
1a00620e:	429c      	cmp	r4, r3
1a006210:	d1fb      	bne.n	1a00620a <memset+0x82>
1a006212:	bcf0      	pop	{r4, r5, r6, r7}
1a006214:	4770      	bx	lr
1a006216:	4614      	mov	r4, r2
1a006218:	4603      	mov	r3, r0
1a00621a:	e7c5      	b.n	1a0061a8 <memset+0x20>

1a00621c <__malloc_lock>:
1a00621c:	4801      	ldr	r0, [pc, #4]	; (1a006224 <__malloc_lock+0x8>)
1a00621e:	f7ff bc5b 	b.w	1a005ad8 <__retarget_lock_acquire_recursive>
1a006222:	bf00      	nop
1a006224:	10007a14 	.word	0x10007a14

1a006228 <__malloc_unlock>:
1a006228:	4801      	ldr	r0, [pc, #4]	; (1a006230 <__malloc_unlock+0x8>)
1a00622a:	f7ff bc57 	b.w	1a005adc <__retarget_lock_release_recursive>
1a00622e:	bf00      	nop
1a006230:	10007a14 	.word	0x10007a14

1a006234 <printf>:
1a006234:	b40f      	push	{r0, r1, r2, r3}
1a006236:	b500      	push	{lr}
1a006238:	4907      	ldr	r1, [pc, #28]	; (1a006258 <printf+0x24>)
1a00623a:	b083      	sub	sp, #12
1a00623c:	ab04      	add	r3, sp, #16
1a00623e:	6808      	ldr	r0, [r1, #0]
1a006240:	f853 2b04 	ldr.w	r2, [r3], #4
1a006244:	6881      	ldr	r1, [r0, #8]
1a006246:	9301      	str	r3, [sp, #4]
1a006248:	f000 f92a 	bl	1a0064a0 <_vfprintf_r>
1a00624c:	b003      	add	sp, #12
1a00624e:	f85d eb04 	ldr.w	lr, [sp], #4
1a006252:	b004      	add	sp, #16
1a006254:	4770      	bx	lr
1a006256:	bf00      	nop
1a006258:	100000cc 	.word	0x100000cc

1a00625c <_puts_r>:
1a00625c:	b570      	push	{r4, r5, r6, lr}
1a00625e:	4605      	mov	r5, r0
1a006260:	b088      	sub	sp, #32
1a006262:	4608      	mov	r0, r1
1a006264:	460c      	mov	r4, r1
1a006266:	f000 f8ab 	bl	1a0063c0 <strlen>
1a00626a:	4a22      	ldr	r2, [pc, #136]	; (1a0062f4 <_puts_r+0x98>)
1a00626c:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a00626e:	9404      	str	r4, [sp, #16]
1a006270:	2601      	movs	r6, #1
1a006272:	1c44      	adds	r4, r0, #1
1a006274:	a904      	add	r1, sp, #16
1a006276:	9206      	str	r2, [sp, #24]
1a006278:	2202      	movs	r2, #2
1a00627a:	9403      	str	r4, [sp, #12]
1a00627c:	9005      	str	r0, [sp, #20]
1a00627e:	68ac      	ldr	r4, [r5, #8]
1a006280:	9607      	str	r6, [sp, #28]
1a006282:	e9cd 1201 	strd	r1, r2, [sp, #4]
1a006286:	b31b      	cbz	r3, 1a0062d0 <_puts_r+0x74>
1a006288:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a00628a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00628e:	07ce      	lsls	r6, r1, #31
1a006290:	b29a      	uxth	r2, r3
1a006292:	d401      	bmi.n	1a006298 <_puts_r+0x3c>
1a006294:	0590      	lsls	r0, r2, #22
1a006296:	d525      	bpl.n	1a0062e4 <_puts_r+0x88>
1a006298:	0491      	lsls	r1, r2, #18
1a00629a:	d406      	bmi.n	1a0062aa <_puts_r+0x4e>
1a00629c:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a00629e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a0062a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
1a0062a6:	81a3      	strh	r3, [r4, #12]
1a0062a8:	6662      	str	r2, [r4, #100]	; 0x64
1a0062aa:	4628      	mov	r0, r5
1a0062ac:	aa01      	add	r2, sp, #4
1a0062ae:	4621      	mov	r1, r4
1a0062b0:	f002 fe8e 	bl	1a008fd0 <__sfvwrite_r>
1a0062b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0062b6:	2800      	cmp	r0, #0
1a0062b8:	bf0c      	ite	eq
1a0062ba:	250a      	moveq	r5, #10
1a0062bc:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a0062c0:	07da      	lsls	r2, r3, #31
1a0062c2:	d402      	bmi.n	1a0062ca <_puts_r+0x6e>
1a0062c4:	89a3      	ldrh	r3, [r4, #12]
1a0062c6:	059b      	lsls	r3, r3, #22
1a0062c8:	d506      	bpl.n	1a0062d8 <_puts_r+0x7c>
1a0062ca:	4628      	mov	r0, r5
1a0062cc:	b008      	add	sp, #32
1a0062ce:	bd70      	pop	{r4, r5, r6, pc}
1a0062d0:	4628      	mov	r0, r5
1a0062d2:	f7ff fa25 	bl	1a005720 <__sinit>
1a0062d6:	e7d7      	b.n	1a006288 <_puts_r+0x2c>
1a0062d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0062da:	f7ff fbff 	bl	1a005adc <__retarget_lock_release_recursive>
1a0062de:	4628      	mov	r0, r5
1a0062e0:	b008      	add	sp, #32
1a0062e2:	bd70      	pop	{r4, r5, r6, pc}
1a0062e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0062e6:	f7ff fbf7 	bl	1a005ad8 <__retarget_lock_acquire_recursive>
1a0062ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0062ee:	b29a      	uxth	r2, r3
1a0062f0:	e7d2      	b.n	1a006298 <_puts_r+0x3c>
1a0062f2:	bf00      	nop
1a0062f4:	1a00a308 	.word	0x1a00a308

1a0062f8 <puts>:
1a0062f8:	4b02      	ldr	r3, [pc, #8]	; (1a006304 <puts+0xc>)
1a0062fa:	4601      	mov	r1, r0
1a0062fc:	6818      	ldr	r0, [r3, #0]
1a0062fe:	f7ff bfad 	b.w	1a00625c <_puts_r>
1a006302:	bf00      	nop
1a006304:	100000cc 	.word	0x100000cc

1a006308 <__sread>:
1a006308:	b510      	push	{r4, lr}
1a00630a:	460c      	mov	r4, r1
1a00630c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006310:	f7fa ffb0 	bl	1a001274 <_read_r>
1a006314:	2800      	cmp	r0, #0
1a006316:	db03      	blt.n	1a006320 <__sread+0x18>
1a006318:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a00631a:	4403      	add	r3, r0
1a00631c:	6523      	str	r3, [r4, #80]	; 0x50
1a00631e:	bd10      	pop	{r4, pc}
1a006320:	89a3      	ldrh	r3, [r4, #12]
1a006322:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a006326:	81a3      	strh	r3, [r4, #12]
1a006328:	bd10      	pop	{r4, pc}
1a00632a:	bf00      	nop

1a00632c <__swrite>:
1a00632c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006330:	4616      	mov	r6, r2
1a006332:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1a006336:	461f      	mov	r7, r3
1a006338:	05d3      	lsls	r3, r2, #23
1a00633a:	460c      	mov	r4, r1
1a00633c:	4605      	mov	r5, r0
1a00633e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006342:	d507      	bpl.n	1a006354 <__swrite+0x28>
1a006344:	2200      	movs	r2, #0
1a006346:	2302      	movs	r3, #2
1a006348:	f7fa ff8f 	bl	1a00126a <_lseek_r>
1a00634c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a006350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a006354:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a006358:	81a2      	strh	r2, [r4, #12]
1a00635a:	463b      	mov	r3, r7
1a00635c:	4632      	mov	r2, r6
1a00635e:	4628      	mov	r0, r5
1a006360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a006364:	f7fa bfad 	b.w	1a0012c2 <_write_r>

1a006368 <__sseek>:
1a006368:	b510      	push	{r4, lr}
1a00636a:	460c      	mov	r4, r1
1a00636c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006370:	f7fa ff7b 	bl	1a00126a <_lseek_r>
1a006374:	89a3      	ldrh	r3, [r4, #12]
1a006376:	1c42      	adds	r2, r0, #1
1a006378:	bf0e      	itee	eq
1a00637a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a00637e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a006382:	6520      	strne	r0, [r4, #80]	; 0x50
1a006384:	81a3      	strh	r3, [r4, #12]
1a006386:	bd10      	pop	{r4, pc}

1a006388 <__sclose>:
1a006388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00638c:	f7fa bf5a 	b.w	1a001244 <_close_r>
1a006390:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a006394:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a006398:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00639c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0063a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0063a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0063a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0063ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0063b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0063b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0063b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0063bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0063c0 <strlen>:
1a0063c0:	f890 f000 	pld	[r0]
1a0063c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a0063c8:	f020 0107 	bic.w	r1, r0, #7
1a0063cc:	f06f 0c00 	mvn.w	ip, #0
1a0063d0:	f010 0407 	ands.w	r4, r0, #7
1a0063d4:	f891 f020 	pld	[r1, #32]
1a0063d8:	f040 8049 	bne.w	1a00646e <strlen+0xae>
1a0063dc:	f04f 0400 	mov.w	r4, #0
1a0063e0:	f06f 0007 	mvn.w	r0, #7
1a0063e4:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0063e8:	f891 f040 	pld	[r1, #64]	; 0x40
1a0063ec:	f100 0008 	add.w	r0, r0, #8
1a0063f0:	fa82 f24c 	uadd8	r2, r2, ip
1a0063f4:	faa4 f28c 	sel	r2, r4, ip
1a0063f8:	fa83 f34c 	uadd8	r3, r3, ip
1a0063fc:	faa2 f38c 	sel	r3, r2, ip
1a006400:	bb4b      	cbnz	r3, 1a006456 <strlen+0x96>
1a006402:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a006406:	fa82 f24c 	uadd8	r2, r2, ip
1a00640a:	f100 0008 	add.w	r0, r0, #8
1a00640e:	faa4 f28c 	sel	r2, r4, ip
1a006412:	fa83 f34c 	uadd8	r3, r3, ip
1a006416:	faa2 f38c 	sel	r3, r2, ip
1a00641a:	b9e3      	cbnz	r3, 1a006456 <strlen+0x96>
1a00641c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a006420:	fa82 f24c 	uadd8	r2, r2, ip
1a006424:	f100 0008 	add.w	r0, r0, #8
1a006428:	faa4 f28c 	sel	r2, r4, ip
1a00642c:	fa83 f34c 	uadd8	r3, r3, ip
1a006430:	faa2 f38c 	sel	r3, r2, ip
1a006434:	b97b      	cbnz	r3, 1a006456 <strlen+0x96>
1a006436:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a00643a:	f101 0120 	add.w	r1, r1, #32
1a00643e:	fa82 f24c 	uadd8	r2, r2, ip
1a006442:	f100 0008 	add.w	r0, r0, #8
1a006446:	faa4 f28c 	sel	r2, r4, ip
1a00644a:	fa83 f34c 	uadd8	r3, r3, ip
1a00644e:	faa2 f38c 	sel	r3, r2, ip
1a006452:	2b00      	cmp	r3, #0
1a006454:	d0c6      	beq.n	1a0063e4 <strlen+0x24>
1a006456:	2a00      	cmp	r2, #0
1a006458:	bf04      	itt	eq
1a00645a:	3004      	addeq	r0, #4
1a00645c:	461a      	moveq	r2, r3
1a00645e:	ba12      	rev	r2, r2
1a006460:	fab2 f282 	clz	r2, r2
1a006464:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a006468:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a00646c:	4770      	bx	lr
1a00646e:	e9d1 2300 	ldrd	r2, r3, [r1]
1a006472:	f004 0503 	and.w	r5, r4, #3
1a006476:	f1c4 0000 	rsb	r0, r4, #0
1a00647a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a00647e:	f014 0f04 	tst.w	r4, #4
1a006482:	f891 f040 	pld	[r1, #64]	; 0x40
1a006486:	fa0c f505 	lsl.w	r5, ip, r5
1a00648a:	ea62 0205 	orn	r2, r2, r5
1a00648e:	bf1c      	itt	ne
1a006490:	ea63 0305 	ornne	r3, r3, r5
1a006494:	4662      	movne	r2, ip
1a006496:	f04f 0400 	mov.w	r4, #0
1a00649a:	e7a9      	b.n	1a0063f0 <strlen+0x30>
1a00649c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0064a0 <_vfprintf_r>:
1a0064a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0064a4:	b0d7      	sub	sp, #348	; 0x15c
1a0064a6:	461c      	mov	r4, r3
1a0064a8:	4689      	mov	r9, r1
1a0064aa:	4617      	mov	r7, r2
1a0064ac:	4605      	mov	r5, r0
1a0064ae:	9003      	str	r0, [sp, #12]
1a0064b0:	f002 ff0c 	bl	1a0092cc <_localeconv_r>
1a0064b4:	6803      	ldr	r3, [r0, #0]
1a0064b6:	9316      	str	r3, [sp, #88]	; 0x58
1a0064b8:	4618      	mov	r0, r3
1a0064ba:	f7ff ff81 	bl	1a0063c0 <strlen>
1a0064be:	9408      	str	r4, [sp, #32]
1a0064c0:	9015      	str	r0, [sp, #84]	; 0x54
1a0064c2:	b11d      	cbz	r5, 1a0064cc <_vfprintf_r+0x2c>
1a0064c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a0064c6:	2b00      	cmp	r3, #0
1a0064c8:	f000 8107 	beq.w	1a0066da <_vfprintf_r+0x23a>
1a0064cc:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a0064d0:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a0064d4:	07c8      	lsls	r0, r1, #31
1a0064d6:	b293      	uxth	r3, r2
1a0064d8:	d402      	bmi.n	1a0064e0 <_vfprintf_r+0x40>
1a0064da:	0599      	lsls	r1, r3, #22
1a0064dc:	f140 811f 	bpl.w	1a00671e <_vfprintf_r+0x27e>
1a0064e0:	049e      	lsls	r6, r3, #18
1a0064e2:	d40a      	bmi.n	1a0064fa <_vfprintf_r+0x5a>
1a0064e4:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a0064e8:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
1a0064ec:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a0064f0:	f8a9 300c 	strh.w	r3, [r9, #12]
1a0064f4:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
1a0064f8:	b29b      	uxth	r3, r3
1a0064fa:	071d      	lsls	r5, r3, #28
1a0064fc:	f140 80b2 	bpl.w	1a006664 <_vfprintf_r+0x1c4>
1a006500:	f8d9 2010 	ldr.w	r2, [r9, #16]
1a006504:	2a00      	cmp	r2, #0
1a006506:	f000 80ad 	beq.w	1a006664 <_vfprintf_r+0x1c4>
1a00650a:	f003 021a 	and.w	r2, r3, #26
1a00650e:	2a0a      	cmp	r2, #10
1a006510:	f000 80c9 	beq.w	1a0066a6 <_vfprintf_r+0x206>
1a006514:	2300      	movs	r3, #0
1a006516:	ed9f 7b86 	vldr	d7, [pc, #536]	; 1a006730 <_vfprintf_r+0x290>
1a00651a:	9310      	str	r3, [sp, #64]	; 0x40
1a00651c:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
1a006520:	9317      	str	r3, [sp, #92]	; 0x5c
1a006522:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
1a006526:	931b      	str	r3, [sp, #108]	; 0x6c
1a006528:	9318      	str	r3, [sp, #96]	; 0x60
1a00652a:	9305      	str	r3, [sp, #20]
1a00652c:	ab2d      	add	r3, sp, #180	; 0xb4
1a00652e:	932a      	str	r3, [sp, #168]	; 0xa8
1a006530:	469b      	mov	fp, r3
1a006532:	783b      	ldrb	r3, [r7, #0]
1a006534:	f8cd 901c 	str.w	r9, [sp, #28]
1a006538:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
1a00653c:	2b00      	cmp	r3, #0
1a00653e:	f000 8259 	beq.w	1a0069f4 <_vfprintf_r+0x554>
1a006542:	2b25      	cmp	r3, #37	; 0x25
1a006544:	463c      	mov	r4, r7
1a006546:	d102      	bne.n	1a00654e <_vfprintf_r+0xae>
1a006548:	e01d      	b.n	1a006586 <_vfprintf_r+0xe6>
1a00654a:	2b25      	cmp	r3, #37	; 0x25
1a00654c:	d003      	beq.n	1a006556 <_vfprintf_r+0xb6>
1a00654e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
1a006552:	2b00      	cmp	r3, #0
1a006554:	d1f9      	bne.n	1a00654a <_vfprintf_r+0xaa>
1a006556:	1be5      	subs	r5, r4, r7
1a006558:	b18d      	cbz	r5, 1a00657e <_vfprintf_r+0xde>
1a00655a:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
1a00655e:	3301      	adds	r3, #1
1a006560:	442a      	add	r2, r5
1a006562:	2b07      	cmp	r3, #7
1a006564:	f8cb 7000 	str.w	r7, [fp]
1a006568:	f8cb 5004 	str.w	r5, [fp, #4]
1a00656c:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
1a006570:	f300 80ca 	bgt.w	1a006708 <_vfprintf_r+0x268>
1a006574:	f10b 0b08 	add.w	fp, fp, #8
1a006578:	9b05      	ldr	r3, [sp, #20]
1a00657a:	442b      	add	r3, r5
1a00657c:	9305      	str	r3, [sp, #20]
1a00657e:	7823      	ldrb	r3, [r4, #0]
1a006580:	2b00      	cmp	r3, #0
1a006582:	f000 8237 	beq.w	1a0069f4 <_vfprintf_r+0x554>
1a006586:	2300      	movs	r3, #0
1a006588:	7866      	ldrb	r6, [r4, #1]
1a00658a:	9306      	str	r3, [sp, #24]
1a00658c:	4698      	mov	r8, r3
1a00658e:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
1a006592:	f104 0a01 	add.w	sl, r4, #1
1a006596:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
1a00659a:	252b      	movs	r5, #43	; 0x2b
1a00659c:	f10a 0a01 	add.w	sl, sl, #1
1a0065a0:	f1a6 0320 	sub.w	r3, r6, #32
1a0065a4:	2b5a      	cmp	r3, #90	; 0x5a
1a0065a6:	f200 842a 	bhi.w	1a006dfe <_vfprintf_r+0x95e>
1a0065aa:	e8df f013 	tbh	[pc, r3, lsl #1]
1a0065ae:	03aa      	.short	0x03aa
1a0065b0:	04280428 	.word	0x04280428
1a0065b4:	0428029c 	.word	0x0428029c
1a0065b8:	04280428 	.word	0x04280428
1a0065bc:	042802a7 	.word	0x042802a7
1a0065c0:	02c60428 	.word	0x02c60428
1a0065c4:	042802d2 	.word	0x042802d2
1a0065c8:	02dc02d7 	.word	0x02dc02d7
1a0065cc:	02f60428 	.word	0x02f60428
1a0065d0:	026d026d 	.word	0x026d026d
1a0065d4:	026d026d 	.word	0x026d026d
1a0065d8:	026d026d 	.word	0x026d026d
1a0065dc:	026d026d 	.word	0x026d026d
1a0065e0:	0428026d 	.word	0x0428026d
1a0065e4:	04280428 	.word	0x04280428
1a0065e8:	04280428 	.word	0x04280428
1a0065ec:	04280428 	.word	0x04280428
1a0065f0:	042802fb 	.word	0x042802fb
1a0065f4:	03f3033c 	.word	0x03f3033c
1a0065f8:	02fb02fb 	.word	0x02fb02fb
1a0065fc:	042802fb 	.word	0x042802fb
1a006600:	04280428 	.word	0x04280428
1a006604:	03ee0428 	.word	0x03ee0428
1a006608:	04280428 	.word	0x04280428
1a00660c:	0428009a 	.word	0x0428009a
1a006610:	04280428 	.word	0x04280428
1a006614:	04280350 	.word	0x04280350
1a006618:	04280379 	.word	0x04280379
1a00661c:	03900428 	.word	0x03900428
1a006620:	04280428 	.word	0x04280428
1a006624:	04280428 	.word	0x04280428
1a006628:	04280428 	.word	0x04280428
1a00662c:	04280428 	.word	0x04280428
1a006630:	042802fb 	.word	0x042802fb
1a006634:	00c5033c 	.word	0x00c5033c
1a006638:	02fb02fb 	.word	0x02fb02fb
1a00663c:	03d102fb 	.word	0x03d102fb
1a006640:	007000c5 	.word	0x007000c5
1a006644:	03b50428 	.word	0x03b50428
1a006648:	03c20428 	.word	0x03c20428
1a00664c:	03de009c 	.word	0x03de009c
1a006650:	04280070 	.word	0x04280070
1a006654:	00720350 	.word	0x00720350
1a006658:	0428022c 	.word	0x0428022c
1a00665c:	027c0428 	.word	0x027c0428
1a006660:	00720428 	.word	0x00720428
1a006664:	4649      	mov	r1, r9
1a006666:	9803      	ldr	r0, [sp, #12]
1a006668:	f001 fca8 	bl	1a007fbc <__swsetup_r>
1a00666c:	b1a0      	cbz	r0, 1a006698 <_vfprintf_r+0x1f8>
1a00666e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
1a006672:	07d8      	lsls	r0, r3, #31
1a006674:	d404      	bmi.n	1a006680 <_vfprintf_r+0x1e0>
1a006676:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00667a:	0599      	lsls	r1, r3, #22
1a00667c:	f140 83b7 	bpl.w	1a006dee <_vfprintf_r+0x94e>
1a006680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a006684:	9305      	str	r3, [sp, #20]
1a006686:	9805      	ldr	r0, [sp, #20]
1a006688:	b057      	add	sp, #348	; 0x15c
1a00668a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00668e:	f048 0820 	orr.w	r8, r8, #32
1a006692:	f89a 6000 	ldrb.w	r6, [sl]
1a006696:	e781      	b.n	1a00659c <_vfprintf_r+0xfc>
1a006698:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00669c:	f003 021a 	and.w	r2, r3, #26
1a0066a0:	2a0a      	cmp	r2, #10
1a0066a2:	f47f af37 	bne.w	1a006514 <_vfprintf_r+0x74>
1a0066a6:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
1a0066aa:	2a00      	cmp	r2, #0
1a0066ac:	f6ff af32 	blt.w	1a006514 <_vfprintf_r+0x74>
1a0066b0:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a0066b4:	07d2      	lsls	r2, r2, #31
1a0066b6:	d405      	bmi.n	1a0066c4 <_vfprintf_r+0x224>
1a0066b8:	059b      	lsls	r3, r3, #22
1a0066ba:	d403      	bmi.n	1a0066c4 <_vfprintf_r+0x224>
1a0066bc:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a0066c0:	f7ff fa0c 	bl	1a005adc <__retarget_lock_release_recursive>
1a0066c4:	4623      	mov	r3, r4
1a0066c6:	463a      	mov	r2, r7
1a0066c8:	4649      	mov	r1, r9
1a0066ca:	9803      	ldr	r0, [sp, #12]
1a0066cc:	f001 fc26 	bl	1a007f1c <__sbprintf>
1a0066d0:	9005      	str	r0, [sp, #20]
1a0066d2:	9805      	ldr	r0, [sp, #20]
1a0066d4:	b057      	add	sp, #348	; 0x15c
1a0066d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0066da:	9803      	ldr	r0, [sp, #12]
1a0066dc:	f7ff f820 	bl	1a005720 <__sinit>
1a0066e0:	e6f4      	b.n	1a0064cc <_vfprintf_r+0x2c>
1a0066e2:	f048 0810 	orr.w	r8, r8, #16
1a0066e6:	f018 0f20 	tst.w	r8, #32
1a0066ea:	f000 836c 	beq.w	1a006dc6 <_vfprintf_r+0x926>
1a0066ee:	9c08      	ldr	r4, [sp, #32]
1a0066f0:	3407      	adds	r4, #7
1a0066f2:	f024 0307 	bic.w	r3, r4, #7
1a0066f6:	e9d3 4500 	ldrd	r4, r5, [r3]
1a0066fa:	f103 0208 	add.w	r2, r3, #8
1a0066fe:	9208      	str	r2, [sp, #32]
1a006700:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
1a006704:	2200      	movs	r2, #0
1a006706:	e18c      	b.n	1a006a22 <_vfprintf_r+0x582>
1a006708:	aa2a      	add	r2, sp, #168	; 0xa8
1a00670a:	9907      	ldr	r1, [sp, #28]
1a00670c:	9803      	ldr	r0, [sp, #12]
1a00670e:	f003 fc75 	bl	1a009ffc <__sprint_r>
1a006712:	2800      	cmp	r0, #0
1a006714:	f041 8376 	bne.w	1a007e04 <_vfprintf_r+0x1964>
1a006718:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00671c:	e72c      	b.n	1a006578 <_vfprintf_r+0xd8>
1a00671e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a006722:	f7ff f9d9 	bl	1a005ad8 <__retarget_lock_acquire_recursive>
1a006726:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a00672a:	b293      	uxth	r3, r2
1a00672c:	e6d8      	b.n	1a0064e0 <_vfprintf_r+0x40>
1a00672e:	bf00      	nop
	...
1a006738:	4643      	mov	r3, r8
1a00673a:	069f      	lsls	r7, r3, #26
1a00673c:	f140 832f 	bpl.w	1a006d9e <_vfprintf_r+0x8fe>
1a006740:	9c08      	ldr	r4, [sp, #32]
1a006742:	3407      	adds	r4, #7
1a006744:	f024 0407 	bic.w	r4, r4, #7
1a006748:	e9d4 0100 	ldrd	r0, r1, [r4]
1a00674c:	f104 0208 	add.w	r2, r4, #8
1a006750:	9208      	str	r2, [sp, #32]
1a006752:	4604      	mov	r4, r0
1a006754:	460d      	mov	r5, r1
1a006756:	2800      	cmp	r0, #0
1a006758:	f171 0200 	sbcs.w	r2, r1, #0
1a00675c:	da05      	bge.n	1a00676a <_vfprintf_r+0x2ca>
1a00675e:	222d      	movs	r2, #45	; 0x2d
1a006760:	4264      	negs	r4, r4
1a006762:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a006766:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
1a00676a:	aa56      	add	r2, sp, #344	; 0x158
1a00676c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a006770:	9204      	str	r2, [sp, #16]
1a006772:	f000 84b2 	beq.w	1a0070da <_vfprintf_r+0xc3a>
1a006776:	2201      	movs	r2, #1
1a006778:	ea54 0105 	orrs.w	r1, r4, r5
1a00677c:	f023 0880 	bic.w	r8, r3, #128	; 0x80
1a006780:	f040 8159 	bne.w	1a006a36 <_vfprintf_r+0x596>
1a006784:	f1b9 0f00 	cmp.w	r9, #0
1a006788:	f040 8619 	bne.w	1a0073be <_vfprintf_r+0xf1e>
1a00678c:	2a00      	cmp	r2, #0
1a00678e:	f040 8508 	bne.w	1a0071a2 <_vfprintf_r+0xd02>
1a006792:	f013 0301 	ands.w	r3, r3, #1
1a006796:	af56      	add	r7, sp, #344	; 0x158
1a006798:	9309      	str	r3, [sp, #36]	; 0x24
1a00679a:	d002      	beq.n	1a0067a2 <_vfprintf_r+0x302>
1a00679c:	2330      	movs	r3, #48	; 0x30
1a00679e:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a0067a2:	2300      	movs	r3, #0
1a0067a4:	930a      	str	r3, [sp, #40]	; 0x28
1a0067a6:	930f      	str	r3, [sp, #60]	; 0x3c
1a0067a8:	9314      	str	r3, [sp, #80]	; 0x50
1a0067aa:	9311      	str	r3, [sp, #68]	; 0x44
1a0067ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0067ae:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a0067b2:	454b      	cmp	r3, r9
1a0067b4:	bfb8      	it	lt
1a0067b6:	464b      	movlt	r3, r9
1a0067b8:	9304      	str	r3, [sp, #16]
1a0067ba:	b112      	cbz	r2, 1a0067c2 <_vfprintf_r+0x322>
1a0067bc:	9b04      	ldr	r3, [sp, #16]
1a0067be:	3301      	adds	r3, #1
1a0067c0:	9304      	str	r3, [sp, #16]
1a0067c2:	f018 0302 	ands.w	r3, r8, #2
1a0067c6:	930b      	str	r3, [sp, #44]	; 0x2c
1a0067c8:	d002      	beq.n	1a0067d0 <_vfprintf_r+0x330>
1a0067ca:	9b04      	ldr	r3, [sp, #16]
1a0067cc:	3302      	adds	r3, #2
1a0067ce:	9304      	str	r3, [sp, #16]
1a0067d0:	f018 0384 	ands.w	r3, r8, #132	; 0x84
1a0067d4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0067d6:	930e      	str	r3, [sp, #56]	; 0x38
1a0067d8:	d13f      	bne.n	1a00685a <_vfprintf_r+0x3ba>
1a0067da:	9b06      	ldr	r3, [sp, #24]
1a0067dc:	9904      	ldr	r1, [sp, #16]
1a0067de:	1a5d      	subs	r5, r3, r1
1a0067e0:	2d00      	cmp	r5, #0
1a0067e2:	dd3a      	ble.n	1a00685a <_vfprintf_r+0x3ba>
1a0067e4:	2d10      	cmp	r5, #16
1a0067e6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a0067e8:	dd29      	ble.n	1a00683e <_vfprintf_r+0x39e>
1a0067ea:	4659      	mov	r1, fp
1a0067ec:	4620      	mov	r0, r4
1a0067ee:	9620      	str	r6, [sp, #128]	; 0x80
1a0067f0:	2310      	movs	r3, #16
1a0067f2:	9c03      	ldr	r4, [sp, #12]
1a0067f4:	9e07      	ldr	r6, [sp, #28]
1a0067f6:	46bb      	mov	fp, r7
1a0067f8:	e004      	b.n	1a006804 <_vfprintf_r+0x364>
1a0067fa:	3d10      	subs	r5, #16
1a0067fc:	2d10      	cmp	r5, #16
1a0067fe:	f101 0108 	add.w	r1, r1, #8
1a006802:	dd18      	ble.n	1a006836 <_vfprintf_r+0x396>
1a006804:	3201      	adds	r2, #1
1a006806:	4fba      	ldr	r7, [pc, #744]	; (1a006af0 <_vfprintf_r+0x650>)
1a006808:	3010      	adds	r0, #16
1a00680a:	2a07      	cmp	r2, #7
1a00680c:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
1a006810:	e9c1 7300 	strd	r7, r3, [r1]
1a006814:	ddf1      	ble.n	1a0067fa <_vfprintf_r+0x35a>
1a006816:	aa2a      	add	r2, sp, #168	; 0xa8
1a006818:	4631      	mov	r1, r6
1a00681a:	4620      	mov	r0, r4
1a00681c:	930c      	str	r3, [sp, #48]	; 0x30
1a00681e:	f003 fbed 	bl	1a009ffc <__sprint_r>
1a006822:	2800      	cmp	r0, #0
1a006824:	f040 843d 	bne.w	1a0070a2 <_vfprintf_r+0xc02>
1a006828:	3d10      	subs	r5, #16
1a00682a:	2d10      	cmp	r5, #16
1a00682c:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
1a006830:	a92d      	add	r1, sp, #180	; 0xb4
1a006832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a006834:	dce6      	bgt.n	1a006804 <_vfprintf_r+0x364>
1a006836:	9e20      	ldr	r6, [sp, #128]	; 0x80
1a006838:	465f      	mov	r7, fp
1a00683a:	4604      	mov	r4, r0
1a00683c:	468b      	mov	fp, r1
1a00683e:	3201      	adds	r2, #1
1a006840:	4bab      	ldr	r3, [pc, #684]	; (1a006af0 <_vfprintf_r+0x650>)
1a006842:	442c      	add	r4, r5
1a006844:	2a07      	cmp	r2, #7
1a006846:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a00684a:	e9cb 3500 	strd	r3, r5, [fp]
1a00684e:	f300 84ff 	bgt.w	1a007250 <_vfprintf_r+0xdb0>
1a006852:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a006856:	f10b 0b08 	add.w	fp, fp, #8
1a00685a:	b172      	cbz	r2, 1a00687a <_vfprintf_r+0x3da>
1a00685c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a00685e:	3201      	adds	r2, #1
1a006860:	3401      	adds	r4, #1
1a006862:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
1a006866:	2101      	movs	r1, #1
1a006868:	2a07      	cmp	r2, #7
1a00686a:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a00686e:	e9cb 0100 	strd	r0, r1, [fp]
1a006872:	f300 8418 	bgt.w	1a0070a6 <_vfprintf_r+0xc06>
1a006876:	f10b 0b08 	add.w	fp, fp, #8
1a00687a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00687c:	b16b      	cbz	r3, 1a00689a <_vfprintf_r+0x3fa>
1a00687e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a006880:	3301      	adds	r3, #1
1a006882:	3402      	adds	r4, #2
1a006884:	a923      	add	r1, sp, #140	; 0x8c
1a006886:	2202      	movs	r2, #2
1a006888:	2b07      	cmp	r3, #7
1a00688a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a00688e:	e9cb 1200 	strd	r1, r2, [fp]
1a006892:	f300 8415 	bgt.w	1a0070c0 <_vfprintf_r+0xc20>
1a006896:	f10b 0b08 	add.w	fp, fp, #8
1a00689a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00689c:	2b80      	cmp	r3, #128	; 0x80
1a00689e:	f000 8331 	beq.w	1a006f04 <_vfprintf_r+0xa64>
1a0068a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0068a4:	eba9 0503 	sub.w	r5, r9, r3
1a0068a8:	2d00      	cmp	r5, #0
1a0068aa:	dd37      	ble.n	1a00691c <_vfprintf_r+0x47c>
1a0068ac:	2d10      	cmp	r5, #16
1a0068ae:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a0068b0:	4b90      	ldr	r3, [pc, #576]	; (1a006af4 <_vfprintf_r+0x654>)
1a0068b2:	dd28      	ble.n	1a006906 <_vfprintf_r+0x466>
1a0068b4:	4659      	mov	r1, fp
1a0068b6:	4620      	mov	r0, r4
1a0068b8:	46bb      	mov	fp, r7
1a0068ba:	f04f 0910 	mov.w	r9, #16
1a0068be:	4637      	mov	r7, r6
1a0068c0:	461c      	mov	r4, r3
1a0068c2:	9e07      	ldr	r6, [sp, #28]
1a0068c4:	e004      	b.n	1a0068d0 <_vfprintf_r+0x430>
1a0068c6:	3d10      	subs	r5, #16
1a0068c8:	2d10      	cmp	r5, #16
1a0068ca:	f101 0108 	add.w	r1, r1, #8
1a0068ce:	dd15      	ble.n	1a0068fc <_vfprintf_r+0x45c>
1a0068d0:	3201      	adds	r2, #1
1a0068d2:	3010      	adds	r0, #16
1a0068d4:	2a07      	cmp	r2, #7
1a0068d6:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
1a0068da:	e9c1 4900 	strd	r4, r9, [r1]
1a0068de:	ddf2      	ble.n	1a0068c6 <_vfprintf_r+0x426>
1a0068e0:	aa2a      	add	r2, sp, #168	; 0xa8
1a0068e2:	4631      	mov	r1, r6
1a0068e4:	9803      	ldr	r0, [sp, #12]
1a0068e6:	f003 fb89 	bl	1a009ffc <__sprint_r>
1a0068ea:	2800      	cmp	r0, #0
1a0068ec:	f040 83d9 	bne.w	1a0070a2 <_vfprintf_r+0xc02>
1a0068f0:	3d10      	subs	r5, #16
1a0068f2:	2d10      	cmp	r5, #16
1a0068f4:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
1a0068f8:	a92d      	add	r1, sp, #180	; 0xb4
1a0068fa:	dce9      	bgt.n	1a0068d0 <_vfprintf_r+0x430>
1a0068fc:	463e      	mov	r6, r7
1a0068fe:	4623      	mov	r3, r4
1a006900:	465f      	mov	r7, fp
1a006902:	4604      	mov	r4, r0
1a006904:	468b      	mov	fp, r1
1a006906:	3201      	adds	r2, #1
1a006908:	442c      	add	r4, r5
1a00690a:	2a07      	cmp	r2, #7
1a00690c:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a006910:	e9cb 3500 	strd	r3, r5, [fp]
1a006914:	f300 83ef 	bgt.w	1a0070f6 <_vfprintf_r+0xc56>
1a006918:	f10b 0b08 	add.w	fp, fp, #8
1a00691c:	f418 7f80 	tst.w	r8, #256	; 0x100
1a006920:	f040 8280 	bne.w	1a006e24 <_vfprintf_r+0x984>
1a006924:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a006926:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a006928:	f8cb 7000 	str.w	r7, [fp]
1a00692c:	3301      	adds	r3, #1
1a00692e:	4414      	add	r4, r2
1a006930:	2b07      	cmp	r3, #7
1a006932:	942c      	str	r4, [sp, #176]	; 0xb0
1a006934:	f8cb 2004 	str.w	r2, [fp, #4]
1a006938:	932b      	str	r3, [sp, #172]	; 0xac
1a00693a:	f300 8392 	bgt.w	1a007062 <_vfprintf_r+0xbc2>
1a00693e:	f10b 0b08 	add.w	fp, fp, #8
1a006942:	f018 0f04 	tst.w	r8, #4
1a006946:	d03b      	beq.n	1a0069c0 <_vfprintf_r+0x520>
1a006948:	9b06      	ldr	r3, [sp, #24]
1a00694a:	9a04      	ldr	r2, [sp, #16]
1a00694c:	1a9d      	subs	r5, r3, r2
1a00694e:	2d00      	cmp	r5, #0
1a006950:	dd36      	ble.n	1a0069c0 <_vfprintf_r+0x520>
1a006952:	2d10      	cmp	r5, #16
1a006954:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a006956:	dd21      	ble.n	1a00699c <_vfprintf_r+0x4fc>
1a006958:	2610      	movs	r6, #16
1a00695a:	9f03      	ldr	r7, [sp, #12]
1a00695c:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a006960:	e004      	b.n	1a00696c <_vfprintf_r+0x4cc>
1a006962:	3d10      	subs	r5, #16
1a006964:	2d10      	cmp	r5, #16
1a006966:	f10b 0b08 	add.w	fp, fp, #8
1a00696a:	dd17      	ble.n	1a00699c <_vfprintf_r+0x4fc>
1a00696c:	3301      	adds	r3, #1
1a00696e:	4a60      	ldr	r2, [pc, #384]	; (1a006af0 <_vfprintf_r+0x650>)
1a006970:	3410      	adds	r4, #16
1a006972:	2b07      	cmp	r3, #7
1a006974:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a006978:	e9cb 2600 	strd	r2, r6, [fp]
1a00697c:	ddf1      	ble.n	1a006962 <_vfprintf_r+0x4c2>
1a00697e:	aa2a      	add	r2, sp, #168	; 0xa8
1a006980:	4641      	mov	r1, r8
1a006982:	4638      	mov	r0, r7
1a006984:	f003 fb3a 	bl	1a009ffc <__sprint_r>
1a006988:	2800      	cmp	r0, #0
1a00698a:	f040 856c 	bne.w	1a007466 <_vfprintf_r+0xfc6>
1a00698e:	3d10      	subs	r5, #16
1a006990:	2d10      	cmp	r5, #16
1a006992:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
1a006996:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00699a:	dce7      	bgt.n	1a00696c <_vfprintf_r+0x4cc>
1a00699c:	3301      	adds	r3, #1
1a00699e:	4a54      	ldr	r2, [pc, #336]	; (1a006af0 <_vfprintf_r+0x650>)
1a0069a0:	442c      	add	r4, r5
1a0069a2:	2b07      	cmp	r3, #7
1a0069a4:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a0069a8:	e9cb 2500 	strd	r2, r5, [fp]
1a0069ac:	dd08      	ble.n	1a0069c0 <_vfprintf_r+0x520>
1a0069ae:	aa2a      	add	r2, sp, #168	; 0xa8
1a0069b0:	9907      	ldr	r1, [sp, #28]
1a0069b2:	9803      	ldr	r0, [sp, #12]
1a0069b4:	f003 fb22 	bl	1a009ffc <__sprint_r>
1a0069b8:	2800      	cmp	r0, #0
1a0069ba:	f040 82e9 	bne.w	1a006f90 <_vfprintf_r+0xaf0>
1a0069be:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0069c0:	9904      	ldr	r1, [sp, #16]
1a0069c2:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
1a0069c6:	428a      	cmp	r2, r1
1a0069c8:	bfac      	ite	ge
1a0069ca:	189b      	addge	r3, r3, r2
1a0069cc:	185b      	addlt	r3, r3, r1
1a0069ce:	9305      	str	r3, [sp, #20]
1a0069d0:	2c00      	cmp	r4, #0
1a0069d2:	f040 82d5 	bne.w	1a006f80 <_vfprintf_r+0xae0>
1a0069d6:	2300      	movs	r3, #0
1a0069d8:	932b      	str	r3, [sp, #172]	; 0xac
1a0069da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0069dc:	b11b      	cbz	r3, 1a0069e6 <_vfprintf_r+0x546>
1a0069de:	990a      	ldr	r1, [sp, #40]	; 0x28
1a0069e0:	9803      	ldr	r0, [sp, #12]
1a0069e2:	f7fe ff25 	bl	1a005830 <_free_r>
1a0069e6:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0069ea:	4657      	mov	r7, sl
1a0069ec:	783b      	ldrb	r3, [r7, #0]
1a0069ee:	2b00      	cmp	r3, #0
1a0069f0:	f47f ada7 	bne.w	1a006542 <_vfprintf_r+0xa2>
1a0069f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
1a0069f6:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0069fa:	2b00      	cmp	r3, #0
1a0069fc:	f041 80e7 	bne.w	1a007bce <_vfprintf_r+0x172e>
1a006a00:	2300      	movs	r3, #0
1a006a02:	932b      	str	r3, [sp, #172]	; 0xac
1a006a04:	e2cb      	b.n	1a006f9e <_vfprintf_r+0xafe>
1a006a06:	4643      	mov	r3, r8
1a006a08:	069a      	lsls	r2, r3, #26
1a006a0a:	f140 814e 	bpl.w	1a006caa <_vfprintf_r+0x80a>
1a006a0e:	9c08      	ldr	r4, [sp, #32]
1a006a10:	3407      	adds	r4, #7
1a006a12:	f024 0207 	bic.w	r2, r4, #7
1a006a16:	f102 0108 	add.w	r1, r2, #8
1a006a1a:	e9d2 4500 	ldrd	r4, r5, [r2]
1a006a1e:	9108      	str	r1, [sp, #32]
1a006a20:	2201      	movs	r2, #1
1a006a22:	2100      	movs	r1, #0
1a006a24:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
1a006a28:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a006a2c:	a956      	add	r1, sp, #344	; 0x158
1a006a2e:	9104      	str	r1, [sp, #16]
1a006a30:	f47f aea2 	bne.w	1a006778 <_vfprintf_r+0x2d8>
1a006a34:	4698      	mov	r8, r3
1a006a36:	2a01      	cmp	r2, #1
1a006a38:	f000 8350 	beq.w	1a0070dc <_vfprintf_r+0xc3c>
1a006a3c:	2a02      	cmp	r2, #2
1a006a3e:	f000 831b 	beq.w	1a007078 <_vfprintf_r+0xbd8>
1a006a42:	a956      	add	r1, sp, #344	; 0x158
1a006a44:	e000      	b.n	1a006a48 <_vfprintf_r+0x5a8>
1a006a46:	4639      	mov	r1, r7
1a006a48:	08e2      	lsrs	r2, r4, #3
1a006a4a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a006a4e:	08e8      	lsrs	r0, r5, #3
1a006a50:	f004 0307 	and.w	r3, r4, #7
1a006a54:	4605      	mov	r5, r0
1a006a56:	4614      	mov	r4, r2
1a006a58:	3330      	adds	r3, #48	; 0x30
1a006a5a:	ea54 0205 	orrs.w	r2, r4, r5
1a006a5e:	f801 3c01 	strb.w	r3, [r1, #-1]
1a006a62:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
1a006a66:	d1ee      	bne.n	1a006a46 <_vfprintf_r+0x5a6>
1a006a68:	f018 0f01 	tst.w	r8, #1
1a006a6c:	f000 8314 	beq.w	1a007098 <_vfprintf_r+0xbf8>
1a006a70:	2b30      	cmp	r3, #48	; 0x30
1a006a72:	f000 8311 	beq.w	1a007098 <_vfprintf_r+0xbf8>
1a006a76:	9a04      	ldr	r2, [sp, #16]
1a006a78:	3902      	subs	r1, #2
1a006a7a:	2330      	movs	r3, #48	; 0x30
1a006a7c:	1a52      	subs	r2, r2, r1
1a006a7e:	f807 3c01 	strb.w	r3, [r7, #-1]
1a006a82:	9209      	str	r2, [sp, #36]	; 0x24
1a006a84:	460f      	mov	r7, r1
1a006a86:	e68c      	b.n	1a0067a2 <_vfprintf_r+0x302>
1a006a88:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a006a8c:	2200      	movs	r2, #0
1a006a8e:	f81a 6b01 	ldrb.w	r6, [sl], #1
1a006a92:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a006a96:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a006a9a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a006a9e:	2b09      	cmp	r3, #9
1a006aa0:	d9f5      	bls.n	1a006a8e <_vfprintf_r+0x5ee>
1a006aa2:	9206      	str	r2, [sp, #24]
1a006aa4:	e57c      	b.n	1a0065a0 <_vfprintf_r+0x100>
1a006aa6:	4b14      	ldr	r3, [pc, #80]	; (1a006af8 <_vfprintf_r+0x658>)
1a006aa8:	9317      	str	r3, [sp, #92]	; 0x5c
1a006aaa:	f018 0f20 	tst.w	r8, #32
1a006aae:	f000 8114 	beq.w	1a006cda <_vfprintf_r+0x83a>
1a006ab2:	9c08      	ldr	r4, [sp, #32]
1a006ab4:	3407      	adds	r4, #7
1a006ab6:	f024 0307 	bic.w	r3, r4, #7
1a006aba:	e9d3 4500 	ldrd	r4, r5, [r3]
1a006abe:	f103 0208 	add.w	r2, r3, #8
1a006ac2:	9208      	str	r2, [sp, #32]
1a006ac4:	f018 0f01 	tst.w	r8, #1
1a006ac8:	d009      	beq.n	1a006ade <_vfprintf_r+0x63e>
1a006aca:	ea54 0305 	orrs.w	r3, r4, r5
1a006ace:	d006      	beq.n	1a006ade <_vfprintf_r+0x63e>
1a006ad0:	2330      	movs	r3, #48	; 0x30
1a006ad2:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
1a006ad6:	f048 0802 	orr.w	r8, r8, #2
1a006ada:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
1a006ade:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
1a006ae2:	2202      	movs	r2, #2
1a006ae4:	e79d      	b.n	1a006a22 <_vfprintf_r+0x582>
1a006ae6:	f048 0801 	orr.w	r8, r8, #1
1a006aea:	f89a 6000 	ldrb.w	r6, [sl]
1a006aee:	e555      	b.n	1a00659c <_vfprintf_r+0xfc>
1a006af0:	1a00a9e8 	.word	0x1a00a9e8
1a006af4:	1a00a9f8 	.word	0x1a00a9f8
1a006af8:	1a00a9b4 	.word	0x1a00a9b4
1a006afc:	9e03      	ldr	r6, [sp, #12]
1a006afe:	4630      	mov	r0, r6
1a006b00:	f002 fbe4 	bl	1a0092cc <_localeconv_r>
1a006b04:	6843      	ldr	r3, [r0, #4]
1a006b06:	9318      	str	r3, [sp, #96]	; 0x60
1a006b08:	4618      	mov	r0, r3
1a006b0a:	f7ff fc59 	bl	1a0063c0 <strlen>
1a006b0e:	901b      	str	r0, [sp, #108]	; 0x6c
1a006b10:	4604      	mov	r4, r0
1a006b12:	4630      	mov	r0, r6
1a006b14:	f002 fbda 	bl	1a0092cc <_localeconv_r>
1a006b18:	6883      	ldr	r3, [r0, #8]
1a006b1a:	931a      	str	r3, [sp, #104]	; 0x68
1a006b1c:	2c00      	cmp	r4, #0
1a006b1e:	f43f adb8 	beq.w	1a006692 <_vfprintf_r+0x1f2>
1a006b22:	f89a 6000 	ldrb.w	r6, [sl]
1a006b26:	2b00      	cmp	r3, #0
1a006b28:	f43f ad38 	beq.w	1a00659c <_vfprintf_r+0xfc>
1a006b2c:	781b      	ldrb	r3, [r3, #0]
1a006b2e:	2b00      	cmp	r3, #0
1a006b30:	f43f ad34 	beq.w	1a00659c <_vfprintf_r+0xfc>
1a006b34:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
1a006b38:	e530      	b.n	1a00659c <_vfprintf_r+0xfc>
1a006b3a:	9b08      	ldr	r3, [sp, #32]
1a006b3c:	f89a 6000 	ldrb.w	r6, [sl]
1a006b40:	681a      	ldr	r2, [r3, #0]
1a006b42:	9206      	str	r2, [sp, #24]
1a006b44:	2a00      	cmp	r2, #0
1a006b46:	f103 0304 	add.w	r3, r3, #4
1a006b4a:	f2c0 8697 	blt.w	1a00787c <_vfprintf_r+0x13dc>
1a006b4e:	9308      	str	r3, [sp, #32]
1a006b50:	e524      	b.n	1a00659c <_vfprintf_r+0xfc>
1a006b52:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
1a006b56:	f89a 6000 	ldrb.w	r6, [sl]
1a006b5a:	e51f      	b.n	1a00659c <_vfprintf_r+0xfc>
1a006b5c:	f89a 6000 	ldrb.w	r6, [sl]
1a006b60:	f048 0804 	orr.w	r8, r8, #4
1a006b64:	e51a      	b.n	1a00659c <_vfprintf_r+0xfc>
1a006b66:	f89a 6000 	ldrb.w	r6, [sl]
1a006b6a:	2e2a      	cmp	r6, #42	; 0x2a
1a006b6c:	f10a 0201 	add.w	r2, sl, #1
1a006b70:	f001 81b0 	beq.w	1a007ed4 <_vfprintf_r+0x1a34>
1a006b74:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a006b78:	2b09      	cmp	r3, #9
1a006b7a:	4692      	mov	sl, r2
1a006b7c:	f04f 0900 	mov.w	r9, #0
1a006b80:	f63f ad0e 	bhi.w	1a0065a0 <_vfprintf_r+0x100>
1a006b84:	f81a 6b01 	ldrb.w	r6, [sl], #1
1a006b88:	eb09 0989 	add.w	r9, r9, r9, lsl #2
1a006b8c:	eb03 0949 	add.w	r9, r3, r9, lsl #1
1a006b90:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a006b94:	2b09      	cmp	r3, #9
1a006b96:	d9f5      	bls.n	1a006b84 <_vfprintf_r+0x6e4>
1a006b98:	e502      	b.n	1a0065a0 <_vfprintf_r+0x100>
1a006b9a:	f048 0880 	orr.w	r8, r8, #128	; 0x80
1a006b9e:	f89a 6000 	ldrb.w	r6, [sl]
1a006ba2:	e4fb      	b.n	1a00659c <_vfprintf_r+0xfc>
1a006ba4:	9c08      	ldr	r4, [sp, #32]
1a006ba6:	3407      	adds	r4, #7
1a006ba8:	f024 0407 	bic.w	r4, r4, #7
1a006bac:	ed94 7b00 	vldr	d7, [r4]
1a006bb0:	ec52 1b17 	vmov	r1, r2, d7
1a006bb4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
1a006bb8:	931d      	str	r3, [sp, #116]	; 0x74
1a006bba:	ed8d 7a1c 	vstr	s14, [sp, #112]	; 0x70
1a006bbe:	3408      	adds	r4, #8
1a006bc0:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a006bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a006bc8:	4bba      	ldr	r3, [pc, #744]	; (1a006eb4 <_vfprintf_r+0xa14>)
1a006bca:	9408      	str	r4, [sp, #32]
1a006bcc:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
1a006bd0:	f003 fb54 	bl	1a00a27c <__aeabi_dcmpun>
1a006bd4:	2800      	cmp	r0, #0
1a006bd6:	f040 846f 	bne.w	1a0074b8 <_vfprintf_r+0x1018>
1a006bda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a006bde:	4bb5      	ldr	r3, [pc, #724]	; (1a006eb4 <_vfprintf_r+0xa14>)
1a006be0:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a006be4:	f7fe fa40 	bl	1a005068 <__aeabi_dcmple>
1a006be8:	2800      	cmp	r0, #0
1a006bea:	f040 8465 	bne.w	1a0074b8 <_vfprintf_r+0x1018>
1a006bee:	2200      	movs	r2, #0
1a006bf0:	2300      	movs	r3, #0
1a006bf2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a006bf6:	f7fe fa2d 	bl	1a005054 <__aeabi_dcmplt>
1a006bfa:	2800      	cmp	r0, #0
1a006bfc:	f040 855b 	bne.w	1a0076b6 <_vfprintf_r+0x1216>
1a006c00:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a006c04:	4fac      	ldr	r7, [pc, #688]	; (1a006eb8 <_vfprintf_r+0xa18>)
1a006c06:	4bad      	ldr	r3, [pc, #692]	; (1a006ebc <_vfprintf_r+0xa1c>)
1a006c08:	2000      	movs	r0, #0
1a006c0a:	2103      	movs	r1, #3
1a006c0c:	9104      	str	r1, [sp, #16]
1a006c0e:	900a      	str	r0, [sp, #40]	; 0x28
1a006c10:	f028 0880 	bic.w	r8, r8, #128	; 0x80
1a006c14:	2e47      	cmp	r6, #71	; 0x47
1a006c16:	bfd8      	it	le
1a006c18:	461f      	movle	r7, r3
1a006c1a:	9109      	str	r1, [sp, #36]	; 0x24
1a006c1c:	4681      	mov	r9, r0
1a006c1e:	900f      	str	r0, [sp, #60]	; 0x3c
1a006c20:	9014      	str	r0, [sp, #80]	; 0x50
1a006c22:	9011      	str	r0, [sp, #68]	; 0x44
1a006c24:	e5c9      	b.n	1a0067ba <_vfprintf_r+0x31a>
1a006c26:	9808      	ldr	r0, [sp, #32]
1a006c28:	2300      	movs	r3, #0
1a006c2a:	6801      	ldr	r1, [r0, #0]
1a006c2c:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
1a006c30:	461a      	mov	r2, r3
1a006c32:	f88d 10f4 	strb.w	r1, [sp, #244]	; 0xf4
1a006c36:	2301      	movs	r3, #1
1a006c38:	1d01      	adds	r1, r0, #4
1a006c3a:	9304      	str	r3, [sp, #16]
1a006c3c:	920a      	str	r2, [sp, #40]	; 0x28
1a006c3e:	4691      	mov	r9, r2
1a006c40:	920f      	str	r2, [sp, #60]	; 0x3c
1a006c42:	9214      	str	r2, [sp, #80]	; 0x50
1a006c44:	9211      	str	r2, [sp, #68]	; 0x44
1a006c46:	e9cd 1308 	strd	r1, r3, [sp, #32]
1a006c4a:	af3d      	add	r7, sp, #244	; 0xf4
1a006c4c:	e5b9      	b.n	1a0067c2 <_vfprintf_r+0x322>
1a006c4e:	9b08      	ldr	r3, [sp, #32]
1a006c50:	681f      	ldr	r7, [r3, #0]
1a006c52:	2500      	movs	r5, #0
1a006c54:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
1a006c58:	1d1c      	adds	r4, r3, #4
1a006c5a:	2f00      	cmp	r7, #0
1a006c5c:	f000 8639 	beq.w	1a0078d2 <_vfprintf_r+0x1432>
1a006c60:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a006c64:	f000 8711 	beq.w	1a007a8a <_vfprintf_r+0x15ea>
1a006c68:	464a      	mov	r2, r9
1a006c6a:	4629      	mov	r1, r5
1a006c6c:	4638      	mov	r0, r7
1a006c6e:	f002 fbb7 	bl	1a0093e0 <memchr>
1a006c72:	900a      	str	r0, [sp, #40]	; 0x28
1a006c74:	2800      	cmp	r0, #0
1a006c76:	f000 85e7 	beq.w	1a007848 <_vfprintf_r+0x13a8>
1a006c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006c7c:	1bdb      	subs	r3, r3, r7
1a006c7e:	9309      	str	r3, [sp, #36]	; 0x24
1a006c80:	46a9      	mov	r9, r5
1a006c82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a006c86:	9408      	str	r4, [sp, #32]
1a006c88:	9304      	str	r3, [sp, #16]
1a006c8a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a006c8e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
1a006c92:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
1a006c96:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
1a006c9a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a006c9e:	e58c      	b.n	1a0067ba <_vfprintf_r+0x31a>
1a006ca0:	f048 0310 	orr.w	r3, r8, #16
1a006ca4:	069a      	lsls	r2, r3, #26
1a006ca6:	f53f aeb2 	bmi.w	1a006a0e <_vfprintf_r+0x56e>
1a006caa:	9a08      	ldr	r2, [sp, #32]
1a006cac:	06df      	lsls	r7, r3, #27
1a006cae:	f102 0104 	add.w	r1, r2, #4
1a006cb2:	f100 837e 	bmi.w	1a0073b2 <_vfprintf_r+0xf12>
1a006cb6:	065d      	lsls	r5, r3, #25
1a006cb8:	9a08      	ldr	r2, [sp, #32]
1a006cba:	f100 84e4 	bmi.w	1a007686 <_vfprintf_r+0x11e6>
1a006cbe:	059c      	lsls	r4, r3, #22
1a006cc0:	f140 8377 	bpl.w	1a0073b2 <_vfprintf_r+0xf12>
1a006cc4:	7814      	ldrb	r4, [r2, #0]
1a006cc6:	9108      	str	r1, [sp, #32]
1a006cc8:	2500      	movs	r5, #0
1a006cca:	2201      	movs	r2, #1
1a006ccc:	e6a9      	b.n	1a006a22 <_vfprintf_r+0x582>
1a006cce:	4b7c      	ldr	r3, [pc, #496]	; (1a006ec0 <_vfprintf_r+0xa20>)
1a006cd0:	9317      	str	r3, [sp, #92]	; 0x5c
1a006cd2:	f018 0f20 	tst.w	r8, #32
1a006cd6:	f47f aeec 	bne.w	1a006ab2 <_vfprintf_r+0x612>
1a006cda:	9a08      	ldr	r2, [sp, #32]
1a006cdc:	f018 0f10 	tst.w	r8, #16
1a006ce0:	f102 0304 	add.w	r3, r2, #4
1a006ce4:	f040 8354 	bne.w	1a007390 <_vfprintf_r+0xef0>
1a006ce8:	f018 0f40 	tst.w	r8, #64	; 0x40
1a006cec:	9a08      	ldr	r2, [sp, #32]
1a006cee:	f040 84d0 	bne.w	1a007692 <_vfprintf_r+0x11f2>
1a006cf2:	f418 7f00 	tst.w	r8, #512	; 0x200
1a006cf6:	f000 834b 	beq.w	1a007390 <_vfprintf_r+0xef0>
1a006cfa:	7814      	ldrb	r4, [r2, #0]
1a006cfc:	9308      	str	r3, [sp, #32]
1a006cfe:	2500      	movs	r5, #0
1a006d00:	e6e0      	b.n	1a006ac4 <_vfprintf_r+0x624>
1a006d02:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
1a006d06:	f89a 6000 	ldrb.w	r6, [sl]
1a006d0a:	2b00      	cmp	r3, #0
1a006d0c:	f47f ac46 	bne.w	1a00659c <_vfprintf_r+0xfc>
1a006d10:	2320      	movs	r3, #32
1a006d12:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
1a006d16:	e441      	b.n	1a00659c <_vfprintf_r+0xfc>
1a006d18:	f89a 6000 	ldrb.w	r6, [sl]
1a006d1c:	2e6c      	cmp	r6, #108	; 0x6c
1a006d1e:	bf03      	ittte	eq
1a006d20:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
1a006d24:	f048 0820 	orreq.w	r8, r8, #32
1a006d28:	f10a 0a01 	addeq.w	sl, sl, #1
1a006d2c:	f048 0810 	orrne.w	r8, r8, #16
1a006d30:	e434      	b.n	1a00659c <_vfprintf_r+0xfc>
1a006d32:	9a08      	ldr	r2, [sp, #32]
1a006d34:	f018 0f20 	tst.w	r8, #32
1a006d38:	f852 3b04 	ldr.w	r3, [r2], #4
1a006d3c:	9208      	str	r2, [sp, #32]
1a006d3e:	f000 83a1 	beq.w	1a007484 <_vfprintf_r+0xfe4>
1a006d42:	9a05      	ldr	r2, [sp, #20]
1a006d44:	4610      	mov	r0, r2
1a006d46:	17d1      	asrs	r1, r2, #31
1a006d48:	e9c3 0100 	strd	r0, r1, [r3]
1a006d4c:	4657      	mov	r7, sl
1a006d4e:	e64d      	b.n	1a0069ec <_vfprintf_r+0x54c>
1a006d50:	f89a 6000 	ldrb.w	r6, [sl]
1a006d54:	2e68      	cmp	r6, #104	; 0x68
1a006d56:	bf03      	ittte	eq
1a006d58:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
1a006d5c:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
1a006d60:	f10a 0a01 	addeq.w	sl, sl, #1
1a006d64:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
1a006d68:	e418      	b.n	1a00659c <_vfprintf_r+0xfc>
1a006d6a:	9908      	ldr	r1, [sp, #32]
1a006d6c:	4b55      	ldr	r3, [pc, #340]	; (1a006ec4 <_vfprintf_r+0xa24>)
1a006d6e:	680c      	ldr	r4, [r1, #0]
1a006d70:	9317      	str	r3, [sp, #92]	; 0x5c
1a006d72:	f647 0230 	movw	r2, #30768	; 0x7830
1a006d76:	3104      	adds	r1, #4
1a006d78:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
1a006d7c:	f048 0302 	orr.w	r3, r8, #2
1a006d80:	9108      	str	r1, [sp, #32]
1a006d82:	2500      	movs	r5, #0
1a006d84:	2202      	movs	r2, #2
1a006d86:	2678      	movs	r6, #120	; 0x78
1a006d88:	e64b      	b.n	1a006a22 <_vfprintf_r+0x582>
1a006d8a:	f048 0808 	orr.w	r8, r8, #8
1a006d8e:	f89a 6000 	ldrb.w	r6, [sl]
1a006d92:	e403      	b.n	1a00659c <_vfprintf_r+0xfc>
1a006d94:	f048 0310 	orr.w	r3, r8, #16
1a006d98:	069f      	lsls	r7, r3, #26
1a006d9a:	f53f acd1 	bmi.w	1a006740 <_vfprintf_r+0x2a0>
1a006d9e:	9908      	ldr	r1, [sp, #32]
1a006da0:	06dd      	lsls	r5, r3, #27
1a006da2:	f101 0204 	add.w	r2, r1, #4
1a006da6:	f100 82fd 	bmi.w	1a0073a4 <_vfprintf_r+0xf04>
1a006daa:	065c      	lsls	r4, r3, #25
1a006dac:	9908      	ldr	r1, [sp, #32]
1a006dae:	f100 8475 	bmi.w	1a00769c <_vfprintf_r+0x11fc>
1a006db2:	0598      	lsls	r0, r3, #22
1a006db4:	f140 82f6 	bpl.w	1a0073a4 <_vfprintf_r+0xf04>
1a006db8:	f991 4000 	ldrsb.w	r4, [r1]
1a006dbc:	9208      	str	r2, [sp, #32]
1a006dbe:	17e5      	asrs	r5, r4, #31
1a006dc0:	4620      	mov	r0, r4
1a006dc2:	4629      	mov	r1, r5
1a006dc4:	e4c7      	b.n	1a006756 <_vfprintf_r+0x2b6>
1a006dc6:	9a08      	ldr	r2, [sp, #32]
1a006dc8:	f018 0f10 	tst.w	r8, #16
1a006dcc:	f102 0304 	add.w	r3, r2, #4
1a006dd0:	f040 82e3 	bne.w	1a00739a <_vfprintf_r+0xefa>
1a006dd4:	f018 0f40 	tst.w	r8, #64	; 0x40
1a006dd8:	9a08      	ldr	r2, [sp, #32]
1a006dda:	f040 8467 	bne.w	1a0076ac <_vfprintf_r+0x120c>
1a006dde:	f418 7f00 	tst.w	r8, #512	; 0x200
1a006de2:	f000 82da 	beq.w	1a00739a <_vfprintf_r+0xefa>
1a006de6:	7814      	ldrb	r4, [r2, #0]
1a006de8:	9308      	str	r3, [sp, #32]
1a006dea:	2500      	movs	r5, #0
1a006dec:	e488      	b.n	1a006700 <_vfprintf_r+0x260>
1a006dee:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a006df2:	f7fe fe73 	bl	1a005adc <__retarget_lock_release_recursive>
1a006df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a006dfa:	9305      	str	r3, [sp, #20]
1a006dfc:	e443      	b.n	1a006686 <_vfprintf_r+0x1e6>
1a006dfe:	2e00      	cmp	r6, #0
1a006e00:	f43f adf8 	beq.w	1a0069f4 <_vfprintf_r+0x554>
1a006e04:	2300      	movs	r3, #0
1a006e06:	2101      	movs	r1, #1
1a006e08:	461a      	mov	r2, r3
1a006e0a:	9104      	str	r1, [sp, #16]
1a006e0c:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
1a006e10:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
1a006e14:	930a      	str	r3, [sp, #40]	; 0x28
1a006e16:	4699      	mov	r9, r3
1a006e18:	930f      	str	r3, [sp, #60]	; 0x3c
1a006e1a:	9314      	str	r3, [sp, #80]	; 0x50
1a006e1c:	9311      	str	r3, [sp, #68]	; 0x44
1a006e1e:	9109      	str	r1, [sp, #36]	; 0x24
1a006e20:	af3d      	add	r7, sp, #244	; 0xf4
1a006e22:	e4ce      	b.n	1a0067c2 <_vfprintf_r+0x322>
1a006e24:	2e65      	cmp	r6, #101	; 0x65
1a006e26:	f340 80ca 	ble.w	1a006fbe <_vfprintf_r+0xb1e>
1a006e2a:	2200      	movs	r2, #0
1a006e2c:	2300      	movs	r3, #0
1a006e2e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a006e32:	f7fe f905 	bl	1a005040 <__aeabi_dcmpeq>
1a006e36:	2800      	cmp	r0, #0
1a006e38:	f000 8169 	beq.w	1a00710e <_vfprintf_r+0xc6e>
1a006e3c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a006e3e:	4a22      	ldr	r2, [pc, #136]	; (1a006ec8 <_vfprintf_r+0xa28>)
1a006e40:	f8cb 2000 	str.w	r2, [fp]
1a006e44:	3301      	adds	r3, #1
1a006e46:	3401      	adds	r4, #1
1a006e48:	2201      	movs	r2, #1
1a006e4a:	2b07      	cmp	r3, #7
1a006e4c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a006e50:	f8cb 2004 	str.w	r2, [fp, #4]
1a006e54:	f300 8406 	bgt.w	1a007664 <_vfprintf_r+0x11c4>
1a006e58:	f10b 0b08 	add.w	fp, fp, #8
1a006e5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a006e5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a006e60:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a006e62:	4293      	cmp	r3, r2
1a006e64:	db03      	blt.n	1a006e6e <_vfprintf_r+0x9ce>
1a006e66:	f018 0f01 	tst.w	r8, #1
1a006e6a:	f43f ad6a 	beq.w	1a006942 <_vfprintf_r+0x4a2>
1a006e6e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a006e70:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a006e72:	f8cb 2000 	str.w	r2, [fp]
1a006e76:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a006e78:	f8cb 2004 	str.w	r2, [fp, #4]
1a006e7c:	3301      	adds	r3, #1
1a006e7e:	4414      	add	r4, r2
1a006e80:	2b07      	cmp	r3, #7
1a006e82:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a006e86:	f300 8517 	bgt.w	1a0078b8 <_vfprintf_r+0x1418>
1a006e8a:	f10b 0b08 	add.w	fp, fp, #8
1a006e8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a006e90:	1e5d      	subs	r5, r3, #1
1a006e92:	2d00      	cmp	r5, #0
1a006e94:	f77f ad55 	ble.w	1a006942 <_vfprintf_r+0x4a2>
1a006e98:	2d10      	cmp	r5, #16
1a006e9a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a006e9c:	4b0b      	ldr	r3, [pc, #44]	; (1a006ecc <_vfprintf_r+0xa2c>)
1a006e9e:	f340 82e7 	ble.w	1a007470 <_vfprintf_r+0xfd0>
1a006ea2:	4619      	mov	r1, r3
1a006ea4:	2610      	movs	r6, #16
1a006ea6:	4623      	mov	r3, r4
1a006ea8:	9f03      	ldr	r7, [sp, #12]
1a006eaa:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a006eae:	460c      	mov	r4, r1
1a006eb0:	e014      	b.n	1a006edc <_vfprintf_r+0xa3c>
1a006eb2:	bf00      	nop
1a006eb4:	7fefffff 	.word	0x7fefffff
1a006eb8:	1a00a9a8 	.word	0x1a00a9a8
1a006ebc:	1a00a9a4 	.word	0x1a00a9a4
1a006ec0:	1a00a9c8 	.word	0x1a00a9c8
1a006ec4:	1a00a9b4 	.word	0x1a00a9b4
1a006ec8:	1a00a9e4 	.word	0x1a00a9e4
1a006ecc:	1a00a9f8 	.word	0x1a00a9f8
1a006ed0:	f10b 0b08 	add.w	fp, fp, #8
1a006ed4:	3d10      	subs	r5, #16
1a006ed6:	2d10      	cmp	r5, #16
1a006ed8:	f340 82c7 	ble.w	1a00746a <_vfprintf_r+0xfca>
1a006edc:	3201      	adds	r2, #1
1a006ede:	3310      	adds	r3, #16
1a006ee0:	2a07      	cmp	r2, #7
1a006ee2:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
1a006ee6:	e9cb 4600 	strd	r4, r6, [fp]
1a006eea:	ddf1      	ble.n	1a006ed0 <_vfprintf_r+0xa30>
1a006eec:	aa2a      	add	r2, sp, #168	; 0xa8
1a006eee:	4649      	mov	r1, r9
1a006ef0:	4638      	mov	r0, r7
1a006ef2:	f003 f883 	bl	1a009ffc <__sprint_r>
1a006ef6:	2800      	cmp	r0, #0
1a006ef8:	d14c      	bne.n	1a006f94 <_vfprintf_r+0xaf4>
1a006efa:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
1a006efe:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a006f02:	e7e7      	b.n	1a006ed4 <_vfprintf_r+0xa34>
1a006f04:	9b06      	ldr	r3, [sp, #24]
1a006f06:	9a04      	ldr	r2, [sp, #16]
1a006f08:	1a9d      	subs	r5, r3, r2
1a006f0a:	2d00      	cmp	r5, #0
1a006f0c:	f77f acc9 	ble.w	1a0068a2 <_vfprintf_r+0x402>
1a006f10:	2d10      	cmp	r5, #16
1a006f12:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a006f14:	4bbc      	ldr	r3, [pc, #752]	; (1a007208 <_vfprintf_r+0xd68>)
1a006f16:	dd27      	ble.n	1a006f68 <_vfprintf_r+0xac8>
1a006f18:	4659      	mov	r1, fp
1a006f1a:	4620      	mov	r0, r4
1a006f1c:	46bb      	mov	fp, r7
1a006f1e:	461c      	mov	r4, r3
1a006f20:	4637      	mov	r7, r6
1a006f22:	9e07      	ldr	r6, [sp, #28]
1a006f24:	e004      	b.n	1a006f30 <_vfprintf_r+0xa90>
1a006f26:	3d10      	subs	r5, #16
1a006f28:	2d10      	cmp	r5, #16
1a006f2a:	f101 0108 	add.w	r1, r1, #8
1a006f2e:	dd16      	ble.n	1a006f5e <_vfprintf_r+0xabe>
1a006f30:	3201      	adds	r2, #1
1a006f32:	3010      	adds	r0, #16
1a006f34:	2310      	movs	r3, #16
1a006f36:	2a07      	cmp	r2, #7
1a006f38:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
1a006f3c:	600c      	str	r4, [r1, #0]
1a006f3e:	604b      	str	r3, [r1, #4]
1a006f40:	ddf1      	ble.n	1a006f26 <_vfprintf_r+0xa86>
1a006f42:	aa2a      	add	r2, sp, #168	; 0xa8
1a006f44:	4631      	mov	r1, r6
1a006f46:	9803      	ldr	r0, [sp, #12]
1a006f48:	f003 f858 	bl	1a009ffc <__sprint_r>
1a006f4c:	2800      	cmp	r0, #0
1a006f4e:	f040 80a8 	bne.w	1a0070a2 <_vfprintf_r+0xc02>
1a006f52:	3d10      	subs	r5, #16
1a006f54:	2d10      	cmp	r5, #16
1a006f56:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
1a006f5a:	a92d      	add	r1, sp, #180	; 0xb4
1a006f5c:	dce8      	bgt.n	1a006f30 <_vfprintf_r+0xa90>
1a006f5e:	463e      	mov	r6, r7
1a006f60:	4623      	mov	r3, r4
1a006f62:	465f      	mov	r7, fp
1a006f64:	4604      	mov	r4, r0
1a006f66:	468b      	mov	fp, r1
1a006f68:	3201      	adds	r2, #1
1a006f6a:	442c      	add	r4, r5
1a006f6c:	2a07      	cmp	r2, #7
1a006f6e:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a006f72:	e9cb 3500 	strd	r3, r5, [fp]
1a006f76:	f300 8292 	bgt.w	1a00749e <_vfprintf_r+0xffe>
1a006f7a:	f10b 0b08 	add.w	fp, fp, #8
1a006f7e:	e490      	b.n	1a0068a2 <_vfprintf_r+0x402>
1a006f80:	aa2a      	add	r2, sp, #168	; 0xa8
1a006f82:	9907      	ldr	r1, [sp, #28]
1a006f84:	9803      	ldr	r0, [sp, #12]
1a006f86:	f003 f839 	bl	1a009ffc <__sprint_r>
1a006f8a:	2800      	cmp	r0, #0
1a006f8c:	f43f ad23 	beq.w	1a0069d6 <_vfprintf_r+0x536>
1a006f90:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a006f94:	990a      	ldr	r1, [sp, #40]	; 0x28
1a006f96:	b111      	cbz	r1, 1a006f9e <_vfprintf_r+0xafe>
1a006f98:	9803      	ldr	r0, [sp, #12]
1a006f9a:	f7fe fc49 	bl	1a005830 <_free_r>
1a006f9e:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a006fa2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a006fa6:	07d0      	lsls	r0, r2, #31
1a006fa8:	d402      	bmi.n	1a006fb0 <_vfprintf_r+0xb10>
1a006faa:	0599      	lsls	r1, r3, #22
1a006fac:	f140 81d0 	bpl.w	1a007350 <_vfprintf_r+0xeb0>
1a006fb0:	065a      	lsls	r2, r3, #25
1a006fb2:	f53f ab65 	bmi.w	1a006680 <_vfprintf_r+0x1e0>
1a006fb6:	9805      	ldr	r0, [sp, #20]
1a006fb8:	b057      	add	sp, #348	; 0x15c
1a006fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006fbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a006fc0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a006fc2:	2a01      	cmp	r2, #1
1a006fc4:	f104 0401 	add.w	r4, r4, #1
1a006fc8:	f103 0501 	add.w	r5, r3, #1
1a006fcc:	f10b 0608 	add.w	r6, fp, #8
1a006fd0:	f340 811c 	ble.w	1a00720c <_vfprintf_r+0xd6c>
1a006fd4:	2301      	movs	r3, #1
1a006fd6:	2d07      	cmp	r5, #7
1a006fd8:	f8cb 7000 	str.w	r7, [fp]
1a006fdc:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
1a006fe0:	f8cb 3004 	str.w	r3, [fp, #4]
1a006fe4:	f300 81bb 	bgt.w	1a00735e <_vfprintf_r+0xebe>
1a006fe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a006fea:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a006fec:	1c69      	adds	r1, r5, #1
1a006fee:	441c      	add	r4, r3
1a006ff0:	2907      	cmp	r1, #7
1a006ff2:	910b      	str	r1, [sp, #44]	; 0x2c
1a006ff4:	e9cd 142b 	strd	r1, r4, [sp, #172]	; 0xac
1a006ff8:	e9c6 2300 	strd	r2, r3, [r6]
1a006ffc:	f300 81bb 	bgt.w	1a007376 <_vfprintf_r+0xed6>
1a007000:	3608      	adds	r6, #8
1a007002:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a007004:	1c53      	adds	r3, r2, #1
1a007006:	461d      	mov	r5, r3
1a007008:	9509      	str	r5, [sp, #36]	; 0x24
1a00700a:	9d10      	ldr	r5, [sp, #64]	; 0x40
1a00700c:	930e      	str	r3, [sp, #56]	; 0x38
1a00700e:	2200      	movs	r2, #0
1a007010:	2300      	movs	r3, #0
1a007012:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a007016:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
1a00701a:	f106 0b08 	add.w	fp, r6, #8
1a00701e:	f7fe f80f 	bl	1a005040 <__aeabi_dcmpeq>
1a007022:	2800      	cmp	r0, #0
1a007024:	f040 80c2 	bne.w	1a0071ac <_vfprintf_r+0xd0c>
1a007028:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a00702a:	f8c6 9004 	str.w	r9, [r6, #4]
1a00702e:	3701      	adds	r7, #1
1a007030:	444c      	add	r4, r9
1a007032:	2d07      	cmp	r5, #7
1a007034:	6037      	str	r7, [r6, #0]
1a007036:	942c      	str	r4, [sp, #176]	; 0xb0
1a007038:	952b      	str	r5, [sp, #172]	; 0xac
1a00703a:	f300 80f9 	bgt.w	1a007230 <_vfprintf_r+0xd90>
1a00703e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a007040:	f106 0310 	add.w	r3, r6, #16
1a007044:	3202      	adds	r2, #2
1a007046:	465e      	mov	r6, fp
1a007048:	9209      	str	r2, [sp, #36]	; 0x24
1a00704a:	469b      	mov	fp, r3
1a00704c:	9a19      	ldr	r2, [sp, #100]	; 0x64
1a00704e:	6072      	str	r2, [r6, #4]
1a007050:	4414      	add	r4, r2
1a007052:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a007054:	942c      	str	r4, [sp, #176]	; 0xb0
1a007056:	ab26      	add	r3, sp, #152	; 0x98
1a007058:	2a07      	cmp	r2, #7
1a00705a:	922b      	str	r2, [sp, #172]	; 0xac
1a00705c:	6033      	str	r3, [r6, #0]
1a00705e:	f77f ac70 	ble.w	1a006942 <_vfprintf_r+0x4a2>
1a007062:	aa2a      	add	r2, sp, #168	; 0xa8
1a007064:	9907      	ldr	r1, [sp, #28]
1a007066:	9803      	ldr	r0, [sp, #12]
1a007068:	f002 ffc8 	bl	1a009ffc <__sprint_r>
1a00706c:	2800      	cmp	r0, #0
1a00706e:	d18f      	bne.n	1a006f90 <_vfprintf_r+0xaf0>
1a007070:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a007072:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a007076:	e464      	b.n	1a006942 <_vfprintf_r+0x4a2>
1a007078:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a00707a:	af56      	add	r7, sp, #344	; 0x158
1a00707c:	0923      	lsrs	r3, r4, #4
1a00707e:	f004 010f 	and.w	r1, r4, #15
1a007082:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a007086:	092a      	lsrs	r2, r5, #4
1a007088:	461c      	mov	r4, r3
1a00708a:	4615      	mov	r5, r2
1a00708c:	5c43      	ldrb	r3, [r0, r1]
1a00708e:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a007092:	ea54 0305 	orrs.w	r3, r4, r5
1a007096:	d1f1      	bne.n	1a00707c <_vfprintf_r+0xbdc>
1a007098:	9b04      	ldr	r3, [sp, #16]
1a00709a:	1bdb      	subs	r3, r3, r7
1a00709c:	9309      	str	r3, [sp, #36]	; 0x24
1a00709e:	f7ff bb80 	b.w	1a0067a2 <_vfprintf_r+0x302>
1a0070a2:	46b1      	mov	r9, r6
1a0070a4:	e776      	b.n	1a006f94 <_vfprintf_r+0xaf4>
1a0070a6:	aa2a      	add	r2, sp, #168	; 0xa8
1a0070a8:	9907      	ldr	r1, [sp, #28]
1a0070aa:	9803      	ldr	r0, [sp, #12]
1a0070ac:	f002 ffa6 	bl	1a009ffc <__sprint_r>
1a0070b0:	2800      	cmp	r0, #0
1a0070b2:	f47f af6d 	bne.w	1a006f90 <_vfprintf_r+0xaf0>
1a0070b6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0070b8:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0070bc:	f7ff bbdd 	b.w	1a00687a <_vfprintf_r+0x3da>
1a0070c0:	aa2a      	add	r2, sp, #168	; 0xa8
1a0070c2:	9907      	ldr	r1, [sp, #28]
1a0070c4:	9803      	ldr	r0, [sp, #12]
1a0070c6:	f002 ff99 	bl	1a009ffc <__sprint_r>
1a0070ca:	2800      	cmp	r0, #0
1a0070cc:	f47f af60 	bne.w	1a006f90 <_vfprintf_r+0xaf0>
1a0070d0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0070d2:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0070d6:	f7ff bbe0 	b.w	1a00689a <_vfprintf_r+0x3fa>
1a0070da:	4698      	mov	r8, r3
1a0070dc:	2d00      	cmp	r5, #0
1a0070de:	bf08      	it	eq
1a0070e0:	2c0a      	cmpeq	r4, #10
1a0070e2:	f080 8170 	bcs.w	1a0073c6 <_vfprintf_r+0xf26>
1a0070e6:	af56      	add	r7, sp, #344	; 0x158
1a0070e8:	3430      	adds	r4, #48	; 0x30
1a0070ea:	2301      	movs	r3, #1
1a0070ec:	f807 4d01 	strb.w	r4, [r7, #-1]!
1a0070f0:	9309      	str	r3, [sp, #36]	; 0x24
1a0070f2:	f7ff bb56 	b.w	1a0067a2 <_vfprintf_r+0x302>
1a0070f6:	aa2a      	add	r2, sp, #168	; 0xa8
1a0070f8:	9907      	ldr	r1, [sp, #28]
1a0070fa:	9803      	ldr	r0, [sp, #12]
1a0070fc:	f002 ff7e 	bl	1a009ffc <__sprint_r>
1a007100:	2800      	cmp	r0, #0
1a007102:	f47f af45 	bne.w	1a006f90 <_vfprintf_r+0xaf0>
1a007106:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a007108:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00710c:	e406      	b.n	1a00691c <_vfprintf_r+0x47c>
1a00710e:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a007110:	2b00      	cmp	r3, #0
1a007112:	f340 8273 	ble.w	1a0075fc <_vfprintf_r+0x115c>
1a007116:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a00711a:	4293      	cmp	r3, r2
1a00711c:	bfa8      	it	ge
1a00711e:	4613      	movge	r3, r2
1a007120:	2b00      	cmp	r3, #0
1a007122:	461d      	mov	r5, r3
1a007124:	dd0d      	ble.n	1a007142 <_vfprintf_r+0xca2>
1a007126:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a007128:	f8cb 7000 	str.w	r7, [fp]
1a00712c:	3301      	adds	r3, #1
1a00712e:	442c      	add	r4, r5
1a007130:	2b07      	cmp	r3, #7
1a007132:	942c      	str	r4, [sp, #176]	; 0xb0
1a007134:	f8cb 5004 	str.w	r5, [fp, #4]
1a007138:	932b      	str	r3, [sp, #172]	; 0xac
1a00713a:	f300 82c1 	bgt.w	1a0076c0 <_vfprintf_r+0x1220>
1a00713e:	f10b 0b08 	add.w	fp, fp, #8
1a007142:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a007144:	2d00      	cmp	r5, #0
1a007146:	bfa8      	it	ge
1a007148:	1b5b      	subge	r3, r3, r5
1a00714a:	2b00      	cmp	r3, #0
1a00714c:	461d      	mov	r5, r3
1a00714e:	f340 8099 	ble.w	1a007284 <_vfprintf_r+0xde4>
1a007152:	2d10      	cmp	r5, #16
1a007154:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a007156:	4b2c      	ldr	r3, [pc, #176]	; (1a007208 <_vfprintf_r+0xd68>)
1a007158:	f340 83db 	ble.w	1a007912 <_vfprintf_r+0x1472>
1a00715c:	4618      	mov	r0, r3
1a00715e:	4621      	mov	r1, r4
1a007160:	465b      	mov	r3, fp
1a007162:	2610      	movs	r6, #16
1a007164:	46bb      	mov	fp, r7
1a007166:	f8dd 900c 	ldr.w	r9, [sp, #12]
1a00716a:	9c07      	ldr	r4, [sp, #28]
1a00716c:	4607      	mov	r7, r0
1a00716e:	e004      	b.n	1a00717a <_vfprintf_r+0xcda>
1a007170:	3308      	adds	r3, #8
1a007172:	3d10      	subs	r5, #16
1a007174:	2d10      	cmp	r5, #16
1a007176:	f340 83c7 	ble.w	1a007908 <_vfprintf_r+0x1468>
1a00717a:	3201      	adds	r2, #1
1a00717c:	3110      	adds	r1, #16
1a00717e:	2a07      	cmp	r2, #7
1a007180:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
1a007184:	e9c3 7600 	strd	r7, r6, [r3]
1a007188:	ddf2      	ble.n	1a007170 <_vfprintf_r+0xcd0>
1a00718a:	aa2a      	add	r2, sp, #168	; 0xa8
1a00718c:	4621      	mov	r1, r4
1a00718e:	4648      	mov	r0, r9
1a007190:	f002 ff34 	bl	1a009ffc <__sprint_r>
1a007194:	2800      	cmp	r0, #0
1a007196:	f040 84a5 	bne.w	1a007ae4 <_vfprintf_r+0x1644>
1a00719a:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
1a00719e:	ab2d      	add	r3, sp, #180	; 0xb4
1a0071a0:	e7e7      	b.n	1a007172 <_vfprintf_r+0xcd2>
1a0071a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a0071a6:	af56      	add	r7, sp, #344	; 0x158
1a0071a8:	f7ff bafb 	b.w	1a0067a2 <_vfprintf_r+0x302>
1a0071ac:	f1b9 0f00 	cmp.w	r9, #0
1a0071b0:	f77f af4c 	ble.w	1a00704c <_vfprintf_r+0xbac>
1a0071b4:	f1b9 0f10 	cmp.w	r9, #16
1a0071b8:	4b13      	ldr	r3, [pc, #76]	; (1a007208 <_vfprintf_r+0xd68>)
1a0071ba:	f340 8659 	ble.w	1a007e70 <_vfprintf_r+0x19d0>
1a0071be:	4619      	mov	r1, r3
1a0071c0:	4622      	mov	r2, r4
1a0071c2:	4633      	mov	r3, r6
1a0071c4:	2710      	movs	r7, #16
1a0071c6:	f8dd b00c 	ldr.w	fp, [sp, #12]
1a0071ca:	9c07      	ldr	r4, [sp, #28]
1a0071cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
1a0071ce:	460e      	mov	r6, r1
1a0071d0:	e007      	b.n	1a0071e2 <_vfprintf_r+0xd42>
1a0071d2:	3308      	adds	r3, #8
1a0071d4:	f1a9 0910 	sub.w	r9, r9, #16
1a0071d8:	f1b9 0f10 	cmp.w	r9, #16
1a0071dc:	f340 8353 	ble.w	1a007886 <_vfprintf_r+0x13e6>
1a0071e0:	3501      	adds	r5, #1
1a0071e2:	3210      	adds	r2, #16
1a0071e4:	2d07      	cmp	r5, #7
1a0071e6:	e9cd 522b 	strd	r5, r2, [sp, #172]	; 0xac
1a0071ea:	e9c3 6700 	strd	r6, r7, [r3]
1a0071ee:	ddf0      	ble.n	1a0071d2 <_vfprintf_r+0xd32>
1a0071f0:	aa2a      	add	r2, sp, #168	; 0xa8
1a0071f2:	4621      	mov	r1, r4
1a0071f4:	4658      	mov	r0, fp
1a0071f6:	f002 ff01 	bl	1a009ffc <__sprint_r>
1a0071fa:	2800      	cmp	r0, #0
1a0071fc:	f040 8472 	bne.w	1a007ae4 <_vfprintf_r+0x1644>
1a007200:	e9dd 522b 	ldrd	r5, r2, [sp, #172]	; 0xac
1a007204:	ab2d      	add	r3, sp, #180	; 0xb4
1a007206:	e7e5      	b.n	1a0071d4 <_vfprintf_r+0xd34>
1a007208:	1a00a9f8 	.word	0x1a00a9f8
1a00720c:	f018 0f01 	tst.w	r8, #1
1a007210:	f47f aee0 	bne.w	1a006fd4 <_vfprintf_r+0xb34>
1a007214:	2201      	movs	r2, #1
1a007216:	2d07      	cmp	r5, #7
1a007218:	f8cb 7000 	str.w	r7, [fp]
1a00721c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
1a007220:	f8cb 2004 	str.w	r2, [fp, #4]
1a007224:	dc04      	bgt.n	1a007230 <_vfprintf_r+0xd90>
1a007226:	3302      	adds	r3, #2
1a007228:	9309      	str	r3, [sp, #36]	; 0x24
1a00722a:	f10b 0b10 	add.w	fp, fp, #16
1a00722e:	e70d      	b.n	1a00704c <_vfprintf_r+0xbac>
1a007230:	aa2a      	add	r2, sp, #168	; 0xa8
1a007232:	9907      	ldr	r1, [sp, #28]
1a007234:	9803      	ldr	r0, [sp, #12]
1a007236:	f002 fee1 	bl	1a009ffc <__sprint_r>
1a00723a:	2800      	cmp	r0, #0
1a00723c:	f47f aea8 	bne.w	1a006f90 <_vfprintf_r+0xaf0>
1a007240:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
1a007244:	3301      	adds	r3, #1
1a007246:	9309      	str	r3, [sp, #36]	; 0x24
1a007248:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
1a00724c:	ae2d      	add	r6, sp, #180	; 0xb4
1a00724e:	e6fd      	b.n	1a00704c <_vfprintf_r+0xbac>
1a007250:	aa2a      	add	r2, sp, #168	; 0xa8
1a007252:	9907      	ldr	r1, [sp, #28]
1a007254:	9803      	ldr	r0, [sp, #12]
1a007256:	f002 fed1 	bl	1a009ffc <__sprint_r>
1a00725a:	2800      	cmp	r0, #0
1a00725c:	f47f ae98 	bne.w	1a006f90 <_vfprintf_r+0xaf0>
1a007260:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a007264:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a007266:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00726a:	f7ff baf6 	b.w	1a00685a <_vfprintf_r+0x3ba>
1a00726e:	aa2a      	add	r2, sp, #168	; 0xa8
1a007270:	9907      	ldr	r1, [sp, #28]
1a007272:	9803      	ldr	r0, [sp, #12]
1a007274:	f002 fec2 	bl	1a009ffc <__sprint_r>
1a007278:	2800      	cmp	r0, #0
1a00727a:	f47f ae89 	bne.w	1a006f90 <_vfprintf_r+0xaf0>
1a00727e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a007280:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a007284:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a007286:	f418 6f80 	tst.w	r8, #1024	; 0x400
1a00728a:	443b      	add	r3, r7
1a00728c:	4699      	mov	r9, r3
1a00728e:	f040 8357 	bne.w	1a007940 <_vfprintf_r+0x14a0>
1a007292:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a007294:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a007296:	4293      	cmp	r3, r2
1a007298:	db49      	blt.n	1a00732e <_vfprintf_r+0xe8e>
1a00729a:	f018 0f01 	tst.w	r8, #1
1a00729e:	d146      	bne.n	1a00732e <_vfprintf_r+0xe8e>
1a0072a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a0072a2:	18bd      	adds	r5, r7, r2
1a0072a4:	eba5 0509 	sub.w	r5, r5, r9
1a0072a8:	1ad3      	subs	r3, r2, r3
1a0072aa:	429d      	cmp	r5, r3
1a0072ac:	bfa8      	it	ge
1a0072ae:	461d      	movge	r5, r3
1a0072b0:	2d00      	cmp	r5, #0
1a0072b2:	dd0d      	ble.n	1a0072d0 <_vfprintf_r+0xe30>
1a0072b4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a0072b6:	f8cb 9000 	str.w	r9, [fp]
1a0072ba:	3201      	adds	r2, #1
1a0072bc:	442c      	add	r4, r5
1a0072be:	2a07      	cmp	r2, #7
1a0072c0:	942c      	str	r4, [sp, #176]	; 0xb0
1a0072c2:	f8cb 5004 	str.w	r5, [fp, #4]
1a0072c6:	922b      	str	r2, [sp, #172]	; 0xac
1a0072c8:	f300 8462 	bgt.w	1a007b90 <_vfprintf_r+0x16f0>
1a0072cc:	f10b 0b08 	add.w	fp, fp, #8
1a0072d0:	2d00      	cmp	r5, #0
1a0072d2:	bfac      	ite	ge
1a0072d4:	1b5d      	subge	r5, r3, r5
1a0072d6:	461d      	movlt	r5, r3
1a0072d8:	2d00      	cmp	r5, #0
1a0072da:	f77f ab32 	ble.w	1a006942 <_vfprintf_r+0x4a2>
1a0072de:	2d10      	cmp	r5, #16
1a0072e0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a0072e2:	4bc5      	ldr	r3, [pc, #788]	; (1a0075f8 <_vfprintf_r+0x1158>)
1a0072e4:	f340 80c4 	ble.w	1a007470 <_vfprintf_r+0xfd0>
1a0072e8:	4619      	mov	r1, r3
1a0072ea:	2610      	movs	r6, #16
1a0072ec:	4623      	mov	r3, r4
1a0072ee:	9f03      	ldr	r7, [sp, #12]
1a0072f0:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0072f4:	460c      	mov	r4, r1
1a0072f6:	e005      	b.n	1a007304 <_vfprintf_r+0xe64>
1a0072f8:	f10b 0b08 	add.w	fp, fp, #8
1a0072fc:	3d10      	subs	r5, #16
1a0072fe:	2d10      	cmp	r5, #16
1a007300:	f340 80b3 	ble.w	1a00746a <_vfprintf_r+0xfca>
1a007304:	3201      	adds	r2, #1
1a007306:	3310      	adds	r3, #16
1a007308:	2a07      	cmp	r2, #7
1a00730a:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
1a00730e:	e9cb 4600 	strd	r4, r6, [fp]
1a007312:	ddf1      	ble.n	1a0072f8 <_vfprintf_r+0xe58>
1a007314:	aa2a      	add	r2, sp, #168	; 0xa8
1a007316:	4649      	mov	r1, r9
1a007318:	4638      	mov	r0, r7
1a00731a:	f002 fe6f 	bl	1a009ffc <__sprint_r>
1a00731e:	2800      	cmp	r0, #0
1a007320:	f47f ae38 	bne.w	1a006f94 <_vfprintf_r+0xaf4>
1a007324:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
1a007328:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00732c:	e7e6      	b.n	1a0072fc <_vfprintf_r+0xe5c>
1a00732e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a007330:	9916      	ldr	r1, [sp, #88]	; 0x58
1a007332:	f8cb 1000 	str.w	r1, [fp]
1a007336:	9915      	ldr	r1, [sp, #84]	; 0x54
1a007338:	f8cb 1004 	str.w	r1, [fp, #4]
1a00733c:	3201      	adds	r2, #1
1a00733e:	440c      	add	r4, r1
1a007340:	2a07      	cmp	r2, #7
1a007342:	942c      	str	r4, [sp, #176]	; 0xb0
1a007344:	922b      	str	r2, [sp, #172]	; 0xac
1a007346:	f300 828c 	bgt.w	1a007862 <_vfprintf_r+0x13c2>
1a00734a:	f10b 0b08 	add.w	fp, fp, #8
1a00734e:	e7a7      	b.n	1a0072a0 <_vfprintf_r+0xe00>
1a007350:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a007354:	f7fe fbc2 	bl	1a005adc <__retarget_lock_release_recursive>
1a007358:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00735c:	e628      	b.n	1a006fb0 <_vfprintf_r+0xb10>
1a00735e:	aa2a      	add	r2, sp, #168	; 0xa8
1a007360:	9907      	ldr	r1, [sp, #28]
1a007362:	9803      	ldr	r0, [sp, #12]
1a007364:	f002 fe4a 	bl	1a009ffc <__sprint_r>
1a007368:	2800      	cmp	r0, #0
1a00736a:	f47f ae11 	bne.w	1a006f90 <_vfprintf_r+0xaf0>
1a00736e:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
1a007372:	ae2d      	add	r6, sp, #180	; 0xb4
1a007374:	e638      	b.n	1a006fe8 <_vfprintf_r+0xb48>
1a007376:	aa2a      	add	r2, sp, #168	; 0xa8
1a007378:	9907      	ldr	r1, [sp, #28]
1a00737a:	9803      	ldr	r0, [sp, #12]
1a00737c:	f002 fe3e 	bl	1a009ffc <__sprint_r>
1a007380:	2800      	cmp	r0, #0
1a007382:	f47f ae05 	bne.w	1a006f90 <_vfprintf_r+0xaf0>
1a007386:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
1a00738a:	ae2d      	add	r6, sp, #180	; 0xb4
1a00738c:	930b      	str	r3, [sp, #44]	; 0x2c
1a00738e:	e638      	b.n	1a007002 <_vfprintf_r+0xb62>
1a007390:	6814      	ldr	r4, [r2, #0]
1a007392:	9308      	str	r3, [sp, #32]
1a007394:	2500      	movs	r5, #0
1a007396:	f7ff bb95 	b.w	1a006ac4 <_vfprintf_r+0x624>
1a00739a:	6814      	ldr	r4, [r2, #0]
1a00739c:	9308      	str	r3, [sp, #32]
1a00739e:	2500      	movs	r5, #0
1a0073a0:	f7ff b9ae 	b.w	1a006700 <_vfprintf_r+0x260>
1a0073a4:	680c      	ldr	r4, [r1, #0]
1a0073a6:	9208      	str	r2, [sp, #32]
1a0073a8:	17e5      	asrs	r5, r4, #31
1a0073aa:	4620      	mov	r0, r4
1a0073ac:	4629      	mov	r1, r5
1a0073ae:	f7ff b9d2 	b.w	1a006756 <_vfprintf_r+0x2b6>
1a0073b2:	6814      	ldr	r4, [r2, #0]
1a0073b4:	9108      	str	r1, [sp, #32]
1a0073b6:	2201      	movs	r2, #1
1a0073b8:	2500      	movs	r5, #0
1a0073ba:	f7ff bb32 	b.w	1a006a22 <_vfprintf_r+0x582>
1a0073be:	2a01      	cmp	r2, #1
1a0073c0:	f47f ab3c 	bne.w	1a006a3c <_vfprintf_r+0x59c>
1a0073c4:	e68f      	b.n	1a0070e6 <_vfprintf_r+0xc46>
1a0073c6:	f408 6380 	and.w	r3, r8, #1024	; 0x400
1a0073ca:	2200      	movs	r2, #0
1a0073cc:	e9cd a609 	strd	sl, r6, [sp, #36]	; 0x24
1a0073d0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
1a0073d4:	af56      	add	r7, sp, #344	; 0x158
1a0073d6:	4692      	mov	sl, r2
1a0073d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
1a0073dc:	461e      	mov	r6, r3
1a0073de:	e00a      	b.n	1a0073f6 <_vfprintf_r+0xf56>
1a0073e0:	2300      	movs	r3, #0
1a0073e2:	4620      	mov	r0, r4
1a0073e4:	4629      	mov	r1, r5
1a0073e6:	220a      	movs	r2, #10
1a0073e8:	f7fd feac 	bl	1a005144 <__aeabi_uldivmod>
1a0073ec:	4604      	mov	r4, r0
1a0073ee:	460d      	mov	r5, r1
1a0073f0:	ea54 0305 	orrs.w	r3, r4, r5
1a0073f4:	d029      	beq.n	1a00744a <_vfprintf_r+0xfaa>
1a0073f6:	220a      	movs	r2, #10
1a0073f8:	2300      	movs	r3, #0
1a0073fa:	4620      	mov	r0, r4
1a0073fc:	4629      	mov	r1, r5
1a0073fe:	f7fd fea1 	bl	1a005144 <__aeabi_uldivmod>
1a007402:	3230      	adds	r2, #48	; 0x30
1a007404:	f807 2c01 	strb.w	r2, [r7, #-1]
1a007408:	f10a 0a01 	add.w	sl, sl, #1
1a00740c:	3f01      	subs	r7, #1
1a00740e:	2e00      	cmp	r6, #0
1a007410:	d0e6      	beq.n	1a0073e0 <_vfprintf_r+0xf40>
1a007412:	f898 3000 	ldrb.w	r3, [r8]
1a007416:	459a      	cmp	sl, r3
1a007418:	d1e2      	bne.n	1a0073e0 <_vfprintf_r+0xf40>
1a00741a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
1a00741e:	d0df      	beq.n	1a0073e0 <_vfprintf_r+0xf40>
1a007420:	2d00      	cmp	r5, #0
1a007422:	bf08      	it	eq
1a007424:	2c0a      	cmpeq	r4, #10
1a007426:	d3db      	bcc.n	1a0073e0 <_vfprintf_r+0xf40>
1a007428:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a00742a:	9918      	ldr	r1, [sp, #96]	; 0x60
1a00742c:	1aff      	subs	r7, r7, r3
1a00742e:	461a      	mov	r2, r3
1a007430:	4638      	mov	r0, r7
1a007432:	f002 fd75 	bl	1a009f20 <strncpy>
1a007436:	f898 3001 	ldrb.w	r3, [r8, #1]
1a00743a:	2b00      	cmp	r3, #0
1a00743c:	f000 8496 	beq.w	1a007d6c <_vfprintf_r+0x18cc>
1a007440:	f108 0801 	add.w	r8, r8, #1
1a007444:	f04f 0a00 	mov.w	sl, #0
1a007448:	e7ca      	b.n	1a0073e0 <_vfprintf_r+0xf40>
1a00744a:	9b04      	ldr	r3, [sp, #16]
1a00744c:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
1a007450:	1bdb      	subs	r3, r3, r7
1a007452:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
1a007456:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a007458:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
1a00745c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
1a007460:	9309      	str	r3, [sp, #36]	; 0x24
1a007462:	f7ff b99e 	b.w	1a0067a2 <_vfprintf_r+0x302>
1a007466:	46c1      	mov	r9, r8
1a007468:	e594      	b.n	1a006f94 <_vfprintf_r+0xaf4>
1a00746a:	4621      	mov	r1, r4
1a00746c:	461c      	mov	r4, r3
1a00746e:	460b      	mov	r3, r1
1a007470:	3201      	adds	r2, #1
1a007472:	442c      	add	r4, r5
1a007474:	2a07      	cmp	r2, #7
1a007476:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a00747a:	e9cb 3500 	strd	r3, r5, [fp]
1a00747e:	f77f aa5e 	ble.w	1a00693e <_vfprintf_r+0x49e>
1a007482:	e5ee      	b.n	1a007062 <_vfprintf_r+0xbc2>
1a007484:	f018 0f10 	tst.w	r8, #16
1a007488:	f040 80f8 	bne.w	1a00767c <_vfprintf_r+0x11dc>
1a00748c:	f018 0f40 	tst.w	r8, #64	; 0x40
1a007490:	f000 8351 	beq.w	1a007b36 <_vfprintf_r+0x1696>
1a007494:	9a05      	ldr	r2, [sp, #20]
1a007496:	801a      	strh	r2, [r3, #0]
1a007498:	4657      	mov	r7, sl
1a00749a:	f7ff baa7 	b.w	1a0069ec <_vfprintf_r+0x54c>
1a00749e:	aa2a      	add	r2, sp, #168	; 0xa8
1a0074a0:	9907      	ldr	r1, [sp, #28]
1a0074a2:	9803      	ldr	r0, [sp, #12]
1a0074a4:	f002 fdaa 	bl	1a009ffc <__sprint_r>
1a0074a8:	2800      	cmp	r0, #0
1a0074aa:	f47f ad71 	bne.w	1a006f90 <_vfprintf_r+0xaf0>
1a0074ae:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0074b0:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0074b4:	f7ff b9f5 	b.w	1a0068a2 <_vfprintf_r+0x402>
1a0074b8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a0074bc:	4602      	mov	r2, r0
1a0074be:	460b      	mov	r3, r1
1a0074c0:	f002 fedc 	bl	1a00a27c <__aeabi_dcmpun>
1a0074c4:	2800      	cmp	r0, #0
1a0074c6:	f040 8491 	bne.w	1a007dec <_vfprintf_r+0x194c>
1a0074ca:	2e61      	cmp	r6, #97	; 0x61
1a0074cc:	f000 8111 	beq.w	1a0076f2 <_vfprintf_r+0x1252>
1a0074d0:	2e41      	cmp	r6, #65	; 0x41
1a0074d2:	f000 8377 	beq.w	1a007bc4 <_vfprintf_r+0x1724>
1a0074d6:	f448 7380 	orr.w	r3, r8, #256	; 0x100
1a0074da:	f026 0220 	bic.w	r2, r6, #32
1a0074de:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a0074e2:	930e      	str	r3, [sp, #56]	; 0x38
1a0074e4:	9204      	str	r2, [sp, #16]
1a0074e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0074e8:	f000 842d 	beq.w	1a007d46 <_vfprintf_r+0x18a6>
1a0074ec:	2a47      	cmp	r2, #71	; 0x47
1a0074ee:	f000 8424 	beq.w	1a007d3a <_vfprintf_r+0x189a>
1a0074f2:	2b00      	cmp	r3, #0
1a0074f4:	f2c0 82f9 	blt.w	1a007aea <_vfprintf_r+0x164a>
1a0074f8:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
1a0074fc:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
1a007500:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
1a007504:	2e66      	cmp	r6, #102	; 0x66
1a007506:	f000 83eb 	beq.w	1a007ce0 <_vfprintf_r+0x1840>
1a00750a:	2e46      	cmp	r6, #70	; 0x46
1a00750c:	f000 847e 	beq.w	1a007e0c <_vfprintf_r+0x196c>
1a007510:	9b04      	ldr	r3, [sp, #16]
1a007512:	9803      	ldr	r0, [sp, #12]
1a007514:	2b45      	cmp	r3, #69	; 0x45
1a007516:	bf0c      	ite	eq
1a007518:	f109 0501 	addeq.w	r5, r9, #1
1a00751c:	464d      	movne	r5, r9
1a00751e:	aa28      	add	r2, sp, #160	; 0xa0
1a007520:	ab25      	add	r3, sp, #148	; 0x94
1a007522:	e9cd 3200 	strd	r3, r2, [sp]
1a007526:	2102      	movs	r1, #2
1a007528:	ab24      	add	r3, sp, #144	; 0x90
1a00752a:	462a      	mov	r2, r5
1a00752c:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a007530:	f000 fe3e 	bl	1a0081b0 <_dtoa_r>
1a007534:	2e67      	cmp	r6, #103	; 0x67
1a007536:	4607      	mov	r7, r0
1a007538:	f040 849c 	bne.w	1a007e74 <_vfprintf_r+0x19d4>
1a00753c:	f018 0f01 	tst.w	r8, #1
1a007540:	f040 83f9 	bne.w	1a007d36 <_vfprintf_r+0x1896>
1a007544:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1a007546:	4640      	mov	r0, r8
1a007548:	1bdb      	subs	r3, r3, r7
1a00754a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a00754e:	9310      	str	r3, [sp, #64]	; 0x40
1a007550:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a007552:	9311      	str	r3, [sp, #68]	; 0x44
1a007554:	9b04      	ldr	r3, [sp, #16]
1a007556:	2b47      	cmp	r3, #71	; 0x47
1a007558:	f000 81e7 	beq.w	1a00792a <_vfprintf_r+0x148a>
1a00755c:	9b04      	ldr	r3, [sp, #16]
1a00755e:	2b46      	cmp	r3, #70	; 0x46
1a007560:	f000 8300 	beq.w	1a007b64 <_vfprintf_r+0x16c4>
1a007564:	9904      	ldr	r1, [sp, #16]
1a007566:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a007568:	b2f2      	uxtb	r2, r6
1a00756a:	2941      	cmp	r1, #65	; 0x41
1a00756c:	bf08      	it	eq
1a00756e:	320f      	addeq	r2, #15
1a007570:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
1a007574:	bf06      	itte	eq
1a007576:	b2d2      	uxtbeq	r2, r2
1a007578:	2101      	moveq	r1, #1
1a00757a:	2100      	movne	r1, #0
1a00757c:	2b00      	cmp	r3, #0
1a00757e:	9324      	str	r3, [sp, #144]	; 0x90
1a007580:	bfb8      	it	lt
1a007582:	9b11      	ldrlt	r3, [sp, #68]	; 0x44
1a007584:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
1a007588:	bfba      	itte	lt
1a00758a:	f1c3 0301 	rsblt	r3, r3, #1
1a00758e:	222d      	movlt	r2, #45	; 0x2d
1a007590:	222b      	movge	r2, #43	; 0x2b
1a007592:	2b09      	cmp	r3, #9
1a007594:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
1a007598:	f300 83f9 	bgt.w	1a007d8e <_vfprintf_r+0x18ee>
1a00759c:	2900      	cmp	r1, #0
1a00759e:	f040 8487 	bne.w	1a007eb0 <_vfprintf_r+0x1a10>
1a0075a2:	2230      	movs	r2, #48	; 0x30
1a0075a4:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
1a0075a8:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
1a0075ac:	3330      	adds	r3, #48	; 0x30
1a0075ae:	7013      	strb	r3, [r2, #0]
1a0075b0:	1c53      	adds	r3, r2, #1
1a0075b2:	aa26      	add	r2, sp, #152	; 0x98
1a0075b4:	1a9b      	subs	r3, r3, r2
1a0075b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a0075b8:	9319      	str	r3, [sp, #100]	; 0x64
1a0075ba:	2a01      	cmp	r2, #1
1a0075bc:	4413      	add	r3, r2
1a0075be:	9309      	str	r3, [sp, #36]	; 0x24
1a0075c0:	f340 8442 	ble.w	1a007e48 <_vfprintf_r+0x19a8>
1a0075c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0075c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a0075c8:	4413      	add	r3, r2
1a0075ca:	9309      	str	r3, [sp, #36]	; 0x24
1a0075cc:	2300      	movs	r3, #0
1a0075ce:	930f      	str	r3, [sp, #60]	; 0x3c
1a0075d0:	9314      	str	r3, [sp, #80]	; 0x50
1a0075d2:	9311      	str	r3, [sp, #68]	; 0x44
1a0075d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0075d6:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
1a0075da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a0075de:	f440 7880 	orr.w	r8, r0, #256	; 0x100
1a0075e2:	9304      	str	r3, [sp, #16]
1a0075e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0075e6:	2b00      	cmp	r3, #0
1a0075e8:	f040 8275 	bne.w	1a007ad6 <_vfprintf_r+0x1636>
1a0075ec:	4699      	mov	r9, r3
1a0075ee:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a0075f2:	f7ff b8e2 	b.w	1a0067ba <_vfprintf_r+0x31a>
1a0075f6:	bf00      	nop
1a0075f8:	1a00a9f8 	.word	0x1a00a9f8
1a0075fc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a0075fe:	49bd      	ldr	r1, [pc, #756]	; (1a0078f4 <_vfprintf_r+0x1454>)
1a007600:	f8cb 1000 	str.w	r1, [fp]
1a007604:	3201      	adds	r2, #1
1a007606:	3401      	adds	r4, #1
1a007608:	2101      	movs	r1, #1
1a00760a:	2a07      	cmp	r2, #7
1a00760c:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a007610:	f8cb 1004 	str.w	r1, [fp, #4]
1a007614:	dc60      	bgt.n	1a0076d8 <_vfprintf_r+0x1238>
1a007616:	f10b 0b08 	add.w	fp, fp, #8
1a00761a:	b92b      	cbnz	r3, 1a007628 <_vfprintf_r+0x1188>
1a00761c:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a00761e:	b91a      	cbnz	r2, 1a007628 <_vfprintf_r+0x1188>
1a007620:	f018 0f01 	tst.w	r8, #1
1a007624:	f43f a98d 	beq.w	1a006942 <_vfprintf_r+0x4a2>
1a007628:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a00762a:	9916      	ldr	r1, [sp, #88]	; 0x58
1a00762c:	f8cb 1000 	str.w	r1, [fp]
1a007630:	9915      	ldr	r1, [sp, #84]	; 0x54
1a007632:	f8cb 1004 	str.w	r1, [fp, #4]
1a007636:	3201      	adds	r2, #1
1a007638:	440c      	add	r4, r1
1a00763a:	2a07      	cmp	r2, #7
1a00763c:	942c      	str	r4, [sp, #176]	; 0xb0
1a00763e:	922b      	str	r2, [sp, #172]	; 0xac
1a007640:	f300 8282 	bgt.w	1a007b48 <_vfprintf_r+0x16a8>
1a007644:	f10b 0b08 	add.w	fp, fp, #8
1a007648:	2b00      	cmp	r3, #0
1a00764a:	f2c0 82e7 	blt.w	1a007c1c <_vfprintf_r+0x177c>
1a00764e:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a007650:	3201      	adds	r2, #1
1a007652:	441c      	add	r4, r3
1a007654:	2a07      	cmp	r2, #7
1a007656:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a00765a:	e9cb 7300 	strd	r7, r3, [fp]
1a00765e:	f77f a96e 	ble.w	1a00693e <_vfprintf_r+0x49e>
1a007662:	e4fe      	b.n	1a007062 <_vfprintf_r+0xbc2>
1a007664:	aa2a      	add	r2, sp, #168	; 0xa8
1a007666:	9907      	ldr	r1, [sp, #28]
1a007668:	9803      	ldr	r0, [sp, #12]
1a00766a:	f002 fcc7 	bl	1a009ffc <__sprint_r>
1a00766e:	2800      	cmp	r0, #0
1a007670:	f47f ac8e 	bne.w	1a006f90 <_vfprintf_r+0xaf0>
1a007674:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a007678:	f7ff bbf0 	b.w	1a006e5c <_vfprintf_r+0x9bc>
1a00767c:	9a05      	ldr	r2, [sp, #20]
1a00767e:	601a      	str	r2, [r3, #0]
1a007680:	4657      	mov	r7, sl
1a007682:	f7ff b9b3 	b.w	1a0069ec <_vfprintf_r+0x54c>
1a007686:	8814      	ldrh	r4, [r2, #0]
1a007688:	9108      	str	r1, [sp, #32]
1a00768a:	2500      	movs	r5, #0
1a00768c:	2201      	movs	r2, #1
1a00768e:	f7ff b9c8 	b.w	1a006a22 <_vfprintf_r+0x582>
1a007692:	8814      	ldrh	r4, [r2, #0]
1a007694:	9308      	str	r3, [sp, #32]
1a007696:	2500      	movs	r5, #0
1a007698:	f7ff ba14 	b.w	1a006ac4 <_vfprintf_r+0x624>
1a00769c:	f9b1 4000 	ldrsh.w	r4, [r1]
1a0076a0:	9208      	str	r2, [sp, #32]
1a0076a2:	17e5      	asrs	r5, r4, #31
1a0076a4:	4620      	mov	r0, r4
1a0076a6:	4629      	mov	r1, r5
1a0076a8:	f7ff b855 	b.w	1a006756 <_vfprintf_r+0x2b6>
1a0076ac:	8814      	ldrh	r4, [r2, #0]
1a0076ae:	9308      	str	r3, [sp, #32]
1a0076b0:	2500      	movs	r5, #0
1a0076b2:	f7ff b825 	b.w	1a006700 <_vfprintf_r+0x260>
1a0076b6:	222d      	movs	r2, #45	; 0x2d
1a0076b8:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
1a0076bc:	f7ff baa2 	b.w	1a006c04 <_vfprintf_r+0x764>
1a0076c0:	aa2a      	add	r2, sp, #168	; 0xa8
1a0076c2:	9907      	ldr	r1, [sp, #28]
1a0076c4:	9803      	ldr	r0, [sp, #12]
1a0076c6:	f002 fc99 	bl	1a009ffc <__sprint_r>
1a0076ca:	2800      	cmp	r0, #0
1a0076cc:	f47f ac60 	bne.w	1a006f90 <_vfprintf_r+0xaf0>
1a0076d0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0076d2:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0076d6:	e534      	b.n	1a007142 <_vfprintf_r+0xca2>
1a0076d8:	aa2a      	add	r2, sp, #168	; 0xa8
1a0076da:	9907      	ldr	r1, [sp, #28]
1a0076dc:	9803      	ldr	r0, [sp, #12]
1a0076de:	f002 fc8d 	bl	1a009ffc <__sprint_r>
1a0076e2:	2800      	cmp	r0, #0
1a0076e4:	f47f ac54 	bne.w	1a006f90 <_vfprintf_r+0xaf0>
1a0076e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a0076ea:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0076ec:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0076f0:	e793      	b.n	1a00761a <_vfprintf_r+0x117a>
1a0076f2:	2330      	movs	r3, #48	; 0x30
1a0076f4:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
1a0076f8:	2378      	movs	r3, #120	; 0x78
1a0076fa:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
1a0076fe:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
1a007702:	f048 0402 	orr.w	r4, r8, #2
1a007706:	f300 82b0 	bgt.w	1a007c6a <_vfprintf_r+0x17ca>
1a00770a:	f448 7381 	orr.w	r3, r8, #258	; 0x102
1a00770e:	930e      	str	r3, [sp, #56]	; 0x38
1a007710:	f026 0320 	bic.w	r3, r6, #32
1a007714:	9304      	str	r3, [sp, #16]
1a007716:	2200      	movs	r2, #0
1a007718:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00771a:	920a      	str	r2, [sp, #40]	; 0x28
1a00771c:	46a0      	mov	r8, r4
1a00771e:	af3d      	add	r7, sp, #244	; 0xf4
1a007720:	2b00      	cmp	r3, #0
1a007722:	f2c0 81e3 	blt.w	1a007aec <_vfprintf_r+0x164c>
1a007726:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
1a00772a:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
1a00772e:	2300      	movs	r3, #0
1a007730:	930b      	str	r3, [sp, #44]	; 0x2c
1a007732:	2e61      	cmp	r6, #97	; 0x61
1a007734:	f000 8255 	beq.w	1a007be2 <_vfprintf_r+0x1742>
1a007738:	2e41      	cmp	r6, #65	; 0x41
1a00773a:	f47f aee3 	bne.w	1a007504 <_vfprintf_r+0x1064>
1a00773e:	a824      	add	r0, sp, #144	; 0x90
1a007740:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a007744:	f002 fbb8 	bl	1a009eb8 <frexp>
1a007748:	2200      	movs	r2, #0
1a00774a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a00774e:	ec51 0b10 	vmov	r0, r1, d0
1a007752:	f7fd fa0d 	bl	1a004b70 <__aeabi_dmul>
1a007756:	2200      	movs	r2, #0
1a007758:	2300      	movs	r3, #0
1a00775a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00775e:	f7fd fc6f 	bl	1a005040 <__aeabi_dcmpeq>
1a007762:	2800      	cmp	r0, #0
1a007764:	f040 8305 	bne.w	1a007d72 <_vfprintf_r+0x18d2>
1a007768:	4b63      	ldr	r3, [pc, #396]	; (1a0078f8 <_vfprintf_r+0x1458>)
1a00776a:	9309      	str	r3, [sp, #36]	; 0x24
1a00776c:	e9cd a60f 	strd	sl, r6, [sp, #60]	; 0x3c
1a007770:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
1a007774:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
1a007778:	9721      	str	r7, [sp, #132]	; 0x84
1a00777a:	46b9      	mov	r9, r7
1a00777c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
1a007780:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
1a007784:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
1a007788:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
1a00778c:	e003      	b.n	1a007796 <_vfprintf_r+0x12f6>
1a00778e:	f7fd fc57 	bl	1a005040 <__aeabi_dcmpeq>
1a007792:	bb20      	cbnz	r0, 1a0077de <_vfprintf_r+0x133e>
1a007794:	46a9      	mov	r9, r5
1a007796:	2200      	movs	r2, #0
1a007798:	4b58      	ldr	r3, [pc, #352]	; (1a0078fc <_vfprintf_r+0x145c>)
1a00779a:	4630      	mov	r0, r6
1a00779c:	4639      	mov	r1, r7
1a00779e:	f7fd f9e7 	bl	1a004b70 <__aeabi_dmul>
1a0077a2:	460f      	mov	r7, r1
1a0077a4:	4606      	mov	r6, r0
1a0077a6:	f002 fd7f 	bl	1a00a2a8 <__aeabi_d2iz>
1a0077aa:	4680      	mov	r8, r0
1a0077ac:	f7fd f976 	bl	1a004a9c <__aeabi_i2d>
1a0077b0:	4602      	mov	r2, r0
1a0077b2:	460b      	mov	r3, r1
1a0077b4:	4630      	mov	r0, r6
1a0077b6:	4639      	mov	r1, r7
1a0077b8:	f7fd f822 	bl	1a004800 <__aeabi_dsub>
1a0077bc:	464d      	mov	r5, r9
1a0077be:	f81a c008 	ldrb.w	ip, [sl, r8]
1a0077c2:	f805 cb01 	strb.w	ip, [r5], #1
1a0077c6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a0077ca:	46a3      	mov	fp, r4
1a0077cc:	4606      	mov	r6, r0
1a0077ce:	460f      	mov	r7, r1
1a0077d0:	f04f 0200 	mov.w	r2, #0
1a0077d4:	f04f 0300 	mov.w	r3, #0
1a0077d8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
1a0077dc:	d1d7      	bne.n	1a00778e <_vfprintf_r+0x12ee>
1a0077de:	4630      	mov	r0, r6
1a0077e0:	4639      	mov	r1, r7
1a0077e2:	2200      	movs	r2, #0
1a0077e4:	4b46      	ldr	r3, [pc, #280]	; (1a007900 <_vfprintf_r+0x1460>)
1a0077e6:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
1a0077ea:	9e10      	ldr	r6, [sp, #64]	; 0x40
1a0077ec:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
1a0077f0:	4644      	mov	r4, r8
1a0077f2:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a0077f6:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
1a0077fa:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
1a0077fe:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
1a007802:	9f21      	ldr	r7, [sp, #132]	; 0x84
1a007804:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a007808:	f7fd fc42 	bl	1a005090 <__aeabi_dcmpgt>
1a00780c:	2800      	cmp	r0, #0
1a00780e:	f040 8176 	bne.w	1a007afe <_vfprintf_r+0x165e>
1a007812:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a007816:	2200      	movs	r2, #0
1a007818:	4b39      	ldr	r3, [pc, #228]	; (1a007900 <_vfprintf_r+0x1460>)
1a00781a:	f7fd fc11 	bl	1a005040 <__aeabi_dcmpeq>
1a00781e:	b110      	cbz	r0, 1a007826 <_vfprintf_r+0x1386>
1a007820:	07e2      	lsls	r2, r4, #31
1a007822:	f100 816c 	bmi.w	1a007afe <_vfprintf_r+0x165e>
1a007826:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a007828:	2b00      	cmp	r3, #0
1a00782a:	db07      	blt.n	1a00783c <_vfprintf_r+0x139c>
1a00782c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00782e:	3301      	adds	r3, #1
1a007830:	442b      	add	r3, r5
1a007832:	2230      	movs	r2, #48	; 0x30
1a007834:	f805 2b01 	strb.w	r2, [r5], #1
1a007838:	42ab      	cmp	r3, r5
1a00783a:	d1fb      	bne.n	1a007834 <_vfprintf_r+0x1394>
1a00783c:	1beb      	subs	r3, r5, r7
1a00783e:	4640      	mov	r0, r8
1a007840:	9310      	str	r3, [sp, #64]	; 0x40
1a007842:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a007846:	e683      	b.n	1a007550 <_vfprintf_r+0x10b0>
1a007848:	f8cd 9010 	str.w	r9, [sp, #16]
1a00784c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a007850:	9408      	str	r4, [sp, #32]
1a007852:	4681      	mov	r9, r0
1a007854:	900f      	str	r0, [sp, #60]	; 0x3c
1a007856:	9014      	str	r0, [sp, #80]	; 0x50
1a007858:	9011      	str	r0, [sp, #68]	; 0x44
1a00785a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a00785e:	f7fe bfac 	b.w	1a0067ba <_vfprintf_r+0x31a>
1a007862:	aa2a      	add	r2, sp, #168	; 0xa8
1a007864:	9907      	ldr	r1, [sp, #28]
1a007866:	9803      	ldr	r0, [sp, #12]
1a007868:	f002 fbc8 	bl	1a009ffc <__sprint_r>
1a00786c:	2800      	cmp	r0, #0
1a00786e:	f47f ab8f 	bne.w	1a006f90 <_vfprintf_r+0xaf0>
1a007872:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a007874:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a007876:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00787a:	e511      	b.n	1a0072a0 <_vfprintf_r+0xe00>
1a00787c:	4252      	negs	r2, r2
1a00787e:	9206      	str	r2, [sp, #24]
1a007880:	9308      	str	r3, [sp, #32]
1a007882:	f7ff b96d 	b.w	1a006b60 <_vfprintf_r+0x6c0>
1a007886:	4614      	mov	r4, r2
1a007888:	4632      	mov	r2, r6
1a00788a:	461e      	mov	r6, r3
1a00788c:	4613      	mov	r3, r2
1a00788e:	462a      	mov	r2, r5
1a007890:	3201      	adds	r2, #1
1a007892:	9209      	str	r2, [sp, #36]	; 0x24
1a007894:	f106 0208 	add.w	r2, r6, #8
1a007898:	e9c6 3900 	strd	r3, r9, [r6]
1a00789c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00789e:	932b      	str	r3, [sp, #172]	; 0xac
1a0078a0:	444c      	add	r4, r9
1a0078a2:	2b07      	cmp	r3, #7
1a0078a4:	942c      	str	r4, [sp, #176]	; 0xb0
1a0078a6:	f73f acc3 	bgt.w	1a007230 <_vfprintf_r+0xd90>
1a0078aa:	3301      	adds	r3, #1
1a0078ac:	9309      	str	r3, [sp, #36]	; 0x24
1a0078ae:	f102 0b08 	add.w	fp, r2, #8
1a0078b2:	4616      	mov	r6, r2
1a0078b4:	f7ff bbca 	b.w	1a00704c <_vfprintf_r+0xbac>
1a0078b8:	aa2a      	add	r2, sp, #168	; 0xa8
1a0078ba:	9907      	ldr	r1, [sp, #28]
1a0078bc:	9803      	ldr	r0, [sp, #12]
1a0078be:	f002 fb9d 	bl	1a009ffc <__sprint_r>
1a0078c2:	2800      	cmp	r0, #0
1a0078c4:	f47f ab64 	bne.w	1a006f90 <_vfprintf_r+0xaf0>
1a0078c8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0078ca:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0078ce:	f7ff bade 	b.w	1a006e8e <_vfprintf_r+0x9ee>
1a0078d2:	464b      	mov	r3, r9
1a0078d4:	2b06      	cmp	r3, #6
1a0078d6:	bf28      	it	cs
1a0078d8:	2306      	movcs	r3, #6
1a0078da:	46b9      	mov	r9, r7
1a0078dc:	970f      	str	r7, [sp, #60]	; 0x3c
1a0078de:	9714      	str	r7, [sp, #80]	; 0x50
1a0078e0:	9711      	str	r7, [sp, #68]	; 0x44
1a0078e2:	970a      	str	r7, [sp, #40]	; 0x28
1a0078e4:	463a      	mov	r2, r7
1a0078e6:	9304      	str	r3, [sp, #16]
1a0078e8:	e9cd 4308 	strd	r4, r3, [sp, #32]
1a0078ec:	4f05      	ldr	r7, [pc, #20]	; (1a007904 <_vfprintf_r+0x1464>)
1a0078ee:	f7fe bf64 	b.w	1a0067ba <_vfprintf_r+0x31a>
1a0078f2:	bf00      	nop
1a0078f4:	1a00a9e4 	.word	0x1a00a9e4
1a0078f8:	1a00a9c8 	.word	0x1a00a9c8
1a0078fc:	40300000 	.word	0x40300000
1a007900:	3fe00000 	.word	0x3fe00000
1a007904:	1a00a9dc 	.word	0x1a00a9dc
1a007908:	460c      	mov	r4, r1
1a00790a:	4639      	mov	r1, r7
1a00790c:	465f      	mov	r7, fp
1a00790e:	469b      	mov	fp, r3
1a007910:	460b      	mov	r3, r1
1a007912:	3201      	adds	r2, #1
1a007914:	442c      	add	r4, r5
1a007916:	2a07      	cmp	r2, #7
1a007918:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a00791c:	e9cb 3500 	strd	r3, r5, [fp]
1a007920:	f73f aca5 	bgt.w	1a00726e <_vfprintf_r+0xdce>
1a007924:	f10b 0b08 	add.w	fp, fp, #8
1a007928:	e4ac      	b.n	1a007284 <_vfprintf_r+0xde4>
1a00792a:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a00792c:	1cda      	adds	r2, r3, #3
1a00792e:	db02      	blt.n	1a007936 <_vfprintf_r+0x1496>
1a007930:	4599      	cmp	r9, r3
1a007932:	f280 80b5 	bge.w	1a007aa0 <_vfprintf_r+0x1600>
1a007936:	3e02      	subs	r6, #2
1a007938:	f026 0320 	bic.w	r3, r6, #32
1a00793c:	9304      	str	r3, [sp, #16]
1a00793e:	e611      	b.n	1a007564 <_vfprintf_r+0x10c4>
1a007940:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a007942:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
1a007946:	465a      	mov	r2, fp
1a007948:	e9dd 8b1a 	ldrd	r8, fp, [sp, #104]	; 0x68
1a00794c:	18fb      	adds	r3, r7, r3
1a00794e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a007952:	970c      	str	r7, [sp, #48]	; 0x30
1a007954:	4eaf      	ldr	r6, [pc, #700]	; (1a007c14 <_vfprintf_r+0x1774>)
1a007956:	f8dd a01c 	ldr.w	sl, [sp, #28]
1a00795a:	9309      	str	r3, [sp, #36]	; 0x24
1a00795c:	464f      	mov	r7, r9
1a00795e:	f8dd 900c 	ldr.w	r9, [sp, #12]
1a007962:	4621      	mov	r1, r4
1a007964:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a007966:	2b00      	cmp	r3, #0
1a007968:	d05b      	beq.n	1a007a22 <_vfprintf_r+0x1582>
1a00796a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00796c:	2b00      	cmp	r3, #0
1a00796e:	d154      	bne.n	1a007a1a <_vfprintf_r+0x157a>
1a007970:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a007972:	3b01      	subs	r3, #1
1a007974:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a007978:	9314      	str	r3, [sp, #80]	; 0x50
1a00797a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a00797c:	9818      	ldr	r0, [sp, #96]	; 0x60
1a00797e:	6010      	str	r0, [r2, #0]
1a007980:	3301      	adds	r3, #1
1a007982:	4459      	add	r1, fp
1a007984:	2b07      	cmp	r3, #7
1a007986:	912c      	str	r1, [sp, #176]	; 0xb0
1a007988:	f8c2 b004 	str.w	fp, [r2, #4]
1a00798c:	932b      	str	r3, [sp, #172]	; 0xac
1a00798e:	dc68      	bgt.n	1a007a62 <_vfprintf_r+0x15c2>
1a007990:	3208      	adds	r2, #8
1a007992:	9809      	ldr	r0, [sp, #36]	; 0x24
1a007994:	f898 3000 	ldrb.w	r3, [r8]
1a007998:	1bc5      	subs	r5, r0, r7
1a00799a:	429d      	cmp	r5, r3
1a00799c:	bfa8      	it	ge
1a00799e:	461d      	movge	r5, r3
1a0079a0:	2d00      	cmp	r5, #0
1a0079a2:	dd0b      	ble.n	1a0079bc <_vfprintf_r+0x151c>
1a0079a4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a0079a6:	6017      	str	r7, [r2, #0]
1a0079a8:	3301      	adds	r3, #1
1a0079aa:	4429      	add	r1, r5
1a0079ac:	2b07      	cmp	r3, #7
1a0079ae:	912c      	str	r1, [sp, #176]	; 0xb0
1a0079b0:	6055      	str	r5, [r2, #4]
1a0079b2:	932b      	str	r3, [sp, #172]	; 0xac
1a0079b4:	dc5e      	bgt.n	1a007a74 <_vfprintf_r+0x15d4>
1a0079b6:	f898 3000 	ldrb.w	r3, [r8]
1a0079ba:	3208      	adds	r2, #8
1a0079bc:	2d00      	cmp	r5, #0
1a0079be:	bfac      	ite	ge
1a0079c0:	1b5d      	subge	r5, r3, r5
1a0079c2:	461d      	movlt	r5, r3
1a0079c4:	2d00      	cmp	r5, #0
1a0079c6:	dd26      	ble.n	1a007a16 <_vfprintf_r+0x1576>
1a0079c8:	2d10      	cmp	r5, #16
1a0079ca:	982b      	ldr	r0, [sp, #172]	; 0xac
1a0079cc:	dd3c      	ble.n	1a007a48 <_vfprintf_r+0x15a8>
1a0079ce:	2410      	movs	r4, #16
1a0079d0:	e003      	b.n	1a0079da <_vfprintf_r+0x153a>
1a0079d2:	3208      	adds	r2, #8
1a0079d4:	3d10      	subs	r5, #16
1a0079d6:	2d10      	cmp	r5, #16
1a0079d8:	dd36      	ble.n	1a007a48 <_vfprintf_r+0x15a8>
1a0079da:	3001      	adds	r0, #1
1a0079dc:	3110      	adds	r1, #16
1a0079de:	2807      	cmp	r0, #7
1a0079e0:	e9cd 012b 	strd	r0, r1, [sp, #172]	; 0xac
1a0079e4:	e9c2 6400 	strd	r6, r4, [r2]
1a0079e8:	ddf3      	ble.n	1a0079d2 <_vfprintf_r+0x1532>
1a0079ea:	aa2a      	add	r2, sp, #168	; 0xa8
1a0079ec:	4651      	mov	r1, sl
1a0079ee:	4648      	mov	r0, r9
1a0079f0:	f002 fb04 	bl	1a009ffc <__sprint_r>
1a0079f4:	2800      	cmp	r0, #0
1a0079f6:	d150      	bne.n	1a007a9a <_vfprintf_r+0x15fa>
1a0079f8:	e9dd 012b 	ldrd	r0, r1, [sp, #172]	; 0xac
1a0079fc:	aa2d      	add	r2, sp, #180	; 0xb4
1a0079fe:	e7e9      	b.n	1a0079d4 <_vfprintf_r+0x1534>
1a007a00:	aa2a      	add	r2, sp, #168	; 0xa8
1a007a02:	4651      	mov	r1, sl
1a007a04:	4648      	mov	r0, r9
1a007a06:	f002 faf9 	bl	1a009ffc <__sprint_r>
1a007a0a:	2800      	cmp	r0, #0
1a007a0c:	d145      	bne.n	1a007a9a <_vfprintf_r+0x15fa>
1a007a0e:	f898 3000 	ldrb.w	r3, [r8]
1a007a12:	992c      	ldr	r1, [sp, #176]	; 0xb0
1a007a14:	aa2d      	add	r2, sp, #180	; 0xb4
1a007a16:	441f      	add	r7, r3
1a007a18:	e7a4      	b.n	1a007964 <_vfprintf_r+0x14c4>
1a007a1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a007a1c:	3b01      	subs	r3, #1
1a007a1e:	930f      	str	r3, [sp, #60]	; 0x3c
1a007a20:	e7ab      	b.n	1a00797a <_vfprintf_r+0x14da>
1a007a22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a007a24:	2b00      	cmp	r3, #0
1a007a26:	d1f8      	bne.n	1a007a1a <_vfprintf_r+0x157a>
1a007a28:	46b9      	mov	r9, r7
1a007a2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a007a2c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
1a007a2e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
1a007a32:	18fb      	adds	r3, r7, r3
1a007a34:	4599      	cmp	r9, r3
1a007a36:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
1a007a3a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a007a3e:	4693      	mov	fp, r2
1a007a40:	460c      	mov	r4, r1
1a007a42:	bf28      	it	cs
1a007a44:	4699      	movcs	r9, r3
1a007a46:	e424      	b.n	1a007292 <_vfprintf_r+0xdf2>
1a007a48:	3001      	adds	r0, #1
1a007a4a:	4429      	add	r1, r5
1a007a4c:	2807      	cmp	r0, #7
1a007a4e:	e9cd 012b 	strd	r0, r1, [sp, #172]	; 0xac
1a007a52:	e9c2 6500 	strd	r6, r5, [r2]
1a007a56:	dcd3      	bgt.n	1a007a00 <_vfprintf_r+0x1560>
1a007a58:	f898 3000 	ldrb.w	r3, [r8]
1a007a5c:	3208      	adds	r2, #8
1a007a5e:	441f      	add	r7, r3
1a007a60:	e780      	b.n	1a007964 <_vfprintf_r+0x14c4>
1a007a62:	aa2a      	add	r2, sp, #168	; 0xa8
1a007a64:	4651      	mov	r1, sl
1a007a66:	4648      	mov	r0, r9
1a007a68:	f002 fac8 	bl	1a009ffc <__sprint_r>
1a007a6c:	b9a8      	cbnz	r0, 1a007a9a <_vfprintf_r+0x15fa>
1a007a6e:	992c      	ldr	r1, [sp, #176]	; 0xb0
1a007a70:	aa2d      	add	r2, sp, #180	; 0xb4
1a007a72:	e78e      	b.n	1a007992 <_vfprintf_r+0x14f2>
1a007a74:	aa2a      	add	r2, sp, #168	; 0xa8
1a007a76:	4651      	mov	r1, sl
1a007a78:	4648      	mov	r0, r9
1a007a7a:	f002 fabf 	bl	1a009ffc <__sprint_r>
1a007a7e:	b960      	cbnz	r0, 1a007a9a <_vfprintf_r+0x15fa>
1a007a80:	f898 3000 	ldrb.w	r3, [r8]
1a007a84:	992c      	ldr	r1, [sp, #176]	; 0xb0
1a007a86:	aa2d      	add	r2, sp, #180	; 0xb4
1a007a88:	e798      	b.n	1a0079bc <_vfprintf_r+0x151c>
1a007a8a:	4638      	mov	r0, r7
1a007a8c:	f7fe fc98 	bl	1a0063c0 <strlen>
1a007a90:	46a9      	mov	r9, r5
1a007a92:	4603      	mov	r3, r0
1a007a94:	9009      	str	r0, [sp, #36]	; 0x24
1a007a96:	f7ff b8f4 	b.w	1a006c82 <_vfprintf_r+0x7e2>
1a007a9a:	46d1      	mov	r9, sl
1a007a9c:	f7ff ba7a 	b.w	1a006f94 <_vfprintf_r+0xaf4>
1a007aa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a007aa2:	4619      	mov	r1, r3
1a007aa4:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a007aa6:	4299      	cmp	r1, r3
1a007aa8:	f300 8082 	bgt.w	1a007bb0 <_vfprintf_r+0x1710>
1a007aac:	07c4      	lsls	r4, r0, #31
1a007aae:	f140 816b 	bpl.w	1a007d88 <_vfprintf_r+0x18e8>
1a007ab2:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a007ab4:	4413      	add	r3, r2
1a007ab6:	9309      	str	r3, [sp, #36]	; 0x24
1a007ab8:	0541      	lsls	r1, r0, #21
1a007aba:	d503      	bpl.n	1a007ac4 <_vfprintf_r+0x1624>
1a007abc:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a007abe:	2b00      	cmp	r3, #0
1a007ac0:	f300 80e6 	bgt.w	1a007c90 <_vfprintf_r+0x17f0>
1a007ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a007ac6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a007aca:	9304      	str	r3, [sp, #16]
1a007acc:	2667      	movs	r6, #103	; 0x67
1a007ace:	2300      	movs	r3, #0
1a007ad0:	930f      	str	r3, [sp, #60]	; 0x3c
1a007ad2:	9314      	str	r3, [sp, #80]	; 0x50
1a007ad4:	e586      	b.n	1a0075e4 <_vfprintf_r+0x1144>
1a007ad6:	222d      	movs	r2, #45	; 0x2d
1a007ad8:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
1a007adc:	f04f 0900 	mov.w	r9, #0
1a007ae0:	f7fe be6c 	b.w	1a0067bc <_vfprintf_r+0x31c>
1a007ae4:	46a1      	mov	r9, r4
1a007ae6:	f7ff ba55 	b.w	1a006f94 <_vfprintf_r+0xaf4>
1a007aea:	900a      	str	r0, [sp, #40]	; 0x28
1a007aec:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
1a007af0:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a007af4:	931f      	str	r3, [sp, #124]	; 0x7c
1a007af6:	232d      	movs	r3, #45	; 0x2d
1a007af8:	911e      	str	r1, [sp, #120]	; 0x78
1a007afa:	930b      	str	r3, [sp, #44]	; 0x2c
1a007afc:	e619      	b.n	1a007732 <_vfprintf_r+0x1292>
1a007afe:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a007b00:	9328      	str	r3, [sp, #160]	; 0xa0
1a007b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a007b04:	f815 2c01 	ldrb.w	r2, [r5, #-1]
1a007b08:	7bd9      	ldrb	r1, [r3, #15]
1a007b0a:	4291      	cmp	r1, r2
1a007b0c:	462b      	mov	r3, r5
1a007b0e:	d109      	bne.n	1a007b24 <_vfprintf_r+0x1684>
1a007b10:	2030      	movs	r0, #48	; 0x30
1a007b12:	f803 0c01 	strb.w	r0, [r3, #-1]
1a007b16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1a007b18:	1e5a      	subs	r2, r3, #1
1a007b1a:	9228      	str	r2, [sp, #160]	; 0xa0
1a007b1c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a007b20:	4291      	cmp	r1, r2
1a007b22:	d0f6      	beq.n	1a007b12 <_vfprintf_r+0x1672>
1a007b24:	2a39      	cmp	r2, #57	; 0x39
1a007b26:	bf0b      	itete	eq
1a007b28:	9a09      	ldreq	r2, [sp, #36]	; 0x24
1a007b2a:	3201      	addne	r2, #1
1a007b2c:	7a92      	ldrbeq	r2, [r2, #10]
1a007b2e:	b2d2      	uxtbne	r2, r2
1a007b30:	f803 2c01 	strb.w	r2, [r3, #-1]
1a007b34:	e682      	b.n	1a00783c <_vfprintf_r+0x139c>
1a007b36:	f418 7f00 	tst.w	r8, #512	; 0x200
1a007b3a:	f43f ad9f 	beq.w	1a00767c <_vfprintf_r+0x11dc>
1a007b3e:	9a05      	ldr	r2, [sp, #20]
1a007b40:	701a      	strb	r2, [r3, #0]
1a007b42:	4657      	mov	r7, sl
1a007b44:	f7fe bf52 	b.w	1a0069ec <_vfprintf_r+0x54c>
1a007b48:	aa2a      	add	r2, sp, #168	; 0xa8
1a007b4a:	9907      	ldr	r1, [sp, #28]
1a007b4c:	9803      	ldr	r0, [sp, #12]
1a007b4e:	f002 fa55 	bl	1a009ffc <__sprint_r>
1a007b52:	2800      	cmp	r0, #0
1a007b54:	f47f aa1c 	bne.w	1a006f90 <_vfprintf_r+0xaf0>
1a007b58:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a007b5a:	e9dd 242b 	ldrd	r2, r4, [sp, #172]	; 0xac
1a007b5e:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a007b62:	e571      	b.n	1a007648 <_vfprintf_r+0x11a8>
1a007b64:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a007b66:	2b00      	cmp	r3, #0
1a007b68:	f340 8164 	ble.w	1a007e34 <_vfprintf_r+0x1994>
1a007b6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a007b6e:	f1b9 0f00 	cmp.w	r9, #0
1a007b72:	f040 8103 	bne.w	1a007d7c <_vfprintf_r+0x18dc>
1a007b76:	07c6      	lsls	r6, r0, #31
1a007b78:	f100 8100 	bmi.w	1a007d7c <_vfprintf_r+0x18dc>
1a007b7c:	9309      	str	r3, [sp, #36]	; 0x24
1a007b7e:	2666      	movs	r6, #102	; 0x66
1a007b80:	0543      	lsls	r3, r0, #21
1a007b82:	f100 8086 	bmi.w	1a007c92 <_vfprintf_r+0x17f2>
1a007b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a007b88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a007b8c:	9304      	str	r3, [sp, #16]
1a007b8e:	e79e      	b.n	1a007ace <_vfprintf_r+0x162e>
1a007b90:	aa2a      	add	r2, sp, #168	; 0xa8
1a007b92:	9907      	ldr	r1, [sp, #28]
1a007b94:	9803      	ldr	r0, [sp, #12]
1a007b96:	f002 fa31 	bl	1a009ffc <__sprint_r>
1a007b9a:	2800      	cmp	r0, #0
1a007b9c:	f47f a9f8 	bne.w	1a006f90 <_vfprintf_r+0xaf0>
1a007ba0:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a007ba2:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a007ba4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a007ba6:	1ad3      	subs	r3, r2, r3
1a007ba8:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a007bac:	f7ff bb90 	b.w	1a0072d0 <_vfprintf_r+0xe30>
1a007bb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a007bb2:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a007bb4:	4413      	add	r3, r2
1a007bb6:	9309      	str	r3, [sp, #36]	; 0x24
1a007bb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a007bba:	2b00      	cmp	r3, #0
1a007bbc:	f340 8149 	ble.w	1a007e52 <_vfprintf_r+0x19b2>
1a007bc0:	2667      	movs	r6, #103	; 0x67
1a007bc2:	e7dd      	b.n	1a007b80 <_vfprintf_r+0x16e0>
1a007bc4:	2330      	movs	r3, #48	; 0x30
1a007bc6:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
1a007bca:	2358      	movs	r3, #88	; 0x58
1a007bcc:	e595      	b.n	1a0076fa <_vfprintf_r+0x125a>
1a007bce:	9803      	ldr	r0, [sp, #12]
1a007bd0:	aa2a      	add	r2, sp, #168	; 0xa8
1a007bd2:	4649      	mov	r1, r9
1a007bd4:	f002 fa12 	bl	1a009ffc <__sprint_r>
1a007bd8:	2800      	cmp	r0, #0
1a007bda:	f47f a9e0 	bne.w	1a006f9e <_vfprintf_r+0xafe>
1a007bde:	f7fe bf0f 	b.w	1a006a00 <_vfprintf_r+0x560>
1a007be2:	a824      	add	r0, sp, #144	; 0x90
1a007be4:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a007be8:	f002 f966 	bl	1a009eb8 <frexp>
1a007bec:	2200      	movs	r2, #0
1a007bee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a007bf2:	ec51 0b10 	vmov	r0, r1, d0
1a007bf6:	f7fc ffbb 	bl	1a004b70 <__aeabi_dmul>
1a007bfa:	2200      	movs	r2, #0
1a007bfc:	2300      	movs	r3, #0
1a007bfe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a007c02:	f7fd fa1d 	bl	1a005040 <__aeabi_dcmpeq>
1a007c06:	b108      	cbz	r0, 1a007c0c <_vfprintf_r+0x176c>
1a007c08:	2301      	movs	r3, #1
1a007c0a:	9324      	str	r3, [sp, #144]	; 0x90
1a007c0c:	4b02      	ldr	r3, [pc, #8]	; (1a007c18 <_vfprintf_r+0x1778>)
1a007c0e:	9309      	str	r3, [sp, #36]	; 0x24
1a007c10:	e5ac      	b.n	1a00776c <_vfprintf_r+0x12cc>
1a007c12:	bf00      	nop
1a007c14:	1a00a9f8 	.word	0x1a00a9f8
1a007c18:	1a00a9b4 	.word	0x1a00a9b4
1a007c1c:	425d      	negs	r5, r3
1a007c1e:	3310      	adds	r3, #16
1a007c20:	4bb9      	ldr	r3, [pc, #740]	; (1a007f08 <_vfprintf_r+0x1a68>)
1a007c22:	f280 8097 	bge.w	1a007d54 <_vfprintf_r+0x18b4>
1a007c26:	4619      	mov	r1, r3
1a007c28:	2610      	movs	r6, #16
1a007c2a:	4623      	mov	r3, r4
1a007c2c:	f8dd 900c 	ldr.w	r9, [sp, #12]
1a007c30:	460c      	mov	r4, r1
1a007c32:	e005      	b.n	1a007c40 <_vfprintf_r+0x17a0>
1a007c34:	f10b 0b08 	add.w	fp, fp, #8
1a007c38:	3d10      	subs	r5, #16
1a007c3a:	2d10      	cmp	r5, #16
1a007c3c:	f340 8087 	ble.w	1a007d4e <_vfprintf_r+0x18ae>
1a007c40:	3201      	adds	r2, #1
1a007c42:	3310      	adds	r3, #16
1a007c44:	2a07      	cmp	r2, #7
1a007c46:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
1a007c4a:	e9cb 4600 	strd	r4, r6, [fp]
1a007c4e:	ddf1      	ble.n	1a007c34 <_vfprintf_r+0x1794>
1a007c50:	aa2a      	add	r2, sp, #168	; 0xa8
1a007c52:	9907      	ldr	r1, [sp, #28]
1a007c54:	4648      	mov	r0, r9
1a007c56:	f002 f9d1 	bl	1a009ffc <__sprint_r>
1a007c5a:	2800      	cmp	r0, #0
1a007c5c:	f47f a998 	bne.w	1a006f90 <_vfprintf_r+0xaf0>
1a007c60:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
1a007c64:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a007c68:	e7e6      	b.n	1a007c38 <_vfprintf_r+0x1798>
1a007c6a:	f109 0101 	add.w	r1, r9, #1
1a007c6e:	9803      	ldr	r0, [sp, #12]
1a007c70:	f7fd ff36 	bl	1a005ae0 <_malloc_r>
1a007c74:	4607      	mov	r7, r0
1a007c76:	2800      	cmp	r0, #0
1a007c78:	f000 813b 	beq.w	1a007ef2 <_vfprintf_r+0x1a52>
1a007c7c:	f448 7381 	orr.w	r3, r8, #258	; 0x102
1a007c80:	930e      	str	r3, [sp, #56]	; 0x38
1a007c82:	f026 0320 	bic.w	r3, r6, #32
1a007c86:	9304      	str	r3, [sp, #16]
1a007c88:	46a0      	mov	r8, r4
1a007c8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a007c8c:	900a      	str	r0, [sp, #40]	; 0x28
1a007c8e:	e547      	b.n	1a007720 <_vfprintf_r+0x1280>
1a007c90:	2667      	movs	r6, #103	; 0x67
1a007c92:	981a      	ldr	r0, [sp, #104]	; 0x68
1a007c94:	2200      	movs	r2, #0
1a007c96:	920f      	str	r2, [sp, #60]	; 0x3c
1a007c98:	9214      	str	r2, [sp, #80]	; 0x50
1a007c9a:	7803      	ldrb	r3, [r0, #0]
1a007c9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a007c9e:	2bff      	cmp	r3, #255	; 0xff
1a007ca0:	d00c      	beq.n	1a007cbc <_vfprintf_r+0x181c>
1a007ca2:	4293      	cmp	r3, r2
1a007ca4:	da0a      	bge.n	1a007cbc <_vfprintf_r+0x181c>
1a007ca6:	7841      	ldrb	r1, [r0, #1]
1a007ca8:	1ad2      	subs	r2, r2, r3
1a007caa:	b1a9      	cbz	r1, 1a007cd8 <_vfprintf_r+0x1838>
1a007cac:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a007cae:	3301      	adds	r3, #1
1a007cb0:	9314      	str	r3, [sp, #80]	; 0x50
1a007cb2:	460b      	mov	r3, r1
1a007cb4:	2bff      	cmp	r3, #255	; 0xff
1a007cb6:	f100 0001 	add.w	r0, r0, #1
1a007cba:	d1f2      	bne.n	1a007ca2 <_vfprintf_r+0x1802>
1a007cbc:	9211      	str	r2, [sp, #68]	; 0x44
1a007cbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a007cc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a007cc2:	9909      	ldr	r1, [sp, #36]	; 0x24
1a007cc4:	901a      	str	r0, [sp, #104]	; 0x68
1a007cc6:	4413      	add	r3, r2
1a007cc8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
1a007cca:	fb02 1303 	mla	r3, r2, r3, r1
1a007cce:	9309      	str	r3, [sp, #36]	; 0x24
1a007cd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a007cd4:	9304      	str	r3, [sp, #16]
1a007cd6:	e485      	b.n	1a0075e4 <_vfprintf_r+0x1144>
1a007cd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
1a007cda:	3101      	adds	r1, #1
1a007cdc:	910f      	str	r1, [sp, #60]	; 0x3c
1a007cde:	e7de      	b.n	1a007c9e <_vfprintf_r+0x17fe>
1a007ce0:	aa28      	add	r2, sp, #160	; 0xa0
1a007ce2:	ab25      	add	r3, sp, #148	; 0x94
1a007ce4:	e9cd 3200 	strd	r3, r2, [sp]
1a007ce8:	2103      	movs	r1, #3
1a007cea:	ab24      	add	r3, sp, #144	; 0x90
1a007cec:	464a      	mov	r2, r9
1a007cee:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a007cf2:	9803      	ldr	r0, [sp, #12]
1a007cf4:	f000 fa5c 	bl	1a0081b0 <_dtoa_r>
1a007cf8:	464d      	mov	r5, r9
1a007cfa:	4607      	mov	r7, r0
1a007cfc:	eb00 0409 	add.w	r4, r0, r9
1a007d00:	783b      	ldrb	r3, [r7, #0]
1a007d02:	2b30      	cmp	r3, #48	; 0x30
1a007d04:	f000 80be 	beq.w	1a007e84 <_vfprintf_r+0x19e4>
1a007d08:	9d24      	ldr	r5, [sp, #144]	; 0x90
1a007d0a:	442c      	add	r4, r5
1a007d0c:	2200      	movs	r2, #0
1a007d0e:	2300      	movs	r3, #0
1a007d10:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
1a007d14:	f7fd f994 	bl	1a005040 <__aeabi_dcmpeq>
1a007d18:	b108      	cbz	r0, 1a007d1e <_vfprintf_r+0x187e>
1a007d1a:	4623      	mov	r3, r4
1a007d1c:	e413      	b.n	1a007546 <_vfprintf_r+0x10a6>
1a007d1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1a007d20:	42a3      	cmp	r3, r4
1a007d22:	f4bf ac10 	bcs.w	1a007546 <_vfprintf_r+0x10a6>
1a007d26:	2130      	movs	r1, #48	; 0x30
1a007d28:	1c5a      	adds	r2, r3, #1
1a007d2a:	9228      	str	r2, [sp, #160]	; 0xa0
1a007d2c:	7019      	strb	r1, [r3, #0]
1a007d2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1a007d30:	429c      	cmp	r4, r3
1a007d32:	d8f9      	bhi.n	1a007d28 <_vfprintf_r+0x1888>
1a007d34:	e407      	b.n	1a007546 <_vfprintf_r+0x10a6>
1a007d36:	197c      	adds	r4, r7, r5
1a007d38:	e7e8      	b.n	1a007d0c <_vfprintf_r+0x186c>
1a007d3a:	f1b9 0f00 	cmp.w	r9, #0
1a007d3e:	f000 8092 	beq.w	1a007e66 <_vfprintf_r+0x19c6>
1a007d42:	900a      	str	r0, [sp, #40]	; 0x28
1a007d44:	e4ec      	b.n	1a007720 <_vfprintf_r+0x1280>
1a007d46:	900a      	str	r0, [sp, #40]	; 0x28
1a007d48:	f04f 0906 	mov.w	r9, #6
1a007d4c:	e4e8      	b.n	1a007720 <_vfprintf_r+0x1280>
1a007d4e:	4621      	mov	r1, r4
1a007d50:	461c      	mov	r4, r3
1a007d52:	460b      	mov	r3, r1
1a007d54:	3201      	adds	r2, #1
1a007d56:	442c      	add	r4, r5
1a007d58:	2a07      	cmp	r2, #7
1a007d5a:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a007d5e:	e9cb 3500 	strd	r3, r5, [fp]
1a007d62:	f300 80a9 	bgt.w	1a007eb8 <_vfprintf_r+0x1a18>
1a007d66:	f10b 0b08 	add.w	fp, fp, #8
1a007d6a:	e470      	b.n	1a00764e <_vfprintf_r+0x11ae>
1a007d6c:	469a      	mov	sl, r3
1a007d6e:	f7ff bb37 	b.w	1a0073e0 <_vfprintf_r+0xf40>
1a007d72:	2301      	movs	r3, #1
1a007d74:	9324      	str	r3, [sp, #144]	; 0x90
1a007d76:	4b65      	ldr	r3, [pc, #404]	; (1a007f0c <_vfprintf_r+0x1a6c>)
1a007d78:	9309      	str	r3, [sp, #36]	; 0x24
1a007d7a:	e4f7      	b.n	1a00776c <_vfprintf_r+0x12cc>
1a007d7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a007d7e:	4413      	add	r3, r2
1a007d80:	444b      	add	r3, r9
1a007d82:	9309      	str	r3, [sp, #36]	; 0x24
1a007d84:	2666      	movs	r6, #102	; 0x66
1a007d86:	e6fb      	b.n	1a007b80 <_vfprintf_r+0x16e0>
1a007d88:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a007d8a:	9309      	str	r3, [sp, #36]	; 0x24
1a007d8c:	e694      	b.n	1a007ab8 <_vfprintf_r+0x1618>
1a007d8e:	f10d 0ca7 	add.w	ip, sp, #167	; 0xa7
1a007d92:	4664      	mov	r4, ip
1a007d94:	4d5e      	ldr	r5, [pc, #376]	; (1a007f10 <_vfprintf_r+0x1a70>)
1a007d96:	e000      	b.n	1a007d9a <_vfprintf_r+0x18fa>
1a007d98:	4614      	mov	r4, r2
1a007d9a:	fba5 1203 	umull	r1, r2, r5, r3
1a007d9e:	08d2      	lsrs	r2, r2, #3
1a007da0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a007da4:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
1a007da8:	f103 0130 	add.w	r1, r3, #48	; 0x30
1a007dac:	4613      	mov	r3, r2
1a007dae:	2b09      	cmp	r3, #9
1a007db0:	f804 1c01 	strb.w	r1, [r4, #-1]
1a007db4:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a007db8:	dcee      	bgt.n	1a007d98 <_vfprintf_r+0x18f8>
1a007dba:	3330      	adds	r3, #48	; 0x30
1a007dbc:	3c02      	subs	r4, #2
1a007dbe:	b2db      	uxtb	r3, r3
1a007dc0:	45a4      	cmp	ip, r4
1a007dc2:	f802 3c01 	strb.w	r3, [r2, #-1]
1a007dc6:	f240 8090 	bls.w	1a007eea <_vfprintf_r+0x1a4a>
1a007dca:	f10d 049a 	add.w	r4, sp, #154	; 0x9a
1a007dce:	4611      	mov	r1, r2
1a007dd0:	e001      	b.n	1a007dd6 <_vfprintf_r+0x1936>
1a007dd2:	f811 3b01 	ldrb.w	r3, [r1], #1
1a007dd6:	f804 3b01 	strb.w	r3, [r4], #1
1a007dda:	458c      	cmp	ip, r1
1a007ddc:	d1f9      	bne.n	1a007dd2 <_vfprintf_r+0x1932>
1a007dde:	ab2a      	add	r3, sp, #168	; 0xa8
1a007de0:	1a9b      	subs	r3, r3, r2
1a007de2:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
1a007de6:	4413      	add	r3, r2
1a007de8:	f7ff bbe3 	b.w	1a0075b2 <_vfprintf_r+0x1112>
1a007dec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a007dee:	4f49      	ldr	r7, [pc, #292]	; (1a007f14 <_vfprintf_r+0x1a74>)
1a007df0:	2b00      	cmp	r3, #0
1a007df2:	bfb6      	itet	lt
1a007df4:	222d      	movlt	r2, #45	; 0x2d
1a007df6:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
1a007dfa:	f88d 208b 	strblt.w	r2, [sp, #139]	; 0x8b
1a007dfe:	4b46      	ldr	r3, [pc, #280]	; (1a007f18 <_vfprintf_r+0x1a78>)
1a007e00:	f7fe bf02 	b.w	1a006c08 <_vfprintf_r+0x768>
1a007e04:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a007e08:	f7ff b8c9 	b.w	1a006f9e <_vfprintf_r+0xafe>
1a007e0c:	aa28      	add	r2, sp, #160	; 0xa0
1a007e0e:	ab25      	add	r3, sp, #148	; 0x94
1a007e10:	e9cd 3200 	strd	r3, r2, [sp]
1a007e14:	2103      	movs	r1, #3
1a007e16:	ab24      	add	r3, sp, #144	; 0x90
1a007e18:	464a      	mov	r2, r9
1a007e1a:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a007e1e:	9803      	ldr	r0, [sp, #12]
1a007e20:	f000 f9c6 	bl	1a0081b0 <_dtoa_r>
1a007e24:	464d      	mov	r5, r9
1a007e26:	4607      	mov	r7, r0
1a007e28:	2e46      	cmp	r6, #70	; 0x46
1a007e2a:	eb07 0405 	add.w	r4, r7, r5
1a007e2e:	f43f af67 	beq.w	1a007d00 <_vfprintf_r+0x1860>
1a007e32:	e76b      	b.n	1a007d0c <_vfprintf_r+0x186c>
1a007e34:	f1b9 0f00 	cmp.w	r9, #0
1a007e38:	d131      	bne.n	1a007e9e <_vfprintf_r+0x19fe>
1a007e3a:	07c5      	lsls	r5, r0, #31
1a007e3c:	d42f      	bmi.n	1a007e9e <_vfprintf_r+0x19fe>
1a007e3e:	2301      	movs	r3, #1
1a007e40:	9304      	str	r3, [sp, #16]
1a007e42:	9309      	str	r3, [sp, #36]	; 0x24
1a007e44:	2666      	movs	r6, #102	; 0x66
1a007e46:	e642      	b.n	1a007ace <_vfprintf_r+0x162e>
1a007e48:	07c3      	lsls	r3, r0, #31
1a007e4a:	f57f abbf 	bpl.w	1a0075cc <_vfprintf_r+0x112c>
1a007e4e:	f7ff bbb9 	b.w	1a0075c4 <_vfprintf_r+0x1124>
1a007e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a007e54:	f1c3 0301 	rsb	r3, r3, #1
1a007e58:	441a      	add	r2, r3
1a007e5a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
1a007e5e:	9209      	str	r2, [sp, #36]	; 0x24
1a007e60:	9304      	str	r3, [sp, #16]
1a007e62:	2667      	movs	r6, #103	; 0x67
1a007e64:	e633      	b.n	1a007ace <_vfprintf_r+0x162e>
1a007e66:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a007e6a:	f04f 0901 	mov.w	r9, #1
1a007e6e:	e457      	b.n	1a007720 <_vfprintf_r+0x1280>
1a007e70:	465a      	mov	r2, fp
1a007e72:	e511      	b.n	1a007898 <_vfprintf_r+0x13f8>
1a007e74:	2e47      	cmp	r6, #71	; 0x47
1a007e76:	f47f af5e 	bne.w	1a007d36 <_vfprintf_r+0x1896>
1a007e7a:	f018 0f01 	tst.w	r8, #1
1a007e7e:	f43f ab61 	beq.w	1a007544 <_vfprintf_r+0x10a4>
1a007e82:	e7d1      	b.n	1a007e28 <_vfprintf_r+0x1988>
1a007e84:	2200      	movs	r2, #0
1a007e86:	2300      	movs	r3, #0
1a007e88:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
1a007e8c:	f7fd f8d8 	bl	1a005040 <__aeabi_dcmpeq>
1a007e90:	2800      	cmp	r0, #0
1a007e92:	f47f af39 	bne.w	1a007d08 <_vfprintf_r+0x1868>
1a007e96:	f1c5 0501 	rsb	r5, r5, #1
1a007e9a:	9524      	str	r5, [sp, #144]	; 0x90
1a007e9c:	e735      	b.n	1a007d0a <_vfprintf_r+0x186a>
1a007e9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a007ea0:	3301      	adds	r3, #1
1a007ea2:	444b      	add	r3, r9
1a007ea4:	9309      	str	r3, [sp, #36]	; 0x24
1a007ea6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a007eaa:	9304      	str	r3, [sp, #16]
1a007eac:	2666      	movs	r6, #102	; 0x66
1a007eae:	e60e      	b.n	1a007ace <_vfprintf_r+0x162e>
1a007eb0:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
1a007eb4:	f7ff bb7a 	b.w	1a0075ac <_vfprintf_r+0x110c>
1a007eb8:	aa2a      	add	r2, sp, #168	; 0xa8
1a007eba:	9907      	ldr	r1, [sp, #28]
1a007ebc:	9803      	ldr	r0, [sp, #12]
1a007ebe:	f002 f89d 	bl	1a009ffc <__sprint_r>
1a007ec2:	2800      	cmp	r0, #0
1a007ec4:	f47f a864 	bne.w	1a006f90 <_vfprintf_r+0xaf0>
1a007ec8:	e9dd 242b 	ldrd	r2, r4, [sp, #172]	; 0xac
1a007ecc:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a007ed0:	f7ff bbbd 	b.w	1a00764e <_vfprintf_r+0x11ae>
1a007ed4:	9908      	ldr	r1, [sp, #32]
1a007ed6:	f89a 6001 	ldrb.w	r6, [sl, #1]
1a007eda:	680b      	ldr	r3, [r1, #0]
1a007edc:	ea43 79e3 	orr.w	r9, r3, r3, asr #31
1a007ee0:	1d0b      	adds	r3, r1, #4
1a007ee2:	4692      	mov	sl, r2
1a007ee4:	9308      	str	r3, [sp, #32]
1a007ee6:	f7fe bb59 	b.w	1a00659c <_vfprintf_r+0xfc>
1a007eea:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
1a007eee:	f7ff bb60 	b.w	1a0075b2 <_vfprintf_r+0x1112>
1a007ef2:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a007ef6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a007efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a007efe:	f8a9 300c 	strh.w	r3, [r9, #12]
1a007f02:	f7ff b84c 	b.w	1a006f9e <_vfprintf_r+0xafe>
1a007f06:	bf00      	nop
1a007f08:	1a00a9f8 	.word	0x1a00a9f8
1a007f0c:	1a00a9c8 	.word	0x1a00a9c8
1a007f10:	cccccccd 	.word	0xcccccccd
1a007f14:	1a00a9b0 	.word	0x1a00a9b0
1a007f18:	1a00a9ac 	.word	0x1a00a9ac

1a007f1c <__sbprintf>:
1a007f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a007f20:	460c      	mov	r4, r1
1a007f22:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
1a007f26:	8989      	ldrh	r1, [r1, #12]
1a007f28:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a007f2a:	89e5      	ldrh	r5, [r4, #14]
1a007f2c:	9619      	str	r6, [sp, #100]	; 0x64
1a007f2e:	f021 0102 	bic.w	r1, r1, #2
1a007f32:	4606      	mov	r6, r0
1a007f34:	69e0      	ldr	r0, [r4, #28]
1a007f36:	f8ad 100c 	strh.w	r1, [sp, #12]
1a007f3a:	4617      	mov	r7, r2
1a007f3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
1a007f40:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a007f42:	f8ad 500e 	strh.w	r5, [sp, #14]
1a007f46:	4698      	mov	r8, r3
1a007f48:	ad1a      	add	r5, sp, #104	; 0x68
1a007f4a:	2300      	movs	r3, #0
1a007f4c:	9007      	str	r0, [sp, #28]
1a007f4e:	a816      	add	r0, sp, #88	; 0x58
1a007f50:	9209      	str	r2, [sp, #36]	; 0x24
1a007f52:	9306      	str	r3, [sp, #24]
1a007f54:	9500      	str	r5, [sp, #0]
1a007f56:	9504      	str	r5, [sp, #16]
1a007f58:	9102      	str	r1, [sp, #8]
1a007f5a:	9105      	str	r1, [sp, #20]
1a007f5c:	f7fd fdb8 	bl	1a005ad0 <__retarget_lock_init_recursive>
1a007f60:	4643      	mov	r3, r8
1a007f62:	463a      	mov	r2, r7
1a007f64:	4669      	mov	r1, sp
1a007f66:	4630      	mov	r0, r6
1a007f68:	f7fe fa9a 	bl	1a0064a0 <_vfprintf_r>
1a007f6c:	1e05      	subs	r5, r0, #0
1a007f6e:	db07      	blt.n	1a007f80 <__sbprintf+0x64>
1a007f70:	4630      	mov	r0, r6
1a007f72:	4669      	mov	r1, sp
1a007f74:	f7fd fb78 	bl	1a005668 <_fflush_r>
1a007f78:	2800      	cmp	r0, #0
1a007f7a:	bf18      	it	ne
1a007f7c:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a007f80:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a007f84:	065b      	lsls	r3, r3, #25
1a007f86:	d503      	bpl.n	1a007f90 <__sbprintf+0x74>
1a007f88:	89a3      	ldrh	r3, [r4, #12]
1a007f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a007f8e:	81a3      	strh	r3, [r4, #12]
1a007f90:	9816      	ldr	r0, [sp, #88]	; 0x58
1a007f92:	f7fd fd9f 	bl	1a005ad4 <__retarget_lock_close_recursive>
1a007f96:	4628      	mov	r0, r5
1a007f98:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
1a007f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a007fa0 <__ascii_wctomb>:
1a007fa0:	b121      	cbz	r1, 1a007fac <__ascii_wctomb+0xc>
1a007fa2:	2aff      	cmp	r2, #255	; 0xff
1a007fa4:	d804      	bhi.n	1a007fb0 <__ascii_wctomb+0x10>
1a007fa6:	700a      	strb	r2, [r1, #0]
1a007fa8:	2001      	movs	r0, #1
1a007faa:	4770      	bx	lr
1a007fac:	4608      	mov	r0, r1
1a007fae:	4770      	bx	lr
1a007fb0:	238a      	movs	r3, #138	; 0x8a
1a007fb2:	6003      	str	r3, [r0, #0]
1a007fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007fb8:	4770      	bx	lr
1a007fba:	bf00      	nop

1a007fbc <__swsetup_r>:
1a007fbc:	b538      	push	{r3, r4, r5, lr}
1a007fbe:	4b31      	ldr	r3, [pc, #196]	; (1a008084 <__swsetup_r+0xc8>)
1a007fc0:	681b      	ldr	r3, [r3, #0]
1a007fc2:	4605      	mov	r5, r0
1a007fc4:	460c      	mov	r4, r1
1a007fc6:	b113      	cbz	r3, 1a007fce <__swsetup_r+0x12>
1a007fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a007fca:	2a00      	cmp	r2, #0
1a007fcc:	d03a      	beq.n	1a008044 <__swsetup_r+0x88>
1a007fce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a007fd2:	b293      	uxth	r3, r2
1a007fd4:	0718      	lsls	r0, r3, #28
1a007fd6:	d50c      	bpl.n	1a007ff2 <__swsetup_r+0x36>
1a007fd8:	6920      	ldr	r0, [r4, #16]
1a007fda:	b1a8      	cbz	r0, 1a008008 <__swsetup_r+0x4c>
1a007fdc:	f013 0201 	ands.w	r2, r3, #1
1a007fe0:	d020      	beq.n	1a008024 <__swsetup_r+0x68>
1a007fe2:	6963      	ldr	r3, [r4, #20]
1a007fe4:	2200      	movs	r2, #0
1a007fe6:	425b      	negs	r3, r3
1a007fe8:	61a3      	str	r3, [r4, #24]
1a007fea:	60a2      	str	r2, [r4, #8]
1a007fec:	b300      	cbz	r0, 1a008030 <__swsetup_r+0x74>
1a007fee:	2000      	movs	r0, #0
1a007ff0:	bd38      	pop	{r3, r4, r5, pc}
1a007ff2:	06d9      	lsls	r1, r3, #27
1a007ff4:	d53e      	bpl.n	1a008074 <__swsetup_r+0xb8>
1a007ff6:	0758      	lsls	r0, r3, #29
1a007ff8:	d428      	bmi.n	1a00804c <__swsetup_r+0x90>
1a007ffa:	6920      	ldr	r0, [r4, #16]
1a007ffc:	f042 0308 	orr.w	r3, r2, #8
1a008000:	81a3      	strh	r3, [r4, #12]
1a008002:	b29b      	uxth	r3, r3
1a008004:	2800      	cmp	r0, #0
1a008006:	d1e9      	bne.n	1a007fdc <__swsetup_r+0x20>
1a008008:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a00800c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a008010:	d0e4      	beq.n	1a007fdc <__swsetup_r+0x20>
1a008012:	4628      	mov	r0, r5
1a008014:	4621      	mov	r1, r4
1a008016:	f001 f995 	bl	1a009344 <__smakebuf_r>
1a00801a:	89a3      	ldrh	r3, [r4, #12]
1a00801c:	6920      	ldr	r0, [r4, #16]
1a00801e:	f013 0201 	ands.w	r2, r3, #1
1a008022:	d1de      	bne.n	1a007fe2 <__swsetup_r+0x26>
1a008024:	0799      	lsls	r1, r3, #30
1a008026:	bf58      	it	pl
1a008028:	6962      	ldrpl	r2, [r4, #20]
1a00802a:	60a2      	str	r2, [r4, #8]
1a00802c:	2800      	cmp	r0, #0
1a00802e:	d1de      	bne.n	1a007fee <__swsetup_r+0x32>
1a008030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a008034:	061a      	lsls	r2, r3, #24
1a008036:	d5db      	bpl.n	1a007ff0 <__swsetup_r+0x34>
1a008038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00803c:	81a3      	strh	r3, [r4, #12]
1a00803e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a008042:	bd38      	pop	{r3, r4, r5, pc}
1a008044:	4618      	mov	r0, r3
1a008046:	f7fd fb6b 	bl	1a005720 <__sinit>
1a00804a:	e7c0      	b.n	1a007fce <__swsetup_r+0x12>
1a00804c:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a00804e:	b151      	cbz	r1, 1a008066 <__swsetup_r+0xaa>
1a008050:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a008054:	4299      	cmp	r1, r3
1a008056:	d004      	beq.n	1a008062 <__swsetup_r+0xa6>
1a008058:	4628      	mov	r0, r5
1a00805a:	f7fd fbe9 	bl	1a005830 <_free_r>
1a00805e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a008062:	2300      	movs	r3, #0
1a008064:	6323      	str	r3, [r4, #48]	; 0x30
1a008066:	2300      	movs	r3, #0
1a008068:	6920      	ldr	r0, [r4, #16]
1a00806a:	6063      	str	r3, [r4, #4]
1a00806c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a008070:	6020      	str	r0, [r4, #0]
1a008072:	e7c3      	b.n	1a007ffc <__swsetup_r+0x40>
1a008074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a008078:	2309      	movs	r3, #9
1a00807a:	602b      	str	r3, [r5, #0]
1a00807c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a008080:	81a2      	strh	r2, [r4, #12]
1a008082:	bd38      	pop	{r3, r4, r5, pc}
1a008084:	100000cc 	.word	0x100000cc

1a008088 <quorem>:
1a008088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00808c:	6903      	ldr	r3, [r0, #16]
1a00808e:	690f      	ldr	r7, [r1, #16]
1a008090:	42bb      	cmp	r3, r7
1a008092:	b083      	sub	sp, #12
1a008094:	f2c0 8086 	blt.w	1a0081a4 <quorem+0x11c>
1a008098:	3f01      	subs	r7, #1
1a00809a:	f101 0914 	add.w	r9, r1, #20
1a00809e:	f100 0a14 	add.w	sl, r0, #20
1a0080a2:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
1a0080a6:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
1a0080aa:	00bc      	lsls	r4, r7, #2
1a0080ac:	3201      	adds	r2, #1
1a0080ae:	fbb3 f8f2 	udiv	r8, r3, r2
1a0080b2:	eb0a 0304 	add.w	r3, sl, r4
1a0080b6:	9400      	str	r4, [sp, #0]
1a0080b8:	eb09 0b04 	add.w	fp, r9, r4
1a0080bc:	9301      	str	r3, [sp, #4]
1a0080be:	f1b8 0f00 	cmp.w	r8, #0
1a0080c2:	d038      	beq.n	1a008136 <quorem+0xae>
1a0080c4:	2500      	movs	r5, #0
1a0080c6:	462e      	mov	r6, r5
1a0080c8:	46ce      	mov	lr, r9
1a0080ca:	46d4      	mov	ip, sl
1a0080cc:	f85e 4b04 	ldr.w	r4, [lr], #4
1a0080d0:	f8dc 3000 	ldr.w	r3, [ip]
1a0080d4:	b2a2      	uxth	r2, r4
1a0080d6:	fb08 5502 	mla	r5, r8, r2, r5
1a0080da:	0c22      	lsrs	r2, r4, #16
1a0080dc:	0c2c      	lsrs	r4, r5, #16
1a0080de:	fb08 4202 	mla	r2, r8, r2, r4
1a0080e2:	b2ad      	uxth	r5, r5
1a0080e4:	1b75      	subs	r5, r6, r5
1a0080e6:	b296      	uxth	r6, r2
1a0080e8:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
1a0080ec:	fa15 f383 	uxtah	r3, r5, r3
1a0080f0:	eb06 4623 	add.w	r6, r6, r3, asr #16
1a0080f4:	b29b      	uxth	r3, r3
1a0080f6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
1a0080fa:	45f3      	cmp	fp, lr
1a0080fc:	ea4f 4512 	mov.w	r5, r2, lsr #16
1a008100:	f84c 3b04 	str.w	r3, [ip], #4
1a008104:	ea4f 4626 	mov.w	r6, r6, asr #16
1a008108:	d2e0      	bcs.n	1a0080cc <quorem+0x44>
1a00810a:	9b00      	ldr	r3, [sp, #0]
1a00810c:	f85a 3003 	ldr.w	r3, [sl, r3]
1a008110:	b98b      	cbnz	r3, 1a008136 <quorem+0xae>
1a008112:	9a01      	ldr	r2, [sp, #4]
1a008114:	1f13      	subs	r3, r2, #4
1a008116:	459a      	cmp	sl, r3
1a008118:	d20c      	bcs.n	1a008134 <quorem+0xac>
1a00811a:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a00811e:	b94b      	cbnz	r3, 1a008134 <quorem+0xac>
1a008120:	f1a2 0308 	sub.w	r3, r2, #8
1a008124:	e002      	b.n	1a00812c <quorem+0xa4>
1a008126:	681a      	ldr	r2, [r3, #0]
1a008128:	3b04      	subs	r3, #4
1a00812a:	b91a      	cbnz	r2, 1a008134 <quorem+0xac>
1a00812c:	459a      	cmp	sl, r3
1a00812e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a008132:	d3f8      	bcc.n	1a008126 <quorem+0x9e>
1a008134:	6107      	str	r7, [r0, #16]
1a008136:	4604      	mov	r4, r0
1a008138:	f001 fc1c 	bl	1a009974 <__mcmp>
1a00813c:	2800      	cmp	r0, #0
1a00813e:	db2d      	blt.n	1a00819c <quorem+0x114>
1a008140:	f108 0801 	add.w	r8, r8, #1
1a008144:	4655      	mov	r5, sl
1a008146:	2300      	movs	r3, #0
1a008148:	f859 1b04 	ldr.w	r1, [r9], #4
1a00814c:	6828      	ldr	r0, [r5, #0]
1a00814e:	b28a      	uxth	r2, r1
1a008150:	1a9a      	subs	r2, r3, r2
1a008152:	0c0b      	lsrs	r3, r1, #16
1a008154:	fa12 f280 	uxtah	r2, r2, r0
1a008158:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
1a00815c:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a008160:	b292      	uxth	r2, r2
1a008162:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a008166:	45cb      	cmp	fp, r9
1a008168:	f845 2b04 	str.w	r2, [r5], #4
1a00816c:	ea4f 4323 	mov.w	r3, r3, asr #16
1a008170:	d2ea      	bcs.n	1a008148 <quorem+0xc0>
1a008172:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a008176:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
1a00817a:	b97a      	cbnz	r2, 1a00819c <quorem+0x114>
1a00817c:	1f1a      	subs	r2, r3, #4
1a00817e:	4592      	cmp	sl, r2
1a008180:	d20b      	bcs.n	1a00819a <quorem+0x112>
1a008182:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a008186:	b942      	cbnz	r2, 1a00819a <quorem+0x112>
1a008188:	3b08      	subs	r3, #8
1a00818a:	e002      	b.n	1a008192 <quorem+0x10a>
1a00818c:	681a      	ldr	r2, [r3, #0]
1a00818e:	3b04      	subs	r3, #4
1a008190:	b91a      	cbnz	r2, 1a00819a <quorem+0x112>
1a008192:	459a      	cmp	sl, r3
1a008194:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a008198:	d3f8      	bcc.n	1a00818c <quorem+0x104>
1a00819a:	6127      	str	r7, [r4, #16]
1a00819c:	4640      	mov	r0, r8
1a00819e:	b003      	add	sp, #12
1a0081a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0081a4:	2000      	movs	r0, #0
1a0081a6:	b003      	add	sp, #12
1a0081a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0081ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0081b0 <_dtoa_r>:
1a0081b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0081b4:	ec55 4b10 	vmov	r4, r5, d0
1a0081b8:	b09b      	sub	sp, #108	; 0x6c
1a0081ba:	6c06      	ldr	r6, [r0, #64]	; 0x40
1a0081bc:	9102      	str	r1, [sp, #8]
1a0081be:	4681      	mov	r9, r0
1a0081c0:	9207      	str	r2, [sp, #28]
1a0081c2:	9305      	str	r3, [sp, #20]
1a0081c4:	e9cd 4500 	strd	r4, r5, [sp]
1a0081c8:	b156      	cbz	r6, 1a0081e0 <_dtoa_r+0x30>
1a0081ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a0081cc:	6072      	str	r2, [r6, #4]
1a0081ce:	2301      	movs	r3, #1
1a0081d0:	4093      	lsls	r3, r2
1a0081d2:	60b3      	str	r3, [r6, #8]
1a0081d4:	4631      	mov	r1, r6
1a0081d6:	f001 f9dd 	bl	1a009594 <_Bfree>
1a0081da:	2300      	movs	r3, #0
1a0081dc:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
1a0081e0:	f1b5 0800 	subs.w	r8, r5, #0
1a0081e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
1a0081e6:	bfb4      	ite	lt
1a0081e8:	2301      	movlt	r3, #1
1a0081ea:	2300      	movge	r3, #0
1a0081ec:	6013      	str	r3, [r2, #0]
1a0081ee:	4b76      	ldr	r3, [pc, #472]	; (1a0083c8 <_dtoa_r+0x218>)
1a0081f0:	bfbc      	itt	lt
1a0081f2:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
1a0081f6:	f8cd 8004 	strlt.w	r8, [sp, #4]
1a0081fa:	ea33 0308 	bics.w	r3, r3, r8
1a0081fe:	f000 80a6 	beq.w	1a00834e <_dtoa_r+0x19e>
1a008202:	e9dd 6700 	ldrd	r6, r7, [sp]
1a008206:	2200      	movs	r2, #0
1a008208:	2300      	movs	r3, #0
1a00820a:	4630      	mov	r0, r6
1a00820c:	4639      	mov	r1, r7
1a00820e:	f7fc ff17 	bl	1a005040 <__aeabi_dcmpeq>
1a008212:	4605      	mov	r5, r0
1a008214:	b178      	cbz	r0, 1a008236 <_dtoa_r+0x86>
1a008216:	9a05      	ldr	r2, [sp, #20]
1a008218:	2301      	movs	r3, #1
1a00821a:	6013      	str	r3, [r2, #0]
1a00821c:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a00821e:	2b00      	cmp	r3, #0
1a008220:	f000 80c0 	beq.w	1a0083a4 <_dtoa_r+0x1f4>
1a008224:	4b69      	ldr	r3, [pc, #420]	; (1a0083cc <_dtoa_r+0x21c>)
1a008226:	9a25      	ldr	r2, [sp, #148]	; 0x94
1a008228:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
1a00822c:	6013      	str	r3, [r2, #0]
1a00822e:	4658      	mov	r0, fp
1a008230:	b01b      	add	sp, #108	; 0x6c
1a008232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008236:	aa18      	add	r2, sp, #96	; 0x60
1a008238:	a919      	add	r1, sp, #100	; 0x64
1a00823a:	ec47 6b10 	vmov	d0, r6, r7
1a00823e:	4648      	mov	r0, r9
1a008240:	f001 fc2a 	bl	1a009a98 <__d2b>
1a008244:	ea5f 5418 	movs.w	r4, r8, lsr #20
1a008248:	4682      	mov	sl, r0
1a00824a:	f040 80a0 	bne.w	1a00838e <_dtoa_r+0x1de>
1a00824e:	e9dd 5418 	ldrd	r5, r4, [sp, #96]	; 0x60
1a008252:	442c      	add	r4, r5
1a008254:	f204 4332 	addw	r3, r4, #1074	; 0x432
1a008258:	2b20      	cmp	r3, #32
1a00825a:	f340 842c 	ble.w	1a008ab6 <_dtoa_r+0x906>
1a00825e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1a008262:	fa08 f803 	lsl.w	r8, r8, r3
1a008266:	9b00      	ldr	r3, [sp, #0]
1a008268:	f204 4012 	addw	r0, r4, #1042	; 0x412
1a00826c:	fa23 f000 	lsr.w	r0, r3, r0
1a008270:	ea48 0000 	orr.w	r0, r8, r0
1a008274:	f7fc fc02 	bl	1a004a7c <__aeabi_ui2d>
1a008278:	2301      	movs	r3, #1
1a00827a:	4606      	mov	r6, r0
1a00827c:	3c01      	subs	r4, #1
1a00827e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
1a008282:	930f      	str	r3, [sp, #60]	; 0x3c
1a008284:	4630      	mov	r0, r6
1a008286:	4639      	mov	r1, r7
1a008288:	2200      	movs	r2, #0
1a00828a:	4b51      	ldr	r3, [pc, #324]	; (1a0083d0 <_dtoa_r+0x220>)
1a00828c:	f7fc fab8 	bl	1a004800 <__aeabi_dsub>
1a008290:	a347      	add	r3, pc, #284	; (adr r3, 1a0083b0 <_dtoa_r+0x200>)
1a008292:	e9d3 2300 	ldrd	r2, r3, [r3]
1a008296:	f7fc fc6b 	bl	1a004b70 <__aeabi_dmul>
1a00829a:	a347      	add	r3, pc, #284	; (adr r3, 1a0083b8 <_dtoa_r+0x208>)
1a00829c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0082a0:	f7fc fab0 	bl	1a004804 <__adddf3>
1a0082a4:	4606      	mov	r6, r0
1a0082a6:	4620      	mov	r0, r4
1a0082a8:	460f      	mov	r7, r1
1a0082aa:	f7fc fbf7 	bl	1a004a9c <__aeabi_i2d>
1a0082ae:	a344      	add	r3, pc, #272	; (adr r3, 1a0083c0 <_dtoa_r+0x210>)
1a0082b0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0082b4:	f7fc fc5c 	bl	1a004b70 <__aeabi_dmul>
1a0082b8:	4602      	mov	r2, r0
1a0082ba:	460b      	mov	r3, r1
1a0082bc:	4630      	mov	r0, r6
1a0082be:	4639      	mov	r1, r7
1a0082c0:	f7fc faa0 	bl	1a004804 <__adddf3>
1a0082c4:	4606      	mov	r6, r0
1a0082c6:	460f      	mov	r7, r1
1a0082c8:	f001 ffee 	bl	1a00a2a8 <__aeabi_d2iz>
1a0082cc:	2200      	movs	r2, #0
1a0082ce:	9006      	str	r0, [sp, #24]
1a0082d0:	2300      	movs	r3, #0
1a0082d2:	4630      	mov	r0, r6
1a0082d4:	4639      	mov	r1, r7
1a0082d6:	f7fc febd 	bl	1a005054 <__aeabi_dcmplt>
1a0082da:	2800      	cmp	r0, #0
1a0082dc:	f040 8273 	bne.w	1a0087c6 <_dtoa_r+0x616>
1a0082e0:	9e06      	ldr	r6, [sp, #24]
1a0082e2:	2e16      	cmp	r6, #22
1a0082e4:	f200 825d 	bhi.w	1a0087a2 <_dtoa_r+0x5f2>
1a0082e8:	4b3a      	ldr	r3, [pc, #232]	; (1a0083d4 <_dtoa_r+0x224>)
1a0082ea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
1a0082ee:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0082f2:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0082f6:	f7fc fecb 	bl	1a005090 <__aeabi_dcmpgt>
1a0082fa:	2800      	cmp	r0, #0
1a0082fc:	f000 83d7 	beq.w	1a008aae <_dtoa_r+0x8fe>
1a008300:	1e73      	subs	r3, r6, #1
1a008302:	9306      	str	r3, [sp, #24]
1a008304:	2300      	movs	r3, #0
1a008306:	930d      	str	r3, [sp, #52]	; 0x34
1a008308:	1b2c      	subs	r4, r5, r4
1a00830a:	f1b4 0801 	subs.w	r8, r4, #1
1a00830e:	f100 8254 	bmi.w	1a0087ba <_dtoa_r+0x60a>
1a008312:	2300      	movs	r3, #0
1a008314:	9308      	str	r3, [sp, #32]
1a008316:	9b06      	ldr	r3, [sp, #24]
1a008318:	2b00      	cmp	r3, #0
1a00831a:	f2c0 8245 	blt.w	1a0087a8 <_dtoa_r+0x5f8>
1a00831e:	4498      	add	r8, r3
1a008320:	930c      	str	r3, [sp, #48]	; 0x30
1a008322:	2300      	movs	r3, #0
1a008324:	930b      	str	r3, [sp, #44]	; 0x2c
1a008326:	9b02      	ldr	r3, [sp, #8]
1a008328:	2b09      	cmp	r3, #9
1a00832a:	d85b      	bhi.n	1a0083e4 <_dtoa_r+0x234>
1a00832c:	2b05      	cmp	r3, #5
1a00832e:	f340 83c0 	ble.w	1a008ab2 <_dtoa_r+0x902>
1a008332:	3b04      	subs	r3, #4
1a008334:	9302      	str	r3, [sp, #8]
1a008336:	2500      	movs	r5, #0
1a008338:	9b02      	ldr	r3, [sp, #8]
1a00833a:	3b02      	subs	r3, #2
1a00833c:	2b03      	cmp	r3, #3
1a00833e:	f200 8498 	bhi.w	1a008c72 <_dtoa_r+0xac2>
1a008342:	e8df f013 	tbh	[pc, r3, lsl #1]
1a008346:	03df      	.short	0x03df
1a008348:	03e803bf 	.word	0x03e803bf
1a00834c:	04f5      	.short	0x04f5
1a00834e:	9a05      	ldr	r2, [sp, #20]
1a008350:	f242 730f 	movw	r3, #9999	; 0x270f
1a008354:	6013      	str	r3, [r2, #0]
1a008356:	9b00      	ldr	r3, [sp, #0]
1a008358:	b983      	cbnz	r3, 1a00837c <_dtoa_r+0x1cc>
1a00835a:	f3c8 0313 	ubfx	r3, r8, #0, #20
1a00835e:	b96b      	cbnz	r3, 1a00837c <_dtoa_r+0x1cc>
1a008360:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a008362:	f8df b074 	ldr.w	fp, [pc, #116]	; 1a0083d8 <_dtoa_r+0x228>
1a008366:	2b00      	cmp	r3, #0
1a008368:	f43f af61 	beq.w	1a00822e <_dtoa_r+0x7e>
1a00836c:	f10b 0308 	add.w	r3, fp, #8
1a008370:	9a25      	ldr	r2, [sp, #148]	; 0x94
1a008372:	4658      	mov	r0, fp
1a008374:	6013      	str	r3, [r2, #0]
1a008376:	b01b      	add	sp, #108	; 0x6c
1a008378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00837c:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a00837e:	f8df b05c 	ldr.w	fp, [pc, #92]	; 1a0083dc <_dtoa_r+0x22c>
1a008382:	2b00      	cmp	r3, #0
1a008384:	f43f af53 	beq.w	1a00822e <_dtoa_r+0x7e>
1a008388:	f10b 0303 	add.w	r3, fp, #3
1a00838c:	e7f0      	b.n	1a008370 <_dtoa_r+0x1c0>
1a00838e:	f3c7 0313 	ubfx	r3, r7, #0, #20
1a008392:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
1a008396:	950f      	str	r5, [sp, #60]	; 0x3c
1a008398:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
1a00839c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
1a0083a0:	9d18      	ldr	r5, [sp, #96]	; 0x60
1a0083a2:	e76f      	b.n	1a008284 <_dtoa_r+0xd4>
1a0083a4:	f8df b038 	ldr.w	fp, [pc, #56]	; 1a0083e0 <_dtoa_r+0x230>
1a0083a8:	4658      	mov	r0, fp
1a0083aa:	b01b      	add	sp, #108	; 0x6c
1a0083ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0083b0:	636f4361 	.word	0x636f4361
1a0083b4:	3fd287a7 	.word	0x3fd287a7
1a0083b8:	8b60c8b3 	.word	0x8b60c8b3
1a0083bc:	3fc68a28 	.word	0x3fc68a28
1a0083c0:	509f79fb 	.word	0x509f79fb
1a0083c4:	3fd34413 	.word	0x3fd34413
1a0083c8:	7ff00000 	.word	0x7ff00000
1a0083cc:	1a00a9e5 	.word	0x1a00a9e5
1a0083d0:	3ff80000 	.word	0x3ff80000
1a0083d4:	1a00ab48 	.word	0x1a00ab48
1a0083d8:	1a00ab0c 	.word	0x1a00ab0c
1a0083dc:	1a00ab18 	.word	0x1a00ab18
1a0083e0:	1a00a9e4 	.word	0x1a00a9e4
1a0083e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
1a0083e8:	2501      	movs	r5, #1
1a0083ea:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
1a0083ee:	2300      	movs	r3, #0
1a0083f0:	9302      	str	r3, [sp, #8]
1a0083f2:	9307      	str	r3, [sp, #28]
1a0083f4:	2100      	movs	r1, #0
1a0083f6:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
1a0083fa:	940e      	str	r4, [sp, #56]	; 0x38
1a0083fc:	4648      	mov	r0, r9
1a0083fe:	f001 f8a3 	bl	1a009548 <_Balloc>
1a008402:	2c0e      	cmp	r4, #14
1a008404:	4683      	mov	fp, r0
1a008406:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
1a00840a:	f200 80fb 	bhi.w	1a008604 <_dtoa_r+0x454>
1a00840e:	2d00      	cmp	r5, #0
1a008410:	f000 80f8 	beq.w	1a008604 <_dtoa_r+0x454>
1a008414:	ed9d 7b00 	vldr	d7, [sp]
1a008418:	9906      	ldr	r1, [sp, #24]
1a00841a:	2900      	cmp	r1, #0
1a00841c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a008420:	f340 83e5 	ble.w	1a008bee <_dtoa_r+0xa3e>
1a008424:	4b9d      	ldr	r3, [pc, #628]	; (1a00869c <_dtoa_r+0x4ec>)
1a008426:	f001 020f 	and.w	r2, r1, #15
1a00842a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a00842e:	ed93 7b00 	vldr	d7, [r3]
1a008432:	110c      	asrs	r4, r1, #4
1a008434:	06e2      	lsls	r2, r4, #27
1a008436:	ed8d 7b00 	vstr	d7, [sp]
1a00843a:	f140 849e 	bpl.w	1a008d7a <_dtoa_r+0xbca>
1a00843e:	4b98      	ldr	r3, [pc, #608]	; (1a0086a0 <_dtoa_r+0x4f0>)
1a008440:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a008444:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a008448:	f7fc fcbc 	bl	1a004dc4 <__aeabi_ddiv>
1a00844c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
1a008450:	f004 040f 	and.w	r4, r4, #15
1a008454:	2603      	movs	r6, #3
1a008456:	b17c      	cbz	r4, 1a008478 <_dtoa_r+0x2c8>
1a008458:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00845c:	4d90      	ldr	r5, [pc, #576]	; (1a0086a0 <_dtoa_r+0x4f0>)
1a00845e:	07e3      	lsls	r3, r4, #31
1a008460:	d504      	bpl.n	1a00846c <_dtoa_r+0x2bc>
1a008462:	e9d5 2300 	ldrd	r2, r3, [r5]
1a008466:	f7fc fb83 	bl	1a004b70 <__aeabi_dmul>
1a00846a:	3601      	adds	r6, #1
1a00846c:	1064      	asrs	r4, r4, #1
1a00846e:	f105 0508 	add.w	r5, r5, #8
1a008472:	d1f4      	bne.n	1a00845e <_dtoa_r+0x2ae>
1a008474:	e9cd 0100 	strd	r0, r1, [sp]
1a008478:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00847c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a008480:	f7fc fca0 	bl	1a004dc4 <__aeabi_ddiv>
1a008484:	e9cd 0100 	strd	r0, r1, [sp]
1a008488:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00848a:	b143      	cbz	r3, 1a00849e <_dtoa_r+0x2ee>
1a00848c:	2200      	movs	r2, #0
1a00848e:	4b85      	ldr	r3, [pc, #532]	; (1a0086a4 <_dtoa_r+0x4f4>)
1a008490:	e9dd 0100 	ldrd	r0, r1, [sp]
1a008494:	f7fc fdde 	bl	1a005054 <__aeabi_dcmplt>
1a008498:	2800      	cmp	r0, #0
1a00849a:	f040 84ff 	bne.w	1a008e9c <_dtoa_r+0xcec>
1a00849e:	4630      	mov	r0, r6
1a0084a0:	f7fc fafc 	bl	1a004a9c <__aeabi_i2d>
1a0084a4:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0084a8:	f7fc fb62 	bl	1a004b70 <__aeabi_dmul>
1a0084ac:	4b7e      	ldr	r3, [pc, #504]	; (1a0086a8 <_dtoa_r+0x4f8>)
1a0084ae:	2200      	movs	r2, #0
1a0084b0:	f7fc f9a8 	bl	1a004804 <__adddf3>
1a0084b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0084b6:	4606      	mov	r6, r0
1a0084b8:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a0084bc:	2b00      	cmp	r3, #0
1a0084be:	f000 841c 	beq.w	1a008cfa <_dtoa_r+0xb4a>
1a0084c2:	9b06      	ldr	r3, [sp, #24]
1a0084c4:	9316      	str	r3, [sp, #88]	; 0x58
1a0084c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0084c8:	9312      	str	r3, [sp, #72]	; 0x48
1a0084ca:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0084ce:	f001 feeb 	bl	1a00a2a8 <__aeabi_d2iz>
1a0084d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0084d4:	4b71      	ldr	r3, [pc, #452]	; (1a00869c <_dtoa_r+0x4ec>)
1a0084d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a0084da:	ed13 7b02 	vldr	d7, [r3, #-8]
1a0084de:	f100 0530 	add.w	r5, r0, #48	; 0x30
1a0084e2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
1a0084e6:	f7fc fad9 	bl	1a004a9c <__aeabi_i2d>
1a0084ea:	460b      	mov	r3, r1
1a0084ec:	4602      	mov	r2, r0
1a0084ee:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0084f2:	e9cd 6700 	strd	r6, r7, [sp]
1a0084f6:	f7fc f983 	bl	1a004800 <__aeabi_dsub>
1a0084fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0084fc:	b2ed      	uxtb	r5, r5
1a0084fe:	4606      	mov	r6, r0
1a008500:	460f      	mov	r7, r1
1a008502:	f10b 0401 	add.w	r4, fp, #1
1a008506:	2b00      	cmp	r3, #0
1a008508:	f000 8458 	beq.w	1a008dbc <_dtoa_r+0xc0c>
1a00850c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
1a008510:	2000      	movs	r0, #0
1a008512:	4966      	ldr	r1, [pc, #408]	; (1a0086ac <_dtoa_r+0x4fc>)
1a008514:	f7fc fc56 	bl	1a004dc4 <__aeabi_ddiv>
1a008518:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00851c:	f7fc f970 	bl	1a004800 <__aeabi_dsub>
1a008520:	f88b 5000 	strb.w	r5, [fp]
1a008524:	4632      	mov	r2, r6
1a008526:	463b      	mov	r3, r7
1a008528:	e9cd 0100 	strd	r0, r1, [sp]
1a00852c:	f7fc fdb0 	bl	1a005090 <__aeabi_dcmpgt>
1a008530:	2800      	cmp	r0, #0
1a008532:	f040 8502 	bne.w	1a008f3a <_dtoa_r+0xd8a>
1a008536:	4632      	mov	r2, r6
1a008538:	463b      	mov	r3, r7
1a00853a:	2000      	movs	r0, #0
1a00853c:	4959      	ldr	r1, [pc, #356]	; (1a0086a4 <_dtoa_r+0x4f4>)
1a00853e:	f7fc f95f 	bl	1a004800 <__aeabi_dsub>
1a008542:	4602      	mov	r2, r0
1a008544:	460b      	mov	r3, r1
1a008546:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00854a:	f7fc fda1 	bl	1a005090 <__aeabi_dcmpgt>
1a00854e:	2800      	cmp	r0, #0
1a008550:	f040 84fb 	bne.w	1a008f4a <_dtoa_r+0xd9a>
1a008554:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a008556:	2a01      	cmp	r2, #1
1a008558:	d050      	beq.n	1a0085fc <_dtoa_r+0x44c>
1a00855a:	445a      	add	r2, fp
1a00855c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
1a008560:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a008564:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
1a008568:	4692      	mov	sl, r2
1a00856a:	46cb      	mov	fp, r9
1a00856c:	e9dd 8900 	ldrd	r8, r9, [sp]
1a008570:	e00c      	b.n	1a00858c <_dtoa_r+0x3dc>
1a008572:	2000      	movs	r0, #0
1a008574:	494b      	ldr	r1, [pc, #300]	; (1a0086a4 <_dtoa_r+0x4f4>)
1a008576:	f7fc f943 	bl	1a004800 <__aeabi_dsub>
1a00857a:	4642      	mov	r2, r8
1a00857c:	464b      	mov	r3, r9
1a00857e:	f7fc fd69 	bl	1a005054 <__aeabi_dcmplt>
1a008582:	2800      	cmp	r0, #0
1a008584:	f040 84dc 	bne.w	1a008f40 <_dtoa_r+0xd90>
1a008588:	4554      	cmp	r4, sl
1a00858a:	d030      	beq.n	1a0085ee <_dtoa_r+0x43e>
1a00858c:	4640      	mov	r0, r8
1a00858e:	4649      	mov	r1, r9
1a008590:	2200      	movs	r2, #0
1a008592:	4b47      	ldr	r3, [pc, #284]	; (1a0086b0 <_dtoa_r+0x500>)
1a008594:	f7fc faec 	bl	1a004b70 <__aeabi_dmul>
1a008598:	2200      	movs	r2, #0
1a00859a:	4b45      	ldr	r3, [pc, #276]	; (1a0086b0 <_dtoa_r+0x500>)
1a00859c:	4680      	mov	r8, r0
1a00859e:	4689      	mov	r9, r1
1a0085a0:	4630      	mov	r0, r6
1a0085a2:	4639      	mov	r1, r7
1a0085a4:	f7fc fae4 	bl	1a004b70 <__aeabi_dmul>
1a0085a8:	460f      	mov	r7, r1
1a0085aa:	4606      	mov	r6, r0
1a0085ac:	f001 fe7c 	bl	1a00a2a8 <__aeabi_d2iz>
1a0085b0:	4605      	mov	r5, r0
1a0085b2:	f7fc fa73 	bl	1a004a9c <__aeabi_i2d>
1a0085b6:	4602      	mov	r2, r0
1a0085b8:	460b      	mov	r3, r1
1a0085ba:	4630      	mov	r0, r6
1a0085bc:	4639      	mov	r1, r7
1a0085be:	f7fc f91f 	bl	1a004800 <__aeabi_dsub>
1a0085c2:	3530      	adds	r5, #48	; 0x30
1a0085c4:	b2ed      	uxtb	r5, r5
1a0085c6:	4642      	mov	r2, r8
1a0085c8:	464b      	mov	r3, r9
1a0085ca:	f804 5b01 	strb.w	r5, [r4], #1
1a0085ce:	4606      	mov	r6, r0
1a0085d0:	460f      	mov	r7, r1
1a0085d2:	f7fc fd3f 	bl	1a005054 <__aeabi_dcmplt>
1a0085d6:	4632      	mov	r2, r6
1a0085d8:	463b      	mov	r3, r7
1a0085da:	2800      	cmp	r0, #0
1a0085dc:	d0c9      	beq.n	1a008572 <_dtoa_r+0x3c2>
1a0085de:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0085e0:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a0085e4:	9306      	str	r3, [sp, #24]
1a0085e6:	46d9      	mov	r9, fp
1a0085e8:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
1a0085ec:	e236      	b.n	1a008a5c <_dtoa_r+0x8ac>
1a0085ee:	46d9      	mov	r9, fp
1a0085f0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
1a0085f4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a0085f8:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
1a0085fc:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
1a008600:	e9cd 3400 	strd	r3, r4, [sp]
1a008604:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a008606:	2b00      	cmp	r3, #0
1a008608:	f2c0 80ae 	blt.w	1a008768 <_dtoa_r+0x5b8>
1a00860c:	9a06      	ldr	r2, [sp, #24]
1a00860e:	2a0e      	cmp	r2, #14
1a008610:	f300 80aa 	bgt.w	1a008768 <_dtoa_r+0x5b8>
1a008614:	4b21      	ldr	r3, [pc, #132]	; (1a00869c <_dtoa_r+0x4ec>)
1a008616:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a00861a:	ed93 7b00 	vldr	d7, [r3]
1a00861e:	9b07      	ldr	r3, [sp, #28]
1a008620:	2b00      	cmp	r3, #0
1a008622:	ed8d 7b02 	vstr	d7, [sp, #8]
1a008626:	f2c0 82be 	blt.w	1a008ba6 <_dtoa_r+0x9f6>
1a00862a:	e9dd 6700 	ldrd	r6, r7, [sp]
1a00862e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a008632:	4630      	mov	r0, r6
1a008634:	4639      	mov	r1, r7
1a008636:	f7fc fbc5 	bl	1a004dc4 <__aeabi_ddiv>
1a00863a:	f001 fe35 	bl	1a00a2a8 <__aeabi_d2iz>
1a00863e:	4605      	mov	r5, r0
1a008640:	f7fc fa2c 	bl	1a004a9c <__aeabi_i2d>
1a008644:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a008648:	f7fc fa92 	bl	1a004b70 <__aeabi_dmul>
1a00864c:	460b      	mov	r3, r1
1a00864e:	4602      	mov	r2, r0
1a008650:	4639      	mov	r1, r7
1a008652:	4630      	mov	r0, r6
1a008654:	f7fc f8d4 	bl	1a004800 <__aeabi_dsub>
1a008658:	f105 0330 	add.w	r3, r5, #48	; 0x30
1a00865c:	f88b 3000 	strb.w	r3, [fp]
1a008660:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008662:	2b01      	cmp	r3, #1
1a008664:	4606      	mov	r6, r0
1a008666:	460f      	mov	r7, r1
1a008668:	f10b 0401 	add.w	r4, fp, #1
1a00866c:	d053      	beq.n	1a008716 <_dtoa_r+0x566>
1a00866e:	2200      	movs	r2, #0
1a008670:	4b0f      	ldr	r3, [pc, #60]	; (1a0086b0 <_dtoa_r+0x500>)
1a008672:	f7fc fa7d 	bl	1a004b70 <__aeabi_dmul>
1a008676:	2200      	movs	r2, #0
1a008678:	2300      	movs	r3, #0
1a00867a:	4606      	mov	r6, r0
1a00867c:	460f      	mov	r7, r1
1a00867e:	f7fc fcdf 	bl	1a005040 <__aeabi_dcmpeq>
1a008682:	2800      	cmp	r0, #0
1a008684:	f040 81ea 	bne.w	1a008a5c <_dtoa_r+0x8ac>
1a008688:	f8cd a000 	str.w	sl, [sp]
1a00868c:	f8cd 901c 	str.w	r9, [sp, #28]
1a008690:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a008694:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
1a008698:	e017      	b.n	1a0086ca <_dtoa_r+0x51a>
1a00869a:	bf00      	nop
1a00869c:	1a00ab48 	.word	0x1a00ab48
1a0086a0:	1a00ab20 	.word	0x1a00ab20
1a0086a4:	3ff00000 	.word	0x3ff00000
1a0086a8:	401c0000 	.word	0x401c0000
1a0086ac:	3fe00000 	.word	0x3fe00000
1a0086b0:	40240000 	.word	0x40240000
1a0086b4:	f7fc fa5c 	bl	1a004b70 <__aeabi_dmul>
1a0086b8:	2200      	movs	r2, #0
1a0086ba:	2300      	movs	r3, #0
1a0086bc:	4606      	mov	r6, r0
1a0086be:	460f      	mov	r7, r1
1a0086c0:	f7fc fcbe 	bl	1a005040 <__aeabi_dcmpeq>
1a0086c4:	2800      	cmp	r0, #0
1a0086c6:	f040 833d 	bne.w	1a008d44 <_dtoa_r+0xb94>
1a0086ca:	464a      	mov	r2, r9
1a0086cc:	4653      	mov	r3, sl
1a0086ce:	4630      	mov	r0, r6
1a0086d0:	4639      	mov	r1, r7
1a0086d2:	f7fc fb77 	bl	1a004dc4 <__aeabi_ddiv>
1a0086d6:	f001 fde7 	bl	1a00a2a8 <__aeabi_d2iz>
1a0086da:	4605      	mov	r5, r0
1a0086dc:	f7fc f9de 	bl	1a004a9c <__aeabi_i2d>
1a0086e0:	464a      	mov	r2, r9
1a0086e2:	4653      	mov	r3, sl
1a0086e4:	f7fc fa44 	bl	1a004b70 <__aeabi_dmul>
1a0086e8:	4602      	mov	r2, r0
1a0086ea:	460b      	mov	r3, r1
1a0086ec:	4630      	mov	r0, r6
1a0086ee:	4639      	mov	r1, r7
1a0086f0:	f7fc f886 	bl	1a004800 <__aeabi_dsub>
1a0086f4:	f105 0c30 	add.w	ip, r5, #48	; 0x30
1a0086f8:	f804 cb01 	strb.w	ip, [r4], #1
1a0086fc:	eba4 0c0b 	sub.w	ip, r4, fp
1a008700:	45e0      	cmp	r8, ip
1a008702:	4606      	mov	r6, r0
1a008704:	460f      	mov	r7, r1
1a008706:	f04f 0200 	mov.w	r2, #0
1a00870a:	4bc1      	ldr	r3, [pc, #772]	; (1a008a10 <_dtoa_r+0x860>)
1a00870c:	d1d2      	bne.n	1a0086b4 <_dtoa_r+0x504>
1a00870e:	f8dd a000 	ldr.w	sl, [sp]
1a008712:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a008716:	4632      	mov	r2, r6
1a008718:	463b      	mov	r3, r7
1a00871a:	4630      	mov	r0, r6
1a00871c:	4639      	mov	r1, r7
1a00871e:	f7fc f871 	bl	1a004804 <__adddf3>
1a008722:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a008726:	4606      	mov	r6, r0
1a008728:	460f      	mov	r7, r1
1a00872a:	f7fc fcb1 	bl	1a005090 <__aeabi_dcmpgt>
1a00872e:	b958      	cbnz	r0, 1a008748 <_dtoa_r+0x598>
1a008730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a008734:	4630      	mov	r0, r6
1a008736:	4639      	mov	r1, r7
1a008738:	f7fc fc82 	bl	1a005040 <__aeabi_dcmpeq>
1a00873c:	2800      	cmp	r0, #0
1a00873e:	f000 818d 	beq.w	1a008a5c <_dtoa_r+0x8ac>
1a008742:	07e9      	lsls	r1, r5, #31
1a008744:	f140 818a 	bpl.w	1a008a5c <_dtoa_r+0x8ac>
1a008748:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a00874c:	e005      	b.n	1a00875a <_dtoa_r+0x5aa>
1a00874e:	459b      	cmp	fp, r3
1a008750:	f000 8373 	beq.w	1a008e3a <_dtoa_r+0xc8a>
1a008754:	f813 5c01 	ldrb.w	r5, [r3, #-1]
1a008758:	461c      	mov	r4, r3
1a00875a:	2d39      	cmp	r5, #57	; 0x39
1a00875c:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
1a008760:	d0f5      	beq.n	1a00874e <_dtoa_r+0x59e>
1a008762:	3501      	adds	r5, #1
1a008764:	701d      	strb	r5, [r3, #0]
1a008766:	e179      	b.n	1a008a5c <_dtoa_r+0x8ac>
1a008768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00876a:	2a00      	cmp	r2, #0
1a00876c:	d03b      	beq.n	1a0087e6 <_dtoa_r+0x636>
1a00876e:	9a02      	ldr	r2, [sp, #8]
1a008770:	2a01      	cmp	r2, #1
1a008772:	f340 820b 	ble.w	1a008b8c <_dtoa_r+0x9dc>
1a008776:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008778:	1e5f      	subs	r7, r3, #1
1a00877a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00877c:	42bb      	cmp	r3, r7
1a00877e:	f2c0 82e6 	blt.w	1a008d4e <_dtoa_r+0xb9e>
1a008782:	1bdf      	subs	r7, r3, r7
1a008784:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008786:	2b00      	cmp	r3, #0
1a008788:	f2c0 830b 	blt.w	1a008da2 <_dtoa_r+0xbf2>
1a00878c:	9a08      	ldr	r2, [sp, #32]
1a00878e:	4614      	mov	r4, r2
1a008790:	441a      	add	r2, r3
1a008792:	4498      	add	r8, r3
1a008794:	9208      	str	r2, [sp, #32]
1a008796:	2101      	movs	r1, #1
1a008798:	4648      	mov	r0, r9
1a00879a:	f000 ff95 	bl	1a0096c8 <__i2b>
1a00879e:	4605      	mov	r5, r0
1a0087a0:	e024      	b.n	1a0087ec <_dtoa_r+0x63c>
1a0087a2:	2301      	movs	r3, #1
1a0087a4:	930d      	str	r3, [sp, #52]	; 0x34
1a0087a6:	e5af      	b.n	1a008308 <_dtoa_r+0x158>
1a0087a8:	9a08      	ldr	r2, [sp, #32]
1a0087aa:	9b06      	ldr	r3, [sp, #24]
1a0087ac:	1ad2      	subs	r2, r2, r3
1a0087ae:	425b      	negs	r3, r3
1a0087b0:	930b      	str	r3, [sp, #44]	; 0x2c
1a0087b2:	2300      	movs	r3, #0
1a0087b4:	9208      	str	r2, [sp, #32]
1a0087b6:	930c      	str	r3, [sp, #48]	; 0x30
1a0087b8:	e5b5      	b.n	1a008326 <_dtoa_r+0x176>
1a0087ba:	f1c4 0301 	rsb	r3, r4, #1
1a0087be:	9308      	str	r3, [sp, #32]
1a0087c0:	f04f 0800 	mov.w	r8, #0
1a0087c4:	e5a7      	b.n	1a008316 <_dtoa_r+0x166>
1a0087c6:	f8dd 8018 	ldr.w	r8, [sp, #24]
1a0087ca:	4640      	mov	r0, r8
1a0087cc:	f7fc f966 	bl	1a004a9c <__aeabi_i2d>
1a0087d0:	4632      	mov	r2, r6
1a0087d2:	463b      	mov	r3, r7
1a0087d4:	f7fc fc34 	bl	1a005040 <__aeabi_dcmpeq>
1a0087d8:	2800      	cmp	r0, #0
1a0087da:	f47f ad81 	bne.w	1a0082e0 <_dtoa_r+0x130>
1a0087de:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a0087e2:	9306      	str	r3, [sp, #24]
1a0087e4:	e57c      	b.n	1a0082e0 <_dtoa_r+0x130>
1a0087e6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1a0087e8:	9c08      	ldr	r4, [sp, #32]
1a0087ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0087ec:	2c00      	cmp	r4, #0
1a0087ee:	dd0c      	ble.n	1a00880a <_dtoa_r+0x65a>
1a0087f0:	f1b8 0f00 	cmp.w	r8, #0
1a0087f4:	dd09      	ble.n	1a00880a <_dtoa_r+0x65a>
1a0087f6:	4544      	cmp	r4, r8
1a0087f8:	9a08      	ldr	r2, [sp, #32]
1a0087fa:	4623      	mov	r3, r4
1a0087fc:	bfa8      	it	ge
1a0087fe:	4643      	movge	r3, r8
1a008800:	1ad2      	subs	r2, r2, r3
1a008802:	9208      	str	r2, [sp, #32]
1a008804:	1ae4      	subs	r4, r4, r3
1a008806:	eba8 0803 	sub.w	r8, r8, r3
1a00880a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00880c:	b16b      	cbz	r3, 1a00882a <_dtoa_r+0x67a>
1a00880e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a008810:	2a00      	cmp	r2, #0
1a008812:	f000 8290 	beq.w	1a008d36 <_dtoa_r+0xb86>
1a008816:	1bde      	subs	r6, r3, r7
1a008818:	2f00      	cmp	r7, #0
1a00881a:	f040 819b 	bne.w	1a008b54 <_dtoa_r+0x9a4>
1a00881e:	4651      	mov	r1, sl
1a008820:	4632      	mov	r2, r6
1a008822:	4648      	mov	r0, r9
1a008824:	f001 f800 	bl	1a009828 <__pow5mult>
1a008828:	4682      	mov	sl, r0
1a00882a:	2101      	movs	r1, #1
1a00882c:	4648      	mov	r0, r9
1a00882e:	f000 ff4b 	bl	1a0096c8 <__i2b>
1a008832:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a008834:	4606      	mov	r6, r0
1a008836:	2a00      	cmp	r2, #0
1a008838:	f040 8125 	bne.w	1a008a86 <_dtoa_r+0x8d6>
1a00883c:	9b02      	ldr	r3, [sp, #8]
1a00883e:	2b01      	cmp	r3, #1
1a008840:	f340 816c 	ble.w	1a008b1c <_dtoa_r+0x96c>
1a008844:	2001      	movs	r0, #1
1a008846:	4440      	add	r0, r8
1a008848:	f010 001f 	ands.w	r0, r0, #31
1a00884c:	f000 8119 	beq.w	1a008a82 <_dtoa_r+0x8d2>
1a008850:	f1c0 0320 	rsb	r3, r0, #32
1a008854:	2b04      	cmp	r3, #4
1a008856:	f340 83ac 	ble.w	1a008fb2 <_dtoa_r+0xe02>
1a00885a:	f1c0 001c 	rsb	r0, r0, #28
1a00885e:	9b08      	ldr	r3, [sp, #32]
1a008860:	4403      	add	r3, r0
1a008862:	9308      	str	r3, [sp, #32]
1a008864:	4404      	add	r4, r0
1a008866:	4480      	add	r8, r0
1a008868:	9b08      	ldr	r3, [sp, #32]
1a00886a:	2b00      	cmp	r3, #0
1a00886c:	dd05      	ble.n	1a00887a <_dtoa_r+0x6ca>
1a00886e:	4651      	mov	r1, sl
1a008870:	461a      	mov	r2, r3
1a008872:	4648      	mov	r0, r9
1a008874:	f001 f828 	bl	1a0098c8 <__lshift>
1a008878:	4682      	mov	sl, r0
1a00887a:	f1b8 0f00 	cmp.w	r8, #0
1a00887e:	dd05      	ble.n	1a00888c <_dtoa_r+0x6dc>
1a008880:	4631      	mov	r1, r6
1a008882:	4642      	mov	r2, r8
1a008884:	4648      	mov	r0, r9
1a008886:	f001 f81f 	bl	1a0098c8 <__lshift>
1a00888a:	4606      	mov	r6, r0
1a00888c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00888e:	2b00      	cmp	r3, #0
1a008890:	d177      	bne.n	1a008982 <_dtoa_r+0x7d2>
1a008892:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008894:	2b00      	cmp	r3, #0
1a008896:	f340 8209 	ble.w	1a008cac <_dtoa_r+0xafc>
1a00889a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00889c:	2b00      	cmp	r3, #0
1a00889e:	f000 8089 	beq.w	1a0089b4 <_dtoa_r+0x804>
1a0088a2:	2c00      	cmp	r4, #0
1a0088a4:	f300 816b 	bgt.w	1a008b7e <_dtoa_r+0x9ce>
1a0088a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0088aa:	2b00      	cmp	r3, #0
1a0088ac:	f040 81cd 	bne.w	1a008c4a <_dtoa_r+0xa9a>
1a0088b0:	46a8      	mov	r8, r5
1a0088b2:	9a00      	ldr	r2, [sp, #0]
1a0088b4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
1a0088b8:	f002 0201 	and.w	r2, r2, #1
1a0088bc:	920a      	str	r2, [sp, #40]	; 0x28
1a0088be:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0088c0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
1a0088c4:	441a      	add	r2, r3
1a0088c6:	465f      	mov	r7, fp
1a0088c8:	9209      	str	r2, [sp, #36]	; 0x24
1a0088ca:	46b3      	mov	fp, r6
1a0088cc:	4659      	mov	r1, fp
1a0088ce:	4650      	mov	r0, sl
1a0088d0:	f7ff fbda 	bl	1a008088 <quorem>
1a0088d4:	4629      	mov	r1, r5
1a0088d6:	4604      	mov	r4, r0
1a0088d8:	4650      	mov	r0, sl
1a0088da:	f001 f84b 	bl	1a009974 <__mcmp>
1a0088de:	4659      	mov	r1, fp
1a0088e0:	4606      	mov	r6, r0
1a0088e2:	4642      	mov	r2, r8
1a0088e4:	4648      	mov	r0, r9
1a0088e6:	f001 f861 	bl	1a0099ac <__mdiff>
1a0088ea:	f104 0330 	add.w	r3, r4, #48	; 0x30
1a0088ee:	9300      	str	r3, [sp, #0]
1a0088f0:	68c3      	ldr	r3, [r0, #12]
1a0088f2:	4601      	mov	r1, r0
1a0088f4:	2b00      	cmp	r3, #0
1a0088f6:	f040 81d4 	bne.w	1a008ca2 <_dtoa_r+0xaf2>
1a0088fa:	9008      	str	r0, [sp, #32]
1a0088fc:	4650      	mov	r0, sl
1a0088fe:	f001 f839 	bl	1a009974 <__mcmp>
1a008902:	9a08      	ldr	r2, [sp, #32]
1a008904:	9007      	str	r0, [sp, #28]
1a008906:	4611      	mov	r1, r2
1a008908:	4648      	mov	r0, r9
1a00890a:	f000 fe43 	bl	1a009594 <_Bfree>
1a00890e:	9b07      	ldr	r3, [sp, #28]
1a008910:	b933      	cbnz	r3, 1a008920 <_dtoa_r+0x770>
1a008912:	9a02      	ldr	r2, [sp, #8]
1a008914:	b922      	cbnz	r2, 1a008920 <_dtoa_r+0x770>
1a008916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a008918:	2b00      	cmp	r3, #0
1a00891a:	f000 8319 	beq.w	1a008f50 <_dtoa_r+0xda0>
1a00891e:	9b02      	ldr	r3, [sp, #8]
1a008920:	2e00      	cmp	r6, #0
1a008922:	f2c0 821c 	blt.w	1a008d5e <_dtoa_r+0xbae>
1a008926:	d105      	bne.n	1a008934 <_dtoa_r+0x784>
1a008928:	9a02      	ldr	r2, [sp, #8]
1a00892a:	b91a      	cbnz	r2, 1a008934 <_dtoa_r+0x784>
1a00892c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00892e:	2a00      	cmp	r2, #0
1a008930:	f000 8215 	beq.w	1a008d5e <_dtoa_r+0xbae>
1a008934:	2b00      	cmp	r3, #0
1a008936:	f107 0401 	add.w	r4, r7, #1
1a00893a:	f300 8225 	bgt.w	1a008d88 <_dtoa_r+0xbd8>
1a00893e:	9b00      	ldr	r3, [sp, #0]
1a008940:	703b      	strb	r3, [r7, #0]
1a008942:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008944:	42bb      	cmp	r3, r7
1a008946:	f000 8230 	beq.w	1a008daa <_dtoa_r+0xbfa>
1a00894a:	4651      	mov	r1, sl
1a00894c:	2300      	movs	r3, #0
1a00894e:	220a      	movs	r2, #10
1a008950:	4648      	mov	r0, r9
1a008952:	f000 fe29 	bl	1a0095a8 <__multadd>
1a008956:	4545      	cmp	r5, r8
1a008958:	4682      	mov	sl, r0
1a00895a:	4629      	mov	r1, r5
1a00895c:	f04f 0300 	mov.w	r3, #0
1a008960:	f04f 020a 	mov.w	r2, #10
1a008964:	4648      	mov	r0, r9
1a008966:	f000 8196 	beq.w	1a008c96 <_dtoa_r+0xae6>
1a00896a:	f000 fe1d 	bl	1a0095a8 <__multadd>
1a00896e:	4641      	mov	r1, r8
1a008970:	4605      	mov	r5, r0
1a008972:	2300      	movs	r3, #0
1a008974:	220a      	movs	r2, #10
1a008976:	4648      	mov	r0, r9
1a008978:	f000 fe16 	bl	1a0095a8 <__multadd>
1a00897c:	4627      	mov	r7, r4
1a00897e:	4680      	mov	r8, r0
1a008980:	e7a4      	b.n	1a0088cc <_dtoa_r+0x71c>
1a008982:	4631      	mov	r1, r6
1a008984:	4650      	mov	r0, sl
1a008986:	f000 fff5 	bl	1a009974 <__mcmp>
1a00898a:	2800      	cmp	r0, #0
1a00898c:	da81      	bge.n	1a008892 <_dtoa_r+0x6e2>
1a00898e:	9f06      	ldr	r7, [sp, #24]
1a008990:	4651      	mov	r1, sl
1a008992:	2300      	movs	r3, #0
1a008994:	220a      	movs	r2, #10
1a008996:	4648      	mov	r0, r9
1a008998:	3f01      	subs	r7, #1
1a00899a:	9706      	str	r7, [sp, #24]
1a00899c:	f000 fe04 	bl	1a0095a8 <__multadd>
1a0089a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0089a2:	4682      	mov	sl, r0
1a0089a4:	2b00      	cmp	r3, #0
1a0089a6:	f040 82eb 	bne.w	1a008f80 <_dtoa_r+0xdd0>
1a0089aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0089ac:	2b00      	cmp	r3, #0
1a0089ae:	f340 82f3 	ble.w	1a008f98 <_dtoa_r+0xde8>
1a0089b2:	9309      	str	r3, [sp, #36]	; 0x24
1a0089b4:	465c      	mov	r4, fp
1a0089b6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0089ba:	e002      	b.n	1a0089c2 <_dtoa_r+0x812>
1a0089bc:	f000 fdf4 	bl	1a0095a8 <__multadd>
1a0089c0:	4682      	mov	sl, r0
1a0089c2:	4631      	mov	r1, r6
1a0089c4:	4650      	mov	r0, sl
1a0089c6:	f7ff fb5f 	bl	1a008088 <quorem>
1a0089ca:	f100 0730 	add.w	r7, r0, #48	; 0x30
1a0089ce:	f804 7b01 	strb.w	r7, [r4], #1
1a0089d2:	eba4 030b 	sub.w	r3, r4, fp
1a0089d6:	4598      	cmp	r8, r3
1a0089d8:	f04f 020a 	mov.w	r2, #10
1a0089dc:	f04f 0300 	mov.w	r3, #0
1a0089e0:	4651      	mov	r1, sl
1a0089e2:	4648      	mov	r0, r9
1a0089e4:	dcea      	bgt.n	1a0089bc <_dtoa_r+0x80c>
1a0089e6:	2300      	movs	r3, #0
1a0089e8:	9700      	str	r7, [sp, #0]
1a0089ea:	9302      	str	r3, [sp, #8]
1a0089ec:	4651      	mov	r1, sl
1a0089ee:	2201      	movs	r2, #1
1a0089f0:	4648      	mov	r0, r9
1a0089f2:	f000 ff69 	bl	1a0098c8 <__lshift>
1a0089f6:	4631      	mov	r1, r6
1a0089f8:	4682      	mov	sl, r0
1a0089fa:	f000 ffbb 	bl	1a009974 <__mcmp>
1a0089fe:	2800      	cmp	r0, #0
1a008a00:	f814 2c01 	ldrb.w	r2, [r4, #-1]
1a008a04:	dc14      	bgt.n	1a008a30 <_dtoa_r+0x880>
1a008a06:	d108      	bne.n	1a008a1a <_dtoa_r+0x86a>
1a008a08:	9b00      	ldr	r3, [sp, #0]
1a008a0a:	07db      	lsls	r3, r3, #31
1a008a0c:	d410      	bmi.n	1a008a30 <_dtoa_r+0x880>
1a008a0e:	e004      	b.n	1a008a1a <_dtoa_r+0x86a>
1a008a10:	40240000 	.word	0x40240000
1a008a14:	f814 2c02 	ldrb.w	r2, [r4, #-2]
1a008a18:	461c      	mov	r4, r3
1a008a1a:	2a30      	cmp	r2, #48	; 0x30
1a008a1c:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
1a008a20:	d0f8      	beq.n	1a008a14 <_dtoa_r+0x864>
1a008a22:	e00b      	b.n	1a008a3c <_dtoa_r+0x88c>
1a008a24:	459b      	cmp	fp, r3
1a008a26:	f000 814e 	beq.w	1a008cc6 <_dtoa_r+0xb16>
1a008a2a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a008a2e:	461c      	mov	r4, r3
1a008a30:	2a39      	cmp	r2, #57	; 0x39
1a008a32:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
1a008a36:	d0f5      	beq.n	1a008a24 <_dtoa_r+0x874>
1a008a38:	3201      	adds	r2, #1
1a008a3a:	701a      	strb	r2, [r3, #0]
1a008a3c:	4631      	mov	r1, r6
1a008a3e:	4648      	mov	r0, r9
1a008a40:	f000 fda8 	bl	1a009594 <_Bfree>
1a008a44:	b155      	cbz	r5, 1a008a5c <_dtoa_r+0x8ac>
1a008a46:	9902      	ldr	r1, [sp, #8]
1a008a48:	b121      	cbz	r1, 1a008a54 <_dtoa_r+0x8a4>
1a008a4a:	42a9      	cmp	r1, r5
1a008a4c:	d002      	beq.n	1a008a54 <_dtoa_r+0x8a4>
1a008a4e:	4648      	mov	r0, r9
1a008a50:	f000 fda0 	bl	1a009594 <_Bfree>
1a008a54:	4629      	mov	r1, r5
1a008a56:	4648      	mov	r0, r9
1a008a58:	f000 fd9c 	bl	1a009594 <_Bfree>
1a008a5c:	4651      	mov	r1, sl
1a008a5e:	4648      	mov	r0, r9
1a008a60:	f000 fd98 	bl	1a009594 <_Bfree>
1a008a64:	2200      	movs	r2, #0
1a008a66:	9b06      	ldr	r3, [sp, #24]
1a008a68:	7022      	strb	r2, [r4, #0]
1a008a6a:	9a05      	ldr	r2, [sp, #20]
1a008a6c:	3301      	adds	r3, #1
1a008a6e:	6013      	str	r3, [r2, #0]
1a008a70:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a008a72:	2b00      	cmp	r3, #0
1a008a74:	f43f abdb 	beq.w	1a00822e <_dtoa_r+0x7e>
1a008a78:	4658      	mov	r0, fp
1a008a7a:	601c      	str	r4, [r3, #0]
1a008a7c:	b01b      	add	sp, #108	; 0x6c
1a008a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008a82:	201c      	movs	r0, #28
1a008a84:	e6eb      	b.n	1a00885e <_dtoa_r+0x6ae>
1a008a86:	4601      	mov	r1, r0
1a008a88:	4648      	mov	r0, r9
1a008a8a:	f000 fecd 	bl	1a009828 <__pow5mult>
1a008a8e:	9b02      	ldr	r3, [sp, #8]
1a008a90:	2b01      	cmp	r3, #1
1a008a92:	4606      	mov	r6, r0
1a008a94:	f340 80d4 	ble.w	1a008c40 <_dtoa_r+0xa90>
1a008a98:	2300      	movs	r3, #0
1a008a9a:	930c      	str	r3, [sp, #48]	; 0x30
1a008a9c:	6933      	ldr	r3, [r6, #16]
1a008a9e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
1a008aa2:	6918      	ldr	r0, [r3, #16]
1a008aa4:	f000 fdc0 	bl	1a009628 <__hi0bits>
1a008aa8:	f1c0 0020 	rsb	r0, r0, #32
1a008aac:	e6cb      	b.n	1a008846 <_dtoa_r+0x696>
1a008aae:	900d      	str	r0, [sp, #52]	; 0x34
1a008ab0:	e42a      	b.n	1a008308 <_dtoa_r+0x158>
1a008ab2:	2501      	movs	r5, #1
1a008ab4:	e440      	b.n	1a008338 <_dtoa_r+0x188>
1a008ab6:	f1c3 0820 	rsb	r8, r3, #32
1a008aba:	9b00      	ldr	r3, [sp, #0]
1a008abc:	fa03 f008 	lsl.w	r0, r3, r8
1a008ac0:	f7ff bbd8 	b.w	1a008274 <_dtoa_r+0xc4>
1a008ac4:	2300      	movs	r3, #0
1a008ac6:	930a      	str	r3, [sp, #40]	; 0x28
1a008ac8:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
1a008acc:	4413      	add	r3, r2
1a008ace:	930e      	str	r3, [sp, #56]	; 0x38
1a008ad0:	3301      	adds	r3, #1
1a008ad2:	2b01      	cmp	r3, #1
1a008ad4:	461e      	mov	r6, r3
1a008ad6:	9309      	str	r3, [sp, #36]	; 0x24
1a008ad8:	bfb8      	it	lt
1a008ada:	2601      	movlt	r6, #1
1a008adc:	2100      	movs	r1, #0
1a008ade:	2e17      	cmp	r6, #23
1a008ae0:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
1a008ae4:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a008ae6:	f77f ac89 	ble.w	1a0083fc <_dtoa_r+0x24c>
1a008aea:	2201      	movs	r2, #1
1a008aec:	2304      	movs	r3, #4
1a008aee:	005b      	lsls	r3, r3, #1
1a008af0:	f103 0014 	add.w	r0, r3, #20
1a008af4:	42b0      	cmp	r0, r6
1a008af6:	4611      	mov	r1, r2
1a008af8:	f102 0201 	add.w	r2, r2, #1
1a008afc:	d9f7      	bls.n	1a008aee <_dtoa_r+0x93e>
1a008afe:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
1a008b02:	e47b      	b.n	1a0083fc <_dtoa_r+0x24c>
1a008b04:	2300      	movs	r3, #0
1a008b06:	930a      	str	r3, [sp, #40]	; 0x28
1a008b08:	9e07      	ldr	r6, [sp, #28]
1a008b0a:	2e00      	cmp	r6, #0
1a008b0c:	f340 80e2 	ble.w	1a008cd4 <_dtoa_r+0xb24>
1a008b10:	960e      	str	r6, [sp, #56]	; 0x38
1a008b12:	9609      	str	r6, [sp, #36]	; 0x24
1a008b14:	e7e2      	b.n	1a008adc <_dtoa_r+0x92c>
1a008b16:	2301      	movs	r3, #1
1a008b18:	930a      	str	r3, [sp, #40]	; 0x28
1a008b1a:	e7f5      	b.n	1a008b08 <_dtoa_r+0x958>
1a008b1c:	9b00      	ldr	r3, [sp, #0]
1a008b1e:	2b00      	cmp	r3, #0
1a008b20:	f47f ae90 	bne.w	1a008844 <_dtoa_r+0x694>
1a008b24:	e9dd 1200 	ldrd	r1, r2, [sp]
1a008b28:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a008b2c:	2b00      	cmp	r3, #0
1a008b2e:	f040 8192 	bne.w	1a008e56 <_dtoa_r+0xca6>
1a008b32:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
1a008b36:	0d1b      	lsrs	r3, r3, #20
1a008b38:	051b      	lsls	r3, r3, #20
1a008b3a:	b12b      	cbz	r3, 1a008b48 <_dtoa_r+0x998>
1a008b3c:	9b08      	ldr	r3, [sp, #32]
1a008b3e:	3301      	adds	r3, #1
1a008b40:	9308      	str	r3, [sp, #32]
1a008b42:	f108 0801 	add.w	r8, r8, #1
1a008b46:	2301      	movs	r3, #1
1a008b48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a008b4a:	930c      	str	r3, [sp, #48]	; 0x30
1a008b4c:	2a00      	cmp	r2, #0
1a008b4e:	f43f ae79 	beq.w	1a008844 <_dtoa_r+0x694>
1a008b52:	e7a3      	b.n	1a008a9c <_dtoa_r+0x8ec>
1a008b54:	463a      	mov	r2, r7
1a008b56:	4629      	mov	r1, r5
1a008b58:	4648      	mov	r0, r9
1a008b5a:	f000 fe65 	bl	1a009828 <__pow5mult>
1a008b5e:	4652      	mov	r2, sl
1a008b60:	4601      	mov	r1, r0
1a008b62:	4605      	mov	r5, r0
1a008b64:	4648      	mov	r0, r9
1a008b66:	f000 fdb9 	bl	1a0096dc <__multiply>
1a008b6a:	4651      	mov	r1, sl
1a008b6c:	4607      	mov	r7, r0
1a008b6e:	4648      	mov	r0, r9
1a008b70:	f000 fd10 	bl	1a009594 <_Bfree>
1a008b74:	46ba      	mov	sl, r7
1a008b76:	2e00      	cmp	r6, #0
1a008b78:	f43f ae57 	beq.w	1a00882a <_dtoa_r+0x67a>
1a008b7c:	e64f      	b.n	1a00881e <_dtoa_r+0x66e>
1a008b7e:	4629      	mov	r1, r5
1a008b80:	4622      	mov	r2, r4
1a008b82:	4648      	mov	r0, r9
1a008b84:	f000 fea0 	bl	1a0098c8 <__lshift>
1a008b88:	4605      	mov	r5, r0
1a008b8a:	e68d      	b.n	1a0088a8 <_dtoa_r+0x6f8>
1a008b8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a008b8e:	2a00      	cmp	r2, #0
1a008b90:	f000 815d 	beq.w	1a008e4e <_dtoa_r+0xc9e>
1a008b94:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a008b98:	9a08      	ldr	r2, [sp, #32]
1a008b9a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1a008b9c:	4614      	mov	r4, r2
1a008b9e:	441a      	add	r2, r3
1a008ba0:	4498      	add	r8, r3
1a008ba2:	9208      	str	r2, [sp, #32]
1a008ba4:	e5f7      	b.n	1a008796 <_dtoa_r+0x5e6>
1a008ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008ba8:	2b00      	cmp	r3, #0
1a008baa:	f73f ad3e 	bgt.w	1a00862a <_dtoa_r+0x47a>
1a008bae:	f040 80bc 	bne.w	1a008d2a <_dtoa_r+0xb7a>
1a008bb2:	ec51 0b17 	vmov	r0, r1, d7
1a008bb6:	2200      	movs	r2, #0
1a008bb8:	4bb2      	ldr	r3, [pc, #712]	; (1a008e84 <_dtoa_r+0xcd4>)
1a008bba:	f7fb ffd9 	bl	1a004b70 <__aeabi_dmul>
1a008bbe:	e9dd 2300 	ldrd	r2, r3, [sp]
1a008bc2:	f7fc fa5b 	bl	1a00507c <__aeabi_dcmpge>
1a008bc6:	9e09      	ldr	r6, [sp, #36]	; 0x24
1a008bc8:	4635      	mov	r5, r6
1a008bca:	2800      	cmp	r0, #0
1a008bcc:	d176      	bne.n	1a008cbc <_dtoa_r+0xb0c>
1a008bce:	9a06      	ldr	r2, [sp, #24]
1a008bd0:	2331      	movs	r3, #49	; 0x31
1a008bd2:	3201      	adds	r2, #1
1a008bd4:	9206      	str	r2, [sp, #24]
1a008bd6:	f88b 3000 	strb.w	r3, [fp]
1a008bda:	f10b 0401 	add.w	r4, fp, #1
1a008bde:	4631      	mov	r1, r6
1a008be0:	4648      	mov	r0, r9
1a008be2:	f000 fcd7 	bl	1a009594 <_Bfree>
1a008be6:	2d00      	cmp	r5, #0
1a008be8:	f47f af34 	bne.w	1a008a54 <_dtoa_r+0x8a4>
1a008bec:	e736      	b.n	1a008a5c <_dtoa_r+0x8ac>
1a008bee:	f000 8142 	beq.w	1a008e76 <_dtoa_r+0xcc6>
1a008bf2:	9b06      	ldr	r3, [sp, #24]
1a008bf4:	425c      	negs	r4, r3
1a008bf6:	4ba4      	ldr	r3, [pc, #656]	; (1a008e88 <_dtoa_r+0xcd8>)
1a008bf8:	f004 020f 	and.w	r2, r4, #15
1a008bfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a008c00:	e9d3 2300 	ldrd	r2, r3, [r3]
1a008c04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a008c08:	f7fb ffb2 	bl	1a004b70 <__aeabi_dmul>
1a008c0c:	1124      	asrs	r4, r4, #4
1a008c0e:	e9cd 0100 	strd	r0, r1, [sp]
1a008c12:	f000 81c6 	beq.w	1a008fa2 <_dtoa_r+0xdf2>
1a008c16:	4d9d      	ldr	r5, [pc, #628]	; (1a008e8c <_dtoa_r+0xcdc>)
1a008c18:	2300      	movs	r3, #0
1a008c1a:	2602      	movs	r6, #2
1a008c1c:	07e7      	lsls	r7, r4, #31
1a008c1e:	d505      	bpl.n	1a008c2c <_dtoa_r+0xa7c>
1a008c20:	e9d5 2300 	ldrd	r2, r3, [r5]
1a008c24:	f7fb ffa4 	bl	1a004b70 <__aeabi_dmul>
1a008c28:	3601      	adds	r6, #1
1a008c2a:	2301      	movs	r3, #1
1a008c2c:	1064      	asrs	r4, r4, #1
1a008c2e:	f105 0508 	add.w	r5, r5, #8
1a008c32:	d1f3      	bne.n	1a008c1c <_dtoa_r+0xa6c>
1a008c34:	2b00      	cmp	r3, #0
1a008c36:	f43f ac27 	beq.w	1a008488 <_dtoa_r+0x2d8>
1a008c3a:	e9cd 0100 	strd	r0, r1, [sp]
1a008c3e:	e423      	b.n	1a008488 <_dtoa_r+0x2d8>
1a008c40:	9b00      	ldr	r3, [sp, #0]
1a008c42:	2b00      	cmp	r3, #0
1a008c44:	f43f af6e 	beq.w	1a008b24 <_dtoa_r+0x974>
1a008c48:	e726      	b.n	1a008a98 <_dtoa_r+0x8e8>
1a008c4a:	6869      	ldr	r1, [r5, #4]
1a008c4c:	4648      	mov	r0, r9
1a008c4e:	f000 fc7b 	bl	1a009548 <_Balloc>
1a008c52:	692b      	ldr	r3, [r5, #16]
1a008c54:	3302      	adds	r3, #2
1a008c56:	009a      	lsls	r2, r3, #2
1a008c58:	4604      	mov	r4, r0
1a008c5a:	f105 010c 	add.w	r1, r5, #12
1a008c5e:	300c      	adds	r0, #12
1a008c60:	f7fd f9f8 	bl	1a006054 <memcpy>
1a008c64:	4621      	mov	r1, r4
1a008c66:	2201      	movs	r2, #1
1a008c68:	4648      	mov	r0, r9
1a008c6a:	f000 fe2d 	bl	1a0098c8 <__lshift>
1a008c6e:	4680      	mov	r8, r0
1a008c70:	e61f      	b.n	1a0088b2 <_dtoa_r+0x702>
1a008c72:	2400      	movs	r4, #0
1a008c74:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
1a008c78:	4621      	mov	r1, r4
1a008c7a:	4648      	mov	r0, r9
1a008c7c:	f000 fc64 	bl	1a009548 <_Balloc>
1a008c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a008c84:	930e      	str	r3, [sp, #56]	; 0x38
1a008c86:	9309      	str	r3, [sp, #36]	; 0x24
1a008c88:	2301      	movs	r3, #1
1a008c8a:	4683      	mov	fp, r0
1a008c8c:	9407      	str	r4, [sp, #28]
1a008c8e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
1a008c92:	930a      	str	r3, [sp, #40]	; 0x28
1a008c94:	e4b6      	b.n	1a008604 <_dtoa_r+0x454>
1a008c96:	f000 fc87 	bl	1a0095a8 <__multadd>
1a008c9a:	4627      	mov	r7, r4
1a008c9c:	4605      	mov	r5, r0
1a008c9e:	4680      	mov	r8, r0
1a008ca0:	e614      	b.n	1a0088cc <_dtoa_r+0x71c>
1a008ca2:	4648      	mov	r0, r9
1a008ca4:	f000 fc76 	bl	1a009594 <_Bfree>
1a008ca8:	2301      	movs	r3, #1
1a008caa:	e639      	b.n	1a008920 <_dtoa_r+0x770>
1a008cac:	9b02      	ldr	r3, [sp, #8]
1a008cae:	2b02      	cmp	r3, #2
1a008cb0:	f77f adf3 	ble.w	1a00889a <_dtoa_r+0x6ea>
1a008cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008cb6:	2b00      	cmp	r3, #0
1a008cb8:	f000 80cf 	beq.w	1a008e5a <_dtoa_r+0xcaa>
1a008cbc:	9b07      	ldr	r3, [sp, #28]
1a008cbe:	43db      	mvns	r3, r3
1a008cc0:	9306      	str	r3, [sp, #24]
1a008cc2:	465c      	mov	r4, fp
1a008cc4:	e78b      	b.n	1a008bde <_dtoa_r+0xa2e>
1a008cc6:	9a06      	ldr	r2, [sp, #24]
1a008cc8:	2331      	movs	r3, #49	; 0x31
1a008cca:	3201      	adds	r2, #1
1a008ccc:	9206      	str	r2, [sp, #24]
1a008cce:	f88b 3000 	strb.w	r3, [fp]
1a008cd2:	e6b3      	b.n	1a008a3c <_dtoa_r+0x88c>
1a008cd4:	2401      	movs	r4, #1
1a008cd6:	9409      	str	r4, [sp, #36]	; 0x24
1a008cd8:	9407      	str	r4, [sp, #28]
1a008cda:	f7ff bb8b 	b.w	1a0083f4 <_dtoa_r+0x244>
1a008cde:	4630      	mov	r0, r6
1a008ce0:	f7fb fedc 	bl	1a004a9c <__aeabi_i2d>
1a008ce4:	e9dd 2300 	ldrd	r2, r3, [sp]
1a008ce8:	f7fb ff42 	bl	1a004b70 <__aeabi_dmul>
1a008cec:	2200      	movs	r2, #0
1a008cee:	4b68      	ldr	r3, [pc, #416]	; (1a008e90 <_dtoa_r+0xce0>)
1a008cf0:	f7fb fd88 	bl	1a004804 <__adddf3>
1a008cf4:	4606      	mov	r6, r0
1a008cf6:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a008cfa:	2200      	movs	r2, #0
1a008cfc:	4b61      	ldr	r3, [pc, #388]	; (1a008e84 <_dtoa_r+0xcd4>)
1a008cfe:	e9dd 0100 	ldrd	r0, r1, [sp]
1a008d02:	f7fb fd7d 	bl	1a004800 <__aeabi_dsub>
1a008d06:	4632      	mov	r2, r6
1a008d08:	463b      	mov	r3, r7
1a008d0a:	4604      	mov	r4, r0
1a008d0c:	460d      	mov	r5, r1
1a008d0e:	f7fc f9bf 	bl	1a005090 <__aeabi_dcmpgt>
1a008d12:	2800      	cmp	r0, #0
1a008d14:	d14f      	bne.n	1a008db6 <_dtoa_r+0xc06>
1a008d16:	4632      	mov	r2, r6
1a008d18:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
1a008d1c:	4620      	mov	r0, r4
1a008d1e:	4629      	mov	r1, r5
1a008d20:	f7fc f998 	bl	1a005054 <__aeabi_dcmplt>
1a008d24:	2800      	cmp	r0, #0
1a008d26:	f43f ac69 	beq.w	1a0085fc <_dtoa_r+0x44c>
1a008d2a:	2600      	movs	r6, #0
1a008d2c:	4635      	mov	r5, r6
1a008d2e:	e7c5      	b.n	1a008cbc <_dtoa_r+0xb0c>
1a008d30:	2301      	movs	r3, #1
1a008d32:	930a      	str	r3, [sp, #40]	; 0x28
1a008d34:	e6c8      	b.n	1a008ac8 <_dtoa_r+0x918>
1a008d36:	4651      	mov	r1, sl
1a008d38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a008d3a:	4648      	mov	r0, r9
1a008d3c:	f000 fd74 	bl	1a009828 <__pow5mult>
1a008d40:	4682      	mov	sl, r0
1a008d42:	e572      	b.n	1a00882a <_dtoa_r+0x67a>
1a008d44:	f8dd a000 	ldr.w	sl, [sp]
1a008d48:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a008d4c:	e686      	b.n	1a008a5c <_dtoa_r+0x8ac>
1a008d4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a008d50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a008d52:	1afb      	subs	r3, r7, r3
1a008d54:	441a      	add	r2, r3
1a008d56:	e9cd 720b 	strd	r7, r2, [sp, #44]	; 0x2c
1a008d5a:	2700      	movs	r7, #0
1a008d5c:	e512      	b.n	1a008784 <_dtoa_r+0x5d4>
1a008d5e:	2b00      	cmp	r3, #0
1a008d60:	9402      	str	r4, [sp, #8]
1a008d62:	465e      	mov	r6, fp
1a008d64:	f107 0401 	add.w	r4, r7, #1
1a008d68:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a008d6c:	f300 80ba 	bgt.w	1a008ee4 <_dtoa_r+0xd34>
1a008d70:	9b00      	ldr	r3, [sp, #0]
1a008d72:	9502      	str	r5, [sp, #8]
1a008d74:	703b      	strb	r3, [r7, #0]
1a008d76:	4645      	mov	r5, r8
1a008d78:	e660      	b.n	1a008a3c <_dtoa_r+0x88c>
1a008d7a:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a008d7e:	2602      	movs	r6, #2
1a008d80:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
1a008d84:	f7ff bb67 	b.w	1a008456 <_dtoa_r+0x2a6>
1a008d88:	9b00      	ldr	r3, [sp, #0]
1a008d8a:	2b39      	cmp	r3, #57	; 0x39
1a008d8c:	465e      	mov	r6, fp
1a008d8e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a008d92:	f000 80b9 	beq.w	1a008f08 <_dtoa_r+0xd58>
1a008d96:	9b00      	ldr	r3, [sp, #0]
1a008d98:	9502      	str	r5, [sp, #8]
1a008d9a:	3301      	adds	r3, #1
1a008d9c:	703b      	strb	r3, [r7, #0]
1a008d9e:	4645      	mov	r5, r8
1a008da0:	e64c      	b.n	1a008a3c <_dtoa_r+0x88c>
1a008da2:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
1a008da6:	1a9c      	subs	r4, r3, r2
1a008da8:	e4f5      	b.n	1a008796 <_dtoa_r+0x5e6>
1a008daa:	465e      	mov	r6, fp
1a008dac:	9502      	str	r5, [sp, #8]
1a008dae:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a008db2:	4645      	mov	r5, r8
1a008db4:	e61a      	b.n	1a0089ec <_dtoa_r+0x83c>
1a008db6:	2600      	movs	r6, #0
1a008db8:	4635      	mov	r5, r6
1a008dba:	e708      	b.n	1a008bce <_dtoa_r+0xa1e>
1a008dbc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
1a008dc0:	e9dd 0100 	ldrd	r0, r1, [sp]
1a008dc4:	f7fb fed4 	bl	1a004b70 <__aeabi_dmul>
1a008dc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a008dca:	f88b 5000 	strb.w	r5, [fp]
1a008dce:	2b01      	cmp	r3, #1
1a008dd0:	e9cd 0100 	strd	r0, r1, [sp]
1a008dd4:	d020      	beq.n	1a008e18 <_dtoa_r+0xc68>
1a008dd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a008dd8:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
1a008ddc:	445b      	add	r3, fp
1a008dde:	4698      	mov	r8, r3
1a008de0:	2200      	movs	r2, #0
1a008de2:	4b2c      	ldr	r3, [pc, #176]	; (1a008e94 <_dtoa_r+0xce4>)
1a008de4:	4630      	mov	r0, r6
1a008de6:	4639      	mov	r1, r7
1a008de8:	f7fb fec2 	bl	1a004b70 <__aeabi_dmul>
1a008dec:	460f      	mov	r7, r1
1a008dee:	4606      	mov	r6, r0
1a008df0:	f001 fa5a 	bl	1a00a2a8 <__aeabi_d2iz>
1a008df4:	4605      	mov	r5, r0
1a008df6:	f7fb fe51 	bl	1a004a9c <__aeabi_i2d>
1a008dfa:	3530      	adds	r5, #48	; 0x30
1a008dfc:	4602      	mov	r2, r0
1a008dfe:	460b      	mov	r3, r1
1a008e00:	4630      	mov	r0, r6
1a008e02:	4639      	mov	r1, r7
1a008e04:	f7fb fcfc 	bl	1a004800 <__aeabi_dsub>
1a008e08:	f804 5b01 	strb.w	r5, [r4], #1
1a008e0c:	4544      	cmp	r4, r8
1a008e0e:	4606      	mov	r6, r0
1a008e10:	460f      	mov	r7, r1
1a008e12:	d1e5      	bne.n	1a008de0 <_dtoa_r+0xc30>
1a008e14:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
1a008e18:	4b1f      	ldr	r3, [pc, #124]	; (1a008e98 <_dtoa_r+0xce8>)
1a008e1a:	2200      	movs	r2, #0
1a008e1c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a008e20:	f7fb fcf0 	bl	1a004804 <__adddf3>
1a008e24:	4632      	mov	r2, r6
1a008e26:	463b      	mov	r3, r7
1a008e28:	f7fc f914 	bl	1a005054 <__aeabi_dcmplt>
1a008e2c:	2800      	cmp	r0, #0
1a008e2e:	d070      	beq.n	1a008f12 <_dtoa_r+0xd62>
1a008e30:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a008e32:	9306      	str	r3, [sp, #24]
1a008e34:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a008e38:	e48f      	b.n	1a00875a <_dtoa_r+0x5aa>
1a008e3a:	2330      	movs	r3, #48	; 0x30
1a008e3c:	f88b 3000 	strb.w	r3, [fp]
1a008e40:	9b06      	ldr	r3, [sp, #24]
1a008e42:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a008e46:	3301      	adds	r3, #1
1a008e48:	9306      	str	r3, [sp, #24]
1a008e4a:	465b      	mov	r3, fp
1a008e4c:	e489      	b.n	1a008762 <_dtoa_r+0x5b2>
1a008e4e:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a008e50:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a008e54:	e6a0      	b.n	1a008b98 <_dtoa_r+0x9e8>
1a008e56:	2300      	movs	r3, #0
1a008e58:	e676      	b.n	1a008b48 <_dtoa_r+0x998>
1a008e5a:	4631      	mov	r1, r6
1a008e5c:	2205      	movs	r2, #5
1a008e5e:	4648      	mov	r0, r9
1a008e60:	f000 fba2 	bl	1a0095a8 <__multadd>
1a008e64:	4601      	mov	r1, r0
1a008e66:	4606      	mov	r6, r0
1a008e68:	4650      	mov	r0, sl
1a008e6a:	f000 fd83 	bl	1a009974 <__mcmp>
1a008e6e:	2800      	cmp	r0, #0
1a008e70:	f73f aead 	bgt.w	1a008bce <_dtoa_r+0xa1e>
1a008e74:	e722      	b.n	1a008cbc <_dtoa_r+0xb0c>
1a008e76:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a008e7a:	2602      	movs	r6, #2
1a008e7c:	ed8d 7b00 	vstr	d7, [sp]
1a008e80:	f7ff bb02 	b.w	1a008488 <_dtoa_r+0x2d8>
1a008e84:	40140000 	.word	0x40140000
1a008e88:	1a00ab48 	.word	0x1a00ab48
1a008e8c:	1a00ab20 	.word	0x1a00ab20
1a008e90:	401c0000 	.word	0x401c0000
1a008e94:	40240000 	.word	0x40240000
1a008e98:	3fe00000 	.word	0x3fe00000
1a008e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008e9e:	2b00      	cmp	r3, #0
1a008ea0:	f43f af1d 	beq.w	1a008cde <_dtoa_r+0xb2e>
1a008ea4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1a008ea6:	2c00      	cmp	r4, #0
1a008ea8:	f77f aba8 	ble.w	1a0085fc <_dtoa_r+0x44c>
1a008eac:	2200      	movs	r2, #0
1a008eae:	4b45      	ldr	r3, [pc, #276]	; (1a008fc4 <_dtoa_r+0xe14>)
1a008eb0:	e9dd 0100 	ldrd	r0, r1, [sp]
1a008eb4:	f7fb fe5c 	bl	1a004b70 <__aeabi_dmul>
1a008eb8:	e9cd 0100 	strd	r0, r1, [sp]
1a008ebc:	1c70      	adds	r0, r6, #1
1a008ebe:	f7fb fded 	bl	1a004a9c <__aeabi_i2d>
1a008ec2:	e9dd 2300 	ldrd	r2, r3, [sp]
1a008ec6:	f7fb fe53 	bl	1a004b70 <__aeabi_dmul>
1a008eca:	4b3f      	ldr	r3, [pc, #252]	; (1a008fc8 <_dtoa_r+0xe18>)
1a008ecc:	2200      	movs	r2, #0
1a008ece:	f7fb fc99 	bl	1a004804 <__adddf3>
1a008ed2:	9b06      	ldr	r3, [sp, #24]
1a008ed4:	9412      	str	r4, [sp, #72]	; 0x48
1a008ed6:	3b01      	subs	r3, #1
1a008ed8:	4606      	mov	r6, r0
1a008eda:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a008ede:	9316      	str	r3, [sp, #88]	; 0x58
1a008ee0:	f7ff baf3 	b.w	1a0084ca <_dtoa_r+0x31a>
1a008ee4:	4651      	mov	r1, sl
1a008ee6:	2201      	movs	r2, #1
1a008ee8:	4648      	mov	r0, r9
1a008eea:	f000 fced 	bl	1a0098c8 <__lshift>
1a008eee:	4631      	mov	r1, r6
1a008ef0:	4682      	mov	sl, r0
1a008ef2:	f000 fd3f 	bl	1a009974 <__mcmp>
1a008ef6:	2800      	cmp	r0, #0
1a008ef8:	dd3b      	ble.n	1a008f72 <_dtoa_r+0xdc2>
1a008efa:	9b00      	ldr	r3, [sp, #0]
1a008efc:	2b39      	cmp	r3, #57	; 0x39
1a008efe:	d003      	beq.n	1a008f08 <_dtoa_r+0xd58>
1a008f00:	9b02      	ldr	r3, [sp, #8]
1a008f02:	3331      	adds	r3, #49	; 0x31
1a008f04:	9300      	str	r3, [sp, #0]
1a008f06:	e733      	b.n	1a008d70 <_dtoa_r+0xbc0>
1a008f08:	2239      	movs	r2, #57	; 0x39
1a008f0a:	9502      	str	r5, [sp, #8]
1a008f0c:	703a      	strb	r2, [r7, #0]
1a008f0e:	4645      	mov	r5, r8
1a008f10:	e58e      	b.n	1a008a30 <_dtoa_r+0x880>
1a008f12:	e9dd 2300 	ldrd	r2, r3, [sp]
1a008f16:	2000      	movs	r0, #0
1a008f18:	492c      	ldr	r1, [pc, #176]	; (1a008fcc <_dtoa_r+0xe1c>)
1a008f1a:	f7fb fc71 	bl	1a004800 <__aeabi_dsub>
1a008f1e:	4632      	mov	r2, r6
1a008f20:	463b      	mov	r3, r7
1a008f22:	f7fc f8b5 	bl	1a005090 <__aeabi_dcmpgt>
1a008f26:	b910      	cbnz	r0, 1a008f2e <_dtoa_r+0xd7e>
1a008f28:	f7ff bb68 	b.w	1a0085fc <_dtoa_r+0x44c>
1a008f2c:	4614      	mov	r4, r2
1a008f2e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
1a008f32:	2b30      	cmp	r3, #48	; 0x30
1a008f34:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a008f38:	d0f8      	beq.n	1a008f2c <_dtoa_r+0xd7c>
1a008f3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a008f3c:	9306      	str	r3, [sp, #24]
1a008f3e:	e58d      	b.n	1a008a5c <_dtoa_r+0x8ac>
1a008f40:	46d9      	mov	r9, fp
1a008f42:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a008f46:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
1a008f4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a008f4c:	9306      	str	r3, [sp, #24]
1a008f4e:	e404      	b.n	1a00875a <_dtoa_r+0x5aa>
1a008f50:	9b00      	ldr	r3, [sp, #0]
1a008f52:	2b39      	cmp	r3, #57	; 0x39
1a008f54:	4621      	mov	r1, r4
1a008f56:	4632      	mov	r2, r6
1a008f58:	f107 0401 	add.w	r4, r7, #1
1a008f5c:	465e      	mov	r6, fp
1a008f5e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a008f62:	d0d1      	beq.n	1a008f08 <_dtoa_r+0xd58>
1a008f64:	2a00      	cmp	r2, #0
1a008f66:	f77f af03 	ble.w	1a008d70 <_dtoa_r+0xbc0>
1a008f6a:	460b      	mov	r3, r1
1a008f6c:	3331      	adds	r3, #49	; 0x31
1a008f6e:	9300      	str	r3, [sp, #0]
1a008f70:	e6fe      	b.n	1a008d70 <_dtoa_r+0xbc0>
1a008f72:	f47f aefd 	bne.w	1a008d70 <_dtoa_r+0xbc0>
1a008f76:	9b00      	ldr	r3, [sp, #0]
1a008f78:	07da      	lsls	r2, r3, #31
1a008f7a:	f57f aef9 	bpl.w	1a008d70 <_dtoa_r+0xbc0>
1a008f7e:	e7bc      	b.n	1a008efa <_dtoa_r+0xd4a>
1a008f80:	4629      	mov	r1, r5
1a008f82:	2300      	movs	r3, #0
1a008f84:	220a      	movs	r2, #10
1a008f86:	4648      	mov	r0, r9
1a008f88:	f000 fb0e 	bl	1a0095a8 <__multadd>
1a008f8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008f8e:	2b00      	cmp	r3, #0
1a008f90:	4605      	mov	r5, r0
1a008f92:	dd09      	ble.n	1a008fa8 <_dtoa_r+0xdf8>
1a008f94:	9309      	str	r3, [sp, #36]	; 0x24
1a008f96:	e484      	b.n	1a0088a2 <_dtoa_r+0x6f2>
1a008f98:	9b02      	ldr	r3, [sp, #8]
1a008f9a:	2b02      	cmp	r3, #2
1a008f9c:	dc0e      	bgt.n	1a008fbc <_dtoa_r+0xe0c>
1a008f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008fa0:	e507      	b.n	1a0089b2 <_dtoa_r+0x802>
1a008fa2:	2602      	movs	r6, #2
1a008fa4:	f7ff ba70 	b.w	1a008488 <_dtoa_r+0x2d8>
1a008fa8:	9b02      	ldr	r3, [sp, #8]
1a008faa:	2b02      	cmp	r3, #2
1a008fac:	dc06      	bgt.n	1a008fbc <_dtoa_r+0xe0c>
1a008fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008fb0:	e7f0      	b.n	1a008f94 <_dtoa_r+0xde4>
1a008fb2:	f43f ac59 	beq.w	1a008868 <_dtoa_r+0x6b8>
1a008fb6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a008fba:	e450      	b.n	1a00885e <_dtoa_r+0x6ae>
1a008fbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008fbe:	9309      	str	r3, [sp, #36]	; 0x24
1a008fc0:	e678      	b.n	1a008cb4 <_dtoa_r+0xb04>
1a008fc2:	bf00      	nop
1a008fc4:	40240000 	.word	0x40240000
1a008fc8:	401c0000 	.word	0x401c0000
1a008fcc:	3fe00000 	.word	0x3fe00000

1a008fd0 <__sfvwrite_r>:
1a008fd0:	6893      	ldr	r3, [r2, #8]
1a008fd2:	2b00      	cmp	r3, #0
1a008fd4:	f000 80e4 	beq.w	1a0091a0 <__sfvwrite_r+0x1d0>
1a008fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a008fdc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a008fe0:	b29b      	uxth	r3, r3
1a008fe2:	460c      	mov	r4, r1
1a008fe4:	0719      	lsls	r1, r3, #28
1a008fe6:	b083      	sub	sp, #12
1a008fe8:	4682      	mov	sl, r0
1a008fea:	4690      	mov	r8, r2
1a008fec:	d535      	bpl.n	1a00905a <__sfvwrite_r+0x8a>
1a008fee:	6922      	ldr	r2, [r4, #16]
1a008ff0:	b39a      	cbz	r2, 1a00905a <__sfvwrite_r+0x8a>
1a008ff2:	f013 0202 	ands.w	r2, r3, #2
1a008ff6:	f8d8 6000 	ldr.w	r6, [r8]
1a008ffa:	d03d      	beq.n	1a009078 <__sfvwrite_r+0xa8>
1a008ffc:	2700      	movs	r7, #0
1a008ffe:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a009002:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a009006:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 1a0092c8 <__sfvwrite_r+0x2f8>
1a00900a:	463d      	mov	r5, r7
1a00900c:	454d      	cmp	r5, r9
1a00900e:	462b      	mov	r3, r5
1a009010:	463a      	mov	r2, r7
1a009012:	bf28      	it	cs
1a009014:	464b      	movcs	r3, r9
1a009016:	4661      	mov	r1, ip
1a009018:	4650      	mov	r0, sl
1a00901a:	b1d5      	cbz	r5, 1a009052 <__sfvwrite_r+0x82>
1a00901c:	47d8      	blx	fp
1a00901e:	2800      	cmp	r0, #0
1a009020:	f340 80c6 	ble.w	1a0091b0 <__sfvwrite_r+0x1e0>
1a009024:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a009028:	1a1b      	subs	r3, r3, r0
1a00902a:	4407      	add	r7, r0
1a00902c:	1a2d      	subs	r5, r5, r0
1a00902e:	f8c8 3008 	str.w	r3, [r8, #8]
1a009032:	2b00      	cmp	r3, #0
1a009034:	f000 80b0 	beq.w	1a009198 <__sfvwrite_r+0x1c8>
1a009038:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a00903c:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a009040:	454d      	cmp	r5, r9
1a009042:	462b      	mov	r3, r5
1a009044:	463a      	mov	r2, r7
1a009046:	bf28      	it	cs
1a009048:	464b      	movcs	r3, r9
1a00904a:	4661      	mov	r1, ip
1a00904c:	4650      	mov	r0, sl
1a00904e:	2d00      	cmp	r5, #0
1a009050:	d1e4      	bne.n	1a00901c <__sfvwrite_r+0x4c>
1a009052:	e9d6 7500 	ldrd	r7, r5, [r6]
1a009056:	3608      	adds	r6, #8
1a009058:	e7d8      	b.n	1a00900c <__sfvwrite_r+0x3c>
1a00905a:	4621      	mov	r1, r4
1a00905c:	4650      	mov	r0, sl
1a00905e:	f7fe ffad 	bl	1a007fbc <__swsetup_r>
1a009062:	2800      	cmp	r0, #0
1a009064:	f040 812a 	bne.w	1a0092bc <__sfvwrite_r+0x2ec>
1a009068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00906c:	f8d8 6000 	ldr.w	r6, [r8]
1a009070:	b29b      	uxth	r3, r3
1a009072:	f013 0202 	ands.w	r2, r3, #2
1a009076:	d1c1      	bne.n	1a008ffc <__sfvwrite_r+0x2c>
1a009078:	f013 0901 	ands.w	r9, r3, #1
1a00907c:	d15d      	bne.n	1a00913a <__sfvwrite_r+0x16a>
1a00907e:	68a7      	ldr	r7, [r4, #8]
1a009080:	6820      	ldr	r0, [r4, #0]
1a009082:	464d      	mov	r5, r9
1a009084:	2d00      	cmp	r5, #0
1a009086:	d054      	beq.n	1a009132 <__sfvwrite_r+0x162>
1a009088:	059a      	lsls	r2, r3, #22
1a00908a:	f140 809b 	bpl.w	1a0091c4 <__sfvwrite_r+0x1f4>
1a00908e:	42af      	cmp	r7, r5
1a009090:	46bb      	mov	fp, r7
1a009092:	f200 80d8 	bhi.w	1a009246 <__sfvwrite_r+0x276>
1a009096:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a00909a:	d02f      	beq.n	1a0090fc <__sfvwrite_r+0x12c>
1a00909c:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
1a0090a0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
1a0090a4:	eba0 0b01 	sub.w	fp, r0, r1
1a0090a8:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
1a0090ac:	1c68      	adds	r0, r5, #1
1a0090ae:	107f      	asrs	r7, r7, #1
1a0090b0:	4458      	add	r0, fp
1a0090b2:	42b8      	cmp	r0, r7
1a0090b4:	463a      	mov	r2, r7
1a0090b6:	bf84      	itt	hi
1a0090b8:	4607      	movhi	r7, r0
1a0090ba:	463a      	movhi	r2, r7
1a0090bc:	055b      	lsls	r3, r3, #21
1a0090be:	f140 80d3 	bpl.w	1a009268 <__sfvwrite_r+0x298>
1a0090c2:	4611      	mov	r1, r2
1a0090c4:	4650      	mov	r0, sl
1a0090c6:	f7fc fd0b 	bl	1a005ae0 <_malloc_r>
1a0090ca:	2800      	cmp	r0, #0
1a0090cc:	f000 80f0 	beq.w	1a0092b0 <__sfvwrite_r+0x2e0>
1a0090d0:	465a      	mov	r2, fp
1a0090d2:	6921      	ldr	r1, [r4, #16]
1a0090d4:	9001      	str	r0, [sp, #4]
1a0090d6:	f7fc ffbd 	bl	1a006054 <memcpy>
1a0090da:	89a2      	ldrh	r2, [r4, #12]
1a0090dc:	9b01      	ldr	r3, [sp, #4]
1a0090de:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a0090e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0090e6:	81a2      	strh	r2, [r4, #12]
1a0090e8:	eba7 020b 	sub.w	r2, r7, fp
1a0090ec:	eb03 000b 	add.w	r0, r3, fp
1a0090f0:	6167      	str	r7, [r4, #20]
1a0090f2:	6123      	str	r3, [r4, #16]
1a0090f4:	6020      	str	r0, [r4, #0]
1a0090f6:	60a2      	str	r2, [r4, #8]
1a0090f8:	462f      	mov	r7, r5
1a0090fa:	46ab      	mov	fp, r5
1a0090fc:	465a      	mov	r2, fp
1a0090fe:	4649      	mov	r1, r9
1a009100:	f000 f9be 	bl	1a009480 <memmove>
1a009104:	68a2      	ldr	r2, [r4, #8]
1a009106:	6823      	ldr	r3, [r4, #0]
1a009108:	1bd2      	subs	r2, r2, r7
1a00910a:	445b      	add	r3, fp
1a00910c:	462f      	mov	r7, r5
1a00910e:	60a2      	str	r2, [r4, #8]
1a009110:	6023      	str	r3, [r4, #0]
1a009112:	2500      	movs	r5, #0
1a009114:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a009118:	1bdb      	subs	r3, r3, r7
1a00911a:	44b9      	add	r9, r7
1a00911c:	f8c8 3008 	str.w	r3, [r8, #8]
1a009120:	2b00      	cmp	r3, #0
1a009122:	d039      	beq.n	1a009198 <__sfvwrite_r+0x1c8>
1a009124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009128:	68a7      	ldr	r7, [r4, #8]
1a00912a:	6820      	ldr	r0, [r4, #0]
1a00912c:	b29b      	uxth	r3, r3
1a00912e:	2d00      	cmp	r5, #0
1a009130:	d1aa      	bne.n	1a009088 <__sfvwrite_r+0xb8>
1a009132:	e9d6 9500 	ldrd	r9, r5, [r6]
1a009136:	3608      	adds	r6, #8
1a009138:	e7a4      	b.n	1a009084 <__sfvwrite_r+0xb4>
1a00913a:	4633      	mov	r3, r6
1a00913c:	4691      	mov	r9, r2
1a00913e:	4610      	mov	r0, r2
1a009140:	4617      	mov	r7, r2
1a009142:	464e      	mov	r6, r9
1a009144:	469b      	mov	fp, r3
1a009146:	2f00      	cmp	r7, #0
1a009148:	d06b      	beq.n	1a009222 <__sfvwrite_r+0x252>
1a00914a:	2800      	cmp	r0, #0
1a00914c:	d071      	beq.n	1a009232 <__sfvwrite_r+0x262>
1a00914e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
1a009152:	6820      	ldr	r0, [r4, #0]
1a009154:	45b9      	cmp	r9, r7
1a009156:	464b      	mov	r3, r9
1a009158:	bf28      	it	cs
1a00915a:	463b      	movcs	r3, r7
1a00915c:	4288      	cmp	r0, r1
1a00915e:	d903      	bls.n	1a009168 <__sfvwrite_r+0x198>
1a009160:	68a5      	ldr	r5, [r4, #8]
1a009162:	4415      	add	r5, r2
1a009164:	42ab      	cmp	r3, r5
1a009166:	dc71      	bgt.n	1a00924c <__sfvwrite_r+0x27c>
1a009168:	429a      	cmp	r2, r3
1a00916a:	f300 8093 	bgt.w	1a009294 <__sfvwrite_r+0x2c4>
1a00916e:	4613      	mov	r3, r2
1a009170:	6a65      	ldr	r5, [r4, #36]	; 0x24
1a009172:	69e1      	ldr	r1, [r4, #28]
1a009174:	4632      	mov	r2, r6
1a009176:	4650      	mov	r0, sl
1a009178:	47a8      	blx	r5
1a00917a:	1e05      	subs	r5, r0, #0
1a00917c:	dd18      	ble.n	1a0091b0 <__sfvwrite_r+0x1e0>
1a00917e:	ebb9 0905 	subs.w	r9, r9, r5
1a009182:	d00f      	beq.n	1a0091a4 <__sfvwrite_r+0x1d4>
1a009184:	2001      	movs	r0, #1
1a009186:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00918a:	1b5b      	subs	r3, r3, r5
1a00918c:	442e      	add	r6, r5
1a00918e:	1b7f      	subs	r7, r7, r5
1a009190:	f8c8 3008 	str.w	r3, [r8, #8]
1a009194:	2b00      	cmp	r3, #0
1a009196:	d1d6      	bne.n	1a009146 <__sfvwrite_r+0x176>
1a009198:	2000      	movs	r0, #0
1a00919a:	b003      	add	sp, #12
1a00919c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0091a0:	2000      	movs	r0, #0
1a0091a2:	4770      	bx	lr
1a0091a4:	4621      	mov	r1, r4
1a0091a6:	4650      	mov	r0, sl
1a0091a8:	f7fc fa5e 	bl	1a005668 <_fflush_r>
1a0091ac:	2800      	cmp	r0, #0
1a0091ae:	d0ea      	beq.n	1a009186 <__sfvwrite_r+0x1b6>
1a0091b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0091b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0091b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0091bc:	81a3      	strh	r3, [r4, #12]
1a0091be:	b003      	add	sp, #12
1a0091c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0091c4:	6923      	ldr	r3, [r4, #16]
1a0091c6:	4283      	cmp	r3, r0
1a0091c8:	d315      	bcc.n	1a0091f6 <__sfvwrite_r+0x226>
1a0091ca:	6961      	ldr	r1, [r4, #20]
1a0091cc:	42a9      	cmp	r1, r5
1a0091ce:	d812      	bhi.n	1a0091f6 <__sfvwrite_r+0x226>
1a0091d0:	4b3c      	ldr	r3, [pc, #240]	; (1a0092c4 <__sfvwrite_r+0x2f4>)
1a0091d2:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a0091d4:	429d      	cmp	r5, r3
1a0091d6:	bf94      	ite	ls
1a0091d8:	462b      	movls	r3, r5
1a0091da:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
1a0091de:	464a      	mov	r2, r9
1a0091e0:	fb93 f3f1 	sdiv	r3, r3, r1
1a0091e4:	4650      	mov	r0, sl
1a0091e6:	fb01 f303 	mul.w	r3, r1, r3
1a0091ea:	69e1      	ldr	r1, [r4, #28]
1a0091ec:	47b8      	blx	r7
1a0091ee:	1e07      	subs	r7, r0, #0
1a0091f0:	ddde      	ble.n	1a0091b0 <__sfvwrite_r+0x1e0>
1a0091f2:	1bed      	subs	r5, r5, r7
1a0091f4:	e78e      	b.n	1a009114 <__sfvwrite_r+0x144>
1a0091f6:	42af      	cmp	r7, r5
1a0091f8:	bf28      	it	cs
1a0091fa:	462f      	movcs	r7, r5
1a0091fc:	463a      	mov	r2, r7
1a0091fe:	4649      	mov	r1, r9
1a009200:	f000 f93e 	bl	1a009480 <memmove>
1a009204:	68a3      	ldr	r3, [r4, #8]
1a009206:	6822      	ldr	r2, [r4, #0]
1a009208:	1bdb      	subs	r3, r3, r7
1a00920a:	443a      	add	r2, r7
1a00920c:	60a3      	str	r3, [r4, #8]
1a00920e:	6022      	str	r2, [r4, #0]
1a009210:	2b00      	cmp	r3, #0
1a009212:	d1ee      	bne.n	1a0091f2 <__sfvwrite_r+0x222>
1a009214:	4621      	mov	r1, r4
1a009216:	4650      	mov	r0, sl
1a009218:	f7fc fa26 	bl	1a005668 <_fflush_r>
1a00921c:	2800      	cmp	r0, #0
1a00921e:	d0e8      	beq.n	1a0091f2 <__sfvwrite_r+0x222>
1a009220:	e7c6      	b.n	1a0091b0 <__sfvwrite_r+0x1e0>
1a009222:	f10b 0308 	add.w	r3, fp, #8
1a009226:	e953 6702 	ldrd	r6, r7, [r3, #-8]
1a00922a:	469b      	mov	fp, r3
1a00922c:	3308      	adds	r3, #8
1a00922e:	2f00      	cmp	r7, #0
1a009230:	d0f9      	beq.n	1a009226 <__sfvwrite_r+0x256>
1a009232:	463a      	mov	r2, r7
1a009234:	210a      	movs	r1, #10
1a009236:	4630      	mov	r0, r6
1a009238:	f000 f8d2 	bl	1a0093e0 <memchr>
1a00923c:	b338      	cbz	r0, 1a00928e <__sfvwrite_r+0x2be>
1a00923e:	3001      	adds	r0, #1
1a009240:	eba0 0906 	sub.w	r9, r0, r6
1a009244:	e783      	b.n	1a00914e <__sfvwrite_r+0x17e>
1a009246:	462f      	mov	r7, r5
1a009248:	46ab      	mov	fp, r5
1a00924a:	e757      	b.n	1a0090fc <__sfvwrite_r+0x12c>
1a00924c:	4631      	mov	r1, r6
1a00924e:	462a      	mov	r2, r5
1a009250:	f000 f916 	bl	1a009480 <memmove>
1a009254:	6823      	ldr	r3, [r4, #0]
1a009256:	442b      	add	r3, r5
1a009258:	6023      	str	r3, [r4, #0]
1a00925a:	4621      	mov	r1, r4
1a00925c:	4650      	mov	r0, sl
1a00925e:	f7fc fa03 	bl	1a005668 <_fflush_r>
1a009262:	2800      	cmp	r0, #0
1a009264:	d08b      	beq.n	1a00917e <__sfvwrite_r+0x1ae>
1a009266:	e7a3      	b.n	1a0091b0 <__sfvwrite_r+0x1e0>
1a009268:	4650      	mov	r0, sl
1a00926a:	f000 fc77 	bl	1a009b5c <_realloc_r>
1a00926e:	4603      	mov	r3, r0
1a009270:	2800      	cmp	r0, #0
1a009272:	f47f af39 	bne.w	1a0090e8 <__sfvwrite_r+0x118>
1a009276:	6921      	ldr	r1, [r4, #16]
1a009278:	4650      	mov	r0, sl
1a00927a:	f7fc fad9 	bl	1a005830 <_free_r>
1a00927e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009282:	220c      	movs	r2, #12
1a009284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a009288:	f8ca 2000 	str.w	r2, [sl]
1a00928c:	e792      	b.n	1a0091b4 <__sfvwrite_r+0x1e4>
1a00928e:	f107 0901 	add.w	r9, r7, #1
1a009292:	e75c      	b.n	1a00914e <__sfvwrite_r+0x17e>
1a009294:	461a      	mov	r2, r3
1a009296:	4631      	mov	r1, r6
1a009298:	9301      	str	r3, [sp, #4]
1a00929a:	f000 f8f1 	bl	1a009480 <memmove>
1a00929e:	9b01      	ldr	r3, [sp, #4]
1a0092a0:	68a1      	ldr	r1, [r4, #8]
1a0092a2:	6822      	ldr	r2, [r4, #0]
1a0092a4:	1ac9      	subs	r1, r1, r3
1a0092a6:	441a      	add	r2, r3
1a0092a8:	60a1      	str	r1, [r4, #8]
1a0092aa:	6022      	str	r2, [r4, #0]
1a0092ac:	461d      	mov	r5, r3
1a0092ae:	e766      	b.n	1a00917e <__sfvwrite_r+0x1ae>
1a0092b0:	230c      	movs	r3, #12
1a0092b2:	f8ca 3000 	str.w	r3, [sl]
1a0092b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0092ba:	e77b      	b.n	1a0091b4 <__sfvwrite_r+0x1e4>
1a0092bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0092c0:	e76b      	b.n	1a00919a <__sfvwrite_r+0x1ca>
1a0092c2:	bf00      	nop
1a0092c4:	7ffffffe 	.word	0x7ffffffe
1a0092c8:	7ffffc00 	.word	0x7ffffc00

1a0092cc <_localeconv_r>:
1a0092cc:	4a04      	ldr	r2, [pc, #16]	; (1a0092e0 <_localeconv_r+0x14>)
1a0092ce:	4b05      	ldr	r3, [pc, #20]	; (1a0092e4 <_localeconv_r+0x18>)
1a0092d0:	6812      	ldr	r2, [r2, #0]
1a0092d2:	6b50      	ldr	r0, [r2, #52]	; 0x34
1a0092d4:	2800      	cmp	r0, #0
1a0092d6:	bf08      	it	eq
1a0092d8:	4618      	moveq	r0, r3
1a0092da:	30f0      	adds	r0, #240	; 0xf0
1a0092dc:	4770      	bx	lr
1a0092de:	bf00      	nop
1a0092e0:	100000cc 	.word	0x100000cc
1a0092e4:	100004f8 	.word	0x100004f8

1a0092e8 <__swhatbuf_r>:
1a0092e8:	b570      	push	{r4, r5, r6, lr}
1a0092ea:	460c      	mov	r4, r1
1a0092ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0092f0:	2900      	cmp	r1, #0
1a0092f2:	b096      	sub	sp, #88	; 0x58
1a0092f4:	4615      	mov	r5, r2
1a0092f6:	461e      	mov	r6, r3
1a0092f8:	da0f      	bge.n	1a00931a <__swhatbuf_r+0x32>
1a0092fa:	89a2      	ldrh	r2, [r4, #12]
1a0092fc:	2300      	movs	r3, #0
1a0092fe:	f012 0080 	ands.w	r0, r2, #128	; 0x80
1a009302:	6033      	str	r3, [r6, #0]
1a009304:	d104      	bne.n	1a009310 <__swhatbuf_r+0x28>
1a009306:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a00930a:	602b      	str	r3, [r5, #0]
1a00930c:	b016      	add	sp, #88	; 0x58
1a00930e:	bd70      	pop	{r4, r5, r6, pc}
1a009310:	2240      	movs	r2, #64	; 0x40
1a009312:	4618      	mov	r0, r3
1a009314:	602a      	str	r2, [r5, #0]
1a009316:	b016      	add	sp, #88	; 0x58
1a009318:	bd70      	pop	{r4, r5, r6, pc}
1a00931a:	466a      	mov	r2, sp
1a00931c:	f7f7 ff97 	bl	1a00124e <_fstat_r>
1a009320:	2800      	cmp	r0, #0
1a009322:	dbea      	blt.n	1a0092fa <__swhatbuf_r+0x12>
1a009324:	9b01      	ldr	r3, [sp, #4]
1a009326:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
1a00932a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
1a00932e:	fab3 f383 	clz	r3, r3
1a009332:	095b      	lsrs	r3, r3, #5
1a009334:	f44f 6280 	mov.w	r2, #1024	; 0x400
1a009338:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a00933c:	6033      	str	r3, [r6, #0]
1a00933e:	602a      	str	r2, [r5, #0]
1a009340:	b016      	add	sp, #88	; 0x58
1a009342:	bd70      	pop	{r4, r5, r6, pc}

1a009344 <__smakebuf_r>:
1a009344:	898a      	ldrh	r2, [r1, #12]
1a009346:	0792      	lsls	r2, r2, #30
1a009348:	460b      	mov	r3, r1
1a00934a:	d506      	bpl.n	1a00935a <__smakebuf_r+0x16>
1a00934c:	f101 0243 	add.w	r2, r1, #67	; 0x43
1a009350:	2101      	movs	r1, #1
1a009352:	601a      	str	r2, [r3, #0]
1a009354:	e9c3 2104 	strd	r2, r1, [r3, #16]
1a009358:	4770      	bx	lr
1a00935a:	b570      	push	{r4, r5, r6, lr}
1a00935c:	b082      	sub	sp, #8
1a00935e:	ab01      	add	r3, sp, #4
1a009360:	466a      	mov	r2, sp
1a009362:	460c      	mov	r4, r1
1a009364:	4605      	mov	r5, r0
1a009366:	f7ff ffbf 	bl	1a0092e8 <__swhatbuf_r>
1a00936a:	9900      	ldr	r1, [sp, #0]
1a00936c:	4606      	mov	r6, r0
1a00936e:	4628      	mov	r0, r5
1a009370:	f7fc fbb6 	bl	1a005ae0 <_malloc_r>
1a009374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009378:	b1d8      	cbz	r0, 1a0093b2 <__smakebuf_r+0x6e>
1a00937a:	4916      	ldr	r1, [pc, #88]	; (1a0093d4 <__smakebuf_r+0x90>)
1a00937c:	63e9      	str	r1, [r5, #60]	; 0x3c
1a00937e:	9a01      	ldr	r2, [sp, #4]
1a009380:	9900      	ldr	r1, [sp, #0]
1a009382:	6020      	str	r0, [r4, #0]
1a009384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a009388:	81a3      	strh	r3, [r4, #12]
1a00938a:	e9c4 0104 	strd	r0, r1, [r4, #16]
1a00938e:	b91a      	cbnz	r2, 1a009398 <__smakebuf_r+0x54>
1a009390:	4333      	orrs	r3, r6
1a009392:	81a3      	strh	r3, [r4, #12]
1a009394:	b002      	add	sp, #8
1a009396:	bd70      	pop	{r4, r5, r6, pc}
1a009398:	4628      	mov	r0, r5
1a00939a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a00939e:	f7f7 ff5b 	bl	1a001258 <_isatty_r>
1a0093a2:	b1a0      	cbz	r0, 1a0093ce <__smakebuf_r+0x8a>
1a0093a4:	89a3      	ldrh	r3, [r4, #12]
1a0093a6:	f023 0303 	bic.w	r3, r3, #3
1a0093aa:	f043 0301 	orr.w	r3, r3, #1
1a0093ae:	b21b      	sxth	r3, r3
1a0093b0:	e7ee      	b.n	1a009390 <__smakebuf_r+0x4c>
1a0093b2:	059a      	lsls	r2, r3, #22
1a0093b4:	d4ee      	bmi.n	1a009394 <__smakebuf_r+0x50>
1a0093b6:	f023 0303 	bic.w	r3, r3, #3
1a0093ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a0093be:	f043 0302 	orr.w	r3, r3, #2
1a0093c2:	2101      	movs	r1, #1
1a0093c4:	81a3      	strh	r3, [r4, #12]
1a0093c6:	6022      	str	r2, [r4, #0]
1a0093c8:	e9c4 2104 	strd	r2, r1, [r4, #16]
1a0093cc:	e7e2      	b.n	1a009394 <__smakebuf_r+0x50>
1a0093ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0093d2:	e7dd      	b.n	1a009390 <__smakebuf_r+0x4c>
1a0093d4:	1a005715 	.word	0x1a005715
1a0093d8:	ffffffff 	.word	0xffffffff
1a0093dc:	ffffffff 	.word	0xffffffff

1a0093e0 <memchr>:
1a0093e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0093e4:	2a10      	cmp	r2, #16
1a0093e6:	db2b      	blt.n	1a009440 <memchr+0x60>
1a0093e8:	f010 0f07 	tst.w	r0, #7
1a0093ec:	d008      	beq.n	1a009400 <memchr+0x20>
1a0093ee:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0093f2:	3a01      	subs	r2, #1
1a0093f4:	428b      	cmp	r3, r1
1a0093f6:	d02d      	beq.n	1a009454 <memchr+0x74>
1a0093f8:	f010 0f07 	tst.w	r0, #7
1a0093fc:	b342      	cbz	r2, 1a009450 <memchr+0x70>
1a0093fe:	d1f6      	bne.n	1a0093ee <memchr+0xe>
1a009400:	b4f0      	push	{r4, r5, r6, r7}
1a009402:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a009406:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00940a:	f022 0407 	bic.w	r4, r2, #7
1a00940e:	f07f 0700 	mvns.w	r7, #0
1a009412:	2300      	movs	r3, #0
1a009414:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a009418:	3c08      	subs	r4, #8
1a00941a:	ea85 0501 	eor.w	r5, r5, r1
1a00941e:	ea86 0601 	eor.w	r6, r6, r1
1a009422:	fa85 f547 	uadd8	r5, r5, r7
1a009426:	faa3 f587 	sel	r5, r3, r7
1a00942a:	fa86 f647 	uadd8	r6, r6, r7
1a00942e:	faa5 f687 	sel	r6, r5, r7
1a009432:	b98e      	cbnz	r6, 1a009458 <memchr+0x78>
1a009434:	d1ee      	bne.n	1a009414 <memchr+0x34>
1a009436:	bcf0      	pop	{r4, r5, r6, r7}
1a009438:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00943c:	f002 0207 	and.w	r2, r2, #7
1a009440:	b132      	cbz	r2, 1a009450 <memchr+0x70>
1a009442:	f810 3b01 	ldrb.w	r3, [r0], #1
1a009446:	3a01      	subs	r2, #1
1a009448:	ea83 0301 	eor.w	r3, r3, r1
1a00944c:	b113      	cbz	r3, 1a009454 <memchr+0x74>
1a00944e:	d1f8      	bne.n	1a009442 <memchr+0x62>
1a009450:	2000      	movs	r0, #0
1a009452:	4770      	bx	lr
1a009454:	3801      	subs	r0, #1
1a009456:	4770      	bx	lr
1a009458:	2d00      	cmp	r5, #0
1a00945a:	bf06      	itte	eq
1a00945c:	4635      	moveq	r5, r6
1a00945e:	3803      	subeq	r0, #3
1a009460:	3807      	subne	r0, #7
1a009462:	f015 0f01 	tst.w	r5, #1
1a009466:	d107      	bne.n	1a009478 <memchr+0x98>
1a009468:	3001      	adds	r0, #1
1a00946a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00946e:	bf02      	ittt	eq
1a009470:	3001      	addeq	r0, #1
1a009472:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a009476:	3001      	addeq	r0, #1
1a009478:	bcf0      	pop	{r4, r5, r6, r7}
1a00947a:	3801      	subs	r0, #1
1a00947c:	4770      	bx	lr
1a00947e:	bf00      	nop

1a009480 <memmove>:
1a009480:	4288      	cmp	r0, r1
1a009482:	b4f0      	push	{r4, r5, r6, r7}
1a009484:	d90d      	bls.n	1a0094a2 <memmove+0x22>
1a009486:	188b      	adds	r3, r1, r2
1a009488:	4283      	cmp	r3, r0
1a00948a:	d90a      	bls.n	1a0094a2 <memmove+0x22>
1a00948c:	1884      	adds	r4, r0, r2
1a00948e:	b132      	cbz	r2, 1a00949e <memmove+0x1e>
1a009490:	4622      	mov	r2, r4
1a009492:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a009496:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a00949a:	4299      	cmp	r1, r3
1a00949c:	d1f9      	bne.n	1a009492 <memmove+0x12>
1a00949e:	bcf0      	pop	{r4, r5, r6, r7}
1a0094a0:	4770      	bx	lr
1a0094a2:	2a0f      	cmp	r2, #15
1a0094a4:	d949      	bls.n	1a00953a <memmove+0xba>
1a0094a6:	ea40 0301 	orr.w	r3, r0, r1
1a0094aa:	079b      	lsls	r3, r3, #30
1a0094ac:	d147      	bne.n	1a00953e <memmove+0xbe>
1a0094ae:	f1a2 0310 	sub.w	r3, r2, #16
1a0094b2:	091b      	lsrs	r3, r3, #4
1a0094b4:	f101 0720 	add.w	r7, r1, #32
1a0094b8:	eb07 1703 	add.w	r7, r7, r3, lsl #4
1a0094bc:	f101 0410 	add.w	r4, r1, #16
1a0094c0:	f100 0510 	add.w	r5, r0, #16
1a0094c4:	f854 6c10 	ldr.w	r6, [r4, #-16]
1a0094c8:	f845 6c10 	str.w	r6, [r5, #-16]
1a0094cc:	f854 6c0c 	ldr.w	r6, [r4, #-12]
1a0094d0:	f845 6c0c 	str.w	r6, [r5, #-12]
1a0094d4:	f854 6c08 	ldr.w	r6, [r4, #-8]
1a0094d8:	f845 6c08 	str.w	r6, [r5, #-8]
1a0094dc:	f854 6c04 	ldr.w	r6, [r4, #-4]
1a0094e0:	f845 6c04 	str.w	r6, [r5, #-4]
1a0094e4:	3410      	adds	r4, #16
1a0094e6:	42bc      	cmp	r4, r7
1a0094e8:	f105 0510 	add.w	r5, r5, #16
1a0094ec:	d1ea      	bne.n	1a0094c4 <memmove+0x44>
1a0094ee:	3301      	adds	r3, #1
1a0094f0:	f002 050f 	and.w	r5, r2, #15
1a0094f4:	011b      	lsls	r3, r3, #4
1a0094f6:	2d03      	cmp	r5, #3
1a0094f8:	4419      	add	r1, r3
1a0094fa:	4403      	add	r3, r0
1a0094fc:	d921      	bls.n	1a009542 <memmove+0xc2>
1a0094fe:	1f1f      	subs	r7, r3, #4
1a009500:	460e      	mov	r6, r1
1a009502:	462c      	mov	r4, r5
1a009504:	3c04      	subs	r4, #4
1a009506:	f856 cb04 	ldr.w	ip, [r6], #4
1a00950a:	f847 cf04 	str.w	ip, [r7, #4]!
1a00950e:	2c03      	cmp	r4, #3
1a009510:	d8f8      	bhi.n	1a009504 <memmove+0x84>
1a009512:	1f2c      	subs	r4, r5, #4
1a009514:	f024 0403 	bic.w	r4, r4, #3
1a009518:	3404      	adds	r4, #4
1a00951a:	4423      	add	r3, r4
1a00951c:	4421      	add	r1, r4
1a00951e:	f002 0203 	and.w	r2, r2, #3
1a009522:	2a00      	cmp	r2, #0
1a009524:	d0bb      	beq.n	1a00949e <memmove+0x1e>
1a009526:	3b01      	subs	r3, #1
1a009528:	440a      	add	r2, r1
1a00952a:	f811 4b01 	ldrb.w	r4, [r1], #1
1a00952e:	f803 4f01 	strb.w	r4, [r3, #1]!
1a009532:	4291      	cmp	r1, r2
1a009534:	d1f9      	bne.n	1a00952a <memmove+0xaa>
1a009536:	bcf0      	pop	{r4, r5, r6, r7}
1a009538:	4770      	bx	lr
1a00953a:	4603      	mov	r3, r0
1a00953c:	e7f1      	b.n	1a009522 <memmove+0xa2>
1a00953e:	4603      	mov	r3, r0
1a009540:	e7f1      	b.n	1a009526 <memmove+0xa6>
1a009542:	462a      	mov	r2, r5
1a009544:	e7ed      	b.n	1a009522 <memmove+0xa2>
1a009546:	bf00      	nop

1a009548 <_Balloc>:
1a009548:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a00954a:	b570      	push	{r4, r5, r6, lr}
1a00954c:	4605      	mov	r5, r0
1a00954e:	460c      	mov	r4, r1
1a009550:	b14b      	cbz	r3, 1a009566 <_Balloc+0x1e>
1a009552:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a009556:	b180      	cbz	r0, 1a00957a <_Balloc+0x32>
1a009558:	6802      	ldr	r2, [r0, #0]
1a00955a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a00955e:	2300      	movs	r3, #0
1a009560:	e9c0 3303 	strd	r3, r3, [r0, #12]
1a009564:	bd70      	pop	{r4, r5, r6, pc}
1a009566:	2221      	movs	r2, #33	; 0x21
1a009568:	2104      	movs	r1, #4
1a00956a:	f000 fd51 	bl	1a00a010 <_calloc_r>
1a00956e:	4603      	mov	r3, r0
1a009570:	64e8      	str	r0, [r5, #76]	; 0x4c
1a009572:	2800      	cmp	r0, #0
1a009574:	d1ed      	bne.n	1a009552 <_Balloc+0xa>
1a009576:	2000      	movs	r0, #0
1a009578:	bd70      	pop	{r4, r5, r6, pc}
1a00957a:	2101      	movs	r1, #1
1a00957c:	fa01 f604 	lsl.w	r6, r1, r4
1a009580:	1d72      	adds	r2, r6, #5
1a009582:	4628      	mov	r0, r5
1a009584:	0092      	lsls	r2, r2, #2
1a009586:	f000 fd43 	bl	1a00a010 <_calloc_r>
1a00958a:	2800      	cmp	r0, #0
1a00958c:	d0f3      	beq.n	1a009576 <_Balloc+0x2e>
1a00958e:	e9c0 4601 	strd	r4, r6, [r0, #4]
1a009592:	e7e4      	b.n	1a00955e <_Balloc+0x16>

1a009594 <_Bfree>:
1a009594:	b131      	cbz	r1, 1a0095a4 <_Bfree+0x10>
1a009596:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a009598:	684a      	ldr	r2, [r1, #4]
1a00959a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a00959e:	6008      	str	r0, [r1, #0]
1a0095a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a0095a4:	4770      	bx	lr
1a0095a6:	bf00      	nop

1a0095a8 <__multadd>:
1a0095a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0095aa:	690c      	ldr	r4, [r1, #16]
1a0095ac:	b083      	sub	sp, #12
1a0095ae:	460d      	mov	r5, r1
1a0095b0:	4606      	mov	r6, r0
1a0095b2:	f101 0c14 	add.w	ip, r1, #20
1a0095b6:	2700      	movs	r7, #0
1a0095b8:	f8dc 0000 	ldr.w	r0, [ip]
1a0095bc:	b281      	uxth	r1, r0
1a0095be:	fb02 3301 	mla	r3, r2, r1, r3
1a0095c2:	0c01      	lsrs	r1, r0, #16
1a0095c4:	0c18      	lsrs	r0, r3, #16
1a0095c6:	fb02 0101 	mla	r1, r2, r1, r0
1a0095ca:	b29b      	uxth	r3, r3
1a0095cc:	3701      	adds	r7, #1
1a0095ce:	eb03 4301 	add.w	r3, r3, r1, lsl #16
1a0095d2:	42bc      	cmp	r4, r7
1a0095d4:	f84c 3b04 	str.w	r3, [ip], #4
1a0095d8:	ea4f 4311 	mov.w	r3, r1, lsr #16
1a0095dc:	dcec      	bgt.n	1a0095b8 <__multadd+0x10>
1a0095de:	b13b      	cbz	r3, 1a0095f0 <__multadd+0x48>
1a0095e0:	68aa      	ldr	r2, [r5, #8]
1a0095e2:	42a2      	cmp	r2, r4
1a0095e4:	dd07      	ble.n	1a0095f6 <__multadd+0x4e>
1a0095e6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a0095ea:	3401      	adds	r4, #1
1a0095ec:	6153      	str	r3, [r2, #20]
1a0095ee:	612c      	str	r4, [r5, #16]
1a0095f0:	4628      	mov	r0, r5
1a0095f2:	b003      	add	sp, #12
1a0095f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0095f6:	6869      	ldr	r1, [r5, #4]
1a0095f8:	9301      	str	r3, [sp, #4]
1a0095fa:	3101      	adds	r1, #1
1a0095fc:	4630      	mov	r0, r6
1a0095fe:	f7ff ffa3 	bl	1a009548 <_Balloc>
1a009602:	692a      	ldr	r2, [r5, #16]
1a009604:	3202      	adds	r2, #2
1a009606:	f105 010c 	add.w	r1, r5, #12
1a00960a:	4607      	mov	r7, r0
1a00960c:	0092      	lsls	r2, r2, #2
1a00960e:	300c      	adds	r0, #12
1a009610:	f7fc fd20 	bl	1a006054 <memcpy>
1a009614:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a009616:	6869      	ldr	r1, [r5, #4]
1a009618:	9b01      	ldr	r3, [sp, #4]
1a00961a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a00961e:	6028      	str	r0, [r5, #0]
1a009620:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a009624:	463d      	mov	r5, r7
1a009626:	e7de      	b.n	1a0095e6 <__multadd+0x3e>

1a009628 <__hi0bits>:
1a009628:	0c02      	lsrs	r2, r0, #16
1a00962a:	0412      	lsls	r2, r2, #16
1a00962c:	4603      	mov	r3, r0
1a00962e:	b9c2      	cbnz	r2, 1a009662 <__hi0bits+0x3a>
1a009630:	0403      	lsls	r3, r0, #16
1a009632:	2010      	movs	r0, #16
1a009634:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a009638:	bf04      	itt	eq
1a00963a:	021b      	lsleq	r3, r3, #8
1a00963c:	3008      	addeq	r0, #8
1a00963e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1a009642:	bf04      	itt	eq
1a009644:	011b      	lsleq	r3, r3, #4
1a009646:	3004      	addeq	r0, #4
1a009648:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1a00964c:	bf04      	itt	eq
1a00964e:	009b      	lsleq	r3, r3, #2
1a009650:	3002      	addeq	r0, #2
1a009652:	2b00      	cmp	r3, #0
1a009654:	db04      	blt.n	1a009660 <__hi0bits+0x38>
1a009656:	005b      	lsls	r3, r3, #1
1a009658:	d501      	bpl.n	1a00965e <__hi0bits+0x36>
1a00965a:	3001      	adds	r0, #1
1a00965c:	4770      	bx	lr
1a00965e:	2020      	movs	r0, #32
1a009660:	4770      	bx	lr
1a009662:	2000      	movs	r0, #0
1a009664:	e7e6      	b.n	1a009634 <__hi0bits+0xc>
1a009666:	bf00      	nop

1a009668 <__lo0bits>:
1a009668:	6803      	ldr	r3, [r0, #0]
1a00966a:	f013 0207 	ands.w	r2, r3, #7
1a00966e:	4601      	mov	r1, r0
1a009670:	d007      	beq.n	1a009682 <__lo0bits+0x1a>
1a009672:	07da      	lsls	r2, r3, #31
1a009674:	d41f      	bmi.n	1a0096b6 <__lo0bits+0x4e>
1a009676:	0798      	lsls	r0, r3, #30
1a009678:	d51f      	bpl.n	1a0096ba <__lo0bits+0x52>
1a00967a:	085b      	lsrs	r3, r3, #1
1a00967c:	600b      	str	r3, [r1, #0]
1a00967e:	2001      	movs	r0, #1
1a009680:	4770      	bx	lr
1a009682:	b298      	uxth	r0, r3
1a009684:	b1a0      	cbz	r0, 1a0096b0 <__lo0bits+0x48>
1a009686:	4610      	mov	r0, r2
1a009688:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00968c:	bf04      	itt	eq
1a00968e:	0a1b      	lsreq	r3, r3, #8
1a009690:	3008      	addeq	r0, #8
1a009692:	071a      	lsls	r2, r3, #28
1a009694:	bf04      	itt	eq
1a009696:	091b      	lsreq	r3, r3, #4
1a009698:	3004      	addeq	r0, #4
1a00969a:	079a      	lsls	r2, r3, #30
1a00969c:	bf04      	itt	eq
1a00969e:	089b      	lsreq	r3, r3, #2
1a0096a0:	3002      	addeq	r0, #2
1a0096a2:	07da      	lsls	r2, r3, #31
1a0096a4:	d402      	bmi.n	1a0096ac <__lo0bits+0x44>
1a0096a6:	085b      	lsrs	r3, r3, #1
1a0096a8:	d00b      	beq.n	1a0096c2 <__lo0bits+0x5a>
1a0096aa:	3001      	adds	r0, #1
1a0096ac:	600b      	str	r3, [r1, #0]
1a0096ae:	4770      	bx	lr
1a0096b0:	0c1b      	lsrs	r3, r3, #16
1a0096b2:	2010      	movs	r0, #16
1a0096b4:	e7e8      	b.n	1a009688 <__lo0bits+0x20>
1a0096b6:	2000      	movs	r0, #0
1a0096b8:	4770      	bx	lr
1a0096ba:	089b      	lsrs	r3, r3, #2
1a0096bc:	600b      	str	r3, [r1, #0]
1a0096be:	2002      	movs	r0, #2
1a0096c0:	4770      	bx	lr
1a0096c2:	2020      	movs	r0, #32
1a0096c4:	4770      	bx	lr
1a0096c6:	bf00      	nop

1a0096c8 <__i2b>:
1a0096c8:	b510      	push	{r4, lr}
1a0096ca:	460c      	mov	r4, r1
1a0096cc:	2101      	movs	r1, #1
1a0096ce:	f7ff ff3b 	bl	1a009548 <_Balloc>
1a0096d2:	2201      	movs	r2, #1
1a0096d4:	e9c0 2404 	strd	r2, r4, [r0, #16]
1a0096d8:	bd10      	pop	{r4, pc}
1a0096da:	bf00      	nop

1a0096dc <__multiply>:
1a0096dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0096e0:	690e      	ldr	r6, [r1, #16]
1a0096e2:	6914      	ldr	r4, [r2, #16]
1a0096e4:	42a6      	cmp	r6, r4
1a0096e6:	b083      	sub	sp, #12
1a0096e8:	460f      	mov	r7, r1
1a0096ea:	4615      	mov	r5, r2
1a0096ec:	da04      	bge.n	1a0096f8 <__multiply+0x1c>
1a0096ee:	4632      	mov	r2, r6
1a0096f0:	462f      	mov	r7, r5
1a0096f2:	4626      	mov	r6, r4
1a0096f4:	460d      	mov	r5, r1
1a0096f6:	4614      	mov	r4, r2
1a0096f8:	e9d7 1301 	ldrd	r1, r3, [r7, #4]
1a0096fc:	eb06 0804 	add.w	r8, r6, r4
1a009700:	4543      	cmp	r3, r8
1a009702:	bfb8      	it	lt
1a009704:	3101      	addlt	r1, #1
1a009706:	f7ff ff1f 	bl	1a009548 <_Balloc>
1a00970a:	f100 0914 	add.w	r9, r0, #20
1a00970e:	eb09 0e88 	add.w	lr, r9, r8, lsl #2
1a009712:	45f1      	cmp	r9, lr
1a009714:	9000      	str	r0, [sp, #0]
1a009716:	d205      	bcs.n	1a009724 <__multiply+0x48>
1a009718:	464b      	mov	r3, r9
1a00971a:	2200      	movs	r2, #0
1a00971c:	f843 2b04 	str.w	r2, [r3], #4
1a009720:	459e      	cmp	lr, r3
1a009722:	d8fb      	bhi.n	1a00971c <__multiply+0x40>
1a009724:	f105 0a14 	add.w	sl, r5, #20
1a009728:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
1a00972c:	f107 0314 	add.w	r3, r7, #20
1a009730:	45a2      	cmp	sl, r4
1a009732:	eb03 0c86 	add.w	ip, r3, r6, lsl #2
1a009736:	d261      	bcs.n	1a0097fc <__multiply+0x120>
1a009738:	1b64      	subs	r4, r4, r5
1a00973a:	3c15      	subs	r4, #21
1a00973c:	f024 0403 	bic.w	r4, r4, #3
1a009740:	f8cd e004 	str.w	lr, [sp, #4]
1a009744:	44a2      	add	sl, r4
1a009746:	f105 0210 	add.w	r2, r5, #16
1a00974a:	469e      	mov	lr, r3
1a00974c:	e005      	b.n	1a00975a <__multiply+0x7e>
1a00974e:	0c2d      	lsrs	r5, r5, #16
1a009750:	d12b      	bne.n	1a0097aa <__multiply+0xce>
1a009752:	4592      	cmp	sl, r2
1a009754:	f109 0904 	add.w	r9, r9, #4
1a009758:	d04e      	beq.n	1a0097f8 <__multiply+0x11c>
1a00975a:	f852 5f04 	ldr.w	r5, [r2, #4]!
1a00975e:	fa1f fb85 	uxth.w	fp, r5
1a009762:	f1bb 0f00 	cmp.w	fp, #0
1a009766:	d0f2      	beq.n	1a00974e <__multiply+0x72>
1a009768:	4677      	mov	r7, lr
1a00976a:	464e      	mov	r6, r9
1a00976c:	2000      	movs	r0, #0
1a00976e:	e000      	b.n	1a009772 <__multiply+0x96>
1a009770:	4626      	mov	r6, r4
1a009772:	f857 1b04 	ldr.w	r1, [r7], #4
1a009776:	6834      	ldr	r4, [r6, #0]
1a009778:	b28b      	uxth	r3, r1
1a00977a:	b2a5      	uxth	r5, r4
1a00977c:	0c09      	lsrs	r1, r1, #16
1a00977e:	0c24      	lsrs	r4, r4, #16
1a009780:	fb0b 5303 	mla	r3, fp, r3, r5
1a009784:	4403      	add	r3, r0
1a009786:	fb0b 4001 	mla	r0, fp, r1, r4
1a00978a:	eb00 4013 	add.w	r0, r0, r3, lsr #16
1a00978e:	4634      	mov	r4, r6
1a009790:	b29b      	uxth	r3, r3
1a009792:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1a009796:	45bc      	cmp	ip, r7
1a009798:	ea4f 4010 	mov.w	r0, r0, lsr #16
1a00979c:	f844 3b04 	str.w	r3, [r4], #4
1a0097a0:	d8e6      	bhi.n	1a009770 <__multiply+0x94>
1a0097a2:	6070      	str	r0, [r6, #4]
1a0097a4:	6815      	ldr	r5, [r2, #0]
1a0097a6:	0c2d      	lsrs	r5, r5, #16
1a0097a8:	d0d3      	beq.n	1a009752 <__multiply+0x76>
1a0097aa:	f8d9 3000 	ldr.w	r3, [r9]
1a0097ae:	4676      	mov	r6, lr
1a0097b0:	4618      	mov	r0, r3
1a0097b2:	46cb      	mov	fp, r9
1a0097b4:	2100      	movs	r1, #0
1a0097b6:	e000      	b.n	1a0097ba <__multiply+0xde>
1a0097b8:	46a3      	mov	fp, r4
1a0097ba:	8834      	ldrh	r4, [r6, #0]
1a0097bc:	0c00      	lsrs	r0, r0, #16
1a0097be:	fb05 0004 	mla	r0, r5, r4, r0
1a0097c2:	4401      	add	r1, r0
1a0097c4:	b29b      	uxth	r3, r3
1a0097c6:	465c      	mov	r4, fp
1a0097c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0097cc:	f844 3b04 	str.w	r3, [r4], #4
1a0097d0:	f856 3b04 	ldr.w	r3, [r6], #4
1a0097d4:	f8db 0004 	ldr.w	r0, [fp, #4]
1a0097d8:	0c1b      	lsrs	r3, r3, #16
1a0097da:	b287      	uxth	r7, r0
1a0097dc:	fb05 7303 	mla	r3, r5, r3, r7
1a0097e0:	eb03 4311 	add.w	r3, r3, r1, lsr #16
1a0097e4:	45b4      	cmp	ip, r6
1a0097e6:	ea4f 4113 	mov.w	r1, r3, lsr #16
1a0097ea:	d8e5      	bhi.n	1a0097b8 <__multiply+0xdc>
1a0097ec:	4592      	cmp	sl, r2
1a0097ee:	f8cb 3004 	str.w	r3, [fp, #4]
1a0097f2:	f109 0904 	add.w	r9, r9, #4
1a0097f6:	d1b0      	bne.n	1a00975a <__multiply+0x7e>
1a0097f8:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0097fc:	f1b8 0f00 	cmp.w	r8, #0
1a009800:	dd0b      	ble.n	1a00981a <__multiply+0x13e>
1a009802:	f85e 3c04 	ldr.w	r3, [lr, #-4]
1a009806:	f1ae 0e04 	sub.w	lr, lr, #4
1a00980a:	b11b      	cbz	r3, 1a009814 <__multiply+0x138>
1a00980c:	e005      	b.n	1a00981a <__multiply+0x13e>
1a00980e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
1a009812:	b913      	cbnz	r3, 1a00981a <__multiply+0x13e>
1a009814:	f1b8 0801 	subs.w	r8, r8, #1
1a009818:	d1f9      	bne.n	1a00980e <__multiply+0x132>
1a00981a:	9800      	ldr	r0, [sp, #0]
1a00981c:	f8c0 8010 	str.w	r8, [r0, #16]
1a009820:	b003      	add	sp, #12
1a009822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009826:	bf00      	nop

1a009828 <__pow5mult>:
1a009828:	f012 0303 	ands.w	r3, r2, #3
1a00982c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a009830:	4614      	mov	r4, r2
1a009832:	4607      	mov	r7, r0
1a009834:	d12e      	bne.n	1a009894 <__pow5mult+0x6c>
1a009836:	460d      	mov	r5, r1
1a009838:	10a4      	asrs	r4, r4, #2
1a00983a:	d01c      	beq.n	1a009876 <__pow5mult+0x4e>
1a00983c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
1a00983e:	b396      	cbz	r6, 1a0098a6 <__pow5mult+0x7e>
1a009840:	07e3      	lsls	r3, r4, #31
1a009842:	f04f 0800 	mov.w	r8, #0
1a009846:	d406      	bmi.n	1a009856 <__pow5mult+0x2e>
1a009848:	1064      	asrs	r4, r4, #1
1a00984a:	d014      	beq.n	1a009876 <__pow5mult+0x4e>
1a00984c:	6830      	ldr	r0, [r6, #0]
1a00984e:	b1a8      	cbz	r0, 1a00987c <__pow5mult+0x54>
1a009850:	4606      	mov	r6, r0
1a009852:	07e3      	lsls	r3, r4, #31
1a009854:	d5f8      	bpl.n	1a009848 <__pow5mult+0x20>
1a009856:	4632      	mov	r2, r6
1a009858:	4629      	mov	r1, r5
1a00985a:	4638      	mov	r0, r7
1a00985c:	f7ff ff3e 	bl	1a0096dc <__multiply>
1a009860:	b1b5      	cbz	r5, 1a009890 <__pow5mult+0x68>
1a009862:	686a      	ldr	r2, [r5, #4]
1a009864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a009866:	1064      	asrs	r4, r4, #1
1a009868:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a00986c:	6029      	str	r1, [r5, #0]
1a00986e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a009872:	4605      	mov	r5, r0
1a009874:	d1ea      	bne.n	1a00984c <__pow5mult+0x24>
1a009876:	4628      	mov	r0, r5
1a009878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00987c:	4632      	mov	r2, r6
1a00987e:	4631      	mov	r1, r6
1a009880:	4638      	mov	r0, r7
1a009882:	f7ff ff2b 	bl	1a0096dc <__multiply>
1a009886:	6030      	str	r0, [r6, #0]
1a009888:	f8c0 8000 	str.w	r8, [r0]
1a00988c:	4606      	mov	r6, r0
1a00988e:	e7e0      	b.n	1a009852 <__pow5mult+0x2a>
1a009890:	4605      	mov	r5, r0
1a009892:	e7d9      	b.n	1a009848 <__pow5mult+0x20>
1a009894:	3b01      	subs	r3, #1
1a009896:	4a0b      	ldr	r2, [pc, #44]	; (1a0098c4 <__pow5mult+0x9c>)
1a009898:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a00989c:	2300      	movs	r3, #0
1a00989e:	f7ff fe83 	bl	1a0095a8 <__multadd>
1a0098a2:	4605      	mov	r5, r0
1a0098a4:	e7c8      	b.n	1a009838 <__pow5mult+0x10>
1a0098a6:	2101      	movs	r1, #1
1a0098a8:	4638      	mov	r0, r7
1a0098aa:	f7ff fe4d 	bl	1a009548 <_Balloc>
1a0098ae:	f240 2371 	movw	r3, #625	; 0x271
1a0098b2:	6143      	str	r3, [r0, #20]
1a0098b4:	2201      	movs	r2, #1
1a0098b6:	2300      	movs	r3, #0
1a0098b8:	6102      	str	r2, [r0, #16]
1a0098ba:	4606      	mov	r6, r0
1a0098bc:	64b8      	str	r0, [r7, #72]	; 0x48
1a0098be:	6003      	str	r3, [r0, #0]
1a0098c0:	e7be      	b.n	1a009840 <__pow5mult+0x18>
1a0098c2:	bf00      	nop
1a0098c4:	1a00ac10 	.word	0x1a00ac10

1a0098c8 <__lshift>:
1a0098c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0098cc:	4691      	mov	r9, r2
1a0098ce:	690a      	ldr	r2, [r1, #16]
1a0098d0:	460e      	mov	r6, r1
1a0098d2:	ea4f 1469 	mov.w	r4, r9, asr #5
1a0098d6:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
1a0098da:	eb04 0802 	add.w	r8, r4, r2
1a0098de:	f108 0501 	add.w	r5, r8, #1
1a0098e2:	429d      	cmp	r5, r3
1a0098e4:	4607      	mov	r7, r0
1a0098e6:	dd04      	ble.n	1a0098f2 <__lshift+0x2a>
1a0098e8:	005b      	lsls	r3, r3, #1
1a0098ea:	429d      	cmp	r5, r3
1a0098ec:	f101 0101 	add.w	r1, r1, #1
1a0098f0:	dcfa      	bgt.n	1a0098e8 <__lshift+0x20>
1a0098f2:	4638      	mov	r0, r7
1a0098f4:	f7ff fe28 	bl	1a009548 <_Balloc>
1a0098f8:	2c00      	cmp	r4, #0
1a0098fa:	f100 0314 	add.w	r3, r0, #20
1a0098fe:	dd37      	ble.n	1a009970 <__lshift+0xa8>
1a009900:	eb03 0184 	add.w	r1, r3, r4, lsl #2
1a009904:	2200      	movs	r2, #0
1a009906:	f843 2b04 	str.w	r2, [r3], #4
1a00990a:	428b      	cmp	r3, r1
1a00990c:	d1fb      	bne.n	1a009906 <__lshift+0x3e>
1a00990e:	6934      	ldr	r4, [r6, #16]
1a009910:	f106 0314 	add.w	r3, r6, #20
1a009914:	f019 091f 	ands.w	r9, r9, #31
1a009918:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
1a00991c:	d020      	beq.n	1a009960 <__lshift+0x98>
1a00991e:	f1c9 0e20 	rsb	lr, r9, #32
1a009922:	2200      	movs	r2, #0
1a009924:	e000      	b.n	1a009928 <__lshift+0x60>
1a009926:	4651      	mov	r1, sl
1a009928:	681c      	ldr	r4, [r3, #0]
1a00992a:	468a      	mov	sl, r1
1a00992c:	fa04 f409 	lsl.w	r4, r4, r9
1a009930:	4314      	orrs	r4, r2
1a009932:	f84a 4b04 	str.w	r4, [sl], #4
1a009936:	f853 2b04 	ldr.w	r2, [r3], #4
1a00993a:	4563      	cmp	r3, ip
1a00993c:	fa22 f20e 	lsr.w	r2, r2, lr
1a009940:	d3f1      	bcc.n	1a009926 <__lshift+0x5e>
1a009942:	604a      	str	r2, [r1, #4]
1a009944:	b10a      	cbz	r2, 1a00994a <__lshift+0x82>
1a009946:	f108 0502 	add.w	r5, r8, #2
1a00994a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00994c:	6872      	ldr	r2, [r6, #4]
1a00994e:	3d01      	subs	r5, #1
1a009950:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a009954:	6105      	str	r5, [r0, #16]
1a009956:	6031      	str	r1, [r6, #0]
1a009958:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
1a00995c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a009960:	3904      	subs	r1, #4
1a009962:	f853 2b04 	ldr.w	r2, [r3], #4
1a009966:	f841 2f04 	str.w	r2, [r1, #4]!
1a00996a:	459c      	cmp	ip, r3
1a00996c:	d8f9      	bhi.n	1a009962 <__lshift+0x9a>
1a00996e:	e7ec      	b.n	1a00994a <__lshift+0x82>
1a009970:	4619      	mov	r1, r3
1a009972:	e7cc      	b.n	1a00990e <__lshift+0x46>

1a009974 <__mcmp>:
1a009974:	b430      	push	{r4, r5}
1a009976:	690b      	ldr	r3, [r1, #16]
1a009978:	4605      	mov	r5, r0
1a00997a:	6900      	ldr	r0, [r0, #16]
1a00997c:	1ac0      	subs	r0, r0, r3
1a00997e:	d10f      	bne.n	1a0099a0 <__mcmp+0x2c>
1a009980:	009b      	lsls	r3, r3, #2
1a009982:	3514      	adds	r5, #20
1a009984:	3114      	adds	r1, #20
1a009986:	4419      	add	r1, r3
1a009988:	442b      	add	r3, r5
1a00998a:	e001      	b.n	1a009990 <__mcmp+0x1c>
1a00998c:	429d      	cmp	r5, r3
1a00998e:	d207      	bcs.n	1a0099a0 <__mcmp+0x2c>
1a009990:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a009994:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a009998:	4294      	cmp	r4, r2
1a00999a:	d0f7      	beq.n	1a00998c <__mcmp+0x18>
1a00999c:	d302      	bcc.n	1a0099a4 <__mcmp+0x30>
1a00999e:	2001      	movs	r0, #1
1a0099a0:	bc30      	pop	{r4, r5}
1a0099a2:	4770      	bx	lr
1a0099a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0099a8:	e7fa      	b.n	1a0099a0 <__mcmp+0x2c>
1a0099aa:	bf00      	nop

1a0099ac <__mdiff>:
1a0099ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0099b0:	6913      	ldr	r3, [r2, #16]
1a0099b2:	690d      	ldr	r5, [r1, #16]
1a0099b4:	1aed      	subs	r5, r5, r3
1a0099b6:	2d00      	cmp	r5, #0
1a0099b8:	460e      	mov	r6, r1
1a0099ba:	4690      	mov	r8, r2
1a0099bc:	f101 0414 	add.w	r4, r1, #20
1a0099c0:	f102 0714 	add.w	r7, r2, #20
1a0099c4:	d114      	bne.n	1a0099f0 <__mdiff+0x44>
1a0099c6:	009b      	lsls	r3, r3, #2
1a0099c8:	18e2      	adds	r2, r4, r3
1a0099ca:	443b      	add	r3, r7
1a0099cc:	e001      	b.n	1a0099d2 <__mdiff+0x26>
1a0099ce:	42a2      	cmp	r2, r4
1a0099d0:	d959      	bls.n	1a009a86 <__mdiff+0xda>
1a0099d2:	f852 cd04 	ldr.w	ip, [r2, #-4]!
1a0099d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
1a0099da:	458c      	cmp	ip, r1
1a0099dc:	d0f7      	beq.n	1a0099ce <__mdiff+0x22>
1a0099de:	d209      	bcs.n	1a0099f4 <__mdiff+0x48>
1a0099e0:	4622      	mov	r2, r4
1a0099e2:	4633      	mov	r3, r6
1a0099e4:	463c      	mov	r4, r7
1a0099e6:	4646      	mov	r6, r8
1a0099e8:	4617      	mov	r7, r2
1a0099ea:	4698      	mov	r8, r3
1a0099ec:	2501      	movs	r5, #1
1a0099ee:	e001      	b.n	1a0099f4 <__mdiff+0x48>
1a0099f0:	dbf6      	blt.n	1a0099e0 <__mdiff+0x34>
1a0099f2:	2500      	movs	r5, #0
1a0099f4:	6871      	ldr	r1, [r6, #4]
1a0099f6:	f7ff fda7 	bl	1a009548 <_Balloc>
1a0099fa:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a0099fe:	6936      	ldr	r6, [r6, #16]
1a009a00:	60c5      	str	r5, [r0, #12]
1a009a02:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
1a009a06:	46bc      	mov	ip, r7
1a009a08:	f100 0514 	add.w	r5, r0, #20
1a009a0c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
1a009a10:	2300      	movs	r3, #0
1a009a12:	f85c 1b04 	ldr.w	r1, [ip], #4
1a009a16:	f854 8b04 	ldr.w	r8, [r4], #4
1a009a1a:	b28a      	uxth	r2, r1
1a009a1c:	fa13 f388 	uxtah	r3, r3, r8
1a009a20:	0c09      	lsrs	r1, r1, #16
1a009a22:	1a9a      	subs	r2, r3, r2
1a009a24:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
1a009a28:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a009a2c:	b292      	uxth	r2, r2
1a009a2e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a009a32:	45e6      	cmp	lr, ip
1a009a34:	f845 2b04 	str.w	r2, [r5], #4
1a009a38:	ea4f 4323 	mov.w	r3, r3, asr #16
1a009a3c:	d8e9      	bhi.n	1a009a12 <__mdiff+0x66>
1a009a3e:	42a7      	cmp	r7, r4
1a009a40:	d917      	bls.n	1a009a72 <__mdiff+0xc6>
1a009a42:	46ae      	mov	lr, r5
1a009a44:	46a4      	mov	ip, r4
1a009a46:	f85c 2b04 	ldr.w	r2, [ip], #4
1a009a4a:	fa13 f382 	uxtah	r3, r3, r2
1a009a4e:	1419      	asrs	r1, r3, #16
1a009a50:	eb01 4112 	add.w	r1, r1, r2, lsr #16
1a009a54:	b29b      	uxth	r3, r3
1a009a56:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
1a009a5a:	4567      	cmp	r7, ip
1a009a5c:	f84e 2b04 	str.w	r2, [lr], #4
1a009a60:	ea4f 4321 	mov.w	r3, r1, asr #16
1a009a64:	d8ef      	bhi.n	1a009a46 <__mdiff+0x9a>
1a009a66:	43e4      	mvns	r4, r4
1a009a68:	4427      	add	r7, r4
1a009a6a:	f027 0703 	bic.w	r7, r7, #3
1a009a6e:	3704      	adds	r7, #4
1a009a70:	443d      	add	r5, r7
1a009a72:	3d04      	subs	r5, #4
1a009a74:	b922      	cbnz	r2, 1a009a80 <__mdiff+0xd4>
1a009a76:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a009a7a:	3e01      	subs	r6, #1
1a009a7c:	2b00      	cmp	r3, #0
1a009a7e:	d0fa      	beq.n	1a009a76 <__mdiff+0xca>
1a009a80:	6106      	str	r6, [r0, #16]
1a009a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a009a86:	2100      	movs	r1, #0
1a009a88:	f7ff fd5e 	bl	1a009548 <_Balloc>
1a009a8c:	2201      	movs	r2, #1
1a009a8e:	2300      	movs	r3, #0
1a009a90:	e9c0 2304 	strd	r2, r3, [r0, #16]
1a009a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a009a98 <__d2b>:
1a009a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a009a9c:	460f      	mov	r7, r1
1a009a9e:	b083      	sub	sp, #12
1a009aa0:	2101      	movs	r1, #1
1a009aa2:	ec55 4b10 	vmov	r4, r5, d0
1a009aa6:	4616      	mov	r6, r2
1a009aa8:	f7ff fd4e 	bl	1a009548 <_Balloc>
1a009aac:	f3c5 580a 	ubfx	r8, r5, #20, #11
1a009ab0:	4681      	mov	r9, r0
1a009ab2:	f3c5 0313 	ubfx	r3, r5, #0, #20
1a009ab6:	f1b8 0f00 	cmp.w	r8, #0
1a009aba:	d001      	beq.n	1a009ac0 <__d2b+0x28>
1a009abc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a009ac0:	2c00      	cmp	r4, #0
1a009ac2:	9301      	str	r3, [sp, #4]
1a009ac4:	d024      	beq.n	1a009b10 <__d2b+0x78>
1a009ac6:	a802      	add	r0, sp, #8
1a009ac8:	f840 4d08 	str.w	r4, [r0, #-8]!
1a009acc:	f7ff fdcc 	bl	1a009668 <__lo0bits>
1a009ad0:	2800      	cmp	r0, #0
1a009ad2:	d136      	bne.n	1a009b42 <__d2b+0xaa>
1a009ad4:	e9dd 2300 	ldrd	r2, r3, [sp]
1a009ad8:	f8c9 2014 	str.w	r2, [r9, #20]
1a009adc:	2b00      	cmp	r3, #0
1a009ade:	bf0c      	ite	eq
1a009ae0:	2101      	moveq	r1, #1
1a009ae2:	2102      	movne	r1, #2
1a009ae4:	f8c9 3018 	str.w	r3, [r9, #24]
1a009ae8:	f8c9 1010 	str.w	r1, [r9, #16]
1a009aec:	f1b8 0f00 	cmp.w	r8, #0
1a009af0:	d11b      	bne.n	1a009b2a <__d2b+0x92>
1a009af2:	eb09 0381 	add.w	r3, r9, r1, lsl #2
1a009af6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a009afa:	6038      	str	r0, [r7, #0]
1a009afc:	6918      	ldr	r0, [r3, #16]
1a009afe:	f7ff fd93 	bl	1a009628 <__hi0bits>
1a009b02:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1a009b06:	6030      	str	r0, [r6, #0]
1a009b08:	4648      	mov	r0, r9
1a009b0a:	b003      	add	sp, #12
1a009b0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a009b10:	a801      	add	r0, sp, #4
1a009b12:	f7ff fda9 	bl	1a009668 <__lo0bits>
1a009b16:	9b01      	ldr	r3, [sp, #4]
1a009b18:	f8c9 3014 	str.w	r3, [r9, #20]
1a009b1c:	2101      	movs	r1, #1
1a009b1e:	3020      	adds	r0, #32
1a009b20:	f8c9 1010 	str.w	r1, [r9, #16]
1a009b24:	f1b8 0f00 	cmp.w	r8, #0
1a009b28:	d0e3      	beq.n	1a009af2 <__d2b+0x5a>
1a009b2a:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
1a009b2e:	eb08 0300 	add.w	r3, r8, r0
1a009b32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a009b36:	603b      	str	r3, [r7, #0]
1a009b38:	6030      	str	r0, [r6, #0]
1a009b3a:	4648      	mov	r0, r9
1a009b3c:	b003      	add	sp, #12
1a009b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a009b42:	e9dd 1300 	ldrd	r1, r3, [sp]
1a009b46:	f1c0 0220 	rsb	r2, r0, #32
1a009b4a:	fa03 f202 	lsl.w	r2, r3, r2
1a009b4e:	430a      	orrs	r2, r1
1a009b50:	40c3      	lsrs	r3, r0
1a009b52:	9301      	str	r3, [sp, #4]
1a009b54:	f8c9 2014 	str.w	r2, [r9, #20]
1a009b58:	e7c0      	b.n	1a009adc <__d2b+0x44>
1a009b5a:	bf00      	nop

1a009b5c <_realloc_r>:
1a009b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a009b60:	4692      	mov	sl, r2
1a009b62:	b083      	sub	sp, #12
1a009b64:	2900      	cmp	r1, #0
1a009b66:	f000 80a1 	beq.w	1a009cac <_realloc_r+0x150>
1a009b6a:	460d      	mov	r5, r1
1a009b6c:	4680      	mov	r8, r0
1a009b6e:	f10a 040b 	add.w	r4, sl, #11
1a009b72:	f7fc fb53 	bl	1a00621c <__malloc_lock>
1a009b76:	f855 2c04 	ldr.w	r2, [r5, #-4]
1a009b7a:	2c16      	cmp	r4, #22
1a009b7c:	f022 0603 	bic.w	r6, r2, #3
1a009b80:	f1a5 0708 	sub.w	r7, r5, #8
1a009b84:	d83e      	bhi.n	1a009c04 <_realloc_r+0xa8>
1a009b86:	2410      	movs	r4, #16
1a009b88:	4621      	mov	r1, r4
1a009b8a:	45a2      	cmp	sl, r4
1a009b8c:	d83f      	bhi.n	1a009c0e <_realloc_r+0xb2>
1a009b8e:	428e      	cmp	r6, r1
1a009b90:	eb07 0906 	add.w	r9, r7, r6
1a009b94:	da74      	bge.n	1a009c80 <_realloc_r+0x124>
1a009b96:	4bc7      	ldr	r3, [pc, #796]	; (1a009eb4 <_realloc_r+0x358>)
1a009b98:	6898      	ldr	r0, [r3, #8]
1a009b9a:	4548      	cmp	r0, r9
1a009b9c:	f000 80aa 	beq.w	1a009cf4 <_realloc_r+0x198>
1a009ba0:	f8d9 0004 	ldr.w	r0, [r9, #4]
1a009ba4:	f020 0301 	bic.w	r3, r0, #1
1a009ba8:	444b      	add	r3, r9
1a009baa:	685b      	ldr	r3, [r3, #4]
1a009bac:	07db      	lsls	r3, r3, #31
1a009bae:	f140 8083 	bpl.w	1a009cb8 <_realloc_r+0x15c>
1a009bb2:	07d2      	lsls	r2, r2, #31
1a009bb4:	d534      	bpl.n	1a009c20 <_realloc_r+0xc4>
1a009bb6:	4651      	mov	r1, sl
1a009bb8:	4640      	mov	r0, r8
1a009bba:	f7fb ff91 	bl	1a005ae0 <_malloc_r>
1a009bbe:	4682      	mov	sl, r0
1a009bc0:	b1e0      	cbz	r0, 1a009bfc <_realloc_r+0xa0>
1a009bc2:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a009bc6:	f023 0301 	bic.w	r3, r3, #1
1a009bca:	443b      	add	r3, r7
1a009bcc:	f1a0 0208 	sub.w	r2, r0, #8
1a009bd0:	4293      	cmp	r3, r2
1a009bd2:	f000 80f9 	beq.w	1a009dc8 <_realloc_r+0x26c>
1a009bd6:	1f32      	subs	r2, r6, #4
1a009bd8:	2a24      	cmp	r2, #36	; 0x24
1a009bda:	f200 8107 	bhi.w	1a009dec <_realloc_r+0x290>
1a009bde:	2a13      	cmp	r2, #19
1a009be0:	6829      	ldr	r1, [r5, #0]
1a009be2:	f200 80e6 	bhi.w	1a009db2 <_realloc_r+0x256>
1a009be6:	4603      	mov	r3, r0
1a009be8:	462a      	mov	r2, r5
1a009bea:	6019      	str	r1, [r3, #0]
1a009bec:	6851      	ldr	r1, [r2, #4]
1a009bee:	6059      	str	r1, [r3, #4]
1a009bf0:	6892      	ldr	r2, [r2, #8]
1a009bf2:	609a      	str	r2, [r3, #8]
1a009bf4:	4629      	mov	r1, r5
1a009bf6:	4640      	mov	r0, r8
1a009bf8:	f7fb fe1a 	bl	1a005830 <_free_r>
1a009bfc:	4640      	mov	r0, r8
1a009bfe:	f7fc fb13 	bl	1a006228 <__malloc_unlock>
1a009c02:	e04f      	b.n	1a009ca4 <_realloc_r+0x148>
1a009c04:	f024 0407 	bic.w	r4, r4, #7
1a009c08:	2c00      	cmp	r4, #0
1a009c0a:	4621      	mov	r1, r4
1a009c0c:	dabd      	bge.n	1a009b8a <_realloc_r+0x2e>
1a009c0e:	f04f 0a00 	mov.w	sl, #0
1a009c12:	230c      	movs	r3, #12
1a009c14:	4650      	mov	r0, sl
1a009c16:	f8c8 3000 	str.w	r3, [r8]
1a009c1a:	b003      	add	sp, #12
1a009c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009c20:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a009c24:	eba7 0b03 	sub.w	fp, r7, r3
1a009c28:	f8db 2004 	ldr.w	r2, [fp, #4]
1a009c2c:	f022 0203 	bic.w	r2, r2, #3
1a009c30:	18b3      	adds	r3, r6, r2
1a009c32:	428b      	cmp	r3, r1
1a009c34:	dbbf      	blt.n	1a009bb6 <_realloc_r+0x5a>
1a009c36:	46da      	mov	sl, fp
1a009c38:	f8db 100c 	ldr.w	r1, [fp, #12]
1a009c3c:	f85a 0f08 	ldr.w	r0, [sl, #8]!
1a009c40:	1f32      	subs	r2, r6, #4
1a009c42:	2a24      	cmp	r2, #36	; 0x24
1a009c44:	60c1      	str	r1, [r0, #12]
1a009c46:	eb0b 0903 	add.w	r9, fp, r3
1a009c4a:	6088      	str	r0, [r1, #8]
1a009c4c:	f200 80c6 	bhi.w	1a009ddc <_realloc_r+0x280>
1a009c50:	2a13      	cmp	r2, #19
1a009c52:	6829      	ldr	r1, [r5, #0]
1a009c54:	f240 80c0 	bls.w	1a009dd8 <_realloc_r+0x27c>
1a009c58:	f8cb 1008 	str.w	r1, [fp, #8]
1a009c5c:	6869      	ldr	r1, [r5, #4]
1a009c5e:	f8cb 100c 	str.w	r1, [fp, #12]
1a009c62:	2a1b      	cmp	r2, #27
1a009c64:	68a9      	ldr	r1, [r5, #8]
1a009c66:	f200 80d8 	bhi.w	1a009e1a <_realloc_r+0x2be>
1a009c6a:	f10b 0210 	add.w	r2, fp, #16
1a009c6e:	3508      	adds	r5, #8
1a009c70:	6011      	str	r1, [r2, #0]
1a009c72:	6869      	ldr	r1, [r5, #4]
1a009c74:	6051      	str	r1, [r2, #4]
1a009c76:	68a9      	ldr	r1, [r5, #8]
1a009c78:	6091      	str	r1, [r2, #8]
1a009c7a:	461e      	mov	r6, r3
1a009c7c:	465f      	mov	r7, fp
1a009c7e:	4655      	mov	r5, sl
1a009c80:	687b      	ldr	r3, [r7, #4]
1a009c82:	1b32      	subs	r2, r6, r4
1a009c84:	2a0f      	cmp	r2, #15
1a009c86:	f003 0301 	and.w	r3, r3, #1
1a009c8a:	d822      	bhi.n	1a009cd2 <_realloc_r+0x176>
1a009c8c:	4333      	orrs	r3, r6
1a009c8e:	607b      	str	r3, [r7, #4]
1a009c90:	f8d9 3004 	ldr.w	r3, [r9, #4]
1a009c94:	f043 0301 	orr.w	r3, r3, #1
1a009c98:	f8c9 3004 	str.w	r3, [r9, #4]
1a009c9c:	4640      	mov	r0, r8
1a009c9e:	f7fc fac3 	bl	1a006228 <__malloc_unlock>
1a009ca2:	46aa      	mov	sl, r5
1a009ca4:	4650      	mov	r0, sl
1a009ca6:	b003      	add	sp, #12
1a009ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009cac:	4611      	mov	r1, r2
1a009cae:	b003      	add	sp, #12
1a009cb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a009cb4:	f7fb bf14 	b.w	1a005ae0 <_malloc_r>
1a009cb8:	f020 0003 	bic.w	r0, r0, #3
1a009cbc:	1833      	adds	r3, r6, r0
1a009cbe:	428b      	cmp	r3, r1
1a009cc0:	db61      	blt.n	1a009d86 <_realloc_r+0x22a>
1a009cc2:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
1a009cc6:	461e      	mov	r6, r3
1a009cc8:	60ca      	str	r2, [r1, #12]
1a009cca:	eb07 0903 	add.w	r9, r7, r3
1a009cce:	6091      	str	r1, [r2, #8]
1a009cd0:	e7d6      	b.n	1a009c80 <_realloc_r+0x124>
1a009cd2:	1939      	adds	r1, r7, r4
1a009cd4:	4323      	orrs	r3, r4
1a009cd6:	f042 0201 	orr.w	r2, r2, #1
1a009cda:	607b      	str	r3, [r7, #4]
1a009cdc:	604a      	str	r2, [r1, #4]
1a009cde:	f8d9 3004 	ldr.w	r3, [r9, #4]
1a009ce2:	f043 0301 	orr.w	r3, r3, #1
1a009ce6:	3108      	adds	r1, #8
1a009ce8:	f8c9 3004 	str.w	r3, [r9, #4]
1a009cec:	4640      	mov	r0, r8
1a009cee:	f7fb fd9f 	bl	1a005830 <_free_r>
1a009cf2:	e7d3      	b.n	1a009c9c <_realloc_r+0x140>
1a009cf4:	6840      	ldr	r0, [r0, #4]
1a009cf6:	f020 0903 	bic.w	r9, r0, #3
1a009cfa:	44b1      	add	r9, r6
1a009cfc:	f104 0010 	add.w	r0, r4, #16
1a009d00:	4581      	cmp	r9, r0
1a009d02:	da77      	bge.n	1a009df4 <_realloc_r+0x298>
1a009d04:	07d2      	lsls	r2, r2, #31
1a009d06:	f53f af56 	bmi.w	1a009bb6 <_realloc_r+0x5a>
1a009d0a:	f855 2c08 	ldr.w	r2, [r5, #-8]
1a009d0e:	eba7 0b02 	sub.w	fp, r7, r2
1a009d12:	f8db 2004 	ldr.w	r2, [fp, #4]
1a009d16:	f022 0203 	bic.w	r2, r2, #3
1a009d1a:	4491      	add	r9, r2
1a009d1c:	4548      	cmp	r0, r9
1a009d1e:	dc87      	bgt.n	1a009c30 <_realloc_r+0xd4>
1a009d20:	46da      	mov	sl, fp
1a009d22:	f8db 100c 	ldr.w	r1, [fp, #12]
1a009d26:	f85a 0f08 	ldr.w	r0, [sl, #8]!
1a009d2a:	1f32      	subs	r2, r6, #4
1a009d2c:	2a24      	cmp	r2, #36	; 0x24
1a009d2e:	60c1      	str	r1, [r0, #12]
1a009d30:	6088      	str	r0, [r1, #8]
1a009d32:	f200 80a1 	bhi.w	1a009e78 <_realloc_r+0x31c>
1a009d36:	2a13      	cmp	r2, #19
1a009d38:	6829      	ldr	r1, [r5, #0]
1a009d3a:	f240 809b 	bls.w	1a009e74 <_realloc_r+0x318>
1a009d3e:	f8cb 1008 	str.w	r1, [fp, #8]
1a009d42:	6869      	ldr	r1, [r5, #4]
1a009d44:	f8cb 100c 	str.w	r1, [fp, #12]
1a009d48:	2a1b      	cmp	r2, #27
1a009d4a:	68a9      	ldr	r1, [r5, #8]
1a009d4c:	f200 809b 	bhi.w	1a009e86 <_realloc_r+0x32a>
1a009d50:	f10b 0210 	add.w	r2, fp, #16
1a009d54:	3508      	adds	r5, #8
1a009d56:	6011      	str	r1, [r2, #0]
1a009d58:	6869      	ldr	r1, [r5, #4]
1a009d5a:	6051      	str	r1, [r2, #4]
1a009d5c:	68a9      	ldr	r1, [r5, #8]
1a009d5e:	6091      	str	r1, [r2, #8]
1a009d60:	eb0b 0104 	add.w	r1, fp, r4
1a009d64:	eba9 0204 	sub.w	r2, r9, r4
1a009d68:	f042 0201 	orr.w	r2, r2, #1
1a009d6c:	6099      	str	r1, [r3, #8]
1a009d6e:	604a      	str	r2, [r1, #4]
1a009d70:	f8db 3004 	ldr.w	r3, [fp, #4]
1a009d74:	f003 0301 	and.w	r3, r3, #1
1a009d78:	431c      	orrs	r4, r3
1a009d7a:	4640      	mov	r0, r8
1a009d7c:	f8cb 4004 	str.w	r4, [fp, #4]
1a009d80:	f7fc fa52 	bl	1a006228 <__malloc_unlock>
1a009d84:	e78e      	b.n	1a009ca4 <_realloc_r+0x148>
1a009d86:	07d3      	lsls	r3, r2, #31
1a009d88:	f53f af15 	bmi.w	1a009bb6 <_realloc_r+0x5a>
1a009d8c:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a009d90:	eba7 0b03 	sub.w	fp, r7, r3
1a009d94:	f8db 2004 	ldr.w	r2, [fp, #4]
1a009d98:	f022 0203 	bic.w	r2, r2, #3
1a009d9c:	4410      	add	r0, r2
1a009d9e:	1983      	adds	r3, r0, r6
1a009da0:	428b      	cmp	r3, r1
1a009da2:	f6ff af45 	blt.w	1a009c30 <_realloc_r+0xd4>
1a009da6:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
1a009daa:	46da      	mov	sl, fp
1a009dac:	60ca      	str	r2, [r1, #12]
1a009dae:	6091      	str	r1, [r2, #8]
1a009db0:	e742      	b.n	1a009c38 <_realloc_r+0xdc>
1a009db2:	6001      	str	r1, [r0, #0]
1a009db4:	686b      	ldr	r3, [r5, #4]
1a009db6:	6043      	str	r3, [r0, #4]
1a009db8:	2a1b      	cmp	r2, #27
1a009dba:	d83a      	bhi.n	1a009e32 <_realloc_r+0x2d6>
1a009dbc:	f105 0208 	add.w	r2, r5, #8
1a009dc0:	f100 0308 	add.w	r3, r0, #8
1a009dc4:	68a9      	ldr	r1, [r5, #8]
1a009dc6:	e710      	b.n	1a009bea <_realloc_r+0x8e>
1a009dc8:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a009dcc:	f023 0303 	bic.w	r3, r3, #3
1a009dd0:	441e      	add	r6, r3
1a009dd2:	eb07 0906 	add.w	r9, r7, r6
1a009dd6:	e753      	b.n	1a009c80 <_realloc_r+0x124>
1a009dd8:	4652      	mov	r2, sl
1a009dda:	e749      	b.n	1a009c70 <_realloc_r+0x114>
1a009ddc:	4629      	mov	r1, r5
1a009dde:	4650      	mov	r0, sl
1a009de0:	461e      	mov	r6, r3
1a009de2:	465f      	mov	r7, fp
1a009de4:	f7ff fb4c 	bl	1a009480 <memmove>
1a009de8:	4655      	mov	r5, sl
1a009dea:	e749      	b.n	1a009c80 <_realloc_r+0x124>
1a009dec:	4629      	mov	r1, r5
1a009dee:	f7ff fb47 	bl	1a009480 <memmove>
1a009df2:	e6ff      	b.n	1a009bf4 <_realloc_r+0x98>
1a009df4:	4427      	add	r7, r4
1a009df6:	eba9 0904 	sub.w	r9, r9, r4
1a009dfa:	f049 0201 	orr.w	r2, r9, #1
1a009dfe:	609f      	str	r7, [r3, #8]
1a009e00:	607a      	str	r2, [r7, #4]
1a009e02:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a009e06:	f003 0301 	and.w	r3, r3, #1
1a009e0a:	431c      	orrs	r4, r3
1a009e0c:	4640      	mov	r0, r8
1a009e0e:	f845 4c04 	str.w	r4, [r5, #-4]
1a009e12:	f7fc fa09 	bl	1a006228 <__malloc_unlock>
1a009e16:	46aa      	mov	sl, r5
1a009e18:	e744      	b.n	1a009ca4 <_realloc_r+0x148>
1a009e1a:	f8cb 1010 	str.w	r1, [fp, #16]
1a009e1e:	68e9      	ldr	r1, [r5, #12]
1a009e20:	f8cb 1014 	str.w	r1, [fp, #20]
1a009e24:	2a24      	cmp	r2, #36	; 0x24
1a009e26:	d010      	beq.n	1a009e4a <_realloc_r+0x2ee>
1a009e28:	6929      	ldr	r1, [r5, #16]
1a009e2a:	f10b 0218 	add.w	r2, fp, #24
1a009e2e:	3510      	adds	r5, #16
1a009e30:	e71e      	b.n	1a009c70 <_realloc_r+0x114>
1a009e32:	68ab      	ldr	r3, [r5, #8]
1a009e34:	6083      	str	r3, [r0, #8]
1a009e36:	68eb      	ldr	r3, [r5, #12]
1a009e38:	60c3      	str	r3, [r0, #12]
1a009e3a:	2a24      	cmp	r2, #36	; 0x24
1a009e3c:	d010      	beq.n	1a009e60 <_realloc_r+0x304>
1a009e3e:	f105 0210 	add.w	r2, r5, #16
1a009e42:	f100 0310 	add.w	r3, r0, #16
1a009e46:	6929      	ldr	r1, [r5, #16]
1a009e48:	e6cf      	b.n	1a009bea <_realloc_r+0x8e>
1a009e4a:	692a      	ldr	r2, [r5, #16]
1a009e4c:	f8cb 2018 	str.w	r2, [fp, #24]
1a009e50:	696a      	ldr	r2, [r5, #20]
1a009e52:	f8cb 201c 	str.w	r2, [fp, #28]
1a009e56:	69a9      	ldr	r1, [r5, #24]
1a009e58:	f10b 0220 	add.w	r2, fp, #32
1a009e5c:	3518      	adds	r5, #24
1a009e5e:	e707      	b.n	1a009c70 <_realloc_r+0x114>
1a009e60:	692b      	ldr	r3, [r5, #16]
1a009e62:	6103      	str	r3, [r0, #16]
1a009e64:	696b      	ldr	r3, [r5, #20]
1a009e66:	6143      	str	r3, [r0, #20]
1a009e68:	69a9      	ldr	r1, [r5, #24]
1a009e6a:	f105 0218 	add.w	r2, r5, #24
1a009e6e:	f100 0318 	add.w	r3, r0, #24
1a009e72:	e6ba      	b.n	1a009bea <_realloc_r+0x8e>
1a009e74:	4652      	mov	r2, sl
1a009e76:	e76e      	b.n	1a009d56 <_realloc_r+0x1fa>
1a009e78:	4629      	mov	r1, r5
1a009e7a:	4650      	mov	r0, sl
1a009e7c:	9301      	str	r3, [sp, #4]
1a009e7e:	f7ff faff 	bl	1a009480 <memmove>
1a009e82:	9b01      	ldr	r3, [sp, #4]
1a009e84:	e76c      	b.n	1a009d60 <_realloc_r+0x204>
1a009e86:	f8cb 1010 	str.w	r1, [fp, #16]
1a009e8a:	68e9      	ldr	r1, [r5, #12]
1a009e8c:	f8cb 1014 	str.w	r1, [fp, #20]
1a009e90:	2a24      	cmp	r2, #36	; 0x24
1a009e92:	d004      	beq.n	1a009e9e <_realloc_r+0x342>
1a009e94:	6929      	ldr	r1, [r5, #16]
1a009e96:	f10b 0218 	add.w	r2, fp, #24
1a009e9a:	3510      	adds	r5, #16
1a009e9c:	e75b      	b.n	1a009d56 <_realloc_r+0x1fa>
1a009e9e:	692a      	ldr	r2, [r5, #16]
1a009ea0:	f8cb 2018 	str.w	r2, [fp, #24]
1a009ea4:	696a      	ldr	r2, [r5, #20]
1a009ea6:	f8cb 201c 	str.w	r2, [fp, #28]
1a009eaa:	69a9      	ldr	r1, [r5, #24]
1a009eac:	f10b 0220 	add.w	r2, fp, #32
1a009eb0:	3518      	adds	r5, #24
1a009eb2:	e750      	b.n	1a009d56 <_realloc_r+0x1fa>
1a009eb4:	10000664 	.word	0x10000664

1a009eb8 <frexp>:
1a009eb8:	ec53 2b10 	vmov	r2, r3, d0
1a009ebc:	b570      	push	{r4, r5, r6, lr}
1a009ebe:	4e16      	ldr	r6, [pc, #88]	; (1a009f18 <frexp+0x60>)
1a009ec0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a009ec4:	2500      	movs	r5, #0
1a009ec6:	42b1      	cmp	r1, r6
1a009ec8:	4604      	mov	r4, r0
1a009eca:	6005      	str	r5, [r0, #0]
1a009ecc:	dc21      	bgt.n	1a009f12 <frexp+0x5a>
1a009ece:	ee10 6a10 	vmov	r6, s0
1a009ed2:	430e      	orrs	r6, r1
1a009ed4:	d01d      	beq.n	1a009f12 <frexp+0x5a>
1a009ed6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a009eda:	4618      	mov	r0, r3
1a009edc:	da0c      	bge.n	1a009ef8 <frexp+0x40>
1a009ede:	4619      	mov	r1, r3
1a009ee0:	2200      	movs	r2, #0
1a009ee2:	ee10 0a10 	vmov	r0, s0
1a009ee6:	4b0d      	ldr	r3, [pc, #52]	; (1a009f1c <frexp+0x64>)
1a009ee8:	f7fa fe42 	bl	1a004b70 <__aeabi_dmul>
1a009eec:	f06f 0535 	mvn.w	r5, #53	; 0x35
1a009ef0:	4602      	mov	r2, r0
1a009ef2:	4608      	mov	r0, r1
1a009ef4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a009ef8:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
1a009efc:	1509      	asrs	r1, r1, #20
1a009efe:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
1a009f02:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
1a009f06:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
1a009f0a:	4429      	add	r1, r5
1a009f0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a009f10:	6021      	str	r1, [r4, #0]
1a009f12:	ec43 2b10 	vmov	d0, r2, r3
1a009f16:	bd70      	pop	{r4, r5, r6, pc}
1a009f18:	7fefffff 	.word	0x7fefffff
1a009f1c:	43500000 	.word	0x43500000

1a009f20 <strncpy>:
1a009f20:	ea40 0301 	orr.w	r3, r0, r1
1a009f24:	079b      	lsls	r3, r3, #30
1a009f26:	b470      	push	{r4, r5, r6}
1a009f28:	d12a      	bne.n	1a009f80 <strncpy+0x60>
1a009f2a:	2a03      	cmp	r2, #3
1a009f2c:	d928      	bls.n	1a009f80 <strncpy+0x60>
1a009f2e:	460c      	mov	r4, r1
1a009f30:	4603      	mov	r3, r0
1a009f32:	4621      	mov	r1, r4
1a009f34:	f854 6b04 	ldr.w	r6, [r4], #4
1a009f38:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
1a009f3c:	ea25 0506 	bic.w	r5, r5, r6
1a009f40:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
1a009f44:	d106      	bne.n	1a009f54 <strncpy+0x34>
1a009f46:	3a04      	subs	r2, #4
1a009f48:	2a03      	cmp	r2, #3
1a009f4a:	f843 6b04 	str.w	r6, [r3], #4
1a009f4e:	4621      	mov	r1, r4
1a009f50:	d8ef      	bhi.n	1a009f32 <strncpy+0x12>
1a009f52:	b19a      	cbz	r2, 1a009f7c <strncpy+0x5c>
1a009f54:	780c      	ldrb	r4, [r1, #0]
1a009f56:	701c      	strb	r4, [r3, #0]
1a009f58:	3a01      	subs	r2, #1
1a009f5a:	3301      	adds	r3, #1
1a009f5c:	b13c      	cbz	r4, 1a009f6e <strncpy+0x4e>
1a009f5e:	b16a      	cbz	r2, 1a009f7c <strncpy+0x5c>
1a009f60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a009f64:	f803 4b01 	strb.w	r4, [r3], #1
1a009f68:	3a01      	subs	r2, #1
1a009f6a:	2c00      	cmp	r4, #0
1a009f6c:	d1f7      	bne.n	1a009f5e <strncpy+0x3e>
1a009f6e:	b12a      	cbz	r2, 1a009f7c <strncpy+0x5c>
1a009f70:	441a      	add	r2, r3
1a009f72:	2100      	movs	r1, #0
1a009f74:	f803 1b01 	strb.w	r1, [r3], #1
1a009f78:	4293      	cmp	r3, r2
1a009f7a:	d1fb      	bne.n	1a009f74 <strncpy+0x54>
1a009f7c:	bc70      	pop	{r4, r5, r6}
1a009f7e:	4770      	bx	lr
1a009f80:	4603      	mov	r3, r0
1a009f82:	e7e6      	b.n	1a009f52 <strncpy+0x32>

1a009f84 <__sprint_r.part.0>:
1a009f84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a009f88:	6e4b      	ldr	r3, [r1, #100]	; 0x64
1a009f8a:	049c      	lsls	r4, r3, #18
1a009f8c:	4692      	mov	sl, r2
1a009f8e:	d52d      	bpl.n	1a009fec <__sprint_r.part.0+0x68>
1a009f90:	6893      	ldr	r3, [r2, #8]
1a009f92:	6812      	ldr	r2, [r2, #0]
1a009f94:	b343      	cbz	r3, 1a009fe8 <__sprint_r.part.0+0x64>
1a009f96:	460e      	mov	r6, r1
1a009f98:	4607      	mov	r7, r0
1a009f9a:	f102 0908 	add.w	r9, r2, #8
1a009f9e:	e959 5b02 	ldrd	r5, fp, [r9, #-8]
1a009fa2:	ea5f 089b 	movs.w	r8, fp, lsr #2
1a009fa6:	d015      	beq.n	1a009fd4 <__sprint_r.part.0+0x50>
1a009fa8:	3d04      	subs	r5, #4
1a009faa:	2400      	movs	r4, #0
1a009fac:	e001      	b.n	1a009fb2 <__sprint_r.part.0+0x2e>
1a009fae:	45a0      	cmp	r8, r4
1a009fb0:	d00e      	beq.n	1a009fd0 <__sprint_r.part.0+0x4c>
1a009fb2:	4632      	mov	r2, r6
1a009fb4:	f855 1f04 	ldr.w	r1, [r5, #4]!
1a009fb8:	4638      	mov	r0, r7
1a009fba:	f000 f8ad 	bl	1a00a118 <_fputwc_r>
1a009fbe:	1c43      	adds	r3, r0, #1
1a009fc0:	f104 0401 	add.w	r4, r4, #1
1a009fc4:	d1f3      	bne.n	1a009fae <__sprint_r.part.0+0x2a>
1a009fc6:	2300      	movs	r3, #0
1a009fc8:	e9ca 3301 	strd	r3, r3, [sl, #4]
1a009fcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009fd0:	f8da 3008 	ldr.w	r3, [sl, #8]
1a009fd4:	f02b 0b03 	bic.w	fp, fp, #3
1a009fd8:	eba3 030b 	sub.w	r3, r3, fp
1a009fdc:	f8ca 3008 	str.w	r3, [sl, #8]
1a009fe0:	f109 0908 	add.w	r9, r9, #8
1a009fe4:	2b00      	cmp	r3, #0
1a009fe6:	d1da      	bne.n	1a009f9e <__sprint_r.part.0+0x1a>
1a009fe8:	2000      	movs	r0, #0
1a009fea:	e7ec      	b.n	1a009fc6 <__sprint_r.part.0+0x42>
1a009fec:	f7fe fff0 	bl	1a008fd0 <__sfvwrite_r>
1a009ff0:	2300      	movs	r3, #0
1a009ff2:	e9ca 3301 	strd	r3, r3, [sl, #4]
1a009ff6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009ffa:	bf00      	nop

1a009ffc <__sprint_r>:
1a009ffc:	6893      	ldr	r3, [r2, #8]
1a009ffe:	b10b      	cbz	r3, 1a00a004 <__sprint_r+0x8>
1a00a000:	f7ff bfc0 	b.w	1a009f84 <__sprint_r.part.0>
1a00a004:	b410      	push	{r4}
1a00a006:	4618      	mov	r0, r3
1a00a008:	6053      	str	r3, [r2, #4]
1a00a00a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00a00e:	4770      	bx	lr

1a00a010 <_calloc_r>:
1a00a010:	b510      	push	{r4, lr}
1a00a012:	fb02 f101 	mul.w	r1, r2, r1
1a00a016:	f7fb fd63 	bl	1a005ae0 <_malloc_r>
1a00a01a:	4604      	mov	r4, r0
1a00a01c:	b1d8      	cbz	r0, 1a00a056 <_calloc_r+0x46>
1a00a01e:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a00a022:	f022 0203 	bic.w	r2, r2, #3
1a00a026:	3a04      	subs	r2, #4
1a00a028:	2a24      	cmp	r2, #36	; 0x24
1a00a02a:	d81d      	bhi.n	1a00a068 <_calloc_r+0x58>
1a00a02c:	2a13      	cmp	r2, #19
1a00a02e:	d914      	bls.n	1a00a05a <_calloc_r+0x4a>
1a00a030:	2300      	movs	r3, #0
1a00a032:	2a1b      	cmp	r2, #27
1a00a034:	e9c0 3300 	strd	r3, r3, [r0]
1a00a038:	d91b      	bls.n	1a00a072 <_calloc_r+0x62>
1a00a03a:	2a24      	cmp	r2, #36	; 0x24
1a00a03c:	e9c0 3302 	strd	r3, r3, [r0, #8]
1a00a040:	bf0a      	itet	eq
1a00a042:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
1a00a046:	f100 0210 	addne.w	r2, r0, #16
1a00a04a:	f100 0218 	addeq.w	r2, r0, #24
1a00a04e:	2300      	movs	r3, #0
1a00a050:	e9c2 3300 	strd	r3, r3, [r2]
1a00a054:	6093      	str	r3, [r2, #8]
1a00a056:	4620      	mov	r0, r4
1a00a058:	bd10      	pop	{r4, pc}
1a00a05a:	4602      	mov	r2, r0
1a00a05c:	2300      	movs	r3, #0
1a00a05e:	e9c2 3300 	strd	r3, r3, [r2]
1a00a062:	6093      	str	r3, [r2, #8]
1a00a064:	4620      	mov	r0, r4
1a00a066:	bd10      	pop	{r4, pc}
1a00a068:	2100      	movs	r1, #0
1a00a06a:	f7fc f88d 	bl	1a006188 <memset>
1a00a06e:	4620      	mov	r0, r4
1a00a070:	bd10      	pop	{r4, pc}
1a00a072:	f100 0208 	add.w	r2, r0, #8
1a00a076:	e7f1      	b.n	1a00a05c <_calloc_r+0x4c>

1a00a078 <__fputwc>:
1a00a078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00a07c:	b082      	sub	sp, #8
1a00a07e:	4681      	mov	r9, r0
1a00a080:	4688      	mov	r8, r1
1a00a082:	4614      	mov	r4, r2
1a00a084:	f7fb fd16 	bl	1a005ab4 <__locale_mb_cur_max>
1a00a088:	2801      	cmp	r0, #1
1a00a08a:	d103      	bne.n	1a00a094 <__fputwc+0x1c>
1a00a08c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a00a090:	2bfe      	cmp	r3, #254	; 0xfe
1a00a092:	d933      	bls.n	1a00a0fc <__fputwc+0x84>
1a00a094:	4642      	mov	r2, r8
1a00a096:	f104 035c 	add.w	r3, r4, #92	; 0x5c
1a00a09a:	a901      	add	r1, sp, #4
1a00a09c:	4648      	mov	r0, r9
1a00a09e:	f000 f8c5 	bl	1a00a22c <_wcrtomb_r>
1a00a0a2:	1c42      	adds	r2, r0, #1
1a00a0a4:	4606      	mov	r6, r0
1a00a0a6:	d02f      	beq.n	1a00a108 <__fputwc+0x90>
1a00a0a8:	b320      	cbz	r0, 1a00a0f4 <__fputwc+0x7c>
1a00a0aa:	f89d c004 	ldrb.w	ip, [sp, #4]
1a00a0ae:	2500      	movs	r5, #0
1a00a0b0:	f10d 0a04 	add.w	sl, sp, #4
1a00a0b4:	e009      	b.n	1a00a0ca <__fputwc+0x52>
1a00a0b6:	6823      	ldr	r3, [r4, #0]
1a00a0b8:	1c5a      	adds	r2, r3, #1
1a00a0ba:	6022      	str	r2, [r4, #0]
1a00a0bc:	f883 c000 	strb.w	ip, [r3]
1a00a0c0:	3501      	adds	r5, #1
1a00a0c2:	42b5      	cmp	r5, r6
1a00a0c4:	d216      	bcs.n	1a00a0f4 <__fputwc+0x7c>
1a00a0c6:	f815 c00a 	ldrb.w	ip, [r5, sl]
1a00a0ca:	68a3      	ldr	r3, [r4, #8]
1a00a0cc:	3b01      	subs	r3, #1
1a00a0ce:	2b00      	cmp	r3, #0
1a00a0d0:	60a3      	str	r3, [r4, #8]
1a00a0d2:	daf0      	bge.n	1a00a0b6 <__fputwc+0x3e>
1a00a0d4:	69a7      	ldr	r7, [r4, #24]
1a00a0d6:	42bb      	cmp	r3, r7
1a00a0d8:	4661      	mov	r1, ip
1a00a0da:	4622      	mov	r2, r4
1a00a0dc:	4648      	mov	r0, r9
1a00a0de:	db02      	blt.n	1a00a0e6 <__fputwc+0x6e>
1a00a0e0:	f1bc 0f0a 	cmp.w	ip, #10
1a00a0e4:	d1e7      	bne.n	1a00a0b6 <__fputwc+0x3e>
1a00a0e6:	f000 f849 	bl	1a00a17c <__swbuf_r>
1a00a0ea:	1c43      	adds	r3, r0, #1
1a00a0ec:	d1e8      	bne.n	1a00a0c0 <__fputwc+0x48>
1a00a0ee:	b002      	add	sp, #8
1a00a0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00a0f4:	4640      	mov	r0, r8
1a00a0f6:	b002      	add	sp, #8
1a00a0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00a0fc:	fa5f fc88 	uxtb.w	ip, r8
1a00a100:	4606      	mov	r6, r0
1a00a102:	f88d c004 	strb.w	ip, [sp, #4]
1a00a106:	e7d2      	b.n	1a00a0ae <__fputwc+0x36>
1a00a108:	89a3      	ldrh	r3, [r4, #12]
1a00a10a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00a10e:	81a3      	strh	r3, [r4, #12]
1a00a110:	b002      	add	sp, #8
1a00a112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00a116:	bf00      	nop

1a00a118 <_fputwc_r>:
1a00a118:	b530      	push	{r4, r5, lr}
1a00a11a:	4605      	mov	r5, r0
1a00a11c:	6e50      	ldr	r0, [r2, #100]	; 0x64
1a00a11e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
1a00a122:	07c0      	lsls	r0, r0, #31
1a00a124:	4614      	mov	r4, r2
1a00a126:	b083      	sub	sp, #12
1a00a128:	b29a      	uxth	r2, r3
1a00a12a:	d401      	bmi.n	1a00a130 <_fputwc_r+0x18>
1a00a12c:	0590      	lsls	r0, r2, #22
1a00a12e:	d51c      	bpl.n	1a00a16a <_fputwc_r+0x52>
1a00a130:	0490      	lsls	r0, r2, #18
1a00a132:	d406      	bmi.n	1a00a142 <_fputwc_r+0x2a>
1a00a134:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a00a136:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a00a13a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a00a13e:	81a3      	strh	r3, [r4, #12]
1a00a140:	6662      	str	r2, [r4, #100]	; 0x64
1a00a142:	4628      	mov	r0, r5
1a00a144:	4622      	mov	r2, r4
1a00a146:	f7ff ff97 	bl	1a00a078 <__fputwc>
1a00a14a:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00a14c:	07da      	lsls	r2, r3, #31
1a00a14e:	4605      	mov	r5, r0
1a00a150:	d402      	bmi.n	1a00a158 <_fputwc_r+0x40>
1a00a152:	89a3      	ldrh	r3, [r4, #12]
1a00a154:	059b      	lsls	r3, r3, #22
1a00a156:	d502      	bpl.n	1a00a15e <_fputwc_r+0x46>
1a00a158:	4628      	mov	r0, r5
1a00a15a:	b003      	add	sp, #12
1a00a15c:	bd30      	pop	{r4, r5, pc}
1a00a15e:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00a160:	f7fb fcbc 	bl	1a005adc <__retarget_lock_release_recursive>
1a00a164:	4628      	mov	r0, r5
1a00a166:	b003      	add	sp, #12
1a00a168:	bd30      	pop	{r4, r5, pc}
1a00a16a:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00a16c:	9101      	str	r1, [sp, #4]
1a00a16e:	f7fb fcb3 	bl	1a005ad8 <__retarget_lock_acquire_recursive>
1a00a172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00a176:	9901      	ldr	r1, [sp, #4]
1a00a178:	b29a      	uxth	r2, r3
1a00a17a:	e7d9      	b.n	1a00a130 <_fputwc_r+0x18>

1a00a17c <__swbuf_r>:
1a00a17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00a17e:	460d      	mov	r5, r1
1a00a180:	4614      	mov	r4, r2
1a00a182:	4606      	mov	r6, r0
1a00a184:	b110      	cbz	r0, 1a00a18c <__swbuf_r+0x10>
1a00a186:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a00a188:	2b00      	cmp	r3, #0
1a00a18a:	d043      	beq.n	1a00a214 <__swbuf_r+0x98>
1a00a18c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00a190:	69a3      	ldr	r3, [r4, #24]
1a00a192:	60a3      	str	r3, [r4, #8]
1a00a194:	b291      	uxth	r1, r2
1a00a196:	0708      	lsls	r0, r1, #28
1a00a198:	d51b      	bpl.n	1a00a1d2 <__swbuf_r+0x56>
1a00a19a:	6923      	ldr	r3, [r4, #16]
1a00a19c:	b1cb      	cbz	r3, 1a00a1d2 <__swbuf_r+0x56>
1a00a19e:	b2ed      	uxtb	r5, r5
1a00a1a0:	0489      	lsls	r1, r1, #18
1a00a1a2:	462f      	mov	r7, r5
1a00a1a4:	d522      	bpl.n	1a00a1ec <__swbuf_r+0x70>
1a00a1a6:	6822      	ldr	r2, [r4, #0]
1a00a1a8:	6961      	ldr	r1, [r4, #20]
1a00a1aa:	1ad3      	subs	r3, r2, r3
1a00a1ac:	4299      	cmp	r1, r3
1a00a1ae:	dd29      	ble.n	1a00a204 <__swbuf_r+0x88>
1a00a1b0:	3301      	adds	r3, #1
1a00a1b2:	68a1      	ldr	r1, [r4, #8]
1a00a1b4:	1c50      	adds	r0, r2, #1
1a00a1b6:	3901      	subs	r1, #1
1a00a1b8:	60a1      	str	r1, [r4, #8]
1a00a1ba:	6020      	str	r0, [r4, #0]
1a00a1bc:	7015      	strb	r5, [r2, #0]
1a00a1be:	6962      	ldr	r2, [r4, #20]
1a00a1c0:	429a      	cmp	r2, r3
1a00a1c2:	d02a      	beq.n	1a00a21a <__swbuf_r+0x9e>
1a00a1c4:	89a3      	ldrh	r3, [r4, #12]
1a00a1c6:	07db      	lsls	r3, r3, #31
1a00a1c8:	d501      	bpl.n	1a00a1ce <__swbuf_r+0x52>
1a00a1ca:	2d0a      	cmp	r5, #10
1a00a1cc:	d025      	beq.n	1a00a21a <__swbuf_r+0x9e>
1a00a1ce:	4638      	mov	r0, r7
1a00a1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00a1d2:	4621      	mov	r1, r4
1a00a1d4:	4630      	mov	r0, r6
1a00a1d6:	f7fd fef1 	bl	1a007fbc <__swsetup_r>
1a00a1da:	bb20      	cbnz	r0, 1a00a226 <__swbuf_r+0xaa>
1a00a1dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00a1e0:	6923      	ldr	r3, [r4, #16]
1a00a1e2:	b291      	uxth	r1, r2
1a00a1e4:	b2ed      	uxtb	r5, r5
1a00a1e6:	0489      	lsls	r1, r1, #18
1a00a1e8:	462f      	mov	r7, r5
1a00a1ea:	d4dc      	bmi.n	1a00a1a6 <__swbuf_r+0x2a>
1a00a1ec:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a00a1ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a00a1f2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a00a1f6:	81a2      	strh	r2, [r4, #12]
1a00a1f8:	6822      	ldr	r2, [r4, #0]
1a00a1fa:	6661      	str	r1, [r4, #100]	; 0x64
1a00a1fc:	6961      	ldr	r1, [r4, #20]
1a00a1fe:	1ad3      	subs	r3, r2, r3
1a00a200:	4299      	cmp	r1, r3
1a00a202:	dcd5      	bgt.n	1a00a1b0 <__swbuf_r+0x34>
1a00a204:	4621      	mov	r1, r4
1a00a206:	4630      	mov	r0, r6
1a00a208:	f7fb fa2e 	bl	1a005668 <_fflush_r>
1a00a20c:	b958      	cbnz	r0, 1a00a226 <__swbuf_r+0xaa>
1a00a20e:	6822      	ldr	r2, [r4, #0]
1a00a210:	2301      	movs	r3, #1
1a00a212:	e7ce      	b.n	1a00a1b2 <__swbuf_r+0x36>
1a00a214:	f7fb fa84 	bl	1a005720 <__sinit>
1a00a218:	e7b8      	b.n	1a00a18c <__swbuf_r+0x10>
1a00a21a:	4621      	mov	r1, r4
1a00a21c:	4630      	mov	r0, r6
1a00a21e:	f7fb fa23 	bl	1a005668 <_fflush_r>
1a00a222:	2800      	cmp	r0, #0
1a00a224:	d0d3      	beq.n	1a00a1ce <__swbuf_r+0x52>
1a00a226:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a00a22a:	e7d0      	b.n	1a00a1ce <__swbuf_r+0x52>

1a00a22c <_wcrtomb_r>:
1a00a22c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00a22e:	4c11      	ldr	r4, [pc, #68]	; (1a00a274 <_wcrtomb_r+0x48>)
1a00a230:	6824      	ldr	r4, [r4, #0]
1a00a232:	b085      	sub	sp, #20
1a00a234:	4606      	mov	r6, r0
1a00a236:	6b64      	ldr	r4, [r4, #52]	; 0x34
1a00a238:	461f      	mov	r7, r3
1a00a23a:	b151      	cbz	r1, 1a00a252 <_wcrtomb_r+0x26>
1a00a23c:	4d0e      	ldr	r5, [pc, #56]	; (1a00a278 <_wcrtomb_r+0x4c>)
1a00a23e:	2c00      	cmp	r4, #0
1a00a240:	bf08      	it	eq
1a00a242:	462c      	moveq	r4, r5
1a00a244:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1a00a248:	47a0      	blx	r4
1a00a24a:	1c43      	adds	r3, r0, #1
1a00a24c:	d00c      	beq.n	1a00a268 <_wcrtomb_r+0x3c>
1a00a24e:	b005      	add	sp, #20
1a00a250:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00a252:	4a09      	ldr	r2, [pc, #36]	; (1a00a278 <_wcrtomb_r+0x4c>)
1a00a254:	2c00      	cmp	r4, #0
1a00a256:	bf08      	it	eq
1a00a258:	4614      	moveq	r4, r2
1a00a25a:	460a      	mov	r2, r1
1a00a25c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1a00a260:	a901      	add	r1, sp, #4
1a00a262:	47a0      	blx	r4
1a00a264:	1c43      	adds	r3, r0, #1
1a00a266:	d1f2      	bne.n	1a00a24e <_wcrtomb_r+0x22>
1a00a268:	2200      	movs	r2, #0
1a00a26a:	238a      	movs	r3, #138	; 0x8a
1a00a26c:	603a      	str	r2, [r7, #0]
1a00a26e:	6033      	str	r3, [r6, #0]
1a00a270:	b005      	add	sp, #20
1a00a272:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00a274:	100000cc 	.word	0x100000cc
1a00a278:	100004f8 	.word	0x100004f8

1a00a27c <__aeabi_dcmpun>:
1a00a27c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a00a280:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a00a284:	d102      	bne.n	1a00a28c <__aeabi_dcmpun+0x10>
1a00a286:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a00a28a:	d10a      	bne.n	1a00a2a2 <__aeabi_dcmpun+0x26>
1a00a28c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a00a290:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a00a294:	d102      	bne.n	1a00a29c <__aeabi_dcmpun+0x20>
1a00a296:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a00a29a:	d102      	bne.n	1a00a2a2 <__aeabi_dcmpun+0x26>
1a00a29c:	f04f 0000 	mov.w	r0, #0
1a00a2a0:	4770      	bx	lr
1a00a2a2:	f04f 0001 	mov.w	r0, #1
1a00a2a6:	4770      	bx	lr

1a00a2a8 <__aeabi_d2iz>:
1a00a2a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a00a2ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a00a2b0:	d215      	bcs.n	1a00a2de <__aeabi_d2iz+0x36>
1a00a2b2:	d511      	bpl.n	1a00a2d8 <__aeabi_d2iz+0x30>
1a00a2b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a00a2b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a00a2bc:	d912      	bls.n	1a00a2e4 <__aeabi_d2iz+0x3c>
1a00a2be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a00a2c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a00a2c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a00a2ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a00a2ce:	fa23 f002 	lsr.w	r0, r3, r2
1a00a2d2:	bf18      	it	ne
1a00a2d4:	4240      	negne	r0, r0
1a00a2d6:	4770      	bx	lr
1a00a2d8:	f04f 0000 	mov.w	r0, #0
1a00a2dc:	4770      	bx	lr
1a00a2de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a00a2e2:	d105      	bne.n	1a00a2f0 <__aeabi_d2iz+0x48>
1a00a2e4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a00a2e8:	bf08      	it	eq
1a00a2ea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a00a2ee:	4770      	bx	lr
1a00a2f0:	f04f 0000 	mov.w	r0, #0
1a00a2f4:	4770      	bx	lr
1a00a2f6:	bf00      	nop
1a00a2f8:	63206c45 	.word	0x63206c45
1a00a2fc:	6e616d6f 	.word	0x6e616d6f
1a00a300:	65206f64 	.word	0x65206f64
1a00a304:	63253a73 	.word	0x63253a73
1a00a308:	0000000a 	.word	0x0000000a
1a00a30c:	616d6f43 	.word	0x616d6f43
1a00a310:	206f646e 	.word	0x206f646e
1a00a314:	61766e49 	.word	0x61766e49
1a00a318:	6f64696c 	.word	0x6f64696c
1a00a31c:	2e2e2e2e 	.word	0x2e2e2e2e
1a00a320:	0000002e 	.word	0x0000002e
1a00a324:	656d756e 	.word	0x656d756e
1a00a328:	64206f72 	.word	0x64206f72
1a00a32c:	61702065 	.word	0x61702065
1a00a330:	3a736f73 	.word	0x3a736f73
1a00a334:	000a6425 	.word	0x000a6425
1a00a338:	20746553 	.word	0x20746553
1a00a33c:	6e696f50 	.word	0x6e696f50
1a00a340:	64253a74 	.word	0x64253a74
1a00a344:	ffff000a 	.word	0xffff000a
1a00a348:	62617254 	.word	0x62617254
1a00a34c:	206f6a61 	.word	0x206f6a61
1a00a350:	616e6946 	.word	0x616e6946
1a00a354:	6f63206c 	.word	0x6f63206c
1a00a358:	7266206e 	.word	0x7266206e
1a00a35c:	54526565 	.word	0x54526565
1a00a360:	7920534f 	.word	0x7920534f
1a00a364:	50417320 	.word	0x50417320
1a00a368:	00002e49 	.word	0x00002e49
1a00a36c:	72616568 	.word	0x72616568
1a00a370:	61656274 	.word	0x61656274
1a00a374:	00000074 	.word	0x00000074
1a00a378:	65726154 	.word	0x65726154
1a00a37c:	75712061 	.word	0x75712061
1a00a380:	6c612065 	.word	0x6c612065
1a00a384:	6563616d 	.word	0x6563616d
1a00a388:	6520616e 	.word	0x6520616e
1a00a38c:	6f63206c 	.word	0x6f63206c
1a00a390:	646e616d 	.word	0x646e616d
1a00a394:	0000006f 	.word	0x0000006f
1a00a398:	65726154 	.word	0x65726154
1a00a39c:	75712061 	.word	0x75712061
1a00a3a0:	72702065 	.word	0x72702065
1a00a3a4:	7365636f 	.word	0x7365636f
1a00a3a8:	6c652061 	.word	0x6c652061
1a00a3ac:	6d6f6320 	.word	0x6d6f6320
1a00a3b0:	6f646e61 	.word	0x6f646e61
1a00a3b4:	63657220 	.word	0x63657220
1a00a3b8:	64696269 	.word	0x64696269
1a00a3bc:	0000006f 	.word	0x0000006f
1a00a3c0:	65726154 	.word	0x65726154
1a00a3c4:	48202c61 	.word	0x48202c61
1a00a3c8:	6c696261 	.word	0x6c696261
1a00a3cc:	20617469 	.word	0x20617469
1a00a3d0:	6544206f 	.word	0x6544206f
1a00a3d4:	62616873 	.word	0x62616873
1a00a3d8:	74696c69 	.word	0x74696c69
1a00a3dc:	6c652061 	.word	0x6c652061
1a00a3e0:	746f4d20 	.word	0x746f4d20
1a00a3e4:	0000726f 	.word	0x0000726f
1a00a3e8:	65726154 	.word	0x65726154
1a00a3ec:	65202c61 	.word	0x65202c61
1a00a3f0:	62617473 	.word	0x62617473
1a00a3f4:	6563656c 	.word	0x6563656c
1a00a3f8:	736f6c20 	.word	0x736f6c20
1a00a3fc:	63696d20 	.word	0x63696d20
1a00a400:	61706f72 	.word	0x61706f72
1a00a404:	00736f73 	.word	0x00736f73
1a00a408:	65726154 	.word	0x65726154
1a00a40c:	65202c61 	.word	0x65202c61
1a00a410:	62617473 	.word	0x62617473
1a00a414:	6563656c 	.word	0x6563656c
1a00a418:	206c6520 	.word	0x206c6520
1a00a41c:	746e6573 	.word	0x746e6573
1a00a420:	206f6469 	.word	0x206f6469
1a00a424:	67206564 	.word	0x67206564
1a00a428:	206f7269 	.word	0x206f7269
1a00a42c:	206c6564 	.word	0x206c6564
1a00a430:	20656a65 	.word	0x20656a65
1a00a434:	206c6564 	.word	0x206c6564
1a00a438:	6f746f4d 	.word	0x6f746f4d
1a00a43c:	00000072 	.word	0x00000072
1a00a440:	65726154 	.word	0x65726154
1a00a444:	65202c61 	.word	0x65202c61
1a00a448:	62617473 	.word	0x62617473
1a00a44c:	6563656c 	.word	0x6563656c
1a00a450:	20616c20 	.word	0x20616c20
1a00a454:	746e6163 	.word	0x746e6163
1a00a458:	64616469 	.word	0x64616469
1a00a45c:	20656420 	.word	0x20656420
1a00a460:	736c7570 	.word	0x736c7570
1a00a464:	0000736f 	.word	0x0000736f
1a00a468:	65726154 	.word	0x65726154
1a00a46c:	68202c61 	.word	0x68202c61
1a00a470:	20656361 	.word	0x20656361
1a00a474:	62617274 	.word	0x62617274
1a00a478:	72616a61 	.word	0x72616a61
1a00a47c:	206c6120 	.word	0x206c6120
1a00a480:	6f746f6d 	.word	0x6f746f6d
1a00a484:	61502072 	.word	0x61502072
1a00a488:	6f632050 	.word	0x6f632050
1a00a48c:	53206f6d 	.word	0x53206f6d
1a00a490:	6f767265 	.word	0x6f767265
1a00a494:	00000000 	.word	0x00000000
1a00a498:	65726154 	.word	0x65726154
1a00a49c:	73652c61 	.word	0x73652c61
1a00a4a0:	6c626174 	.word	0x6c626174
1a00a4a4:	20656365 	.word	0x20656365
1a00a4a8:	73206c65 	.word	0x73206c65
1a00a4ac:	702d7465 	.word	0x702d7465
1a00a4b0:	746e696f 	.word	0x746e696f
1a00a4b4:	00000000 	.word	0x00000000
1a00a4b8:	65726154 	.word	0x65726154
1a00a4bc:	65202c61 	.word	0x65202c61
1a00a4c0:	6e616373 	.word	0x6e616373
1a00a4c4:	6c206165 	.word	0x6c206165
1a00a4c8:	6320736f 	.word	0x6320736f
1a00a4cc:	6c616e61 	.word	0x6c616e61
1a00a4d0:	43207365 	.word	0x43207365
1a00a4d4:	79203148 	.word	0x79203148
1a00a4d8:	32484320 	.word	0x32484320
1a00a4dc:	6c656420 	.word	0x6c656420
1a00a4e0:	43444120 	.word	0x43444120
1a00a4e4:	ffffff00 	.word	0xffffff00
1a00a4e8:	6f746f4d 	.word	0x6f746f4d
1a00a4ec:	61482072 	.word	0x61482072
1a00a4f0:	696c6962 	.word	0x696c6962
1a00a4f4:	6f646174 	.word	0x6f646174
1a00a4f8:	00000000 	.word	0x00000000
1a00a4fc:	6f746f4d 	.word	0x6f746f4d
1a00a500:	65442072 	.word	0x65442072
1a00a504:	62616873 	.word	0x62616873
1a00a508:	74696c69 	.word	0x74696c69
1a00a50c:	006f6461 	.word	0x006f6461
1a00a510:	4c4c5546 	.word	0x4c4c5546
1a00a514:	4554535f 	.word	0x4554535f
1a00a518:	00000050 	.word	0x00000050
1a00a51c:	464c4148 	.word	0x464c4148
1a00a520:	4554535f 	.word	0x4554535f
1a00a524:	00000050 	.word	0x00000050
1a00a528:	54535f34 	.word	0x54535f34
1a00a52c:	00005045 	.word	0x00005045
1a00a530:	54535f38 	.word	0x54535f38
1a00a534:	00005045 	.word	0x00005045
1a00a538:	535f3631 	.word	0x535f3631
1a00a53c:	00504554 	.word	0x00504554
1a00a540:	535f3233 	.word	0x535f3233
1a00a544:	00504554 	.word	0x00504554
1a00a548:	746e6553 	.word	0x746e6553
1a00a54c:	206f6469 	.word	0x206f6469
1a00a550:	61726f48 	.word	0x61726f48
1a00a554:	006f6972 	.word	0x006f6972
1a00a558:	746e6553 	.word	0x746e6553
1a00a55c:	206f6469 	.word	0x206f6469
1a00a560:	69746e41 	.word	0x69746e41
1a00a564:	61726f48 	.word	0x61726f48
1a00a568:	006f6972 	.word	0x006f6972
1a00a56c:	73206f4e 	.word	0x73206f4e
1a00a570:	75702065 	.word	0x75702065
1a00a574:	65206f64 	.word	0x65206f64
1a00a578:	69726373 	.word	0x69726373
1a00a57c:	20726962 	.word	0x20726962
1a00a580:	63206c65 	.word	0x63206c65
1a00a584:	6e616d6f 	.word	0x6e616d6f
1a00a588:	65206f64 	.word	0x65206f64
1a00a58c:	616c206e 	.word	0x616c206e
1a00a590:	6c6f6320 	.word	0x6c6f6320
1a00a594:	65642061 	.word	0x65642061
1a00a598:	6574206c 	.word	0x6574206c
1a00a59c:	726f706d 	.word	0x726f706d
1a00a5a0:	64617a69 	.word	0x64617a69
1a00a5a4:	ff00726f 	.word	0xff00726f
1a00a5a8:	6f747541 	.word	0x6f747541
1a00a5ac:	6f6c6552 	.word	0x6f6c6552
1a00a5b0:	00006461 	.word	0x00006461
1a00a5b4:	6f747541 	.word	0x6f747541
1a00a5b8:	6f6c6552 	.word	0x6f6c6552
1a00a5bc:	65536461 	.word	0x65536461
1a00a5c0:	006f7672 	.word	0x006f7672
1a00a5c4:	6f727245 	.word	0x6f727245
1a00a5c8:	2e253a72 	.word	0x2e253a72
1a00a5cc:	000a6635 	.word	0x000a6635
1a00a5d0:	696c6153 	.word	0x696c6153
1a00a5d4:	4f206164 	.word	0x4f206164
1a00a5d8:	75507475 	.word	0x75507475
1a00a5dc:	2e253a74 	.word	0x2e253a74
1a00a5e0:	000a6635 	.word	0x000a6635
1a00a5e4:	65746f50 	.word	0x65746f50
1a00a5e8:	6f69636e 	.word	0x6f69636e
1a00a5ec:	7274656d 	.word	0x7274656d
1a00a5f0:	6564206f 	.word	0x6564206f
1a00a5f4:	6a65206c 	.word	0x6a65206c
1a00a5f8:	2e253a65 	.word	0x2e253a65
1a00a5fc:	000a6635 	.word	0x000a6635
1a00a600:	736e6553 	.word	0x736e6553
1a00a604:	6420726f 	.word	0x6420726f
1a00a608:	72702065 	.word	0x72702065
1a00a60c:	6f697365 	.word	0x6f697365
1a00a610:	2e253a6e 	.word	0x2e253a6e
1a00a614:	000a6635 	.word	0x000a6635
1a00a618:	6c707041 	.word	0x6c707041
1a00a61c:	74616369 	.word	0x74616369
1a00a620:	206e6f69 	.word	0x206e6f69
1a00a624:	6c6c614d 	.word	0x6c6c614d
1a00a628:	4620636f 	.word	0x4620636f
1a00a62c:	656c6961 	.word	0x656c6961
1a00a630:	6f482064 	.word	0x6f482064
1a00a634:	0d216b6f 	.word	0x0d216b6f
1a00a638:	00000000 	.word	0x00000000
1a00a63c:	7362696c 	.word	0x7362696c
1a00a640:	6572662f 	.word	0x6572662f
1a00a644:	6f747265 	.word	0x6f747265
1a00a648:	6f732f73 	.word	0x6f732f73
1a00a64c:	65637275 	.word	0x65637275
1a00a650:	6f6f682f 	.word	0x6f6f682f
1a00a654:	632e736b 	.word	0x632e736b
1a00a658:	ffffff00 	.word	0xffffff00
1a00a65c:	70410a0d 	.word	0x70410a0d
1a00a660:	63696c70 	.word	0x63696c70
1a00a664:	6f697461 	.word	0x6f697461
1a00a668:	7453206e 	.word	0x7453206e
1a00a66c:	206b6361 	.word	0x206b6361
1a00a670:	7265764f 	.word	0x7265764f
1a00a674:	776f6c66 	.word	0x776f6c66
1a00a678:	6f202121 	.word	0x6f202121
1a00a67c:	6154206e 	.word	0x6154206e
1a00a680:	203a6b73 	.word	0x203a6b73
1a00a684:	0a0d7325 	.word	0x0a0d7325
1a00a688:	ffffff00 	.word	0xffffff00
1a00a68c:	41760a0d 	.word	0x41760a0d
1a00a690:	72657373 	.word	0x72657373
1a00a694:	6c614374 	.word	0x6c614374
1a00a698:	2864656c 	.word	0x2864656c
1a00a69c:	200a0d29 	.word	0x200a0d29
1a00a6a0:	4c4c2020 	.word	0x4c4c2020
1a00a6a4:	20656e69 	.word	0x20656e69
1a00a6a8:	626d754e 	.word	0x626d754e
1a00a6ac:	3d207265 	.word	0x3d207265
1a00a6b0:	0d642520 	.word	0x0d642520
1a00a6b4:	2020200a 	.word	0x2020200a
1a00a6b8:	656c6946 	.word	0x656c6946
1a00a6bc:	6d614e20 	.word	0x6d614e20
1a00a6c0:	203d2065 	.word	0x203d2065
1a00a6c4:	0a0d7325 	.word	0x0a0d7325
1a00a6c8:	ff000a0d 	.word	0xff000a0d
1a00a6cc:	454c4449 	.word	0x454c4449
1a00a6d0:	ffffff00 	.word	0xffffff00
1a00a6d4:	51726d54 	.word	0x51726d54
1a00a6d8:	ffffff00 	.word	0xffffff00
1a00a6dc:	20726d54 	.word	0x20726d54
1a00a6e0:	00637653 	.word	0x00637653

1a00a6e4 <ExtRateIn>:
1a00a6e4:	00000000                                ....

1a00a6e8 <GpioButtons>:
1a00a6e8:	08000400 09010900                       ........

1a00a6f0 <GpioLeds>:
1a00a6f0:	01050005 0e000205 0c010b01              ............

1a00a6fc <GpioPorts>:
1a00a6fc:	03030003 0f050403 05031005 07030603     ................
1a00a70c:	ffff0802                                ....

1a00a710 <OscRateIn>:
1a00a710:	00b71b00                                ....

1a00a714 <InitClkStates>:
1a00a714:	01010f01                                ....

1a00a718 <pinmuxing>:
1a00a718:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a00a728:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a00a738:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00a748:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00a758:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00a768:	00d50301 00d50401 00160107 00560207     ..............V.
1a00a778:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00a788:	00570206                                ..W.

1a00a78c <UART_BClock>:
1a00a78c:	01a201c2 01620182                       ......b.

1a00a794 <UART_PClock>:
1a00a794:	00820081 00a200a1 08040201 0f0f0f03     ................
1a00a7a4:	ffff00ff                                ....

1a00a7a8 <periph_to_base>:
1a00a7a8:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a00a7b8:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a00a7c8:	000100e0 01000100 01200003 00060120     .......... . ...
1a00a7d8:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00a7e8:	01820013 00120182 01a201a2 01c20011     ................
1a00a7f8:	001001c2 01e201e2 0202000f 000e0202     ................
1a00a808:	02220222 0223000d 001c0223              "."...#.#...

1a00a814 <InitClkStates>:
1a00a814:	00010100 00010909 0001090a 01010701     ................
1a00a824:	00010902 00010906 0101090c 0001090d     ................
1a00a834:	0001090e 0001090f 00010910 00010911     ................
1a00a844:	00010912 00010913 00011114 00011119     ................
1a00a854:	0001111a 0001111b                       ........

1a00a85c <lpcUarts>:
1a00a85c:	40081000 06020406 00180205 40081000     ...@...........@
1a00a86c:	09070509 00180706 40082000 00000000     ......... .@....
1a00a87c:	00190000 400c1000 07060107 001a0602     .......@........
1a00a88c:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a00a89c:	02020302 001b0204 00061a80 0000000a     ................

1a00a8ac <gpioPinsInit>:
1a00a8ac:	02000104 00050701 05010d03 04080100     ................
1a00a8bc:	02020002 02000304 00000403 04070002     ................
1a00a8cc:	030c0300 09050402 05040103 04030208     ................
1a00a8dc:	04020305 06040504 0802000c 03000b06     ................
1a00a8ec:	00090607 07060503 060f0504 03030004     ................
1a00a8fc:	02000404 00050404 06040502 04060200     ................
1a00a90c:	0c050408 05040a04 0003010e 14010a00     ................
1a00a91c:	010f0000 0d000012 00001101 0010010c     ................
1a00a92c:	07070300 000f0300 01000001 00000000     ................
1a00a93c:	000a0600 08060603 06100504 04030005     ................
1a00a94c:	03000106 04090400 04010d05 010b0000     ................
1a00a95c:	0200000f 00000001 00010104 02010800     ................
1a00a96c:	01090000 09010006 05040002 04010200     ................
1a00a97c:	02020105 02020504 0e00000a 01000b02     ................
1a00a98c:	000c020b ffff0c01                       ........

1a00a994 <ultrasonicSensorsIrqMap>:
1a00a994:	ff020100 00000043 49534f50 ffff0058     ....C...POSIX...
1a00a9a4:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
1a00a9b4:	33323130 37363534 62613938 66656463     0123456789abcdef
1a00a9c4:	00000000 33323130 37363534 42413938     ....0123456789AB
1a00a9d4:	46454443 00000000 6c756e28 0000296c     CDEF....(null)..
1a00a9e4:	ffff0030                                0...

1a00a9e8 <blanks.8605>:
1a00a9e8:	20202020 20202020 20202020 20202020                     

1a00a9f8 <zeroes.8606>:
1a00a9f8:	30303030 30303030 30303030 30303030     0000000000000000

1a00aa08 <_ctype_>:
1a00aa08:	20202000 20202020 28282020 20282828     .         ((((( 
1a00aa18:	20202020 20202020 20202020 20202020                     
1a00aa28:	10108820 10101010 10101010 10101010      ...............
1a00aa38:	04040410 04040404 10040404 10101010     ................
1a00aa48:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a00aa58:	01010101 01010101 01010101 10101010     ................
1a00aa68:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a00aa78:	02020202 02020202 02020202 10101010     ................
1a00aa88:	00000020 00000000 00000000 00000000      ...............
	...
1a00ab08:	ffffff00 69666e49 7974696e 00000000     ....Infinity....
1a00ab18:	004e614e ffffffff                       NaN.....

1a00ab20 <__mprec_bigtens>:
1a00ab20:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a00ab30:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a00ab40:	7f73bf3c 75154fdd                       <.s..O.u

1a00ab48 <__mprec_tens>:
1a00ab48:	00000000 3ff00000 00000000 40240000     .......?......$@
1a00ab58:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a00ab68:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a00ab78:	00000000 412e8480 00000000 416312d0     .......A......cA
1a00ab88:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a00ab98:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a00aba8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a00abb8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a00abc8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a00abd8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a00abe8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a00abf8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a00ac08:	79d99db4 44ea7843                       ...yCx.D

1a00ac10 <p05.7367>:
1a00ac10:	00000005 00000019 0000007d              ........}...
